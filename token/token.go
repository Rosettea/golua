// Code generated by gocc; DO NOT EDIT.

package token

import (
	"fmt"
)

type Token struct {
	Type
	Lit []byte
	Pos
}

type Type int

const (
	INVALID Type = iota
	EOF
)

type Pos struct {
	Offset int
	Line   int
	Column int
}

func (p Pos) String() string {
	return fmt.Sprintf("Pos(offset=%d, line=%d, column=%d)", p.Offset, p.Line, p.Column)
}

type TokenMap struct {
	typeMap []string
	idMap   map[string]Type
}

func (m TokenMap) Id(tok Type) string {
	if int(tok) < len(m.typeMap) {
		return m.typeMap[tok]
	}
	return "unknown"
}

func (m TokenMap) Type(tok string) Type {
	if typ, exist := m.idMap[tok]; exist {
		return typ
	}
	return INVALID
}

func (m TokenMap) TokenString(tok *Token) string {
	//TODO: refactor to print pos & token string properly
	return fmt.Sprintf("%s(%d,%s)", m.Id(tok.Type), tok.Type, tok.Lit)
}

func (m TokenMap) StringType(typ Type) string {
	return fmt.Sprintf("%s(%d)", m.Id(typ), typ)
}

var TokMap = TokenMap{
	typeMap: []string{
		"INVALID",
		"$",
		"return",
		";",
		"empty",
		"(",
		")",
		"=",
		"break",
		"goto",
		"do",
		"end",
		"while",
		"repeat",
		"until",
		"then",
		"elseif",
		"else",
		"if",
		",",
		"for",
		"in",
		"function",
		"local",
		"::",
		".",
		":",
		"or",
		"and",
		"<",
		"<=",
		">",
		">=",
		"==",
		"~=",
		"|",
		"~",
		"&",
		"..",
		"<<",
		">>",
		"+",
		"-",
		"*",
		"/",
		"%",
		"//",
		"not",
		"#",
		"^",
		"[",
		"]",
		"nil",
		"true",
		"false",
		"...",
		"numdec",
		"numhex",
		"string",
		"longstring",
		"{",
		"}",
		"ident",
	},

	idMap: map[string]Type{
		"INVALID":    0,
		"$":          1,
		"return":     2,
		";":          3,
		"empty":      4,
		"(":          5,
		")":          6,
		"=":          7,
		"break":      8,
		"goto":       9,
		"do":         10,
		"end":        11,
		"while":      12,
		"repeat":     13,
		"until":      14,
		"then":       15,
		"elseif":     16,
		"else":       17,
		"if":         18,
		",":          19,
		"for":        20,
		"in":         21,
		"function":   22,
		"local":      23,
		"::":         24,
		".":          25,
		":":          26,
		"or":         27,
		"and":        28,
		"<":          29,
		"<=":         30,
		">":          31,
		">=":         32,
		"==":         33,
		"~=":         34,
		"|":          35,
		"~":          36,
		"&":          37,
		"..":         38,
		"<<":         39,
		">>":         40,
		"+":          41,
		"-":          42,
		"*":          43,
		"/":          44,
		"%":          45,
		"//":         46,
		"not":        47,
		"#":          48,
		"^":          49,
		"[":          50,
		"]":          51,
		"nil":        52,
		"true":       53,
		"false":      54,
		"...":        55,
		"numdec":     56,
		"numhex":     57,
		"string":     58,
		"longstring": 59,
		"{":          60,
		"}":          61,
		"ident":      62,
	},
}
