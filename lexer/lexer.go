// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"github.com/arnodel/golua/token"
)

const (
	NoState    = -1
	NumStates  = 172
	NumSymbols = 188
)

type Lexer struct {
	src    []byte
	pos    int
	line   int
	column int
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:    src,
		pos:    0,
		line:   1,
		column: 1,
	}
	return lexer
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	return NewLexer(src), nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = new(token.Token)
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: '.'
1: 'e'
2: 'E'
3: '+'
4: '-'
5: '0'
6: 'x'
7: 'X'
8: '.'
9: 'p'
10: 'P'
11: '+'
12: '-'
13: '"'
14: '"'
15: '''
16: '''
17: '['
18: '['
19: ']'
20: ']'
21: 'r'
22: 'e'
23: 't'
24: 'u'
25: 'r'
26: 'n'
27: ';'
28: '('
29: ')'
30: '='
31: 'b'
32: 'r'
33: 'e'
34: 'a'
35: 'k'
36: 'g'
37: 'o'
38: 't'
39: 'o'
40: 'd'
41: 'o'
42: 'e'
43: 'n'
44: 'd'
45: 'w'
46: 'h'
47: 'i'
48: 'l'
49: 'e'
50: 'r'
51: 'e'
52: 'p'
53: 'e'
54: 'a'
55: 't'
56: 'u'
57: 'n'
58: 't'
59: 'i'
60: 'l'
61: 't'
62: 'h'
63: 'e'
64: 'n'
65: 'e'
66: 'l'
67: 's'
68: 'e'
69: 'i'
70: 'f'
71: 'e'
72: 'l'
73: 's'
74: 'e'
75: 'i'
76: 'f'
77: ','
78: 'f'
79: 'o'
80: 'r'
81: 'i'
82: 'n'
83: 'f'
84: 'u'
85: 'n'
86: 'c'
87: 't'
88: 'i'
89: 'o'
90: 'n'
91: 'l'
92: 'o'
93: 'c'
94: 'a'
95: 'l'
96: ':'
97: ':'
98: '.'
99: ':'
100: 'o'
101: 'r'
102: 'a'
103: 'n'
104: 'd'
105: '<'
106: '<'
107: '='
108: '>'
109: '>'
110: '='
111: '='
112: '='
113: '~'
114: '='
115: '|'
116: '~'
117: '&'
118: '.'
119: '.'
120: '<'
121: '<'
122: '>'
123: '>'
124: '+'
125: '-'
126: '*'
127: '/'
128: '%'
129: '/'
130: '/'
131: 'n'
132: 'o'
133: 't'
134: '#'
135: '^'
136: '['
137: ']'
138: 'n'
139: 'i'
140: 'l'
141: 't'
142: 'r'
143: 'u'
144: 'e'
145: 'f'
146: 'a'
147: 'l'
148: 's'
149: 'e'
150: '.'
151: '.'
152: '.'
153: '{'
154: '}'
155: '_'
156: '\'
157: 'x'
158: '\'
159: '\'
160: 'a'
161: 'b'
162: 'f'
163: 'n'
164: 'r'
165: 't'
166: 'v'
167: 'z'
168: '"'
169: '''
170: '\n'
171: '\'
172: 'u'
173: '{'
174: '}'
175: ' '
176: '\t'
177: '\n'
178: '\r'
179: '-'
180: '-'
181: '\n'
182: 'a'-'z'
183: 'A'-'Z'
184: '0'-'9'
185: 'a'-'f'
186: 'A'-'F'
187: .
*/
