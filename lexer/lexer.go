// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"github.com/arnodel/golua/token"
)

const (
	NoState    = -1
	NumStates  = 169
	NumSymbols = 184
)

type Lexer struct {
	src    []byte
	pos    int
	line   int
	column int
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:    src,
		pos:    0,
		line:   1,
		column: 1,
	}
	return lexer
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	return NewLexer(src), nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = new(token.Token)
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: '.'
1: 'e'
2: 'E'
3: '+'
4: '-'
5: '0'
6: 'x'
7: 'X'
8: '.'
9: 'p'
10: 'P'
11: '+'
12: '-'
13: '"'
14: '"'
15: '''
16: '''
17: 'r'
18: 'e'
19: 't'
20: 'u'
21: 'r'
22: 'n'
23: ';'
24: '='
25: 'b'
26: 'r'
27: 'e'
28: 'a'
29: 'k'
30: 'g'
31: 'o'
32: 't'
33: 'o'
34: 'd'
35: 'o'
36: 'e'
37: 'n'
38: 'd'
39: 'w'
40: 'h'
41: 'i'
42: 'l'
43: 'e'
44: 'r'
45: 'e'
46: 'p'
47: 'e'
48: 'a'
49: 't'
50: 'u'
51: 'n'
52: 't'
53: 'i'
54: 'l'
55: 't'
56: 'h'
57: 'e'
58: 'n'
59: 'e'
60: 'l'
61: 's'
62: 'e'
63: 'i'
64: 'f'
65: 'e'
66: 'l'
67: 's'
68: 'e'
69: 'i'
70: 'f'
71: ','
72: 'f'
73: 'o'
74: 'r'
75: 'i'
76: 'n'
77: 'f'
78: 'u'
79: 'n'
80: 'c'
81: 't'
82: 'i'
83: 'o'
84: 'n'
85: 'l'
86: 'o'
87: 'c'
88: 'a'
89: 'l'
90: ':'
91: ':'
92: '.'
93: ':'
94: 'o'
95: 'r'
96: 'a'
97: 'n'
98: 'd'
99: '<'
100: '<'
101: '='
102: '>'
103: '>'
104: '='
105: '='
106: '='
107: '~'
108: '='
109: '|'
110: '~'
111: '&'
112: '.'
113: '.'
114: '<'
115: '<'
116: '>'
117: '>'
118: '+'
119: '-'
120: '*'
121: '/'
122: '%'
123: '/'
124: '/'
125: 'n'
126: 'o'
127: 't'
128: '#'
129: '^'
130: '['
131: ']'
132: '('
133: ')'
134: 'n'
135: 'i'
136: 'l'
137: 't'
138: 'r'
139: 'u'
140: 'e'
141: 'f'
142: 'a'
143: 'l'
144: 's'
145: 'e'
146: '.'
147: '.'
148: '.'
149: '{'
150: '}'
151: '_'
152: '\'
153: 'x'
154: '\'
155: '\'
156: 'a'
157: 'b'
158: 'f'
159: 'n'
160: 'r'
161: 't'
162: 'v'
163: 'z'
164: '"'
165: '''
166: '\n'
167: '\'
168: 'u'
169: '{'
170: '}'
171: ' '
172: '\t'
173: '\n'
174: '\r'
175: '-'
176: '-'
177: '\n'
178: 'a'-'z'
179: 'A'-'Z'
180: '0'-'9'
181: 'a'-'f'
182: 'A'-'F'
183: .
*/
