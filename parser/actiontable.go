// Code generated by gocc; DO NOT EDIT.

package parser

type (
	actionTable [numStates]actionRow
	actionRow   struct {
		canRecover bool
		actions    [numSymbols]action
	}
)

var actionTab = actionTable{
	actionRow{ // S0
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			reduce(6), /* $, reduce: StatList */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			nil,       /* end */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S1
		canRecover: false,
		actions: [numSymbols]action{
			nil,          /* INVALID */
			accept(true), /* $ */
			nil,          /* return */
			nil,          /* ; */
			nil,          /* empty */
			nil,          /* = */
			nil,          /* break */
			nil,          /* goto */
			nil,          /* do */
			nil,          /* end */
			nil,          /* while */
			nil,          /* repeat */
			nil,          /* until */
			nil,          /* then */
			nil,          /* elseif */
			nil,          /* else */
			nil,          /* if */
			nil,          /* , */
			nil,          /* for */
			nil,          /* in */
			nil,          /* function */
			nil,          /* local */
			nil,          /* :: */
			nil,          /* . */
			nil,          /* : */
			nil,          /* or */
			nil,          /* and */
			nil,          /* < */
			nil,          /* <= */
			nil,          /* > */
			nil,          /* >= */
			nil,          /* == */
			nil,          /* ~= */
			nil,          /* | */
			nil,          /* ~ */
			nil,          /* & */
			nil,          /* .. */
			nil,          /* << */
			nil,          /* >> */
			nil,          /* + */
			nil,          /* - */
			nil,          /* * */
			nil,          /* / */
			nil,          /* % */
			nil,          /* // */
			nil,          /* not */
			nil,          /* # */
			nil,          /* ^ */
			nil,          /* [ */
			nil,          /* ] */
			nil,          /* ( */
			nil,          /* ) */
			nil,          /* nil */
			nil,          /* true */
			nil,          /* false */
			nil,          /* ... */
			nil,          /* numdec */
			nil,          /* numhex */
			nil,          /* string */
			nil,          /* { */
			nil,          /* } */
			nil,          /* ident */
		},
	},
	actionRow{ // S2
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			reduce(5), /* $, reduce: Chunk */
			shift(3),  /* return */
			shift(4),  /* ; */
			nil,       /* empty */
			nil,       /* = */
			shift(21), /* break */
			shift(22), /* goto */
			shift(24), /* do */
			nil,       /* end */
			shift(25), /* while */
			shift(26), /* repeat */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			shift(27), /* if */
			nil,       /* , */
			shift(28), /* for */
			nil,       /* in */
			shift(29), /* function */
			shift(30), /* local */
			shift(31), /* :: */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			shift(34), /* ( */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			shift(35), /* ident */
		},
	},
	actionRow{ // S3
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			reduce(4), /* $, reduce: Chunk */
			nil,       /* return */
			shift(37), /* ; */
			nil,       /* empty */
			nil,       /* = */
			nil,       /* break */
			nil,       /* goto */
			nil,       /* do */
			nil,       /* end */
			nil,       /* while */
			nil,       /* repeat */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			nil,       /* if */
			nil,       /* , */
			nil,       /* for */
			nil,       /* in */
			shift(41), /* function */
			nil,       /* local */
			nil,       /* :: */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			shift(48), /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			shift(52), /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			shift(56), /* not */
			shift(57), /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			shift(61), /* ( */
			nil,       /* ) */
			shift(62), /* nil */
			shift(63), /* true */
			shift(64), /* false */
			shift(65), /* ... */
			shift(66), /* numdec */
			shift(67), /* numhex */
			shift(68), /* string */
			shift(71), /* { */
			nil,       /* } */
			shift(72), /* ident */
		},
	},
	actionRow{ // S4
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			reduce(8), /* $, reduce: Stat */
			reduce(8), /* return, reduce: Stat */
			reduce(8), /* ;, reduce: Stat */
			nil,       /* empty */
			nil,       /* = */
			reduce(8), /* break, reduce: Stat */
			reduce(8), /* goto, reduce: Stat */
			reduce(8), /* do, reduce: Stat */
			nil,       /* end */
			reduce(8), /* while, reduce: Stat */
			reduce(8), /* repeat, reduce: Stat */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(8), /* if, reduce: Stat */
			nil,       /* , */
			reduce(8), /* for, reduce: Stat */
			nil,       /* in */
			reduce(8), /* function, reduce: Stat */
			reduce(8), /* local, reduce: Stat */
			reduce(8), /* ::, reduce: Stat */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(8), /* (, reduce: Stat */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(8), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S5
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			reduce(7), /* $, reduce: StatList */
			reduce(7), /* return, reduce: StatList */
			reduce(7), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(7), /* break, reduce: StatList */
			reduce(7), /* goto, reduce: StatList */
			reduce(7), /* do, reduce: StatList */
			nil,       /* end */
			reduce(7), /* while, reduce: StatList */
			reduce(7), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(7), /* if, reduce: StatList */
			nil,       /* , */
			reduce(7), /* for, reduce: StatList */
			nil,       /* in */
			reduce(7), /* function, reduce: StatList */
			reduce(7), /* local, reduce: StatList */
			reduce(7), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(7), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(7), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S6
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			reduce(9), /* $, reduce: Stat */
			reduce(9), /* return, reduce: Stat */
			reduce(9), /* ;, reduce: Stat */
			nil,       /* empty */
			nil,       /* = */
			reduce(9), /* break, reduce: Stat */
			reduce(9), /* goto, reduce: Stat */
			reduce(9), /* do, reduce: Stat */
			nil,       /* end */
			reduce(9), /* while, reduce: Stat */
			reduce(9), /* repeat, reduce: Stat */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(9), /* if, reduce: Stat */
			nil,       /* , */
			reduce(9), /* for, reduce: Stat */
			nil,       /* in */
			reduce(9), /* function, reduce: Stat */
			reduce(9), /* local, reduce: Stat */
			reduce(9), /* ::, reduce: Stat */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(9), /* (, reduce: Stat */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(9), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S7
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			shift(73),   /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(101), /* ., reduce: PrefixExp */
			reduce(101), /* :, reduce: PrefixExp */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			reduce(101), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(101), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(101), /* string, reduce: PrefixExp */
			reduce(101), /* {, reduce: PrefixExp */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S8
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(11), /* $, reduce: Stat */
			reduce(11), /* return, reduce: Stat */
			reduce(11), /* ;, reduce: Stat */
			nil,        /* empty */
			nil,        /* = */
			reduce(11), /* break, reduce: Stat */
			reduce(11), /* goto, reduce: Stat */
			reduce(11), /* do, reduce: Stat */
			nil,        /* end */
			reduce(11), /* while, reduce: Stat */
			reduce(11), /* repeat, reduce: Stat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(11), /* if, reduce: Stat */
			nil,        /* , */
			reduce(11), /* for, reduce: Stat */
			nil,        /* in */
			reduce(11), /* function, reduce: Stat */
			reduce(11), /* local, reduce: Stat */
			reduce(11), /* ::, reduce: Stat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(11), /* (, reduce: Stat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(11), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S9
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(12), /* $, reduce: Stat */
			reduce(12), /* return, reduce: Stat */
			reduce(12), /* ;, reduce: Stat */
			nil,        /* empty */
			nil,        /* = */
			reduce(12), /* break, reduce: Stat */
			reduce(12), /* goto, reduce: Stat */
			reduce(12), /* do, reduce: Stat */
			nil,        /* end */
			reduce(12), /* while, reduce: Stat */
			reduce(12), /* repeat, reduce: Stat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(12), /* if, reduce: Stat */
			nil,        /* , */
			reduce(12), /* for, reduce: Stat */
			nil,        /* in */
			reduce(12), /* function, reduce: Stat */
			reduce(12), /* local, reduce: Stat */
			reduce(12), /* ::, reduce: Stat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(12), /* (, reduce: Stat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(12), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S10
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(13), /* $, reduce: Stat */
			reduce(13), /* return, reduce: Stat */
			reduce(13), /* ;, reduce: Stat */
			nil,        /* empty */
			nil,        /* = */
			reduce(13), /* break, reduce: Stat */
			reduce(13), /* goto, reduce: Stat */
			reduce(13), /* do, reduce: Stat */
			nil,        /* end */
			reduce(13), /* while, reduce: Stat */
			reduce(13), /* repeat, reduce: Stat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(13), /* if, reduce: Stat */
			nil,        /* , */
			reduce(13), /* for, reduce: Stat */
			nil,        /* in */
			reduce(13), /* function, reduce: Stat */
			reduce(13), /* local, reduce: Stat */
			reduce(13), /* ::, reduce: Stat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(13), /* (, reduce: Stat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(13), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S11
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(14), /* $, reduce: Stat */
			reduce(14), /* return, reduce: Stat */
			reduce(14), /* ;, reduce: Stat */
			nil,        /* empty */
			nil,        /* = */
			reduce(14), /* break, reduce: Stat */
			reduce(14), /* goto, reduce: Stat */
			reduce(14), /* do, reduce: Stat */
			nil,        /* end */
			reduce(14), /* while, reduce: Stat */
			reduce(14), /* repeat, reduce: Stat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(14), /* if, reduce: Stat */
			nil,        /* , */
			reduce(14), /* for, reduce: Stat */
			nil,        /* in */
			reduce(14), /* function, reduce: Stat */
			reduce(14), /* local, reduce: Stat */
			reduce(14), /* ::, reduce: Stat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(14), /* (, reduce: Stat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(14), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S12
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(15), /* $, reduce: Stat */
			reduce(15), /* return, reduce: Stat */
			reduce(15), /* ;, reduce: Stat */
			nil,        /* empty */
			nil,        /* = */
			reduce(15), /* break, reduce: Stat */
			reduce(15), /* goto, reduce: Stat */
			reduce(15), /* do, reduce: Stat */
			nil,        /* end */
			reduce(15), /* while, reduce: Stat */
			reduce(15), /* repeat, reduce: Stat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(15), /* if, reduce: Stat */
			nil,        /* , */
			reduce(15), /* for, reduce: Stat */
			nil,        /* in */
			reduce(15), /* function, reduce: Stat */
			reduce(15), /* local, reduce: Stat */
			reduce(15), /* ::, reduce: Stat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(15), /* (, reduce: Stat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(15), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S13
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(16), /* $, reduce: Stat */
			reduce(16), /* return, reduce: Stat */
			reduce(16), /* ;, reduce: Stat */
			nil,        /* empty */
			nil,        /* = */
			reduce(16), /* break, reduce: Stat */
			reduce(16), /* goto, reduce: Stat */
			reduce(16), /* do, reduce: Stat */
			nil,        /* end */
			reduce(16), /* while, reduce: Stat */
			reduce(16), /* repeat, reduce: Stat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(16), /* if, reduce: Stat */
			nil,        /* , */
			reduce(16), /* for, reduce: Stat */
			nil,        /* in */
			reduce(16), /* function, reduce: Stat */
			reduce(16), /* local, reduce: Stat */
			reduce(16), /* ::, reduce: Stat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(16), /* (, reduce: Stat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(16), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S14
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(17), /* $, reduce: Stat */
			reduce(17), /* return, reduce: Stat */
			reduce(17), /* ;, reduce: Stat */
			nil,        /* empty */
			nil,        /* = */
			reduce(17), /* break, reduce: Stat */
			reduce(17), /* goto, reduce: Stat */
			reduce(17), /* do, reduce: Stat */
			nil,        /* end */
			reduce(17), /* while, reduce: Stat */
			reduce(17), /* repeat, reduce: Stat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(17), /* if, reduce: Stat */
			nil,        /* , */
			reduce(17), /* for, reduce: Stat */
			nil,        /* in */
			reduce(17), /* function, reduce: Stat */
			reduce(17), /* local, reduce: Stat */
			reduce(17), /* ::, reduce: Stat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(17), /* (, reduce: Stat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(17), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S15
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(18), /* $, reduce: Stat */
			reduce(18), /* return, reduce: Stat */
			reduce(18), /* ;, reduce: Stat */
			nil,        /* empty */
			nil,        /* = */
			reduce(18), /* break, reduce: Stat */
			reduce(18), /* goto, reduce: Stat */
			reduce(18), /* do, reduce: Stat */
			nil,        /* end */
			reduce(18), /* while, reduce: Stat */
			reduce(18), /* repeat, reduce: Stat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(18), /* if, reduce: Stat */
			nil,        /* , */
			reduce(18), /* for, reduce: Stat */
			nil,        /* in */
			reduce(18), /* function, reduce: Stat */
			reduce(18), /* local, reduce: Stat */
			reduce(18), /* ::, reduce: Stat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(18), /* (, reduce: Stat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(18), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S16
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(19), /* $, reduce: Stat */
			reduce(19), /* return, reduce: Stat */
			reduce(19), /* ;, reduce: Stat */
			nil,        /* empty */
			nil,        /* = */
			reduce(19), /* break, reduce: Stat */
			reduce(19), /* goto, reduce: Stat */
			reduce(19), /* do, reduce: Stat */
			nil,        /* end */
			reduce(19), /* while, reduce: Stat */
			reduce(19), /* repeat, reduce: Stat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(19), /* if, reduce: Stat */
			nil,        /* , */
			reduce(19), /* for, reduce: Stat */
			nil,        /* in */
			reduce(19), /* function, reduce: Stat */
			reduce(19), /* local, reduce: Stat */
			reduce(19), /* ::, reduce: Stat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(19), /* (, reduce: Stat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(19), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S17
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(20), /* $, reduce: Stat */
			reduce(20), /* return, reduce: Stat */
			reduce(20), /* ;, reduce: Stat */
			nil,        /* empty */
			nil,        /* = */
			reduce(20), /* break, reduce: Stat */
			reduce(20), /* goto, reduce: Stat */
			reduce(20), /* do, reduce: Stat */
			nil,        /* end */
			reduce(20), /* while, reduce: Stat */
			reduce(20), /* repeat, reduce: Stat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(20), /* if, reduce: Stat */
			nil,        /* , */
			reduce(20), /* for, reduce: Stat */
			nil,        /* in */
			reduce(20), /* function, reduce: Stat */
			reduce(20), /* local, reduce: Stat */
			reduce(20), /* ::, reduce: Stat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(20), /* (, reduce: Stat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(20), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S18
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(21), /* $, reduce: Stat */
			reduce(21), /* return, reduce: Stat */
			reduce(21), /* ;, reduce: Stat */
			nil,        /* empty */
			nil,        /* = */
			reduce(21), /* break, reduce: Stat */
			reduce(21), /* goto, reduce: Stat */
			reduce(21), /* do, reduce: Stat */
			nil,        /* end */
			reduce(21), /* while, reduce: Stat */
			reduce(21), /* repeat, reduce: Stat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(21), /* if, reduce: Stat */
			nil,        /* , */
			reduce(21), /* for, reduce: Stat */
			nil,        /* in */
			reduce(21), /* function, reduce: Stat */
			reduce(21), /* local, reduce: Stat */
			reduce(21), /* ::, reduce: Stat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(21), /* (, reduce: Stat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(21), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S19
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(22), /* $, reduce: Stat */
			reduce(22), /* return, reduce: Stat */
			reduce(22), /* ;, reduce: Stat */
			nil,        /* empty */
			nil,        /* = */
			reduce(22), /* break, reduce: Stat */
			reduce(22), /* goto, reduce: Stat */
			reduce(22), /* do, reduce: Stat */
			nil,        /* end */
			reduce(22), /* while, reduce: Stat */
			reduce(22), /* repeat, reduce: Stat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(22), /* if, reduce: Stat */
			nil,        /* , */
			reduce(22), /* for, reduce: Stat */
			nil,        /* in */
			reduce(22), /* function, reduce: Stat */
			reduce(22), /* local, reduce: Stat */
			reduce(22), /* ::, reduce: Stat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(22), /* (, reduce: Stat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(22), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S20
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* return */
			nil,       /* ; */
			nil,       /* empty */
			shift(74), /* = */
			nil,       /* break */
			nil,       /* goto */
			nil,       /* do */
			nil,       /* end */
			nil,       /* while */
			nil,       /* repeat */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			nil,       /* if */
			shift(75), /* , */
			nil,       /* for */
			nil,       /* in */
			nil,       /* function */
			nil,       /* local */
			nil,       /* :: */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			nil,       /* ( */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			nil,       /* ident */
		},
	},
	actionRow{ // S21
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(24), /* $, reduce: BreakStat */
			reduce(24), /* return, reduce: BreakStat */
			reduce(24), /* ;, reduce: BreakStat */
			nil,        /* empty */
			nil,        /* = */
			reduce(24), /* break, reduce: BreakStat */
			reduce(24), /* goto, reduce: BreakStat */
			reduce(24), /* do, reduce: BreakStat */
			nil,        /* end */
			reduce(24), /* while, reduce: BreakStat */
			reduce(24), /* repeat, reduce: BreakStat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(24), /* if, reduce: BreakStat */
			nil,        /* , */
			reduce(24), /* for, reduce: BreakStat */
			nil,        /* in */
			reduce(24), /* function, reduce: BreakStat */
			reduce(24), /* local, reduce: BreakStat */
			reduce(24), /* ::, reduce: BreakStat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(24), /* (, reduce: BreakStat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(24), /* ident, reduce: BreakStat */
		},
	},
	actionRow{ // S22
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* return */
			nil,       /* ; */
			nil,       /* empty */
			nil,       /* = */
			nil,       /* break */
			nil,       /* goto */
			nil,       /* do */
			nil,       /* end */
			nil,       /* while */
			nil,       /* repeat */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			nil,       /* if */
			nil,       /* , */
			nil,       /* for */
			nil,       /* in */
			nil,       /* function */
			nil,       /* local */
			nil,       /* :: */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			nil,       /* ( */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			shift(77), /* ident */
		},
	},
	actionRow{ // S23
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			reduce(97), /* =, reduce: Var */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(97), /* ,, reduce: Var */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			reduce(97), /* ., reduce: Var */
			reduce(97), /* :, reduce: Var */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			reduce(97), /* [, reduce: Var */
			nil,        /* ] */
			reduce(97), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(97), /* string, reduce: Var */
			reduce(97), /* {, reduce: Var */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S24
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S25
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(83),  /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(99),  /* ( */
			nil,        /* ) */
			shift(100), /* nil */
			shift(101), /* true */
			shift(102), /* false */
			shift(103), /* ... */
			shift(104), /* numdec */
			shift(105), /* numhex */
			shift(106), /* string */
			shift(109), /* { */
			nil,        /* } */
			shift(110), /* ident */
		},
	},
	actionRow{ // S26
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			nil,       /* end */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			reduce(6), /* until, reduce: StatList */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S27
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(116), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(132), /* ( */
			nil,        /* ) */
			shift(133), /* nil */
			shift(134), /* true */
			shift(135), /* false */
			shift(136), /* ... */
			shift(137), /* numdec */
			shift(138), /* numhex */
			shift(139), /* string */
			shift(142), /* { */
			nil,        /* } */
			shift(143), /* ident */
		},
	},
	actionRow{ // S28
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(146), /* ident */
		},
	},
	actionRow{ // S29
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(150), /* ident */
		},
	},
	actionRow{ // S30
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(153), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(154), /* ident */
		},
	},
	actionRow{ // S31
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(156), /* ident */
		},
	},
	actionRow{ // S32
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			reduce(49),  /* =, reduce: VarList */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(49),  /* ,, reduce: VarList */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(100), /* ., reduce: PrefixExp */
			reduce(100), /* :, reduce: PrefixExp */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			reduce(100), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(100), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(100), /* string, reduce: PrefixExp */
			reduce(100), /* {, reduce: PrefixExp */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S33
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			shift(157), /* . */
			shift(158), /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			shift(159), /* [ */
			nil,        /* ] */
			shift(160), /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			shift(162), /* string */
			shift(164), /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S34
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(168), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(184), /* ( */
			nil,        /* ) */
			shift(185), /* nil */
			shift(186), /* true */
			shift(187), /* false */
			shift(188), /* ... */
			shift(189), /* numdec */
			shift(190), /* numhex */
			shift(191), /* string */
			shift(194), /* { */
			nil,        /* } */
			shift(195), /* ident */
		},
	},
	actionRow{ // S35
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			reduce(134), /* =, reduce: Name */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(134), /* ,, reduce: Name */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(134), /* ., reduce: Name */
			reduce(134), /* :, reduce: Name */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			reduce(134), /* [, reduce: Name */
			nil,         /* ] */
			reduce(134), /* (, reduce: Name */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(134), /* string, reduce: Name */
			reduce(134), /* {, reduce: Name */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S36
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(2),  /* $, reduce: Chunk */
			nil,        /* return */
			shift(196), /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			shift(197), /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S37
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			reduce(3), /* $, reduce: Chunk */
			nil,       /* return */
			nil,       /* ; */
			nil,       /* empty */
			nil,       /* = */
			nil,       /* break */
			nil,       /* goto */
			nil,       /* do */
			nil,       /* end */
			nil,       /* while */
			nil,       /* repeat */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			nil,       /* if */
			nil,       /* , */
			nil,       /* for */
			nil,       /* in */
			nil,       /* function */
			nil,       /* local */
			nil,       /* :: */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			nil,       /* ( */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			nil,       /* ident */
		},
	},
	actionRow{ // S38
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(101), /* $, reduce: PrefixExp */
			nil,         /* return */
			reduce(101), /* ;, reduce: PrefixExp */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(101), /* ,, reduce: PrefixExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(101), /* ., reduce: PrefixExp */
			reduce(101), /* :, reduce: PrefixExp */
			reduce(101), /* or, reduce: PrefixExp */
			reduce(101), /* and, reduce: PrefixExp */
			reduce(101), /* <, reduce: PrefixExp */
			reduce(101), /* <=, reduce: PrefixExp */
			reduce(101), /* >, reduce: PrefixExp */
			reduce(101), /* >=, reduce: PrefixExp */
			reduce(101), /* ==, reduce: PrefixExp */
			reduce(101), /* ~=, reduce: PrefixExp */
			reduce(101), /* |, reduce: PrefixExp */
			reduce(101), /* ~, reduce: PrefixExp */
			reduce(101), /* &, reduce: PrefixExp */
			reduce(101), /* .., reduce: PrefixExp */
			reduce(101), /* <<, reduce: PrefixExp */
			reduce(101), /* >>, reduce: PrefixExp */
			reduce(101), /* +, reduce: PrefixExp */
			reduce(101), /* -, reduce: PrefixExp */
			reduce(101), /* *, reduce: PrefixExp */
			reduce(101), /* /, reduce: PrefixExp */
			reduce(101), /* %, reduce: PrefixExp */
			reduce(101), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(101), /* ^, reduce: PrefixExp */
			reduce(101), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(101), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(101), /* string, reduce: PrefixExp */
			reduce(101), /* {, reduce: PrefixExp */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S39
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(97), /* $, reduce: Var */
			nil,        /* return */
			reduce(97), /* ;, reduce: Var */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(97), /* ,, reduce: Var */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			reduce(97), /* ., reduce: Var */
			reduce(97), /* :, reduce: Var */
			reduce(97), /* or, reduce: Var */
			reduce(97), /* and, reduce: Var */
			reduce(97), /* <, reduce: Var */
			reduce(97), /* <=, reduce: Var */
			reduce(97), /* >, reduce: Var */
			reduce(97), /* >=, reduce: Var */
			reduce(97), /* ==, reduce: Var */
			reduce(97), /* ~=, reduce: Var */
			reduce(97), /* |, reduce: Var */
			reduce(97), /* ~, reduce: Var */
			reduce(97), /* &, reduce: Var */
			reduce(97), /* .., reduce: Var */
			reduce(97), /* <<, reduce: Var */
			reduce(97), /* >>, reduce: Var */
			reduce(97), /* +, reduce: Var */
			reduce(97), /* -, reduce: Var */
			reduce(97), /* *, reduce: Var */
			reduce(97), /* /, reduce: Var */
			reduce(97), /* %, reduce: Var */
			reduce(97), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(97), /* ^, reduce: Var */
			reduce(97), /* [, reduce: Var */
			nil,        /* ] */
			reduce(97), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(97), /* string, reduce: Var */
			reduce(97), /* {, reduce: Var */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S40
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(53), /* $, reduce: ExpList */
			nil,        /* return */
			reduce(53), /* ;, reduce: ExpList */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(53), /* ,, reduce: ExpList */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			shift(198), /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S41
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(200), /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S42
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(100), /* $, reduce: PrefixExp */
			nil,         /* return */
			reduce(100), /* ;, reduce: PrefixExp */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(100), /* ,, reduce: PrefixExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(100), /* ., reduce: PrefixExp */
			reduce(100), /* :, reduce: PrefixExp */
			reduce(100), /* or, reduce: PrefixExp */
			reduce(100), /* and, reduce: PrefixExp */
			reduce(100), /* <, reduce: PrefixExp */
			reduce(100), /* <=, reduce: PrefixExp */
			reduce(100), /* >, reduce: PrefixExp */
			reduce(100), /* >=, reduce: PrefixExp */
			reduce(100), /* ==, reduce: PrefixExp */
			reduce(100), /* ~=, reduce: PrefixExp */
			reduce(100), /* |, reduce: PrefixExp */
			reduce(100), /* ~, reduce: PrefixExp */
			reduce(100), /* &, reduce: PrefixExp */
			reduce(100), /* .., reduce: PrefixExp */
			reduce(100), /* <<, reduce: PrefixExp */
			reduce(100), /* >>, reduce: PrefixExp */
			reduce(100), /* +, reduce: PrefixExp */
			reduce(100), /* -, reduce: PrefixExp */
			reduce(100), /* *, reduce: PrefixExp */
			reduce(100), /* /, reduce: PrefixExp */
			reduce(100), /* %, reduce: PrefixExp */
			reduce(100), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(100), /* ^, reduce: PrefixExp */
			reduce(100), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(100), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(100), /* string, reduce: PrefixExp */
			reduce(100), /* {, reduce: PrefixExp */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S43
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(55), /* $, reduce: Exp */
			nil,        /* return */
			reduce(55), /* ;, reduce: Exp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(55), /* ,, reduce: Exp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(55), /* or, reduce: Exp */
			shift(201), /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S44
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(57), /* $, reduce: AndExp */
			nil,        /* return */
			reduce(57), /* ;, reduce: AndExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(57), /* ,, reduce: AndExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(57), /* or, reduce: AndExp */
			reduce(57), /* and, reduce: AndExp */
			shift(203), /* < */
			shift(204), /* <= */
			shift(205), /* > */
			shift(206), /* >= */
			shift(207), /* == */
			shift(208), /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S45
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(65), /* $, reduce: CompExp */
			nil,        /* return */
			reduce(65), /* ;, reduce: CompExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(65), /* ,, reduce: CompExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(65), /* or, reduce: CompExp */
			reduce(65), /* and, reduce: CompExp */
			reduce(65), /* <, reduce: CompExp */
			reduce(65), /* <=, reduce: CompExp */
			reduce(65), /* >, reduce: CompExp */
			reduce(65), /* >=, reduce: CompExp */
			reduce(65), /* ==, reduce: CompExp */
			reduce(65), /* ~=, reduce: CompExp */
			shift(209), /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S46
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(67), /* $, reduce: BitOrExp */
			nil,        /* return */
			reduce(67), /* ;, reduce: BitOrExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(67), /* ,, reduce: BitOrExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(67), /* or, reduce: BitOrExp */
			reduce(67), /* and, reduce: BitOrExp */
			reduce(67), /* <, reduce: BitOrExp */
			reduce(67), /* <=, reduce: BitOrExp */
			reduce(67), /* >, reduce: BitOrExp */
			reduce(67), /* >=, reduce: BitOrExp */
			reduce(67), /* ==, reduce: BitOrExp */
			reduce(67), /* ~=, reduce: BitOrExp */
			reduce(67), /* |, reduce: BitOrExp */
			shift(210), /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S47
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(69), /* $, reduce: BitXorExp */
			nil,        /* return */
			reduce(69), /* ;, reduce: BitXorExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(69), /* ,, reduce: BitXorExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(69), /* or, reduce: BitXorExp */
			reduce(69), /* and, reduce: BitXorExp */
			reduce(69), /* <, reduce: BitXorExp */
			reduce(69), /* <=, reduce: BitXorExp */
			reduce(69), /* >, reduce: BitXorExp */
			reduce(69), /* >=, reduce: BitXorExp */
			reduce(69), /* ==, reduce: BitXorExp */
			reduce(69), /* ~=, reduce: BitXorExp */
			reduce(69), /* |, reduce: BitXorExp */
			reduce(69), /* ~, reduce: BitXorExp */
			shift(211), /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S48
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			reduce(92), /* function, reduce: UnOp */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			reduce(92), /* ~, reduce: UnOp */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			reduce(92), /* -, reduce: UnOp */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			reduce(92), /* not, reduce: UnOp */
			reduce(92), /* #, reduce: UnOp */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(92), /* (, reduce: UnOp */
			nil,        /* ) */
			reduce(92), /* nil, reduce: UnOp */
			reduce(92), /* true, reduce: UnOp */
			reduce(92), /* false, reduce: UnOp */
			reduce(92), /* ..., reduce: UnOp */
			reduce(92), /* numdec, reduce: UnOp */
			reduce(92), /* numhex, reduce: UnOp */
			reduce(92), /* string, reduce: UnOp */
			reduce(92), /* {, reduce: UnOp */
			nil,        /* } */
			reduce(92), /* ident, reduce: UnOp */
		},
	},
	actionRow{ // S49
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(71), /* $, reduce: BitAndExp */
			nil,        /* return */
			reduce(71), /* ;, reduce: BitAndExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(71), /* ,, reduce: BitAndExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(71), /* or, reduce: BitAndExp */
			reduce(71), /* and, reduce: BitAndExp */
			reduce(71), /* <, reduce: BitAndExp */
			reduce(71), /* <=, reduce: BitAndExp */
			reduce(71), /* >, reduce: BitAndExp */
			reduce(71), /* >=, reduce: BitAndExp */
			reduce(71), /* ==, reduce: BitAndExp */
			reduce(71), /* ~=, reduce: BitAndExp */
			reduce(71), /* |, reduce: BitAndExp */
			reduce(71), /* ~, reduce: BitAndExp */
			reduce(71), /* &, reduce: BitAndExp */
			shift(212), /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S50
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(73), /* $, reduce: ConcatExp */
			nil,        /* return */
			reduce(73), /* ;, reduce: ConcatExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(73), /* ,, reduce: ConcatExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(73), /* or, reduce: ConcatExp */
			reduce(73), /* and, reduce: ConcatExp */
			reduce(73), /* <, reduce: ConcatExp */
			reduce(73), /* <=, reduce: ConcatExp */
			reduce(73), /* >, reduce: ConcatExp */
			reduce(73), /* >=, reduce: ConcatExp */
			reduce(73), /* ==, reduce: ConcatExp */
			reduce(73), /* ~=, reduce: ConcatExp */
			reduce(73), /* |, reduce: ConcatExp */
			reduce(73), /* ~, reduce: ConcatExp */
			reduce(73), /* &, reduce: ConcatExp */
			reduce(73), /* .., reduce: ConcatExp */
			shift(214), /* << */
			shift(215), /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S51
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(77), /* $, reduce: ShiftExp */
			nil,        /* return */
			reduce(77), /* ;, reduce: ShiftExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(77), /* ,, reduce: ShiftExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(77), /* or, reduce: ShiftExp */
			reduce(77), /* and, reduce: ShiftExp */
			reduce(77), /* <, reduce: ShiftExp */
			reduce(77), /* <=, reduce: ShiftExp */
			reduce(77), /* >, reduce: ShiftExp */
			reduce(77), /* >=, reduce: ShiftExp */
			reduce(77), /* ==, reduce: ShiftExp */
			reduce(77), /* ~=, reduce: ShiftExp */
			reduce(77), /* |, reduce: ShiftExp */
			reduce(77), /* ~, reduce: ShiftExp */
			reduce(77), /* &, reduce: ShiftExp */
			reduce(77), /* .., reduce: ShiftExp */
			reduce(77), /* <<, reduce: ShiftExp */
			reduce(77), /* >>, reduce: ShiftExp */
			shift(217), /* + */
			shift(218), /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S52
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			reduce(89), /* function, reduce: UnOp */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			reduce(89), /* ~, reduce: UnOp */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			reduce(89), /* -, reduce: UnOp */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			reduce(89), /* not, reduce: UnOp */
			reduce(89), /* #, reduce: UnOp */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(89), /* (, reduce: UnOp */
			nil,        /* ) */
			reduce(89), /* nil, reduce: UnOp */
			reduce(89), /* true, reduce: UnOp */
			reduce(89), /* false, reduce: UnOp */
			reduce(89), /* ..., reduce: UnOp */
			reduce(89), /* numdec, reduce: UnOp */
			reduce(89), /* numhex, reduce: UnOp */
			reduce(89), /* string, reduce: UnOp */
			reduce(89), /* {, reduce: UnOp */
			nil,        /* } */
			reduce(89), /* ident, reduce: UnOp */
		},
	},
	actionRow{ // S53
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(81), /* $, reduce: Sum */
			nil,        /* return */
			reduce(81), /* ;, reduce: Sum */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(81), /* ,, reduce: Sum */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(81), /* or, reduce: Sum */
			reduce(81), /* and, reduce: Sum */
			reduce(81), /* <, reduce: Sum */
			reduce(81), /* <=, reduce: Sum */
			reduce(81), /* >, reduce: Sum */
			reduce(81), /* >=, reduce: Sum */
			reduce(81), /* ==, reduce: Sum */
			reduce(81), /* ~=, reduce: Sum */
			reduce(81), /* |, reduce: Sum */
			reduce(81), /* ~, reduce: Sum */
			reduce(81), /* &, reduce: Sum */
			reduce(81), /* .., reduce: Sum */
			reduce(81), /* <<, reduce: Sum */
			reduce(81), /* >>, reduce: Sum */
			reduce(81), /* +, reduce: Sum */
			reduce(81), /* -, reduce: Sum */
			shift(220), /* * */
			shift(221), /* / */
			shift(222), /* % */
			shift(223), /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S54
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(87), /* $, reduce: Term */
			nil,        /* return */
			reduce(87), /* ;, reduce: Term */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(87), /* ,, reduce: Term */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(87), /* or, reduce: Term */
			reduce(87), /* and, reduce: Term */
			reduce(87), /* <, reduce: Term */
			reduce(87), /* <=, reduce: Term */
			reduce(87), /* >, reduce: Term */
			reduce(87), /* >=, reduce: Term */
			reduce(87), /* ==, reduce: Term */
			reduce(87), /* ~=, reduce: Term */
			reduce(87), /* |, reduce: Term */
			reduce(87), /* ~, reduce: Term */
			reduce(87), /* &, reduce: Term */
			reduce(87), /* .., reduce: Term */
			reduce(87), /* <<, reduce: Term */
			reduce(87), /* >>, reduce: Term */
			reduce(87), /* +, reduce: Term */
			reduce(87), /* -, reduce: Term */
			reduce(87), /* *, reduce: Term */
			reduce(87), /* /, reduce: Term */
			reduce(87), /* %, reduce: Term */
			reduce(87), /* //, reduce: Term */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S55
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* return */
			nil,       /* ; */
			nil,       /* empty */
			nil,       /* = */
			nil,       /* break */
			nil,       /* goto */
			nil,       /* do */
			nil,       /* end */
			nil,       /* while */
			nil,       /* repeat */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			nil,       /* if */
			nil,       /* , */
			nil,       /* for */
			nil,       /* in */
			shift(41), /* function */
			nil,       /* local */
			nil,       /* :: */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			shift(48), /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			shift(52), /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			shift(56), /* not */
			shift(57), /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			shift(61), /* ( */
			nil,       /* ) */
			shift(62), /* nil */
			shift(63), /* true */
			shift(64), /* false */
			shift(65), /* ... */
			shift(66), /* numdec */
			shift(67), /* numhex */
			shift(68), /* string */
			shift(71), /* { */
			nil,       /* } */
			shift(72), /* ident */
		},
	},
	actionRow{ // S56
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			reduce(90), /* function, reduce: UnOp */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			reduce(90), /* ~, reduce: UnOp */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			reduce(90), /* -, reduce: UnOp */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			reduce(90), /* not, reduce: UnOp */
			reduce(90), /* #, reduce: UnOp */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(90), /* (, reduce: UnOp */
			nil,        /* ) */
			reduce(90), /* nil, reduce: UnOp */
			reduce(90), /* true, reduce: UnOp */
			reduce(90), /* false, reduce: UnOp */
			reduce(90), /* ..., reduce: UnOp */
			reduce(90), /* numdec, reduce: UnOp */
			reduce(90), /* numhex, reduce: UnOp */
			reduce(90), /* string, reduce: UnOp */
			reduce(90), /* {, reduce: UnOp */
			nil,        /* } */
			reduce(90), /* ident, reduce: UnOp */
		},
	},
	actionRow{ // S57
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			reduce(91), /* function, reduce: UnOp */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			reduce(91), /* ~, reduce: UnOp */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			reduce(91), /* -, reduce: UnOp */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			reduce(91), /* not, reduce: UnOp */
			reduce(91), /* #, reduce: UnOp */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(91), /* (, reduce: UnOp */
			nil,        /* ) */
			reduce(91), /* nil, reduce: UnOp */
			reduce(91), /* true, reduce: UnOp */
			reduce(91), /* false, reduce: UnOp */
			reduce(91), /* ..., reduce: UnOp */
			reduce(91), /* numdec, reduce: UnOp */
			reduce(91), /* numhex, reduce: UnOp */
			reduce(91), /* string, reduce: UnOp */
			reduce(91), /* {, reduce: UnOp */
			nil,        /* } */
			reduce(91), /* ident, reduce: UnOp */
		},
	},
	actionRow{ // S58
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(94), /* $, reduce: Factor */
			nil,        /* return */
			reduce(94), /* ;, reduce: Factor */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(94), /* ,, reduce: Factor */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(94), /* or, reduce: Factor */
			reduce(94), /* and, reduce: Factor */
			reduce(94), /* <, reduce: Factor */
			reduce(94), /* <=, reduce: Factor */
			reduce(94), /* >, reduce: Factor */
			reduce(94), /* >=, reduce: Factor */
			reduce(94), /* ==, reduce: Factor */
			reduce(94), /* ~=, reduce: Factor */
			reduce(94), /* |, reduce: Factor */
			reduce(94), /* ~, reduce: Factor */
			reduce(94), /* &, reduce: Factor */
			reduce(94), /* .., reduce: Factor */
			reduce(94), /* <<, reduce: Factor */
			reduce(94), /* >>, reduce: Factor */
			reduce(94), /* +, reduce: Factor */
			reduce(94), /* -, reduce: Factor */
			reduce(94), /* *, reduce: Factor */
			reduce(94), /* /, reduce: Factor */
			reduce(94), /* %, reduce: Factor */
			reduce(94), /* //, reduce: Factor */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S59
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(95), /* $, reduce: Power */
			nil,        /* return */
			reduce(95), /* ;, reduce: Power */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(95), /* ,, reduce: Power */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(95), /* or, reduce: Power */
			reduce(95), /* and, reduce: Power */
			reduce(95), /* <, reduce: Power */
			reduce(95), /* <=, reduce: Power */
			reduce(95), /* >, reduce: Power */
			reduce(95), /* >=, reduce: Power */
			reduce(95), /* ==, reduce: Power */
			reduce(95), /* ~=, reduce: Power */
			reduce(95), /* |, reduce: Power */
			reduce(95), /* ~, reduce: Power */
			reduce(95), /* &, reduce: Power */
			reduce(95), /* .., reduce: Power */
			reduce(95), /* <<, reduce: Power */
			reduce(95), /* >>, reduce: Power */
			reduce(95), /* +, reduce: Power */
			reduce(95), /* -, reduce: Power */
			reduce(95), /* *, reduce: Power */
			reduce(95), /* /, reduce: Power */
			reduce(95), /* %, reduce: Power */
			reduce(95), /* //, reduce: Power */
			nil,        /* not */
			nil,        /* # */
			shift(225), /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S60
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(114), /* $, reduce: Atom */
			nil,         /* return */
			reduce(114), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(114), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			shift(226),  /* . */
			shift(227),  /* : */
			reduce(114), /* or, reduce: Atom */
			reduce(114), /* and, reduce: Atom */
			reduce(114), /* <, reduce: Atom */
			reduce(114), /* <=, reduce: Atom */
			reduce(114), /* >, reduce: Atom */
			reduce(114), /* >=, reduce: Atom */
			reduce(114), /* ==, reduce: Atom */
			reduce(114), /* ~=, reduce: Atom */
			reduce(114), /* |, reduce: Atom */
			reduce(114), /* ~, reduce: Atom */
			reduce(114), /* &, reduce: Atom */
			reduce(114), /* .., reduce: Atom */
			reduce(114), /* <<, reduce: Atom */
			reduce(114), /* >>, reduce: Atom */
			reduce(114), /* +, reduce: Atom */
			reduce(114), /* -, reduce: Atom */
			reduce(114), /* *, reduce: Atom */
			reduce(114), /* /, reduce: Atom */
			reduce(114), /* %, reduce: Atom */
			reduce(114), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(114), /* ^, reduce: Atom */
			shift(228),  /* [ */
			nil,         /* ] */
			shift(229),  /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			shift(231),  /* string */
			shift(233),  /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S61
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(168), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(184), /* ( */
			nil,        /* ) */
			shift(185), /* nil */
			shift(186), /* true */
			shift(187), /* false */
			shift(188), /* ... */
			shift(189), /* numdec */
			shift(190), /* numhex */
			shift(191), /* string */
			shift(194), /* { */
			nil,        /* } */
			shift(195), /* ident */
		},
	},
	actionRow{ // S62
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(105), /* $, reduce: Atom */
			nil,         /* return */
			reduce(105), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(105), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(105), /* or, reduce: Atom */
			reduce(105), /* and, reduce: Atom */
			reduce(105), /* <, reduce: Atom */
			reduce(105), /* <=, reduce: Atom */
			reduce(105), /* >, reduce: Atom */
			reduce(105), /* >=, reduce: Atom */
			reduce(105), /* ==, reduce: Atom */
			reduce(105), /* ~=, reduce: Atom */
			reduce(105), /* |, reduce: Atom */
			reduce(105), /* ~, reduce: Atom */
			reduce(105), /* &, reduce: Atom */
			reduce(105), /* .., reduce: Atom */
			reduce(105), /* <<, reduce: Atom */
			reduce(105), /* >>, reduce: Atom */
			reduce(105), /* +, reduce: Atom */
			reduce(105), /* -, reduce: Atom */
			reduce(105), /* *, reduce: Atom */
			reduce(105), /* /, reduce: Atom */
			reduce(105), /* %, reduce: Atom */
			reduce(105), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(105), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S63
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(106), /* $, reduce: Atom */
			nil,         /* return */
			reduce(106), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(106), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(106), /* or, reduce: Atom */
			reduce(106), /* and, reduce: Atom */
			reduce(106), /* <, reduce: Atom */
			reduce(106), /* <=, reduce: Atom */
			reduce(106), /* >, reduce: Atom */
			reduce(106), /* >=, reduce: Atom */
			reduce(106), /* ==, reduce: Atom */
			reduce(106), /* ~=, reduce: Atom */
			reduce(106), /* |, reduce: Atom */
			reduce(106), /* ~, reduce: Atom */
			reduce(106), /* &, reduce: Atom */
			reduce(106), /* .., reduce: Atom */
			reduce(106), /* <<, reduce: Atom */
			reduce(106), /* >>, reduce: Atom */
			reduce(106), /* +, reduce: Atom */
			reduce(106), /* -, reduce: Atom */
			reduce(106), /* *, reduce: Atom */
			reduce(106), /* /, reduce: Atom */
			reduce(106), /* %, reduce: Atom */
			reduce(106), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(106), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S64
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(107), /* $, reduce: Atom */
			nil,         /* return */
			reduce(107), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(107), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(107), /* or, reduce: Atom */
			reduce(107), /* and, reduce: Atom */
			reduce(107), /* <, reduce: Atom */
			reduce(107), /* <=, reduce: Atom */
			reduce(107), /* >, reduce: Atom */
			reduce(107), /* >=, reduce: Atom */
			reduce(107), /* ==, reduce: Atom */
			reduce(107), /* ~=, reduce: Atom */
			reduce(107), /* |, reduce: Atom */
			reduce(107), /* ~, reduce: Atom */
			reduce(107), /* &, reduce: Atom */
			reduce(107), /* .., reduce: Atom */
			reduce(107), /* <<, reduce: Atom */
			reduce(107), /* >>, reduce: Atom */
			reduce(107), /* +, reduce: Atom */
			reduce(107), /* -, reduce: Atom */
			reduce(107), /* *, reduce: Atom */
			reduce(107), /* /, reduce: Atom */
			reduce(107), /* %, reduce: Atom */
			reduce(107), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(107), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S65
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(108), /* $, reduce: Atom */
			nil,         /* return */
			reduce(108), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(108), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(108), /* or, reduce: Atom */
			reduce(108), /* and, reduce: Atom */
			reduce(108), /* <, reduce: Atom */
			reduce(108), /* <=, reduce: Atom */
			reduce(108), /* >, reduce: Atom */
			reduce(108), /* >=, reduce: Atom */
			reduce(108), /* ==, reduce: Atom */
			reduce(108), /* ~=, reduce: Atom */
			reduce(108), /* |, reduce: Atom */
			reduce(108), /* ~, reduce: Atom */
			reduce(108), /* &, reduce: Atom */
			reduce(108), /* .., reduce: Atom */
			reduce(108), /* <<, reduce: Atom */
			reduce(108), /* >>, reduce: Atom */
			reduce(108), /* +, reduce: Atom */
			reduce(108), /* -, reduce: Atom */
			reduce(108), /* *, reduce: Atom */
			reduce(108), /* /, reduce: Atom */
			reduce(108), /* %, reduce: Atom */
			reduce(108), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(108), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S66
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(109), /* $, reduce: Atom */
			nil,         /* return */
			reduce(109), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(109), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(109), /* or, reduce: Atom */
			reduce(109), /* and, reduce: Atom */
			reduce(109), /* <, reduce: Atom */
			reduce(109), /* <=, reduce: Atom */
			reduce(109), /* >, reduce: Atom */
			reduce(109), /* >=, reduce: Atom */
			reduce(109), /* ==, reduce: Atom */
			reduce(109), /* ~=, reduce: Atom */
			reduce(109), /* |, reduce: Atom */
			reduce(109), /* ~, reduce: Atom */
			reduce(109), /* &, reduce: Atom */
			reduce(109), /* .., reduce: Atom */
			reduce(109), /* <<, reduce: Atom */
			reduce(109), /* >>, reduce: Atom */
			reduce(109), /* +, reduce: Atom */
			reduce(109), /* -, reduce: Atom */
			reduce(109), /* *, reduce: Atom */
			reduce(109), /* /, reduce: Atom */
			reduce(109), /* %, reduce: Atom */
			reduce(109), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(109), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S67
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(110), /* $, reduce: Atom */
			nil,         /* return */
			reduce(110), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(110), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(110), /* or, reduce: Atom */
			reduce(110), /* and, reduce: Atom */
			reduce(110), /* <, reduce: Atom */
			reduce(110), /* <=, reduce: Atom */
			reduce(110), /* >, reduce: Atom */
			reduce(110), /* >=, reduce: Atom */
			reduce(110), /* ==, reduce: Atom */
			reduce(110), /* ~=, reduce: Atom */
			reduce(110), /* |, reduce: Atom */
			reduce(110), /* ~, reduce: Atom */
			reduce(110), /* &, reduce: Atom */
			reduce(110), /* .., reduce: Atom */
			reduce(110), /* <<, reduce: Atom */
			reduce(110), /* >>, reduce: Atom */
			reduce(110), /* +, reduce: Atom */
			reduce(110), /* -, reduce: Atom */
			reduce(110), /* *, reduce: Atom */
			reduce(110), /* /, reduce: Atom */
			reduce(110), /* %, reduce: Atom */
			reduce(110), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(110), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S68
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(111), /* $, reduce: Atom */
			nil,         /* return */
			reduce(111), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(111), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(111), /* or, reduce: Atom */
			reduce(111), /* and, reduce: Atom */
			reduce(111), /* <, reduce: Atom */
			reduce(111), /* <=, reduce: Atom */
			reduce(111), /* >, reduce: Atom */
			reduce(111), /* >=, reduce: Atom */
			reduce(111), /* ==, reduce: Atom */
			reduce(111), /* ~=, reduce: Atom */
			reduce(111), /* |, reduce: Atom */
			reduce(111), /* ~, reduce: Atom */
			reduce(111), /* &, reduce: Atom */
			reduce(111), /* .., reduce: Atom */
			reduce(111), /* <<, reduce: Atom */
			reduce(111), /* >>, reduce: Atom */
			reduce(111), /* +, reduce: Atom */
			reduce(111), /* -, reduce: Atom */
			reduce(111), /* *, reduce: Atom */
			reduce(111), /* /, reduce: Atom */
			reduce(111), /* %, reduce: Atom */
			reduce(111), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(111), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S69
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(112), /* $, reduce: Atom */
			nil,         /* return */
			reduce(112), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(112), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(112), /* or, reduce: Atom */
			reduce(112), /* and, reduce: Atom */
			reduce(112), /* <, reduce: Atom */
			reduce(112), /* <=, reduce: Atom */
			reduce(112), /* >, reduce: Atom */
			reduce(112), /* >=, reduce: Atom */
			reduce(112), /* ==, reduce: Atom */
			reduce(112), /* ~=, reduce: Atom */
			reduce(112), /* |, reduce: Atom */
			reduce(112), /* ~, reduce: Atom */
			reduce(112), /* &, reduce: Atom */
			reduce(112), /* .., reduce: Atom */
			reduce(112), /* <<, reduce: Atom */
			reduce(112), /* >>, reduce: Atom */
			reduce(112), /* +, reduce: Atom */
			reduce(112), /* -, reduce: Atom */
			reduce(112), /* *, reduce: Atom */
			reduce(112), /* /, reduce: Atom */
			reduce(112), /* %, reduce: Atom */
			reduce(112), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(112), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S70
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(113), /* $, reduce: Atom */
			nil,         /* return */
			reduce(113), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(113), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(113), /* or, reduce: Atom */
			reduce(113), /* and, reduce: Atom */
			reduce(113), /* <, reduce: Atom */
			reduce(113), /* <=, reduce: Atom */
			reduce(113), /* >, reduce: Atom */
			reduce(113), /* >=, reduce: Atom */
			reduce(113), /* ==, reduce: Atom */
			reduce(113), /* ~=, reduce: Atom */
			reduce(113), /* |, reduce: Atom */
			reduce(113), /* ~, reduce: Atom */
			reduce(113), /* &, reduce: Atom */
			reduce(113), /* .., reduce: Atom */
			reduce(113), /* <<, reduce: Atom */
			reduce(113), /* >>, reduce: Atom */
			reduce(113), /* +, reduce: Atom */
			reduce(113), /* -, reduce: Atom */
			reduce(113), /* *, reduce: Atom */
			reduce(113), /* /, reduce: Atom */
			reduce(113), /* %, reduce: Atom */
			reduce(113), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(113), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S71
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			shift(254), /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(268), /* ident */
		},
	},
	actionRow{ // S72
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(134), /* $, reduce: Name */
			nil,         /* return */
			reduce(134), /* ;, reduce: Name */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(134), /* ,, reduce: Name */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(134), /* ., reduce: Name */
			reduce(134), /* :, reduce: Name */
			reduce(134), /* or, reduce: Name */
			reduce(134), /* and, reduce: Name */
			reduce(134), /* <, reduce: Name */
			reduce(134), /* <=, reduce: Name */
			reduce(134), /* >, reduce: Name */
			reduce(134), /* >=, reduce: Name */
			reduce(134), /* ==, reduce: Name */
			reduce(134), /* ~=, reduce: Name */
			reduce(134), /* |, reduce: Name */
			reduce(134), /* ~, reduce: Name */
			reduce(134), /* &, reduce: Name */
			reduce(134), /* .., reduce: Name */
			reduce(134), /* <<, reduce: Name */
			reduce(134), /* >>, reduce: Name */
			reduce(134), /* +, reduce: Name */
			reduce(134), /* -, reduce: Name */
			reduce(134), /* *, reduce: Name */
			reduce(134), /* /, reduce: Name */
			reduce(134), /* %, reduce: Name */
			reduce(134), /* //, reduce: Name */
			nil,         /* not */
			nil,         /* # */
			reduce(134), /* ^, reduce: Name */
			reduce(134), /* [, reduce: Name */
			nil,         /* ] */
			reduce(134), /* (, reduce: Name */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(134), /* string, reduce: Name */
			reduce(134), /* {, reduce: Name */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S73
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(10), /* $, reduce: Stat */
			reduce(10), /* return, reduce: Stat */
			reduce(10), /* ;, reduce: Stat */
			nil,        /* empty */
			nil,        /* = */
			reduce(10), /* break, reduce: Stat */
			reduce(10), /* goto, reduce: Stat */
			reduce(10), /* do, reduce: Stat */
			nil,        /* end */
			reduce(10), /* while, reduce: Stat */
			reduce(10), /* repeat, reduce: Stat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(10), /* if, reduce: Stat */
			nil,        /* , */
			reduce(10), /* for, reduce: Stat */
			nil,        /* in */
			reduce(10), /* function, reduce: Stat */
			reduce(10), /* local, reduce: Stat */
			reduce(10), /* ::, reduce: Stat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(10), /* (, reduce: Stat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(10), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S74
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(273), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(289), /* ( */
			nil,        /* ) */
			shift(290), /* nil */
			shift(291), /* true */
			shift(292), /* false */
			shift(293), /* ... */
			shift(294), /* numdec */
			shift(295), /* numhex */
			shift(296), /* string */
			shift(299), /* { */
			nil,        /* } */
			shift(300), /* ident */
		},
	},
	actionRow{ // S75
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* return */
			nil,       /* ; */
			nil,       /* empty */
			nil,       /* = */
			nil,       /* break */
			nil,       /* goto */
			nil,       /* do */
			nil,       /* end */
			nil,       /* while */
			nil,       /* repeat */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			nil,       /* if */
			nil,       /* , */
			nil,       /* for */
			nil,       /* in */
			nil,       /* function */
			nil,       /* local */
			nil,       /* :: */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			shift(34), /* ( */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			shift(35), /* ident */
		},
	},
	actionRow{ // S76
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(25), /* $, reduce: GotoStat */
			reduce(25), /* return, reduce: GotoStat */
			reduce(25), /* ;, reduce: GotoStat */
			nil,        /* empty */
			nil,        /* = */
			reduce(25), /* break, reduce: GotoStat */
			reduce(25), /* goto, reduce: GotoStat */
			reduce(25), /* do, reduce: GotoStat */
			nil,        /* end */
			reduce(25), /* while, reduce: GotoStat */
			reduce(25), /* repeat, reduce: GotoStat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(25), /* if, reduce: GotoStat */
			nil,        /* , */
			reduce(25), /* for, reduce: GotoStat */
			nil,        /* in */
			reduce(25), /* function, reduce: GotoStat */
			reduce(25), /* local, reduce: GotoStat */
			reduce(25), /* ::, reduce: GotoStat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(25), /* (, reduce: GotoStat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(25), /* ident, reduce: GotoStat */
		},
	},
	actionRow{ // S77
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(134), /* $, reduce: Name */
			reduce(134), /* return, reduce: Name */
			reduce(134), /* ;, reduce: Name */
			nil,         /* empty */
			nil,         /* = */
			reduce(134), /* break, reduce: Name */
			reduce(134), /* goto, reduce: Name */
			reduce(134), /* do, reduce: Name */
			nil,         /* end */
			reduce(134), /* while, reduce: Name */
			reduce(134), /* repeat, reduce: Name */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(134), /* if, reduce: Name */
			nil,         /* , */
			reduce(134), /* for, reduce: Name */
			nil,         /* in */
			reduce(134), /* function, reduce: Name */
			reduce(134), /* local, reduce: Name */
			reduce(134), /* ::, reduce: Name */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(134), /* (, reduce: Name */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(134), /* ident, reduce: Name */
		},
	},
	actionRow{ // S78
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			shift(304), /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S79
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			shift(305), /* return */
			shift(306), /* ; */
			nil,        /* empty */
			nil,        /* = */
			shift(323), /* break */
			shift(324), /* goto */
			shift(325), /* do */
			reduce(5),  /* end, reduce: Chunk */
			shift(326), /* while */
			shift(327), /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			shift(328), /* if */
			nil,        /* , */
			shift(329), /* for */
			nil,        /* in */
			shift(330), /* function */
			shift(331), /* local */
			shift(332), /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(34),  /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(35),  /* ident */
		},
	},
	actionRow{ // S80
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(101), /* do, reduce: PrefixExp */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(101), /* ., reduce: PrefixExp */
			reduce(101), /* :, reduce: PrefixExp */
			reduce(101), /* or, reduce: PrefixExp */
			reduce(101), /* and, reduce: PrefixExp */
			reduce(101), /* <, reduce: PrefixExp */
			reduce(101), /* <=, reduce: PrefixExp */
			reduce(101), /* >, reduce: PrefixExp */
			reduce(101), /* >=, reduce: PrefixExp */
			reduce(101), /* ==, reduce: PrefixExp */
			reduce(101), /* ~=, reduce: PrefixExp */
			reduce(101), /* |, reduce: PrefixExp */
			reduce(101), /* ~, reduce: PrefixExp */
			reduce(101), /* &, reduce: PrefixExp */
			reduce(101), /* .., reduce: PrefixExp */
			reduce(101), /* <<, reduce: PrefixExp */
			reduce(101), /* >>, reduce: PrefixExp */
			reduce(101), /* +, reduce: PrefixExp */
			reduce(101), /* -, reduce: PrefixExp */
			reduce(101), /* *, reduce: PrefixExp */
			reduce(101), /* /, reduce: PrefixExp */
			reduce(101), /* %, reduce: PrefixExp */
			reduce(101), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(101), /* ^, reduce: PrefixExp */
			reduce(101), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(101), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(101), /* string, reduce: PrefixExp */
			reduce(101), /* {, reduce: PrefixExp */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S81
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			reduce(97), /* do, reduce: Var */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			reduce(97), /* ., reduce: Var */
			reduce(97), /* :, reduce: Var */
			reduce(97), /* or, reduce: Var */
			reduce(97), /* and, reduce: Var */
			reduce(97), /* <, reduce: Var */
			reduce(97), /* <=, reduce: Var */
			reduce(97), /* >, reduce: Var */
			reduce(97), /* >=, reduce: Var */
			reduce(97), /* ==, reduce: Var */
			reduce(97), /* ~=, reduce: Var */
			reduce(97), /* |, reduce: Var */
			reduce(97), /* ~, reduce: Var */
			reduce(97), /* &, reduce: Var */
			reduce(97), /* .., reduce: Var */
			reduce(97), /* <<, reduce: Var */
			reduce(97), /* >>, reduce: Var */
			reduce(97), /* +, reduce: Var */
			reduce(97), /* -, reduce: Var */
			reduce(97), /* *, reduce: Var */
			reduce(97), /* /, reduce: Var */
			reduce(97), /* %, reduce: Var */
			reduce(97), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(97), /* ^, reduce: Var */
			reduce(97), /* [, reduce: Var */
			nil,        /* ] */
			reduce(97), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(97), /* string, reduce: Var */
			reduce(97), /* {, reduce: Var */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S82
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			shift(333), /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			shift(334), /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S83
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(336), /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S84
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(100), /* do, reduce: PrefixExp */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(100), /* ., reduce: PrefixExp */
			reduce(100), /* :, reduce: PrefixExp */
			reduce(100), /* or, reduce: PrefixExp */
			reduce(100), /* and, reduce: PrefixExp */
			reduce(100), /* <, reduce: PrefixExp */
			reduce(100), /* <=, reduce: PrefixExp */
			reduce(100), /* >, reduce: PrefixExp */
			reduce(100), /* >=, reduce: PrefixExp */
			reduce(100), /* ==, reduce: PrefixExp */
			reduce(100), /* ~=, reduce: PrefixExp */
			reduce(100), /* |, reduce: PrefixExp */
			reduce(100), /* ~, reduce: PrefixExp */
			reduce(100), /* &, reduce: PrefixExp */
			reduce(100), /* .., reduce: PrefixExp */
			reduce(100), /* <<, reduce: PrefixExp */
			reduce(100), /* >>, reduce: PrefixExp */
			reduce(100), /* +, reduce: PrefixExp */
			reduce(100), /* -, reduce: PrefixExp */
			reduce(100), /* *, reduce: PrefixExp */
			reduce(100), /* /, reduce: PrefixExp */
			reduce(100), /* %, reduce: PrefixExp */
			reduce(100), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(100), /* ^, reduce: PrefixExp */
			reduce(100), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(100), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(100), /* string, reduce: PrefixExp */
			reduce(100), /* {, reduce: PrefixExp */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S85
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			reduce(55), /* do, reduce: Exp */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(55), /* or, reduce: Exp */
			shift(337), /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S86
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			reduce(57), /* do, reduce: AndExp */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(57), /* or, reduce: AndExp */
			reduce(57), /* and, reduce: AndExp */
			shift(203), /* < */
			shift(204), /* <= */
			shift(205), /* > */
			shift(206), /* >= */
			shift(207), /* == */
			shift(208), /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S87
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			reduce(65), /* do, reduce: CompExp */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(65), /* or, reduce: CompExp */
			reduce(65), /* and, reduce: CompExp */
			reduce(65), /* <, reduce: CompExp */
			reduce(65), /* <=, reduce: CompExp */
			reduce(65), /* >, reduce: CompExp */
			reduce(65), /* >=, reduce: CompExp */
			reduce(65), /* ==, reduce: CompExp */
			reduce(65), /* ~=, reduce: CompExp */
			shift(339), /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S88
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			reduce(67), /* do, reduce: BitOrExp */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(67), /* or, reduce: BitOrExp */
			reduce(67), /* and, reduce: BitOrExp */
			reduce(67), /* <, reduce: BitOrExp */
			reduce(67), /* <=, reduce: BitOrExp */
			reduce(67), /* >, reduce: BitOrExp */
			reduce(67), /* >=, reduce: BitOrExp */
			reduce(67), /* ==, reduce: BitOrExp */
			reduce(67), /* ~=, reduce: BitOrExp */
			reduce(67), /* |, reduce: BitOrExp */
			shift(340), /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S89
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			reduce(69), /* do, reduce: BitXorExp */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(69), /* or, reduce: BitXorExp */
			reduce(69), /* and, reduce: BitXorExp */
			reduce(69), /* <, reduce: BitXorExp */
			reduce(69), /* <=, reduce: BitXorExp */
			reduce(69), /* >, reduce: BitXorExp */
			reduce(69), /* >=, reduce: BitXorExp */
			reduce(69), /* ==, reduce: BitXorExp */
			reduce(69), /* ~=, reduce: BitXorExp */
			reduce(69), /* |, reduce: BitXorExp */
			reduce(69), /* ~, reduce: BitXorExp */
			shift(341), /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S90
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			reduce(71), /* do, reduce: BitAndExp */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(71), /* or, reduce: BitAndExp */
			reduce(71), /* and, reduce: BitAndExp */
			reduce(71), /* <, reduce: BitAndExp */
			reduce(71), /* <=, reduce: BitAndExp */
			reduce(71), /* >, reduce: BitAndExp */
			reduce(71), /* >=, reduce: BitAndExp */
			reduce(71), /* ==, reduce: BitAndExp */
			reduce(71), /* ~=, reduce: BitAndExp */
			reduce(71), /* |, reduce: BitAndExp */
			reduce(71), /* ~, reduce: BitAndExp */
			reduce(71), /* &, reduce: BitAndExp */
			shift(342), /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S91
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			reduce(73), /* do, reduce: ConcatExp */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(73), /* or, reduce: ConcatExp */
			reduce(73), /* and, reduce: ConcatExp */
			reduce(73), /* <, reduce: ConcatExp */
			reduce(73), /* <=, reduce: ConcatExp */
			reduce(73), /* >, reduce: ConcatExp */
			reduce(73), /* >=, reduce: ConcatExp */
			reduce(73), /* ==, reduce: ConcatExp */
			reduce(73), /* ~=, reduce: ConcatExp */
			reduce(73), /* |, reduce: ConcatExp */
			reduce(73), /* ~, reduce: ConcatExp */
			reduce(73), /* &, reduce: ConcatExp */
			reduce(73), /* .., reduce: ConcatExp */
			shift(214), /* << */
			shift(215), /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S92
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			reduce(77), /* do, reduce: ShiftExp */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(77), /* or, reduce: ShiftExp */
			reduce(77), /* and, reduce: ShiftExp */
			reduce(77), /* <, reduce: ShiftExp */
			reduce(77), /* <=, reduce: ShiftExp */
			reduce(77), /* >, reduce: ShiftExp */
			reduce(77), /* >=, reduce: ShiftExp */
			reduce(77), /* ==, reduce: ShiftExp */
			reduce(77), /* ~=, reduce: ShiftExp */
			reduce(77), /* |, reduce: ShiftExp */
			reduce(77), /* ~, reduce: ShiftExp */
			reduce(77), /* &, reduce: ShiftExp */
			reduce(77), /* .., reduce: ShiftExp */
			reduce(77), /* <<, reduce: ShiftExp */
			reduce(77), /* >>, reduce: ShiftExp */
			shift(217), /* + */
			shift(218), /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S93
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			reduce(81), /* do, reduce: Sum */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(81), /* or, reduce: Sum */
			reduce(81), /* and, reduce: Sum */
			reduce(81), /* <, reduce: Sum */
			reduce(81), /* <=, reduce: Sum */
			reduce(81), /* >, reduce: Sum */
			reduce(81), /* >=, reduce: Sum */
			reduce(81), /* ==, reduce: Sum */
			reduce(81), /* ~=, reduce: Sum */
			reduce(81), /* |, reduce: Sum */
			reduce(81), /* ~, reduce: Sum */
			reduce(81), /* &, reduce: Sum */
			reduce(81), /* .., reduce: Sum */
			reduce(81), /* <<, reduce: Sum */
			reduce(81), /* >>, reduce: Sum */
			reduce(81), /* +, reduce: Sum */
			reduce(81), /* -, reduce: Sum */
			shift(220), /* * */
			shift(221), /* / */
			shift(222), /* % */
			shift(223), /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S94
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			reduce(87), /* do, reduce: Term */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(87), /* or, reduce: Term */
			reduce(87), /* and, reduce: Term */
			reduce(87), /* <, reduce: Term */
			reduce(87), /* <=, reduce: Term */
			reduce(87), /* >, reduce: Term */
			reduce(87), /* >=, reduce: Term */
			reduce(87), /* ==, reduce: Term */
			reduce(87), /* ~=, reduce: Term */
			reduce(87), /* |, reduce: Term */
			reduce(87), /* ~, reduce: Term */
			reduce(87), /* &, reduce: Term */
			reduce(87), /* .., reduce: Term */
			reduce(87), /* <<, reduce: Term */
			reduce(87), /* >>, reduce: Term */
			reduce(87), /* +, reduce: Term */
			reduce(87), /* -, reduce: Term */
			reduce(87), /* *, reduce: Term */
			reduce(87), /* /, reduce: Term */
			reduce(87), /* %, reduce: Term */
			reduce(87), /* //, reduce: Term */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S95
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(83),  /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(99),  /* ( */
			nil,        /* ) */
			shift(100), /* nil */
			shift(101), /* true */
			shift(102), /* false */
			shift(103), /* ... */
			shift(104), /* numdec */
			shift(105), /* numhex */
			shift(106), /* string */
			shift(109), /* { */
			nil,        /* } */
			shift(110), /* ident */
		},
	},
	actionRow{ // S96
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			reduce(94), /* do, reduce: Factor */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(94), /* or, reduce: Factor */
			reduce(94), /* and, reduce: Factor */
			reduce(94), /* <, reduce: Factor */
			reduce(94), /* <=, reduce: Factor */
			reduce(94), /* >, reduce: Factor */
			reduce(94), /* >=, reduce: Factor */
			reduce(94), /* ==, reduce: Factor */
			reduce(94), /* ~=, reduce: Factor */
			reduce(94), /* |, reduce: Factor */
			reduce(94), /* ~, reduce: Factor */
			reduce(94), /* &, reduce: Factor */
			reduce(94), /* .., reduce: Factor */
			reduce(94), /* <<, reduce: Factor */
			reduce(94), /* >>, reduce: Factor */
			reduce(94), /* +, reduce: Factor */
			reduce(94), /* -, reduce: Factor */
			reduce(94), /* *, reduce: Factor */
			reduce(94), /* /, reduce: Factor */
			reduce(94), /* %, reduce: Factor */
			reduce(94), /* //, reduce: Factor */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S97
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			reduce(95), /* do, reduce: Power */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(95), /* or, reduce: Power */
			reduce(95), /* and, reduce: Power */
			reduce(95), /* <, reduce: Power */
			reduce(95), /* <=, reduce: Power */
			reduce(95), /* >, reduce: Power */
			reduce(95), /* >=, reduce: Power */
			reduce(95), /* ==, reduce: Power */
			reduce(95), /* ~=, reduce: Power */
			reduce(95), /* |, reduce: Power */
			reduce(95), /* ~, reduce: Power */
			reduce(95), /* &, reduce: Power */
			reduce(95), /* .., reduce: Power */
			reduce(95), /* <<, reduce: Power */
			reduce(95), /* >>, reduce: Power */
			reduce(95), /* +, reduce: Power */
			reduce(95), /* -, reduce: Power */
			reduce(95), /* *, reduce: Power */
			reduce(95), /* /, reduce: Power */
			reduce(95), /* %, reduce: Power */
			reduce(95), /* //, reduce: Power */
			nil,        /* not */
			nil,        /* # */
			shift(347), /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S98
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(114), /* do, reduce: Atom */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			shift(348),  /* . */
			shift(349),  /* : */
			reduce(114), /* or, reduce: Atom */
			reduce(114), /* and, reduce: Atom */
			reduce(114), /* <, reduce: Atom */
			reduce(114), /* <=, reduce: Atom */
			reduce(114), /* >, reduce: Atom */
			reduce(114), /* >=, reduce: Atom */
			reduce(114), /* ==, reduce: Atom */
			reduce(114), /* ~=, reduce: Atom */
			reduce(114), /* |, reduce: Atom */
			reduce(114), /* ~, reduce: Atom */
			reduce(114), /* &, reduce: Atom */
			reduce(114), /* .., reduce: Atom */
			reduce(114), /* <<, reduce: Atom */
			reduce(114), /* >>, reduce: Atom */
			reduce(114), /* +, reduce: Atom */
			reduce(114), /* -, reduce: Atom */
			reduce(114), /* *, reduce: Atom */
			reduce(114), /* /, reduce: Atom */
			reduce(114), /* %, reduce: Atom */
			reduce(114), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(114), /* ^, reduce: Atom */
			shift(350),  /* [ */
			nil,         /* ] */
			shift(351),  /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			shift(353),  /* string */
			shift(355),  /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S99
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(168), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(184), /* ( */
			nil,        /* ) */
			shift(185), /* nil */
			shift(186), /* true */
			shift(187), /* false */
			shift(188), /* ... */
			shift(189), /* numdec */
			shift(190), /* numhex */
			shift(191), /* string */
			shift(194), /* { */
			nil,        /* } */
			shift(195), /* ident */
		},
	},
	actionRow{ // S100
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(105), /* do, reduce: Atom */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(105), /* or, reduce: Atom */
			reduce(105), /* and, reduce: Atom */
			reduce(105), /* <, reduce: Atom */
			reduce(105), /* <=, reduce: Atom */
			reduce(105), /* >, reduce: Atom */
			reduce(105), /* >=, reduce: Atom */
			reduce(105), /* ==, reduce: Atom */
			reduce(105), /* ~=, reduce: Atom */
			reduce(105), /* |, reduce: Atom */
			reduce(105), /* ~, reduce: Atom */
			reduce(105), /* &, reduce: Atom */
			reduce(105), /* .., reduce: Atom */
			reduce(105), /* <<, reduce: Atom */
			reduce(105), /* >>, reduce: Atom */
			reduce(105), /* +, reduce: Atom */
			reduce(105), /* -, reduce: Atom */
			reduce(105), /* *, reduce: Atom */
			reduce(105), /* /, reduce: Atom */
			reduce(105), /* %, reduce: Atom */
			reduce(105), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(105), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S101
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(106), /* do, reduce: Atom */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(106), /* or, reduce: Atom */
			reduce(106), /* and, reduce: Atom */
			reduce(106), /* <, reduce: Atom */
			reduce(106), /* <=, reduce: Atom */
			reduce(106), /* >, reduce: Atom */
			reduce(106), /* >=, reduce: Atom */
			reduce(106), /* ==, reduce: Atom */
			reduce(106), /* ~=, reduce: Atom */
			reduce(106), /* |, reduce: Atom */
			reduce(106), /* ~, reduce: Atom */
			reduce(106), /* &, reduce: Atom */
			reduce(106), /* .., reduce: Atom */
			reduce(106), /* <<, reduce: Atom */
			reduce(106), /* >>, reduce: Atom */
			reduce(106), /* +, reduce: Atom */
			reduce(106), /* -, reduce: Atom */
			reduce(106), /* *, reduce: Atom */
			reduce(106), /* /, reduce: Atom */
			reduce(106), /* %, reduce: Atom */
			reduce(106), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(106), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S102
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(107), /* do, reduce: Atom */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(107), /* or, reduce: Atom */
			reduce(107), /* and, reduce: Atom */
			reduce(107), /* <, reduce: Atom */
			reduce(107), /* <=, reduce: Atom */
			reduce(107), /* >, reduce: Atom */
			reduce(107), /* >=, reduce: Atom */
			reduce(107), /* ==, reduce: Atom */
			reduce(107), /* ~=, reduce: Atom */
			reduce(107), /* |, reduce: Atom */
			reduce(107), /* ~, reduce: Atom */
			reduce(107), /* &, reduce: Atom */
			reduce(107), /* .., reduce: Atom */
			reduce(107), /* <<, reduce: Atom */
			reduce(107), /* >>, reduce: Atom */
			reduce(107), /* +, reduce: Atom */
			reduce(107), /* -, reduce: Atom */
			reduce(107), /* *, reduce: Atom */
			reduce(107), /* /, reduce: Atom */
			reduce(107), /* %, reduce: Atom */
			reduce(107), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(107), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S103
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(108), /* do, reduce: Atom */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(108), /* or, reduce: Atom */
			reduce(108), /* and, reduce: Atom */
			reduce(108), /* <, reduce: Atom */
			reduce(108), /* <=, reduce: Atom */
			reduce(108), /* >, reduce: Atom */
			reduce(108), /* >=, reduce: Atom */
			reduce(108), /* ==, reduce: Atom */
			reduce(108), /* ~=, reduce: Atom */
			reduce(108), /* |, reduce: Atom */
			reduce(108), /* ~, reduce: Atom */
			reduce(108), /* &, reduce: Atom */
			reduce(108), /* .., reduce: Atom */
			reduce(108), /* <<, reduce: Atom */
			reduce(108), /* >>, reduce: Atom */
			reduce(108), /* +, reduce: Atom */
			reduce(108), /* -, reduce: Atom */
			reduce(108), /* *, reduce: Atom */
			reduce(108), /* /, reduce: Atom */
			reduce(108), /* %, reduce: Atom */
			reduce(108), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(108), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S104
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(109), /* do, reduce: Atom */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(109), /* or, reduce: Atom */
			reduce(109), /* and, reduce: Atom */
			reduce(109), /* <, reduce: Atom */
			reduce(109), /* <=, reduce: Atom */
			reduce(109), /* >, reduce: Atom */
			reduce(109), /* >=, reduce: Atom */
			reduce(109), /* ==, reduce: Atom */
			reduce(109), /* ~=, reduce: Atom */
			reduce(109), /* |, reduce: Atom */
			reduce(109), /* ~, reduce: Atom */
			reduce(109), /* &, reduce: Atom */
			reduce(109), /* .., reduce: Atom */
			reduce(109), /* <<, reduce: Atom */
			reduce(109), /* >>, reduce: Atom */
			reduce(109), /* +, reduce: Atom */
			reduce(109), /* -, reduce: Atom */
			reduce(109), /* *, reduce: Atom */
			reduce(109), /* /, reduce: Atom */
			reduce(109), /* %, reduce: Atom */
			reduce(109), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(109), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S105
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(110), /* do, reduce: Atom */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(110), /* or, reduce: Atom */
			reduce(110), /* and, reduce: Atom */
			reduce(110), /* <, reduce: Atom */
			reduce(110), /* <=, reduce: Atom */
			reduce(110), /* >, reduce: Atom */
			reduce(110), /* >=, reduce: Atom */
			reduce(110), /* ==, reduce: Atom */
			reduce(110), /* ~=, reduce: Atom */
			reduce(110), /* |, reduce: Atom */
			reduce(110), /* ~, reduce: Atom */
			reduce(110), /* &, reduce: Atom */
			reduce(110), /* .., reduce: Atom */
			reduce(110), /* <<, reduce: Atom */
			reduce(110), /* >>, reduce: Atom */
			reduce(110), /* +, reduce: Atom */
			reduce(110), /* -, reduce: Atom */
			reduce(110), /* *, reduce: Atom */
			reduce(110), /* /, reduce: Atom */
			reduce(110), /* %, reduce: Atom */
			reduce(110), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(110), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S106
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(111), /* do, reduce: Atom */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(111), /* or, reduce: Atom */
			reduce(111), /* and, reduce: Atom */
			reduce(111), /* <, reduce: Atom */
			reduce(111), /* <=, reduce: Atom */
			reduce(111), /* >, reduce: Atom */
			reduce(111), /* >=, reduce: Atom */
			reduce(111), /* ==, reduce: Atom */
			reduce(111), /* ~=, reduce: Atom */
			reduce(111), /* |, reduce: Atom */
			reduce(111), /* ~, reduce: Atom */
			reduce(111), /* &, reduce: Atom */
			reduce(111), /* .., reduce: Atom */
			reduce(111), /* <<, reduce: Atom */
			reduce(111), /* >>, reduce: Atom */
			reduce(111), /* +, reduce: Atom */
			reduce(111), /* -, reduce: Atom */
			reduce(111), /* *, reduce: Atom */
			reduce(111), /* /, reduce: Atom */
			reduce(111), /* %, reduce: Atom */
			reduce(111), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(111), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S107
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(112), /* do, reduce: Atom */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(112), /* or, reduce: Atom */
			reduce(112), /* and, reduce: Atom */
			reduce(112), /* <, reduce: Atom */
			reduce(112), /* <=, reduce: Atom */
			reduce(112), /* >, reduce: Atom */
			reduce(112), /* >=, reduce: Atom */
			reduce(112), /* ==, reduce: Atom */
			reduce(112), /* ~=, reduce: Atom */
			reduce(112), /* |, reduce: Atom */
			reduce(112), /* ~, reduce: Atom */
			reduce(112), /* &, reduce: Atom */
			reduce(112), /* .., reduce: Atom */
			reduce(112), /* <<, reduce: Atom */
			reduce(112), /* >>, reduce: Atom */
			reduce(112), /* +, reduce: Atom */
			reduce(112), /* -, reduce: Atom */
			reduce(112), /* *, reduce: Atom */
			reduce(112), /* /, reduce: Atom */
			reduce(112), /* %, reduce: Atom */
			reduce(112), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(112), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S108
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(113), /* do, reduce: Atom */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(113), /* or, reduce: Atom */
			reduce(113), /* and, reduce: Atom */
			reduce(113), /* <, reduce: Atom */
			reduce(113), /* <=, reduce: Atom */
			reduce(113), /* >, reduce: Atom */
			reduce(113), /* >=, reduce: Atom */
			reduce(113), /* ==, reduce: Atom */
			reduce(113), /* ~=, reduce: Atom */
			reduce(113), /* |, reduce: Atom */
			reduce(113), /* ~, reduce: Atom */
			reduce(113), /* &, reduce: Atom */
			reduce(113), /* .., reduce: Atom */
			reduce(113), /* <<, reduce: Atom */
			reduce(113), /* >>, reduce: Atom */
			reduce(113), /* +, reduce: Atom */
			reduce(113), /* -, reduce: Atom */
			reduce(113), /* *, reduce: Atom */
			reduce(113), /* /, reduce: Atom */
			reduce(113), /* %, reduce: Atom */
			reduce(113), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(113), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S109
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			shift(254), /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(268), /* ident */
		},
	},
	actionRow{ // S110
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(134), /* do, reduce: Name */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(134), /* ., reduce: Name */
			reduce(134), /* :, reduce: Name */
			reduce(134), /* or, reduce: Name */
			reduce(134), /* and, reduce: Name */
			reduce(134), /* <, reduce: Name */
			reduce(134), /* <=, reduce: Name */
			reduce(134), /* >, reduce: Name */
			reduce(134), /* >=, reduce: Name */
			reduce(134), /* ==, reduce: Name */
			reduce(134), /* ~=, reduce: Name */
			reduce(134), /* |, reduce: Name */
			reduce(134), /* ~, reduce: Name */
			reduce(134), /* &, reduce: Name */
			reduce(134), /* .., reduce: Name */
			reduce(134), /* <<, reduce: Name */
			reduce(134), /* >>, reduce: Name */
			reduce(134), /* +, reduce: Name */
			reduce(134), /* -, reduce: Name */
			reduce(134), /* *, reduce: Name */
			reduce(134), /* /, reduce: Name */
			reduce(134), /* %, reduce: Name */
			reduce(134), /* //, reduce: Name */
			nil,         /* not */
			nil,         /* # */
			reduce(134), /* ^, reduce: Name */
			reduce(134), /* [, reduce: Name */
			nil,         /* ] */
			reduce(134), /* (, reduce: Name */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(134), /* string, reduce: Name */
			reduce(134), /* {, reduce: Name */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S111
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			shift(358), /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S112
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			shift(359), /* return */
			shift(360), /* ; */
			nil,        /* empty */
			nil,        /* = */
			shift(377), /* break */
			shift(378), /* goto */
			shift(379), /* do */
			nil,        /* end */
			shift(380), /* while */
			shift(381), /* repeat */
			reduce(5),  /* until, reduce: Chunk */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			shift(382), /* if */
			nil,        /* , */
			shift(383), /* for */
			nil,        /* in */
			shift(384), /* function */
			shift(385), /* local */
			shift(386), /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(34),  /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(35),  /* ident */
		},
	},
	actionRow{ // S113
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			reduce(101), /* then, reduce: PrefixExp */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(101), /* ., reduce: PrefixExp */
			reduce(101), /* :, reduce: PrefixExp */
			reduce(101), /* or, reduce: PrefixExp */
			reduce(101), /* and, reduce: PrefixExp */
			reduce(101), /* <, reduce: PrefixExp */
			reduce(101), /* <=, reduce: PrefixExp */
			reduce(101), /* >, reduce: PrefixExp */
			reduce(101), /* >=, reduce: PrefixExp */
			reduce(101), /* ==, reduce: PrefixExp */
			reduce(101), /* ~=, reduce: PrefixExp */
			reduce(101), /* |, reduce: PrefixExp */
			reduce(101), /* ~, reduce: PrefixExp */
			reduce(101), /* &, reduce: PrefixExp */
			reduce(101), /* .., reduce: PrefixExp */
			reduce(101), /* <<, reduce: PrefixExp */
			reduce(101), /* >>, reduce: PrefixExp */
			reduce(101), /* +, reduce: PrefixExp */
			reduce(101), /* -, reduce: PrefixExp */
			reduce(101), /* *, reduce: PrefixExp */
			reduce(101), /* /, reduce: PrefixExp */
			reduce(101), /* %, reduce: PrefixExp */
			reduce(101), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(101), /* ^, reduce: PrefixExp */
			reduce(101), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(101), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(101), /* string, reduce: PrefixExp */
			reduce(101), /* {, reduce: PrefixExp */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S114
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			reduce(97), /* then, reduce: Var */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			reduce(97), /* ., reduce: Var */
			reduce(97), /* :, reduce: Var */
			reduce(97), /* or, reduce: Var */
			reduce(97), /* and, reduce: Var */
			reduce(97), /* <, reduce: Var */
			reduce(97), /* <=, reduce: Var */
			reduce(97), /* >, reduce: Var */
			reduce(97), /* >=, reduce: Var */
			reduce(97), /* ==, reduce: Var */
			reduce(97), /* ~=, reduce: Var */
			reduce(97), /* |, reduce: Var */
			reduce(97), /* ~, reduce: Var */
			reduce(97), /* &, reduce: Var */
			reduce(97), /* .., reduce: Var */
			reduce(97), /* <<, reduce: Var */
			reduce(97), /* >>, reduce: Var */
			reduce(97), /* +, reduce: Var */
			reduce(97), /* -, reduce: Var */
			reduce(97), /* *, reduce: Var */
			reduce(97), /* /, reduce: Var */
			reduce(97), /* %, reduce: Var */
			reduce(97), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(97), /* ^, reduce: Var */
			reduce(97), /* [, reduce: Var */
			nil,        /* ] */
			reduce(97), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(97), /* string, reduce: Var */
			reduce(97), /* {, reduce: Var */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S115
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			shift(387), /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			shift(388), /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S116
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(390), /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S117
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			reduce(100), /* then, reduce: PrefixExp */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(100), /* ., reduce: PrefixExp */
			reduce(100), /* :, reduce: PrefixExp */
			reduce(100), /* or, reduce: PrefixExp */
			reduce(100), /* and, reduce: PrefixExp */
			reduce(100), /* <, reduce: PrefixExp */
			reduce(100), /* <=, reduce: PrefixExp */
			reduce(100), /* >, reduce: PrefixExp */
			reduce(100), /* >=, reduce: PrefixExp */
			reduce(100), /* ==, reduce: PrefixExp */
			reduce(100), /* ~=, reduce: PrefixExp */
			reduce(100), /* |, reduce: PrefixExp */
			reduce(100), /* ~, reduce: PrefixExp */
			reduce(100), /* &, reduce: PrefixExp */
			reduce(100), /* .., reduce: PrefixExp */
			reduce(100), /* <<, reduce: PrefixExp */
			reduce(100), /* >>, reduce: PrefixExp */
			reduce(100), /* +, reduce: PrefixExp */
			reduce(100), /* -, reduce: PrefixExp */
			reduce(100), /* *, reduce: PrefixExp */
			reduce(100), /* /, reduce: PrefixExp */
			reduce(100), /* %, reduce: PrefixExp */
			reduce(100), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(100), /* ^, reduce: PrefixExp */
			reduce(100), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(100), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(100), /* string, reduce: PrefixExp */
			reduce(100), /* {, reduce: PrefixExp */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S118
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			reduce(55), /* then, reduce: Exp */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(55), /* or, reduce: Exp */
			shift(391), /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S119
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			reduce(57), /* then, reduce: AndExp */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(57), /* or, reduce: AndExp */
			reduce(57), /* and, reduce: AndExp */
			shift(203), /* < */
			shift(204), /* <= */
			shift(205), /* > */
			shift(206), /* >= */
			shift(207), /* == */
			shift(208), /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S120
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			reduce(65), /* then, reduce: CompExp */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(65), /* or, reduce: CompExp */
			reduce(65), /* and, reduce: CompExp */
			reduce(65), /* <, reduce: CompExp */
			reduce(65), /* <=, reduce: CompExp */
			reduce(65), /* >, reduce: CompExp */
			reduce(65), /* >=, reduce: CompExp */
			reduce(65), /* ==, reduce: CompExp */
			reduce(65), /* ~=, reduce: CompExp */
			shift(393), /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S121
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			reduce(67), /* then, reduce: BitOrExp */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(67), /* or, reduce: BitOrExp */
			reduce(67), /* and, reduce: BitOrExp */
			reduce(67), /* <, reduce: BitOrExp */
			reduce(67), /* <=, reduce: BitOrExp */
			reduce(67), /* >, reduce: BitOrExp */
			reduce(67), /* >=, reduce: BitOrExp */
			reduce(67), /* ==, reduce: BitOrExp */
			reduce(67), /* ~=, reduce: BitOrExp */
			reduce(67), /* |, reduce: BitOrExp */
			shift(394), /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S122
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			reduce(69), /* then, reduce: BitXorExp */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(69), /* or, reduce: BitXorExp */
			reduce(69), /* and, reduce: BitXorExp */
			reduce(69), /* <, reduce: BitXorExp */
			reduce(69), /* <=, reduce: BitXorExp */
			reduce(69), /* >, reduce: BitXorExp */
			reduce(69), /* >=, reduce: BitXorExp */
			reduce(69), /* ==, reduce: BitXorExp */
			reduce(69), /* ~=, reduce: BitXorExp */
			reduce(69), /* |, reduce: BitXorExp */
			reduce(69), /* ~, reduce: BitXorExp */
			shift(395), /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S123
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			reduce(71), /* then, reduce: BitAndExp */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(71), /* or, reduce: BitAndExp */
			reduce(71), /* and, reduce: BitAndExp */
			reduce(71), /* <, reduce: BitAndExp */
			reduce(71), /* <=, reduce: BitAndExp */
			reduce(71), /* >, reduce: BitAndExp */
			reduce(71), /* >=, reduce: BitAndExp */
			reduce(71), /* ==, reduce: BitAndExp */
			reduce(71), /* ~=, reduce: BitAndExp */
			reduce(71), /* |, reduce: BitAndExp */
			reduce(71), /* ~, reduce: BitAndExp */
			reduce(71), /* &, reduce: BitAndExp */
			shift(396), /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S124
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			reduce(73), /* then, reduce: ConcatExp */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(73), /* or, reduce: ConcatExp */
			reduce(73), /* and, reduce: ConcatExp */
			reduce(73), /* <, reduce: ConcatExp */
			reduce(73), /* <=, reduce: ConcatExp */
			reduce(73), /* >, reduce: ConcatExp */
			reduce(73), /* >=, reduce: ConcatExp */
			reduce(73), /* ==, reduce: ConcatExp */
			reduce(73), /* ~=, reduce: ConcatExp */
			reduce(73), /* |, reduce: ConcatExp */
			reduce(73), /* ~, reduce: ConcatExp */
			reduce(73), /* &, reduce: ConcatExp */
			reduce(73), /* .., reduce: ConcatExp */
			shift(214), /* << */
			shift(215), /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S125
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			reduce(77), /* then, reduce: ShiftExp */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(77), /* or, reduce: ShiftExp */
			reduce(77), /* and, reduce: ShiftExp */
			reduce(77), /* <, reduce: ShiftExp */
			reduce(77), /* <=, reduce: ShiftExp */
			reduce(77), /* >, reduce: ShiftExp */
			reduce(77), /* >=, reduce: ShiftExp */
			reduce(77), /* ==, reduce: ShiftExp */
			reduce(77), /* ~=, reduce: ShiftExp */
			reduce(77), /* |, reduce: ShiftExp */
			reduce(77), /* ~, reduce: ShiftExp */
			reduce(77), /* &, reduce: ShiftExp */
			reduce(77), /* .., reduce: ShiftExp */
			reduce(77), /* <<, reduce: ShiftExp */
			reduce(77), /* >>, reduce: ShiftExp */
			shift(217), /* + */
			shift(218), /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S126
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			reduce(81), /* then, reduce: Sum */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(81), /* or, reduce: Sum */
			reduce(81), /* and, reduce: Sum */
			reduce(81), /* <, reduce: Sum */
			reduce(81), /* <=, reduce: Sum */
			reduce(81), /* >, reduce: Sum */
			reduce(81), /* >=, reduce: Sum */
			reduce(81), /* ==, reduce: Sum */
			reduce(81), /* ~=, reduce: Sum */
			reduce(81), /* |, reduce: Sum */
			reduce(81), /* ~, reduce: Sum */
			reduce(81), /* &, reduce: Sum */
			reduce(81), /* .., reduce: Sum */
			reduce(81), /* <<, reduce: Sum */
			reduce(81), /* >>, reduce: Sum */
			reduce(81), /* +, reduce: Sum */
			reduce(81), /* -, reduce: Sum */
			shift(220), /* * */
			shift(221), /* / */
			shift(222), /* % */
			shift(223), /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S127
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			reduce(87), /* then, reduce: Term */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(87), /* or, reduce: Term */
			reduce(87), /* and, reduce: Term */
			reduce(87), /* <, reduce: Term */
			reduce(87), /* <=, reduce: Term */
			reduce(87), /* >, reduce: Term */
			reduce(87), /* >=, reduce: Term */
			reduce(87), /* ==, reduce: Term */
			reduce(87), /* ~=, reduce: Term */
			reduce(87), /* |, reduce: Term */
			reduce(87), /* ~, reduce: Term */
			reduce(87), /* &, reduce: Term */
			reduce(87), /* .., reduce: Term */
			reduce(87), /* <<, reduce: Term */
			reduce(87), /* >>, reduce: Term */
			reduce(87), /* +, reduce: Term */
			reduce(87), /* -, reduce: Term */
			reduce(87), /* *, reduce: Term */
			reduce(87), /* /, reduce: Term */
			reduce(87), /* %, reduce: Term */
			reduce(87), /* //, reduce: Term */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S128
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(116), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(132), /* ( */
			nil,        /* ) */
			shift(133), /* nil */
			shift(134), /* true */
			shift(135), /* false */
			shift(136), /* ... */
			shift(137), /* numdec */
			shift(138), /* numhex */
			shift(139), /* string */
			shift(142), /* { */
			nil,        /* } */
			shift(143), /* ident */
		},
	},
	actionRow{ // S129
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			reduce(94), /* then, reduce: Factor */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(94), /* or, reduce: Factor */
			reduce(94), /* and, reduce: Factor */
			reduce(94), /* <, reduce: Factor */
			reduce(94), /* <=, reduce: Factor */
			reduce(94), /* >, reduce: Factor */
			reduce(94), /* >=, reduce: Factor */
			reduce(94), /* ==, reduce: Factor */
			reduce(94), /* ~=, reduce: Factor */
			reduce(94), /* |, reduce: Factor */
			reduce(94), /* ~, reduce: Factor */
			reduce(94), /* &, reduce: Factor */
			reduce(94), /* .., reduce: Factor */
			reduce(94), /* <<, reduce: Factor */
			reduce(94), /* >>, reduce: Factor */
			reduce(94), /* +, reduce: Factor */
			reduce(94), /* -, reduce: Factor */
			reduce(94), /* *, reduce: Factor */
			reduce(94), /* /, reduce: Factor */
			reduce(94), /* %, reduce: Factor */
			reduce(94), /* //, reduce: Factor */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S130
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			reduce(95), /* then, reduce: Power */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(95), /* or, reduce: Power */
			reduce(95), /* and, reduce: Power */
			reduce(95), /* <, reduce: Power */
			reduce(95), /* <=, reduce: Power */
			reduce(95), /* >, reduce: Power */
			reduce(95), /* >=, reduce: Power */
			reduce(95), /* ==, reduce: Power */
			reduce(95), /* ~=, reduce: Power */
			reduce(95), /* |, reduce: Power */
			reduce(95), /* ~, reduce: Power */
			reduce(95), /* &, reduce: Power */
			reduce(95), /* .., reduce: Power */
			reduce(95), /* <<, reduce: Power */
			reduce(95), /* >>, reduce: Power */
			reduce(95), /* +, reduce: Power */
			reduce(95), /* -, reduce: Power */
			reduce(95), /* *, reduce: Power */
			reduce(95), /* /, reduce: Power */
			reduce(95), /* %, reduce: Power */
			reduce(95), /* //, reduce: Power */
			nil,        /* not */
			nil,        /* # */
			shift(401), /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S131
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			reduce(114), /* then, reduce: Atom */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			shift(402),  /* . */
			shift(403),  /* : */
			reduce(114), /* or, reduce: Atom */
			reduce(114), /* and, reduce: Atom */
			reduce(114), /* <, reduce: Atom */
			reduce(114), /* <=, reduce: Atom */
			reduce(114), /* >, reduce: Atom */
			reduce(114), /* >=, reduce: Atom */
			reduce(114), /* ==, reduce: Atom */
			reduce(114), /* ~=, reduce: Atom */
			reduce(114), /* |, reduce: Atom */
			reduce(114), /* ~, reduce: Atom */
			reduce(114), /* &, reduce: Atom */
			reduce(114), /* .., reduce: Atom */
			reduce(114), /* <<, reduce: Atom */
			reduce(114), /* >>, reduce: Atom */
			reduce(114), /* +, reduce: Atom */
			reduce(114), /* -, reduce: Atom */
			reduce(114), /* *, reduce: Atom */
			reduce(114), /* /, reduce: Atom */
			reduce(114), /* %, reduce: Atom */
			reduce(114), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(114), /* ^, reduce: Atom */
			shift(404),  /* [ */
			nil,         /* ] */
			shift(405),  /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			shift(407),  /* string */
			shift(409),  /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S132
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(168), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(184), /* ( */
			nil,        /* ) */
			shift(185), /* nil */
			shift(186), /* true */
			shift(187), /* false */
			shift(188), /* ... */
			shift(189), /* numdec */
			shift(190), /* numhex */
			shift(191), /* string */
			shift(194), /* { */
			nil,        /* } */
			shift(195), /* ident */
		},
	},
	actionRow{ // S133
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			reduce(105), /* then, reduce: Atom */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(105), /* or, reduce: Atom */
			reduce(105), /* and, reduce: Atom */
			reduce(105), /* <, reduce: Atom */
			reduce(105), /* <=, reduce: Atom */
			reduce(105), /* >, reduce: Atom */
			reduce(105), /* >=, reduce: Atom */
			reduce(105), /* ==, reduce: Atom */
			reduce(105), /* ~=, reduce: Atom */
			reduce(105), /* |, reduce: Atom */
			reduce(105), /* ~, reduce: Atom */
			reduce(105), /* &, reduce: Atom */
			reduce(105), /* .., reduce: Atom */
			reduce(105), /* <<, reduce: Atom */
			reduce(105), /* >>, reduce: Atom */
			reduce(105), /* +, reduce: Atom */
			reduce(105), /* -, reduce: Atom */
			reduce(105), /* *, reduce: Atom */
			reduce(105), /* /, reduce: Atom */
			reduce(105), /* %, reduce: Atom */
			reduce(105), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(105), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S134
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			reduce(106), /* then, reduce: Atom */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(106), /* or, reduce: Atom */
			reduce(106), /* and, reduce: Atom */
			reduce(106), /* <, reduce: Atom */
			reduce(106), /* <=, reduce: Atom */
			reduce(106), /* >, reduce: Atom */
			reduce(106), /* >=, reduce: Atom */
			reduce(106), /* ==, reduce: Atom */
			reduce(106), /* ~=, reduce: Atom */
			reduce(106), /* |, reduce: Atom */
			reduce(106), /* ~, reduce: Atom */
			reduce(106), /* &, reduce: Atom */
			reduce(106), /* .., reduce: Atom */
			reduce(106), /* <<, reduce: Atom */
			reduce(106), /* >>, reduce: Atom */
			reduce(106), /* +, reduce: Atom */
			reduce(106), /* -, reduce: Atom */
			reduce(106), /* *, reduce: Atom */
			reduce(106), /* /, reduce: Atom */
			reduce(106), /* %, reduce: Atom */
			reduce(106), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(106), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S135
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			reduce(107), /* then, reduce: Atom */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(107), /* or, reduce: Atom */
			reduce(107), /* and, reduce: Atom */
			reduce(107), /* <, reduce: Atom */
			reduce(107), /* <=, reduce: Atom */
			reduce(107), /* >, reduce: Atom */
			reduce(107), /* >=, reduce: Atom */
			reduce(107), /* ==, reduce: Atom */
			reduce(107), /* ~=, reduce: Atom */
			reduce(107), /* |, reduce: Atom */
			reduce(107), /* ~, reduce: Atom */
			reduce(107), /* &, reduce: Atom */
			reduce(107), /* .., reduce: Atom */
			reduce(107), /* <<, reduce: Atom */
			reduce(107), /* >>, reduce: Atom */
			reduce(107), /* +, reduce: Atom */
			reduce(107), /* -, reduce: Atom */
			reduce(107), /* *, reduce: Atom */
			reduce(107), /* /, reduce: Atom */
			reduce(107), /* %, reduce: Atom */
			reduce(107), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(107), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S136
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			reduce(108), /* then, reduce: Atom */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(108), /* or, reduce: Atom */
			reduce(108), /* and, reduce: Atom */
			reduce(108), /* <, reduce: Atom */
			reduce(108), /* <=, reduce: Atom */
			reduce(108), /* >, reduce: Atom */
			reduce(108), /* >=, reduce: Atom */
			reduce(108), /* ==, reduce: Atom */
			reduce(108), /* ~=, reduce: Atom */
			reduce(108), /* |, reduce: Atom */
			reduce(108), /* ~, reduce: Atom */
			reduce(108), /* &, reduce: Atom */
			reduce(108), /* .., reduce: Atom */
			reduce(108), /* <<, reduce: Atom */
			reduce(108), /* >>, reduce: Atom */
			reduce(108), /* +, reduce: Atom */
			reduce(108), /* -, reduce: Atom */
			reduce(108), /* *, reduce: Atom */
			reduce(108), /* /, reduce: Atom */
			reduce(108), /* %, reduce: Atom */
			reduce(108), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(108), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S137
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			reduce(109), /* then, reduce: Atom */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(109), /* or, reduce: Atom */
			reduce(109), /* and, reduce: Atom */
			reduce(109), /* <, reduce: Atom */
			reduce(109), /* <=, reduce: Atom */
			reduce(109), /* >, reduce: Atom */
			reduce(109), /* >=, reduce: Atom */
			reduce(109), /* ==, reduce: Atom */
			reduce(109), /* ~=, reduce: Atom */
			reduce(109), /* |, reduce: Atom */
			reduce(109), /* ~, reduce: Atom */
			reduce(109), /* &, reduce: Atom */
			reduce(109), /* .., reduce: Atom */
			reduce(109), /* <<, reduce: Atom */
			reduce(109), /* >>, reduce: Atom */
			reduce(109), /* +, reduce: Atom */
			reduce(109), /* -, reduce: Atom */
			reduce(109), /* *, reduce: Atom */
			reduce(109), /* /, reduce: Atom */
			reduce(109), /* %, reduce: Atom */
			reduce(109), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(109), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S138
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			reduce(110), /* then, reduce: Atom */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(110), /* or, reduce: Atom */
			reduce(110), /* and, reduce: Atom */
			reduce(110), /* <, reduce: Atom */
			reduce(110), /* <=, reduce: Atom */
			reduce(110), /* >, reduce: Atom */
			reduce(110), /* >=, reduce: Atom */
			reduce(110), /* ==, reduce: Atom */
			reduce(110), /* ~=, reduce: Atom */
			reduce(110), /* |, reduce: Atom */
			reduce(110), /* ~, reduce: Atom */
			reduce(110), /* &, reduce: Atom */
			reduce(110), /* .., reduce: Atom */
			reduce(110), /* <<, reduce: Atom */
			reduce(110), /* >>, reduce: Atom */
			reduce(110), /* +, reduce: Atom */
			reduce(110), /* -, reduce: Atom */
			reduce(110), /* *, reduce: Atom */
			reduce(110), /* /, reduce: Atom */
			reduce(110), /* %, reduce: Atom */
			reduce(110), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(110), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S139
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			reduce(111), /* then, reduce: Atom */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(111), /* or, reduce: Atom */
			reduce(111), /* and, reduce: Atom */
			reduce(111), /* <, reduce: Atom */
			reduce(111), /* <=, reduce: Atom */
			reduce(111), /* >, reduce: Atom */
			reduce(111), /* >=, reduce: Atom */
			reduce(111), /* ==, reduce: Atom */
			reduce(111), /* ~=, reduce: Atom */
			reduce(111), /* |, reduce: Atom */
			reduce(111), /* ~, reduce: Atom */
			reduce(111), /* &, reduce: Atom */
			reduce(111), /* .., reduce: Atom */
			reduce(111), /* <<, reduce: Atom */
			reduce(111), /* >>, reduce: Atom */
			reduce(111), /* +, reduce: Atom */
			reduce(111), /* -, reduce: Atom */
			reduce(111), /* *, reduce: Atom */
			reduce(111), /* /, reduce: Atom */
			reduce(111), /* %, reduce: Atom */
			reduce(111), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(111), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S140
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			reduce(112), /* then, reduce: Atom */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(112), /* or, reduce: Atom */
			reduce(112), /* and, reduce: Atom */
			reduce(112), /* <, reduce: Atom */
			reduce(112), /* <=, reduce: Atom */
			reduce(112), /* >, reduce: Atom */
			reduce(112), /* >=, reduce: Atom */
			reduce(112), /* ==, reduce: Atom */
			reduce(112), /* ~=, reduce: Atom */
			reduce(112), /* |, reduce: Atom */
			reduce(112), /* ~, reduce: Atom */
			reduce(112), /* &, reduce: Atom */
			reduce(112), /* .., reduce: Atom */
			reduce(112), /* <<, reduce: Atom */
			reduce(112), /* >>, reduce: Atom */
			reduce(112), /* +, reduce: Atom */
			reduce(112), /* -, reduce: Atom */
			reduce(112), /* *, reduce: Atom */
			reduce(112), /* /, reduce: Atom */
			reduce(112), /* %, reduce: Atom */
			reduce(112), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(112), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S141
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			reduce(113), /* then, reduce: Atom */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(113), /* or, reduce: Atom */
			reduce(113), /* and, reduce: Atom */
			reduce(113), /* <, reduce: Atom */
			reduce(113), /* <=, reduce: Atom */
			reduce(113), /* >, reduce: Atom */
			reduce(113), /* >=, reduce: Atom */
			reduce(113), /* ==, reduce: Atom */
			reduce(113), /* ~=, reduce: Atom */
			reduce(113), /* |, reduce: Atom */
			reduce(113), /* ~, reduce: Atom */
			reduce(113), /* &, reduce: Atom */
			reduce(113), /* .., reduce: Atom */
			reduce(113), /* <<, reduce: Atom */
			reduce(113), /* >>, reduce: Atom */
			reduce(113), /* +, reduce: Atom */
			reduce(113), /* -, reduce: Atom */
			reduce(113), /* *, reduce: Atom */
			reduce(113), /* /, reduce: Atom */
			reduce(113), /* %, reduce: Atom */
			reduce(113), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(113), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S142
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			shift(254), /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(268), /* ident */
		},
	},
	actionRow{ // S143
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			reduce(134), /* then, reduce: Name */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(134), /* ., reduce: Name */
			reduce(134), /* :, reduce: Name */
			reduce(134), /* or, reduce: Name */
			reduce(134), /* and, reduce: Name */
			reduce(134), /* <, reduce: Name */
			reduce(134), /* <=, reduce: Name */
			reduce(134), /* >, reduce: Name */
			reduce(134), /* >=, reduce: Name */
			reduce(134), /* ==, reduce: Name */
			reduce(134), /* ~=, reduce: Name */
			reduce(134), /* |, reduce: Name */
			reduce(134), /* ~, reduce: Name */
			reduce(134), /* &, reduce: Name */
			reduce(134), /* .., reduce: Name */
			reduce(134), /* <<, reduce: Name */
			reduce(134), /* >>, reduce: Name */
			reduce(134), /* +, reduce: Name */
			reduce(134), /* -, reduce: Name */
			reduce(134), /* *, reduce: Name */
			reduce(134), /* /, reduce: Name */
			reduce(134), /* %, reduce: Name */
			reduce(134), /* //, reduce: Name */
			nil,         /* not */
			nil,         /* # */
			reduce(134), /* ^, reduce: Name */
			reduce(134), /* [, reduce: Name */
			nil,         /* ] */
			reduce(134), /* (, reduce: Name */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(134), /* string, reduce: Name */
			reduce(134), /* {, reduce: Name */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S144
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			shift(412), /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(51), /* ,, reduce: NameList */
			nil,        /* for */
			reduce(51), /* in, reduce: NameList */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S145
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			shift(413), /* , */
			nil,        /* for */
			shift(414), /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S146
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			reduce(134), /* =, reduce: Name */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(134), /* ,, reduce: Name */
			nil,         /* for */
			reduce(134), /* in, reduce: Name */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S147
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			reduce(45), /* ., reduce: DottedName */
			reduce(45), /* :, reduce: DottedName */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(45), /* (, reduce: DottedName */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S148
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(416), /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S149
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			shift(417), /* . */
			shift(418), /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(47), /* (, reduce: FuncName */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S150
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(134), /* ., reduce: Name */
			reduce(134), /* :, reduce: Name */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(134), /* (, reduce: Name */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S151
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(51), /* $, reduce: NameList */
			reduce(51), /* return, reduce: NameList */
			reduce(51), /* ;, reduce: NameList */
			nil,        /* empty */
			reduce(51), /* =, reduce: NameList */
			reduce(51), /* break, reduce: NameList */
			reduce(51), /* goto, reduce: NameList */
			reduce(51), /* do, reduce: NameList */
			nil,        /* end */
			reduce(51), /* while, reduce: NameList */
			reduce(51), /* repeat, reduce: NameList */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(51), /* if, reduce: NameList */
			reduce(51), /* ,, reduce: NameList */
			reduce(51), /* for, reduce: NameList */
			nil,        /* in */
			reduce(51), /* function, reduce: NameList */
			reduce(51), /* local, reduce: NameList */
			reduce(51), /* ::, reduce: NameList */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(51), /* (, reduce: NameList */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(51), /* ident, reduce: NameList */
		},
	},
	actionRow{ // S152
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(42), /* $, reduce: LocalStat */
			reduce(42), /* return, reduce: LocalStat */
			reduce(42), /* ;, reduce: LocalStat */
			nil,        /* empty */
			shift(419), /* = */
			reduce(42), /* break, reduce: LocalStat */
			reduce(42), /* goto, reduce: LocalStat */
			reduce(42), /* do, reduce: LocalStat */
			nil,        /* end */
			reduce(42), /* while, reduce: LocalStat */
			reduce(42), /* repeat, reduce: LocalStat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(42), /* if, reduce: LocalStat */
			shift(420), /* , */
			reduce(42), /* for, reduce: LocalStat */
			nil,        /* in */
			reduce(42), /* function, reduce: LocalStat */
			reduce(42), /* local, reduce: LocalStat */
			reduce(42), /* ::, reduce: LocalStat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(42), /* (, reduce: LocalStat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(42), /* ident, reduce: LocalStat */
		},
	},
	actionRow{ // S153
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(422), /* ident */
		},
	},
	actionRow{ // S154
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(134), /* $, reduce: Name */
			reduce(134), /* return, reduce: Name */
			reduce(134), /* ;, reduce: Name */
			nil,         /* empty */
			reduce(134), /* =, reduce: Name */
			reduce(134), /* break, reduce: Name */
			reduce(134), /* goto, reduce: Name */
			reduce(134), /* do, reduce: Name */
			nil,         /* end */
			reduce(134), /* while, reduce: Name */
			reduce(134), /* repeat, reduce: Name */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(134), /* if, reduce: Name */
			reduce(134), /* ,, reduce: Name */
			reduce(134), /* for, reduce: Name */
			nil,         /* in */
			reduce(134), /* function, reduce: Name */
			reduce(134), /* local, reduce: Name */
			reduce(134), /* ::, reduce: Name */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(134), /* (, reduce: Name */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(134), /* ident, reduce: Name */
		},
	},
	actionRow{ // S155
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			shift(423), /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S156
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			reduce(134), /* ::, reduce: Name */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S157
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* return */
			nil,       /* ; */
			nil,       /* empty */
			nil,       /* = */
			nil,       /* break */
			nil,       /* goto */
			nil,       /* do */
			nil,       /* end */
			nil,       /* while */
			nil,       /* repeat */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			nil,       /* if */
			nil,       /* , */
			nil,       /* for */
			nil,       /* in */
			nil,       /* function */
			nil,       /* local */
			nil,       /* :: */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			nil,       /* ( */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			shift(35), /* ident */
		},
	},
	actionRow{ // S158
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(426), /* ident */
		},
	},
	actionRow{ // S159
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(430), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(446), /* ( */
			nil,        /* ) */
			shift(447), /* nil */
			shift(448), /* true */
			shift(449), /* false */
			shift(450), /* ... */
			shift(451), /* numdec */
			shift(452), /* numhex */
			shift(453), /* string */
			shift(456), /* { */
			nil,        /* } */
			shift(457), /* ident */
		},
	},
	actionRow{ // S160
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(462), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(478), /* ( */
			shift(479), /* ) */
			shift(480), /* nil */
			shift(481), /* true */
			shift(482), /* false */
			shift(483), /* ... */
			shift(484), /* numdec */
			shift(485), /* numhex */
			shift(486), /* string */
			shift(489), /* { */
			nil,        /* } */
			shift(490), /* ident */
		},
	},
	actionRow{ // S161
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(103), /* ;, reduce: FunctionCall */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(103), /* ., reduce: FunctionCall */
			reduce(103), /* :, reduce: FunctionCall */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			reduce(103), /* [, reduce: FunctionCall */
			nil,         /* ] */
			reduce(103), /* (, reduce: FunctionCall */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(103), /* string, reduce: FunctionCall */
			reduce(103), /* {, reduce: FunctionCall */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S162
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(118), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(118), /* ., reduce: Args */
			reduce(118), /* :, reduce: Args */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			reduce(118), /* [, reduce: Args */
			nil,         /* ] */
			reduce(118), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(118), /* string, reduce: Args */
			reduce(118), /* {, reduce: Args */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S163
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(117), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(117), /* ., reduce: Args */
			reduce(117), /* :, reduce: Args */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			reduce(117), /* [, reduce: Args */
			nil,         /* ] */
			reduce(117), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(117), /* string, reduce: Args */
			reduce(117), /* {, reduce: Args */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S164
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			shift(254), /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(268), /* ident */
		},
	},
	actionRow{ // S165
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(101), /* ., reduce: PrefixExp */
			reduce(101), /* :, reduce: PrefixExp */
			reduce(101), /* or, reduce: PrefixExp */
			reduce(101), /* and, reduce: PrefixExp */
			reduce(101), /* <, reduce: PrefixExp */
			reduce(101), /* <=, reduce: PrefixExp */
			reduce(101), /* >, reduce: PrefixExp */
			reduce(101), /* >=, reduce: PrefixExp */
			reduce(101), /* ==, reduce: PrefixExp */
			reduce(101), /* ~=, reduce: PrefixExp */
			reduce(101), /* |, reduce: PrefixExp */
			reduce(101), /* ~, reduce: PrefixExp */
			reduce(101), /* &, reduce: PrefixExp */
			reduce(101), /* .., reduce: PrefixExp */
			reduce(101), /* <<, reduce: PrefixExp */
			reduce(101), /* >>, reduce: PrefixExp */
			reduce(101), /* +, reduce: PrefixExp */
			reduce(101), /* -, reduce: PrefixExp */
			reduce(101), /* *, reduce: PrefixExp */
			reduce(101), /* /, reduce: PrefixExp */
			reduce(101), /* %, reduce: PrefixExp */
			reduce(101), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(101), /* ^, reduce: PrefixExp */
			reduce(101), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(101), /* (, reduce: PrefixExp */
			reduce(101), /* ), reduce: PrefixExp */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(101), /* string, reduce: PrefixExp */
			reduce(101), /* {, reduce: PrefixExp */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S166
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			reduce(97), /* ., reduce: Var */
			reduce(97), /* :, reduce: Var */
			reduce(97), /* or, reduce: Var */
			reduce(97), /* and, reduce: Var */
			reduce(97), /* <, reduce: Var */
			reduce(97), /* <=, reduce: Var */
			reduce(97), /* >, reduce: Var */
			reduce(97), /* >=, reduce: Var */
			reduce(97), /* ==, reduce: Var */
			reduce(97), /* ~=, reduce: Var */
			reduce(97), /* |, reduce: Var */
			reduce(97), /* ~, reduce: Var */
			reduce(97), /* &, reduce: Var */
			reduce(97), /* .., reduce: Var */
			reduce(97), /* <<, reduce: Var */
			reduce(97), /* >>, reduce: Var */
			reduce(97), /* +, reduce: Var */
			reduce(97), /* -, reduce: Var */
			reduce(97), /* *, reduce: Var */
			reduce(97), /* /, reduce: Var */
			reduce(97), /* %, reduce: Var */
			reduce(97), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(97), /* ^, reduce: Var */
			reduce(97), /* [, reduce: Var */
			nil,        /* ] */
			reduce(97), /* (, reduce: Var */
			reduce(97), /* ), reduce: Var */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(97), /* string, reduce: Var */
			reduce(97), /* {, reduce: Var */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S167
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			shift(492), /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			shift(493), /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S168
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(495), /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S169
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(100), /* ., reduce: PrefixExp */
			reduce(100), /* :, reduce: PrefixExp */
			reduce(100), /* or, reduce: PrefixExp */
			reduce(100), /* and, reduce: PrefixExp */
			reduce(100), /* <, reduce: PrefixExp */
			reduce(100), /* <=, reduce: PrefixExp */
			reduce(100), /* >, reduce: PrefixExp */
			reduce(100), /* >=, reduce: PrefixExp */
			reduce(100), /* ==, reduce: PrefixExp */
			reduce(100), /* ~=, reduce: PrefixExp */
			reduce(100), /* |, reduce: PrefixExp */
			reduce(100), /* ~, reduce: PrefixExp */
			reduce(100), /* &, reduce: PrefixExp */
			reduce(100), /* .., reduce: PrefixExp */
			reduce(100), /* <<, reduce: PrefixExp */
			reduce(100), /* >>, reduce: PrefixExp */
			reduce(100), /* +, reduce: PrefixExp */
			reduce(100), /* -, reduce: PrefixExp */
			reduce(100), /* *, reduce: PrefixExp */
			reduce(100), /* /, reduce: PrefixExp */
			reduce(100), /* %, reduce: PrefixExp */
			reduce(100), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(100), /* ^, reduce: PrefixExp */
			reduce(100), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(100), /* (, reduce: PrefixExp */
			reduce(100), /* ), reduce: PrefixExp */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(100), /* string, reduce: PrefixExp */
			reduce(100), /* {, reduce: PrefixExp */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S170
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(55), /* or, reduce: Exp */
			shift(496), /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			reduce(55), /* ), reduce: Exp */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S171
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(57), /* or, reduce: AndExp */
			reduce(57), /* and, reduce: AndExp */
			shift(203), /* < */
			shift(204), /* <= */
			shift(205), /* > */
			shift(206), /* >= */
			shift(207), /* == */
			shift(208), /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			reduce(57), /* ), reduce: AndExp */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S172
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(65), /* or, reduce: CompExp */
			reduce(65), /* and, reduce: CompExp */
			reduce(65), /* <, reduce: CompExp */
			reduce(65), /* <=, reduce: CompExp */
			reduce(65), /* >, reduce: CompExp */
			reduce(65), /* >=, reduce: CompExp */
			reduce(65), /* ==, reduce: CompExp */
			reduce(65), /* ~=, reduce: CompExp */
			shift(498), /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			reduce(65), /* ), reduce: CompExp */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S173
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(67), /* or, reduce: BitOrExp */
			reduce(67), /* and, reduce: BitOrExp */
			reduce(67), /* <, reduce: BitOrExp */
			reduce(67), /* <=, reduce: BitOrExp */
			reduce(67), /* >, reduce: BitOrExp */
			reduce(67), /* >=, reduce: BitOrExp */
			reduce(67), /* ==, reduce: BitOrExp */
			reduce(67), /* ~=, reduce: BitOrExp */
			reduce(67), /* |, reduce: BitOrExp */
			shift(499), /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			reduce(67), /* ), reduce: BitOrExp */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S174
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(69), /* or, reduce: BitXorExp */
			reduce(69), /* and, reduce: BitXorExp */
			reduce(69), /* <, reduce: BitXorExp */
			reduce(69), /* <=, reduce: BitXorExp */
			reduce(69), /* >, reduce: BitXorExp */
			reduce(69), /* >=, reduce: BitXorExp */
			reduce(69), /* ==, reduce: BitXorExp */
			reduce(69), /* ~=, reduce: BitXorExp */
			reduce(69), /* |, reduce: BitXorExp */
			reduce(69), /* ~, reduce: BitXorExp */
			shift(500), /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			reduce(69), /* ), reduce: BitXorExp */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S175
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(71), /* or, reduce: BitAndExp */
			reduce(71), /* and, reduce: BitAndExp */
			reduce(71), /* <, reduce: BitAndExp */
			reduce(71), /* <=, reduce: BitAndExp */
			reduce(71), /* >, reduce: BitAndExp */
			reduce(71), /* >=, reduce: BitAndExp */
			reduce(71), /* ==, reduce: BitAndExp */
			reduce(71), /* ~=, reduce: BitAndExp */
			reduce(71), /* |, reduce: BitAndExp */
			reduce(71), /* ~, reduce: BitAndExp */
			reduce(71), /* &, reduce: BitAndExp */
			shift(501), /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			reduce(71), /* ), reduce: BitAndExp */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S176
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(73), /* or, reduce: ConcatExp */
			reduce(73), /* and, reduce: ConcatExp */
			reduce(73), /* <, reduce: ConcatExp */
			reduce(73), /* <=, reduce: ConcatExp */
			reduce(73), /* >, reduce: ConcatExp */
			reduce(73), /* >=, reduce: ConcatExp */
			reduce(73), /* ==, reduce: ConcatExp */
			reduce(73), /* ~=, reduce: ConcatExp */
			reduce(73), /* |, reduce: ConcatExp */
			reduce(73), /* ~, reduce: ConcatExp */
			reduce(73), /* &, reduce: ConcatExp */
			reduce(73), /* .., reduce: ConcatExp */
			shift(214), /* << */
			shift(215), /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			reduce(73), /* ), reduce: ConcatExp */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S177
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(77), /* or, reduce: ShiftExp */
			reduce(77), /* and, reduce: ShiftExp */
			reduce(77), /* <, reduce: ShiftExp */
			reduce(77), /* <=, reduce: ShiftExp */
			reduce(77), /* >, reduce: ShiftExp */
			reduce(77), /* >=, reduce: ShiftExp */
			reduce(77), /* ==, reduce: ShiftExp */
			reduce(77), /* ~=, reduce: ShiftExp */
			reduce(77), /* |, reduce: ShiftExp */
			reduce(77), /* ~, reduce: ShiftExp */
			reduce(77), /* &, reduce: ShiftExp */
			reduce(77), /* .., reduce: ShiftExp */
			reduce(77), /* <<, reduce: ShiftExp */
			reduce(77), /* >>, reduce: ShiftExp */
			shift(217), /* + */
			shift(218), /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			reduce(77), /* ), reduce: ShiftExp */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S178
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(81), /* or, reduce: Sum */
			reduce(81), /* and, reduce: Sum */
			reduce(81), /* <, reduce: Sum */
			reduce(81), /* <=, reduce: Sum */
			reduce(81), /* >, reduce: Sum */
			reduce(81), /* >=, reduce: Sum */
			reduce(81), /* ==, reduce: Sum */
			reduce(81), /* ~=, reduce: Sum */
			reduce(81), /* |, reduce: Sum */
			reduce(81), /* ~, reduce: Sum */
			reduce(81), /* &, reduce: Sum */
			reduce(81), /* .., reduce: Sum */
			reduce(81), /* <<, reduce: Sum */
			reduce(81), /* >>, reduce: Sum */
			reduce(81), /* +, reduce: Sum */
			reduce(81), /* -, reduce: Sum */
			shift(220), /* * */
			shift(221), /* / */
			shift(222), /* % */
			shift(223), /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			reduce(81), /* ), reduce: Sum */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S179
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(87), /* or, reduce: Term */
			reduce(87), /* and, reduce: Term */
			reduce(87), /* <, reduce: Term */
			reduce(87), /* <=, reduce: Term */
			reduce(87), /* >, reduce: Term */
			reduce(87), /* >=, reduce: Term */
			reduce(87), /* ==, reduce: Term */
			reduce(87), /* ~=, reduce: Term */
			reduce(87), /* |, reduce: Term */
			reduce(87), /* ~, reduce: Term */
			reduce(87), /* &, reduce: Term */
			reduce(87), /* .., reduce: Term */
			reduce(87), /* <<, reduce: Term */
			reduce(87), /* >>, reduce: Term */
			reduce(87), /* +, reduce: Term */
			reduce(87), /* -, reduce: Term */
			reduce(87), /* *, reduce: Term */
			reduce(87), /* /, reduce: Term */
			reduce(87), /* %, reduce: Term */
			reduce(87), /* //, reduce: Term */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			reduce(87), /* ), reduce: Term */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S180
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(168), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(184), /* ( */
			nil,        /* ) */
			shift(185), /* nil */
			shift(186), /* true */
			shift(187), /* false */
			shift(188), /* ... */
			shift(189), /* numdec */
			shift(190), /* numhex */
			shift(191), /* string */
			shift(194), /* { */
			nil,        /* } */
			shift(195), /* ident */
		},
	},
	actionRow{ // S181
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(94), /* or, reduce: Factor */
			reduce(94), /* and, reduce: Factor */
			reduce(94), /* <, reduce: Factor */
			reduce(94), /* <=, reduce: Factor */
			reduce(94), /* >, reduce: Factor */
			reduce(94), /* >=, reduce: Factor */
			reduce(94), /* ==, reduce: Factor */
			reduce(94), /* ~=, reduce: Factor */
			reduce(94), /* |, reduce: Factor */
			reduce(94), /* ~, reduce: Factor */
			reduce(94), /* &, reduce: Factor */
			reduce(94), /* .., reduce: Factor */
			reduce(94), /* <<, reduce: Factor */
			reduce(94), /* >>, reduce: Factor */
			reduce(94), /* +, reduce: Factor */
			reduce(94), /* -, reduce: Factor */
			reduce(94), /* *, reduce: Factor */
			reduce(94), /* /, reduce: Factor */
			reduce(94), /* %, reduce: Factor */
			reduce(94), /* //, reduce: Factor */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			reduce(94), /* ), reduce: Factor */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S182
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(95), /* or, reduce: Power */
			reduce(95), /* and, reduce: Power */
			reduce(95), /* <, reduce: Power */
			reduce(95), /* <=, reduce: Power */
			reduce(95), /* >, reduce: Power */
			reduce(95), /* >=, reduce: Power */
			reduce(95), /* ==, reduce: Power */
			reduce(95), /* ~=, reduce: Power */
			reduce(95), /* |, reduce: Power */
			reduce(95), /* ~, reduce: Power */
			reduce(95), /* &, reduce: Power */
			reduce(95), /* .., reduce: Power */
			reduce(95), /* <<, reduce: Power */
			reduce(95), /* >>, reduce: Power */
			reduce(95), /* +, reduce: Power */
			reduce(95), /* -, reduce: Power */
			reduce(95), /* *, reduce: Power */
			reduce(95), /* /, reduce: Power */
			reduce(95), /* %, reduce: Power */
			reduce(95), /* //, reduce: Power */
			nil,        /* not */
			nil,        /* # */
			shift(506), /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			reduce(95), /* ), reduce: Power */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S183
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			shift(507),  /* . */
			shift(508),  /* : */
			reduce(114), /* or, reduce: Atom */
			reduce(114), /* and, reduce: Atom */
			reduce(114), /* <, reduce: Atom */
			reduce(114), /* <=, reduce: Atom */
			reduce(114), /* >, reduce: Atom */
			reduce(114), /* >=, reduce: Atom */
			reduce(114), /* ==, reduce: Atom */
			reduce(114), /* ~=, reduce: Atom */
			reduce(114), /* |, reduce: Atom */
			reduce(114), /* ~, reduce: Atom */
			reduce(114), /* &, reduce: Atom */
			reduce(114), /* .., reduce: Atom */
			reduce(114), /* <<, reduce: Atom */
			reduce(114), /* >>, reduce: Atom */
			reduce(114), /* +, reduce: Atom */
			reduce(114), /* -, reduce: Atom */
			reduce(114), /* *, reduce: Atom */
			reduce(114), /* /, reduce: Atom */
			reduce(114), /* %, reduce: Atom */
			reduce(114), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(114), /* ^, reduce: Atom */
			shift(509),  /* [ */
			nil,         /* ] */
			shift(510),  /* ( */
			reduce(114), /* ), reduce: Atom */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			shift(512),  /* string */
			shift(514),  /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S184
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(168), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(184), /* ( */
			nil,        /* ) */
			shift(185), /* nil */
			shift(186), /* true */
			shift(187), /* false */
			shift(188), /* ... */
			shift(189), /* numdec */
			shift(190), /* numhex */
			shift(191), /* string */
			shift(194), /* { */
			nil,        /* } */
			shift(195), /* ident */
		},
	},
	actionRow{ // S185
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(105), /* or, reduce: Atom */
			reduce(105), /* and, reduce: Atom */
			reduce(105), /* <, reduce: Atom */
			reduce(105), /* <=, reduce: Atom */
			reduce(105), /* >, reduce: Atom */
			reduce(105), /* >=, reduce: Atom */
			reduce(105), /* ==, reduce: Atom */
			reduce(105), /* ~=, reduce: Atom */
			reduce(105), /* |, reduce: Atom */
			reduce(105), /* ~, reduce: Atom */
			reduce(105), /* &, reduce: Atom */
			reduce(105), /* .., reduce: Atom */
			reduce(105), /* <<, reduce: Atom */
			reduce(105), /* >>, reduce: Atom */
			reduce(105), /* +, reduce: Atom */
			reduce(105), /* -, reduce: Atom */
			reduce(105), /* *, reduce: Atom */
			reduce(105), /* /, reduce: Atom */
			reduce(105), /* %, reduce: Atom */
			reduce(105), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(105), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(105), /* ), reduce: Atom */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S186
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(106), /* or, reduce: Atom */
			reduce(106), /* and, reduce: Atom */
			reduce(106), /* <, reduce: Atom */
			reduce(106), /* <=, reduce: Atom */
			reduce(106), /* >, reduce: Atom */
			reduce(106), /* >=, reduce: Atom */
			reduce(106), /* ==, reduce: Atom */
			reduce(106), /* ~=, reduce: Atom */
			reduce(106), /* |, reduce: Atom */
			reduce(106), /* ~, reduce: Atom */
			reduce(106), /* &, reduce: Atom */
			reduce(106), /* .., reduce: Atom */
			reduce(106), /* <<, reduce: Atom */
			reduce(106), /* >>, reduce: Atom */
			reduce(106), /* +, reduce: Atom */
			reduce(106), /* -, reduce: Atom */
			reduce(106), /* *, reduce: Atom */
			reduce(106), /* /, reduce: Atom */
			reduce(106), /* %, reduce: Atom */
			reduce(106), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(106), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(106), /* ), reduce: Atom */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S187
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(107), /* or, reduce: Atom */
			reduce(107), /* and, reduce: Atom */
			reduce(107), /* <, reduce: Atom */
			reduce(107), /* <=, reduce: Atom */
			reduce(107), /* >, reduce: Atom */
			reduce(107), /* >=, reduce: Atom */
			reduce(107), /* ==, reduce: Atom */
			reduce(107), /* ~=, reduce: Atom */
			reduce(107), /* |, reduce: Atom */
			reduce(107), /* ~, reduce: Atom */
			reduce(107), /* &, reduce: Atom */
			reduce(107), /* .., reduce: Atom */
			reduce(107), /* <<, reduce: Atom */
			reduce(107), /* >>, reduce: Atom */
			reduce(107), /* +, reduce: Atom */
			reduce(107), /* -, reduce: Atom */
			reduce(107), /* *, reduce: Atom */
			reduce(107), /* /, reduce: Atom */
			reduce(107), /* %, reduce: Atom */
			reduce(107), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(107), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(107), /* ), reduce: Atom */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S188
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(108), /* or, reduce: Atom */
			reduce(108), /* and, reduce: Atom */
			reduce(108), /* <, reduce: Atom */
			reduce(108), /* <=, reduce: Atom */
			reduce(108), /* >, reduce: Atom */
			reduce(108), /* >=, reduce: Atom */
			reduce(108), /* ==, reduce: Atom */
			reduce(108), /* ~=, reduce: Atom */
			reduce(108), /* |, reduce: Atom */
			reduce(108), /* ~, reduce: Atom */
			reduce(108), /* &, reduce: Atom */
			reduce(108), /* .., reduce: Atom */
			reduce(108), /* <<, reduce: Atom */
			reduce(108), /* >>, reduce: Atom */
			reduce(108), /* +, reduce: Atom */
			reduce(108), /* -, reduce: Atom */
			reduce(108), /* *, reduce: Atom */
			reduce(108), /* /, reduce: Atom */
			reduce(108), /* %, reduce: Atom */
			reduce(108), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(108), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(108), /* ), reduce: Atom */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S189
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(109), /* or, reduce: Atom */
			reduce(109), /* and, reduce: Atom */
			reduce(109), /* <, reduce: Atom */
			reduce(109), /* <=, reduce: Atom */
			reduce(109), /* >, reduce: Atom */
			reduce(109), /* >=, reduce: Atom */
			reduce(109), /* ==, reduce: Atom */
			reduce(109), /* ~=, reduce: Atom */
			reduce(109), /* |, reduce: Atom */
			reduce(109), /* ~, reduce: Atom */
			reduce(109), /* &, reduce: Atom */
			reduce(109), /* .., reduce: Atom */
			reduce(109), /* <<, reduce: Atom */
			reduce(109), /* >>, reduce: Atom */
			reduce(109), /* +, reduce: Atom */
			reduce(109), /* -, reduce: Atom */
			reduce(109), /* *, reduce: Atom */
			reduce(109), /* /, reduce: Atom */
			reduce(109), /* %, reduce: Atom */
			reduce(109), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(109), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(109), /* ), reduce: Atom */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S190
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(110), /* or, reduce: Atom */
			reduce(110), /* and, reduce: Atom */
			reduce(110), /* <, reduce: Atom */
			reduce(110), /* <=, reduce: Atom */
			reduce(110), /* >, reduce: Atom */
			reduce(110), /* >=, reduce: Atom */
			reduce(110), /* ==, reduce: Atom */
			reduce(110), /* ~=, reduce: Atom */
			reduce(110), /* |, reduce: Atom */
			reduce(110), /* ~, reduce: Atom */
			reduce(110), /* &, reduce: Atom */
			reduce(110), /* .., reduce: Atom */
			reduce(110), /* <<, reduce: Atom */
			reduce(110), /* >>, reduce: Atom */
			reduce(110), /* +, reduce: Atom */
			reduce(110), /* -, reduce: Atom */
			reduce(110), /* *, reduce: Atom */
			reduce(110), /* /, reduce: Atom */
			reduce(110), /* %, reduce: Atom */
			reduce(110), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(110), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(110), /* ), reduce: Atom */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S191
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(111), /* or, reduce: Atom */
			reduce(111), /* and, reduce: Atom */
			reduce(111), /* <, reduce: Atom */
			reduce(111), /* <=, reduce: Atom */
			reduce(111), /* >, reduce: Atom */
			reduce(111), /* >=, reduce: Atom */
			reduce(111), /* ==, reduce: Atom */
			reduce(111), /* ~=, reduce: Atom */
			reduce(111), /* |, reduce: Atom */
			reduce(111), /* ~, reduce: Atom */
			reduce(111), /* &, reduce: Atom */
			reduce(111), /* .., reduce: Atom */
			reduce(111), /* <<, reduce: Atom */
			reduce(111), /* >>, reduce: Atom */
			reduce(111), /* +, reduce: Atom */
			reduce(111), /* -, reduce: Atom */
			reduce(111), /* *, reduce: Atom */
			reduce(111), /* /, reduce: Atom */
			reduce(111), /* %, reduce: Atom */
			reduce(111), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(111), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(111), /* ), reduce: Atom */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S192
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(112), /* or, reduce: Atom */
			reduce(112), /* and, reduce: Atom */
			reduce(112), /* <, reduce: Atom */
			reduce(112), /* <=, reduce: Atom */
			reduce(112), /* >, reduce: Atom */
			reduce(112), /* >=, reduce: Atom */
			reduce(112), /* ==, reduce: Atom */
			reduce(112), /* ~=, reduce: Atom */
			reduce(112), /* |, reduce: Atom */
			reduce(112), /* ~, reduce: Atom */
			reduce(112), /* &, reduce: Atom */
			reduce(112), /* .., reduce: Atom */
			reduce(112), /* <<, reduce: Atom */
			reduce(112), /* >>, reduce: Atom */
			reduce(112), /* +, reduce: Atom */
			reduce(112), /* -, reduce: Atom */
			reduce(112), /* *, reduce: Atom */
			reduce(112), /* /, reduce: Atom */
			reduce(112), /* %, reduce: Atom */
			reduce(112), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(112), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(112), /* ), reduce: Atom */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S193
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(113), /* or, reduce: Atom */
			reduce(113), /* and, reduce: Atom */
			reduce(113), /* <, reduce: Atom */
			reduce(113), /* <=, reduce: Atom */
			reduce(113), /* >, reduce: Atom */
			reduce(113), /* >=, reduce: Atom */
			reduce(113), /* ==, reduce: Atom */
			reduce(113), /* ~=, reduce: Atom */
			reduce(113), /* |, reduce: Atom */
			reduce(113), /* ~, reduce: Atom */
			reduce(113), /* &, reduce: Atom */
			reduce(113), /* .., reduce: Atom */
			reduce(113), /* <<, reduce: Atom */
			reduce(113), /* >>, reduce: Atom */
			reduce(113), /* +, reduce: Atom */
			reduce(113), /* -, reduce: Atom */
			reduce(113), /* *, reduce: Atom */
			reduce(113), /* /, reduce: Atom */
			reduce(113), /* %, reduce: Atom */
			reduce(113), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(113), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(113), /* ), reduce: Atom */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S194
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			shift(254), /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(268), /* ident */
		},
	},
	actionRow{ // S195
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(134), /* ., reduce: Name */
			reduce(134), /* :, reduce: Name */
			reduce(134), /* or, reduce: Name */
			reduce(134), /* and, reduce: Name */
			reduce(134), /* <, reduce: Name */
			reduce(134), /* <=, reduce: Name */
			reduce(134), /* >, reduce: Name */
			reduce(134), /* >=, reduce: Name */
			reduce(134), /* ==, reduce: Name */
			reduce(134), /* ~=, reduce: Name */
			reduce(134), /* |, reduce: Name */
			reduce(134), /* ~, reduce: Name */
			reduce(134), /* &, reduce: Name */
			reduce(134), /* .., reduce: Name */
			reduce(134), /* <<, reduce: Name */
			reduce(134), /* >>, reduce: Name */
			reduce(134), /* +, reduce: Name */
			reduce(134), /* -, reduce: Name */
			reduce(134), /* *, reduce: Name */
			reduce(134), /* /, reduce: Name */
			reduce(134), /* %, reduce: Name */
			reduce(134), /* //, reduce: Name */
			nil,         /* not */
			nil,         /* # */
			reduce(134), /* ^, reduce: Name */
			reduce(134), /* [, reduce: Name */
			nil,         /* ] */
			reduce(134), /* (, reduce: Name */
			reduce(134), /* ), reduce: Name */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(134), /* string, reduce: Name */
			reduce(134), /* {, reduce: Name */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S196
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			reduce(1), /* $, reduce: Chunk */
			nil,       /* return */
			nil,       /* ; */
			nil,       /* empty */
			nil,       /* = */
			nil,       /* break */
			nil,       /* goto */
			nil,       /* do */
			nil,       /* end */
			nil,       /* while */
			nil,       /* repeat */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			nil,       /* if */
			nil,       /* , */
			nil,       /* for */
			nil,       /* in */
			nil,       /* function */
			nil,       /* local */
			nil,       /* :: */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			nil,       /* ( */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			nil,       /* ident */
		},
	},
	actionRow{ // S197
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* return */
			nil,       /* ; */
			nil,       /* empty */
			nil,       /* = */
			nil,       /* break */
			nil,       /* goto */
			nil,       /* do */
			nil,       /* end */
			nil,       /* while */
			nil,       /* repeat */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			nil,       /* if */
			nil,       /* , */
			nil,       /* for */
			nil,       /* in */
			shift(41), /* function */
			nil,       /* local */
			nil,       /* :: */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			shift(48), /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			shift(52), /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			shift(56), /* not */
			shift(57), /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			shift(61), /* ( */
			nil,       /* ) */
			shift(62), /* nil */
			shift(63), /* true */
			shift(64), /* false */
			shift(65), /* ... */
			shift(66), /* numdec */
			shift(67), /* numhex */
			shift(68), /* string */
			shift(71), /* { */
			nil,       /* } */
			shift(72), /* ident */
		},
	},
	actionRow{ // S198
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* return */
			nil,       /* ; */
			nil,       /* empty */
			nil,       /* = */
			nil,       /* break */
			nil,       /* goto */
			nil,       /* do */
			nil,       /* end */
			nil,       /* while */
			nil,       /* repeat */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			nil,       /* if */
			nil,       /* , */
			nil,       /* for */
			nil,       /* in */
			shift(41), /* function */
			nil,       /* local */
			nil,       /* :: */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			shift(48), /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			shift(52), /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			shift(56), /* not */
			shift(57), /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			shift(61), /* ( */
			nil,       /* ) */
			shift(62), /* nil */
			shift(63), /* true */
			shift(64), /* false */
			shift(65), /* ... */
			shift(66), /* numdec */
			shift(67), /* numhex */
			shift(68), /* string */
			shift(71), /* { */
			nil,       /* } */
			shift(72), /* ident */
		},
	},
	actionRow{ // S199
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(119), /* $, reduce: FunctionDef */
			nil,         /* return */
			reduce(119), /* ;, reduce: FunctionDef */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(119), /* ,, reduce: FunctionDef */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(119), /* or, reduce: FunctionDef */
			reduce(119), /* and, reduce: FunctionDef */
			reduce(119), /* <, reduce: FunctionDef */
			reduce(119), /* <=, reduce: FunctionDef */
			reduce(119), /* >, reduce: FunctionDef */
			reduce(119), /* >=, reduce: FunctionDef */
			reduce(119), /* ==, reduce: FunctionDef */
			reduce(119), /* ~=, reduce: FunctionDef */
			reduce(119), /* |, reduce: FunctionDef */
			reduce(119), /* ~, reduce: FunctionDef */
			reduce(119), /* &, reduce: FunctionDef */
			reduce(119), /* .., reduce: FunctionDef */
			reduce(119), /* <<, reduce: FunctionDef */
			reduce(119), /* >>, reduce: FunctionDef */
			reduce(119), /* +, reduce: FunctionDef */
			reduce(119), /* -, reduce: FunctionDef */
			reduce(119), /* *, reduce: FunctionDef */
			reduce(119), /* /, reduce: FunctionDef */
			reduce(119), /* %, reduce: FunctionDef */
			reduce(119), /* //, reduce: FunctionDef */
			nil,         /* not */
			nil,         /* # */
			reduce(119), /* ^, reduce: FunctionDef */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S200
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(123), /* ), reduce: ParList */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			shift(521),  /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			shift(523),  /* ident */
		},
	},
	actionRow{ // S201
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* return */
			nil,       /* ; */
			nil,       /* empty */
			nil,       /* = */
			nil,       /* break */
			nil,       /* goto */
			nil,       /* do */
			nil,       /* end */
			nil,       /* while */
			nil,       /* repeat */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			nil,       /* if */
			nil,       /* , */
			nil,       /* for */
			nil,       /* in */
			shift(41), /* function */
			nil,       /* local */
			nil,       /* :: */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			shift(48), /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			shift(52), /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			shift(56), /* not */
			shift(57), /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			shift(61), /* ( */
			nil,       /* ) */
			shift(62), /* nil */
			shift(63), /* true */
			shift(64), /* false */
			shift(65), /* ... */
			shift(66), /* numdec */
			shift(67), /* numhex */
			shift(68), /* string */
			shift(71), /* { */
			nil,       /* } */
			shift(72), /* ident */
		},
	},
	actionRow{ // S202
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* return */
			nil,       /* ; */
			nil,       /* empty */
			nil,       /* = */
			nil,       /* break */
			nil,       /* goto */
			nil,       /* do */
			nil,       /* end */
			nil,       /* while */
			nil,       /* repeat */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			nil,       /* if */
			nil,       /* , */
			nil,       /* for */
			nil,       /* in */
			shift(41), /* function */
			nil,       /* local */
			nil,       /* :: */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			shift(48), /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			shift(52), /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			shift(56), /* not */
			shift(57), /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			shift(61), /* ( */
			nil,       /* ) */
			shift(62), /* nil */
			shift(63), /* true */
			shift(64), /* false */
			shift(65), /* ... */
			shift(66), /* numdec */
			shift(67), /* numhex */
			shift(68), /* string */
			shift(71), /* { */
			nil,       /* } */
			shift(72), /* ident */
		},
	},
	actionRow{ // S203
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			reduce(59), /* function, reduce: CompOp */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			reduce(59), /* ~, reduce: CompOp */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			reduce(59), /* -, reduce: CompOp */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			reduce(59), /* not, reduce: CompOp */
			reduce(59), /* #, reduce: CompOp */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(59), /* (, reduce: CompOp */
			nil,        /* ) */
			reduce(59), /* nil, reduce: CompOp */
			reduce(59), /* true, reduce: CompOp */
			reduce(59), /* false, reduce: CompOp */
			reduce(59), /* ..., reduce: CompOp */
			reduce(59), /* numdec, reduce: CompOp */
			reduce(59), /* numhex, reduce: CompOp */
			reduce(59), /* string, reduce: CompOp */
			reduce(59), /* {, reduce: CompOp */
			nil,        /* } */
			reduce(59), /* ident, reduce: CompOp */
		},
	},
	actionRow{ // S204
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			reduce(60), /* function, reduce: CompOp */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			reduce(60), /* ~, reduce: CompOp */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			reduce(60), /* -, reduce: CompOp */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			reduce(60), /* not, reduce: CompOp */
			reduce(60), /* #, reduce: CompOp */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(60), /* (, reduce: CompOp */
			nil,        /* ) */
			reduce(60), /* nil, reduce: CompOp */
			reduce(60), /* true, reduce: CompOp */
			reduce(60), /* false, reduce: CompOp */
			reduce(60), /* ..., reduce: CompOp */
			reduce(60), /* numdec, reduce: CompOp */
			reduce(60), /* numhex, reduce: CompOp */
			reduce(60), /* string, reduce: CompOp */
			reduce(60), /* {, reduce: CompOp */
			nil,        /* } */
			reduce(60), /* ident, reduce: CompOp */
		},
	},
	actionRow{ // S205
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			reduce(61), /* function, reduce: CompOp */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			reduce(61), /* ~, reduce: CompOp */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			reduce(61), /* -, reduce: CompOp */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			reduce(61), /* not, reduce: CompOp */
			reduce(61), /* #, reduce: CompOp */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(61), /* (, reduce: CompOp */
			nil,        /* ) */
			reduce(61), /* nil, reduce: CompOp */
			reduce(61), /* true, reduce: CompOp */
			reduce(61), /* false, reduce: CompOp */
			reduce(61), /* ..., reduce: CompOp */
			reduce(61), /* numdec, reduce: CompOp */
			reduce(61), /* numhex, reduce: CompOp */
			reduce(61), /* string, reduce: CompOp */
			reduce(61), /* {, reduce: CompOp */
			nil,        /* } */
			reduce(61), /* ident, reduce: CompOp */
		},
	},
	actionRow{ // S206
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			reduce(62), /* function, reduce: CompOp */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			reduce(62), /* ~, reduce: CompOp */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			reduce(62), /* -, reduce: CompOp */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			reduce(62), /* not, reduce: CompOp */
			reduce(62), /* #, reduce: CompOp */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(62), /* (, reduce: CompOp */
			nil,        /* ) */
			reduce(62), /* nil, reduce: CompOp */
			reduce(62), /* true, reduce: CompOp */
			reduce(62), /* false, reduce: CompOp */
			reduce(62), /* ..., reduce: CompOp */
			reduce(62), /* numdec, reduce: CompOp */
			reduce(62), /* numhex, reduce: CompOp */
			reduce(62), /* string, reduce: CompOp */
			reduce(62), /* {, reduce: CompOp */
			nil,        /* } */
			reduce(62), /* ident, reduce: CompOp */
		},
	},
	actionRow{ // S207
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			reduce(63), /* function, reduce: CompOp */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			reduce(63), /* ~, reduce: CompOp */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			reduce(63), /* -, reduce: CompOp */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			reduce(63), /* not, reduce: CompOp */
			reduce(63), /* #, reduce: CompOp */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(63), /* (, reduce: CompOp */
			nil,        /* ) */
			reduce(63), /* nil, reduce: CompOp */
			reduce(63), /* true, reduce: CompOp */
			reduce(63), /* false, reduce: CompOp */
			reduce(63), /* ..., reduce: CompOp */
			reduce(63), /* numdec, reduce: CompOp */
			reduce(63), /* numhex, reduce: CompOp */
			reduce(63), /* string, reduce: CompOp */
			reduce(63), /* {, reduce: CompOp */
			nil,        /* } */
			reduce(63), /* ident, reduce: CompOp */
		},
	},
	actionRow{ // S208
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			reduce(64), /* function, reduce: CompOp */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			reduce(64), /* ~, reduce: CompOp */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			reduce(64), /* -, reduce: CompOp */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			reduce(64), /* not, reduce: CompOp */
			reduce(64), /* #, reduce: CompOp */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(64), /* (, reduce: CompOp */
			nil,        /* ) */
			reduce(64), /* nil, reduce: CompOp */
			reduce(64), /* true, reduce: CompOp */
			reduce(64), /* false, reduce: CompOp */
			reduce(64), /* ..., reduce: CompOp */
			reduce(64), /* numdec, reduce: CompOp */
			reduce(64), /* numhex, reduce: CompOp */
			reduce(64), /* string, reduce: CompOp */
			reduce(64), /* {, reduce: CompOp */
			nil,        /* } */
			reduce(64), /* ident, reduce: CompOp */
		},
	},
	actionRow{ // S209
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* return */
			nil,       /* ; */
			nil,       /* empty */
			nil,       /* = */
			nil,       /* break */
			nil,       /* goto */
			nil,       /* do */
			nil,       /* end */
			nil,       /* while */
			nil,       /* repeat */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			nil,       /* if */
			nil,       /* , */
			nil,       /* for */
			nil,       /* in */
			shift(41), /* function */
			nil,       /* local */
			nil,       /* :: */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			shift(48), /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			shift(52), /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			shift(56), /* not */
			shift(57), /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			shift(61), /* ( */
			nil,       /* ) */
			shift(62), /* nil */
			shift(63), /* true */
			shift(64), /* false */
			shift(65), /* ... */
			shift(66), /* numdec */
			shift(67), /* numhex */
			shift(68), /* string */
			shift(71), /* { */
			nil,       /* } */
			shift(72), /* ident */
		},
	},
	actionRow{ // S210
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* return */
			nil,       /* ; */
			nil,       /* empty */
			nil,       /* = */
			nil,       /* break */
			nil,       /* goto */
			nil,       /* do */
			nil,       /* end */
			nil,       /* while */
			nil,       /* repeat */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			nil,       /* if */
			nil,       /* , */
			nil,       /* for */
			nil,       /* in */
			shift(41), /* function */
			nil,       /* local */
			nil,       /* :: */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			shift(48), /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			shift(52), /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			shift(56), /* not */
			shift(57), /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			shift(61), /* ( */
			nil,       /* ) */
			shift(62), /* nil */
			shift(63), /* true */
			shift(64), /* false */
			shift(65), /* ... */
			shift(66), /* numdec */
			shift(67), /* numhex */
			shift(68), /* string */
			shift(71), /* { */
			nil,       /* } */
			shift(72), /* ident */
		},
	},
	actionRow{ // S211
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* return */
			nil,       /* ; */
			nil,       /* empty */
			nil,       /* = */
			nil,       /* break */
			nil,       /* goto */
			nil,       /* do */
			nil,       /* end */
			nil,       /* while */
			nil,       /* repeat */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			nil,       /* if */
			nil,       /* , */
			nil,       /* for */
			nil,       /* in */
			shift(41), /* function */
			nil,       /* local */
			nil,       /* :: */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			shift(48), /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			shift(52), /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			shift(56), /* not */
			shift(57), /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			shift(61), /* ( */
			nil,       /* ) */
			shift(62), /* nil */
			shift(63), /* true */
			shift(64), /* false */
			shift(65), /* ... */
			shift(66), /* numdec */
			shift(67), /* numhex */
			shift(68), /* string */
			shift(71), /* { */
			nil,       /* } */
			shift(72), /* ident */
		},
	},
	actionRow{ // S212
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* return */
			nil,       /* ; */
			nil,       /* empty */
			nil,       /* = */
			nil,       /* break */
			nil,       /* goto */
			nil,       /* do */
			nil,       /* end */
			nil,       /* while */
			nil,       /* repeat */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			nil,       /* if */
			nil,       /* , */
			nil,       /* for */
			nil,       /* in */
			shift(41), /* function */
			nil,       /* local */
			nil,       /* :: */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			shift(48), /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			shift(52), /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			shift(56), /* not */
			shift(57), /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			shift(61), /* ( */
			nil,       /* ) */
			shift(62), /* nil */
			shift(63), /* true */
			shift(64), /* false */
			shift(65), /* ... */
			shift(66), /* numdec */
			shift(67), /* numhex */
			shift(68), /* string */
			shift(71), /* { */
			nil,       /* } */
			shift(72), /* ident */
		},
	},
	actionRow{ // S213
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* return */
			nil,       /* ; */
			nil,       /* empty */
			nil,       /* = */
			nil,       /* break */
			nil,       /* goto */
			nil,       /* do */
			nil,       /* end */
			nil,       /* while */
			nil,       /* repeat */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			nil,       /* if */
			nil,       /* , */
			nil,       /* for */
			nil,       /* in */
			shift(41), /* function */
			nil,       /* local */
			nil,       /* :: */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			shift(48), /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			shift(52), /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			shift(56), /* not */
			shift(57), /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			shift(61), /* ( */
			nil,       /* ) */
			shift(62), /* nil */
			shift(63), /* true */
			shift(64), /* false */
			shift(65), /* ... */
			shift(66), /* numdec */
			shift(67), /* numhex */
			shift(68), /* string */
			shift(71), /* { */
			nil,       /* } */
			shift(72), /* ident */
		},
	},
	actionRow{ // S214
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			reduce(75), /* function, reduce: ShiftOp */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			reduce(75), /* ~, reduce: ShiftOp */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			reduce(75), /* -, reduce: ShiftOp */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			reduce(75), /* not, reduce: ShiftOp */
			reduce(75), /* #, reduce: ShiftOp */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(75), /* (, reduce: ShiftOp */
			nil,        /* ) */
			reduce(75), /* nil, reduce: ShiftOp */
			reduce(75), /* true, reduce: ShiftOp */
			reduce(75), /* false, reduce: ShiftOp */
			reduce(75), /* ..., reduce: ShiftOp */
			reduce(75), /* numdec, reduce: ShiftOp */
			reduce(75), /* numhex, reduce: ShiftOp */
			reduce(75), /* string, reduce: ShiftOp */
			reduce(75), /* {, reduce: ShiftOp */
			nil,        /* } */
			reduce(75), /* ident, reduce: ShiftOp */
		},
	},
	actionRow{ // S215
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			reduce(76), /* function, reduce: ShiftOp */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			reduce(76), /* ~, reduce: ShiftOp */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			reduce(76), /* -, reduce: ShiftOp */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			reduce(76), /* not, reduce: ShiftOp */
			reduce(76), /* #, reduce: ShiftOp */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(76), /* (, reduce: ShiftOp */
			nil,        /* ) */
			reduce(76), /* nil, reduce: ShiftOp */
			reduce(76), /* true, reduce: ShiftOp */
			reduce(76), /* false, reduce: ShiftOp */
			reduce(76), /* ..., reduce: ShiftOp */
			reduce(76), /* numdec, reduce: ShiftOp */
			reduce(76), /* numhex, reduce: ShiftOp */
			reduce(76), /* string, reduce: ShiftOp */
			reduce(76), /* {, reduce: ShiftOp */
			nil,        /* } */
			reduce(76), /* ident, reduce: ShiftOp */
		},
	},
	actionRow{ // S216
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* return */
			nil,       /* ; */
			nil,       /* empty */
			nil,       /* = */
			nil,       /* break */
			nil,       /* goto */
			nil,       /* do */
			nil,       /* end */
			nil,       /* while */
			nil,       /* repeat */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			nil,       /* if */
			nil,       /* , */
			nil,       /* for */
			nil,       /* in */
			shift(41), /* function */
			nil,       /* local */
			nil,       /* :: */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			shift(48), /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			shift(52), /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			shift(56), /* not */
			shift(57), /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			shift(61), /* ( */
			nil,       /* ) */
			shift(62), /* nil */
			shift(63), /* true */
			shift(64), /* false */
			shift(65), /* ... */
			shift(66), /* numdec */
			shift(67), /* numhex */
			shift(68), /* string */
			shift(71), /* { */
			nil,       /* } */
			shift(72), /* ident */
		},
	},
	actionRow{ // S217
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			reduce(79), /* function, reduce: SumOp */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			reduce(79), /* ~, reduce: SumOp */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			reduce(79), /* -, reduce: SumOp */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			reduce(79), /* not, reduce: SumOp */
			reduce(79), /* #, reduce: SumOp */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(79), /* (, reduce: SumOp */
			nil,        /* ) */
			reduce(79), /* nil, reduce: SumOp */
			reduce(79), /* true, reduce: SumOp */
			reduce(79), /* false, reduce: SumOp */
			reduce(79), /* ..., reduce: SumOp */
			reduce(79), /* numdec, reduce: SumOp */
			reduce(79), /* numhex, reduce: SumOp */
			reduce(79), /* string, reduce: SumOp */
			reduce(79), /* {, reduce: SumOp */
			nil,        /* } */
			reduce(79), /* ident, reduce: SumOp */
		},
	},
	actionRow{ // S218
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			reduce(80), /* function, reduce: SumOp */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			reduce(80), /* ~, reduce: SumOp */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			reduce(80), /* -, reduce: SumOp */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			reduce(80), /* not, reduce: SumOp */
			reduce(80), /* #, reduce: SumOp */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(80), /* (, reduce: SumOp */
			nil,        /* ) */
			reduce(80), /* nil, reduce: SumOp */
			reduce(80), /* true, reduce: SumOp */
			reduce(80), /* false, reduce: SumOp */
			reduce(80), /* ..., reduce: SumOp */
			reduce(80), /* numdec, reduce: SumOp */
			reduce(80), /* numhex, reduce: SumOp */
			reduce(80), /* string, reduce: SumOp */
			reduce(80), /* {, reduce: SumOp */
			nil,        /* } */
			reduce(80), /* ident, reduce: SumOp */
		},
	},
	actionRow{ // S219
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* return */
			nil,       /* ; */
			nil,       /* empty */
			nil,       /* = */
			nil,       /* break */
			nil,       /* goto */
			nil,       /* do */
			nil,       /* end */
			nil,       /* while */
			nil,       /* repeat */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			nil,       /* if */
			nil,       /* , */
			nil,       /* for */
			nil,       /* in */
			shift(41), /* function */
			nil,       /* local */
			nil,       /* :: */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			shift(48), /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			shift(52), /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			shift(56), /* not */
			shift(57), /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			shift(61), /* ( */
			nil,       /* ) */
			shift(62), /* nil */
			shift(63), /* true */
			shift(64), /* false */
			shift(65), /* ... */
			shift(66), /* numdec */
			shift(67), /* numhex */
			shift(68), /* string */
			shift(71), /* { */
			nil,       /* } */
			shift(72), /* ident */
		},
	},
	actionRow{ // S220
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			reduce(83), /* function, reduce: TermOp */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			reduce(83), /* ~, reduce: TermOp */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			reduce(83), /* -, reduce: TermOp */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			reduce(83), /* not, reduce: TermOp */
			reduce(83), /* #, reduce: TermOp */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(83), /* (, reduce: TermOp */
			nil,        /* ) */
			reduce(83), /* nil, reduce: TermOp */
			reduce(83), /* true, reduce: TermOp */
			reduce(83), /* false, reduce: TermOp */
			reduce(83), /* ..., reduce: TermOp */
			reduce(83), /* numdec, reduce: TermOp */
			reduce(83), /* numhex, reduce: TermOp */
			reduce(83), /* string, reduce: TermOp */
			reduce(83), /* {, reduce: TermOp */
			nil,        /* } */
			reduce(83), /* ident, reduce: TermOp */
		},
	},
	actionRow{ // S221
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			reduce(84), /* function, reduce: TermOp */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			reduce(84), /* ~, reduce: TermOp */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			reduce(84), /* -, reduce: TermOp */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			reduce(84), /* not, reduce: TermOp */
			reduce(84), /* #, reduce: TermOp */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(84), /* (, reduce: TermOp */
			nil,        /* ) */
			reduce(84), /* nil, reduce: TermOp */
			reduce(84), /* true, reduce: TermOp */
			reduce(84), /* false, reduce: TermOp */
			reduce(84), /* ..., reduce: TermOp */
			reduce(84), /* numdec, reduce: TermOp */
			reduce(84), /* numhex, reduce: TermOp */
			reduce(84), /* string, reduce: TermOp */
			reduce(84), /* {, reduce: TermOp */
			nil,        /* } */
			reduce(84), /* ident, reduce: TermOp */
		},
	},
	actionRow{ // S222
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			reduce(85), /* function, reduce: TermOp */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			reduce(85), /* ~, reduce: TermOp */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			reduce(85), /* -, reduce: TermOp */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			reduce(85), /* not, reduce: TermOp */
			reduce(85), /* #, reduce: TermOp */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(85), /* (, reduce: TermOp */
			nil,        /* ) */
			reduce(85), /* nil, reduce: TermOp */
			reduce(85), /* true, reduce: TermOp */
			reduce(85), /* false, reduce: TermOp */
			reduce(85), /* ..., reduce: TermOp */
			reduce(85), /* numdec, reduce: TermOp */
			reduce(85), /* numhex, reduce: TermOp */
			reduce(85), /* string, reduce: TermOp */
			reduce(85), /* {, reduce: TermOp */
			nil,        /* } */
			reduce(85), /* ident, reduce: TermOp */
		},
	},
	actionRow{ // S223
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			reduce(86), /* function, reduce: TermOp */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			reduce(86), /* ~, reduce: TermOp */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			reduce(86), /* -, reduce: TermOp */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			reduce(86), /* not, reduce: TermOp */
			reduce(86), /* #, reduce: TermOp */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(86), /* (, reduce: TermOp */
			nil,        /* ) */
			reduce(86), /* nil, reduce: TermOp */
			reduce(86), /* true, reduce: TermOp */
			reduce(86), /* false, reduce: TermOp */
			reduce(86), /* ..., reduce: TermOp */
			reduce(86), /* numdec, reduce: TermOp */
			reduce(86), /* numhex, reduce: TermOp */
			reduce(86), /* string, reduce: TermOp */
			reduce(86), /* {, reduce: TermOp */
			nil,        /* } */
			reduce(86), /* ident, reduce: TermOp */
		},
	},
	actionRow{ // S224
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(93), /* $, reduce: Factor */
			nil,        /* return */
			reduce(93), /* ;, reduce: Factor */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(93), /* ,, reduce: Factor */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(93), /* or, reduce: Factor */
			reduce(93), /* and, reduce: Factor */
			reduce(93), /* <, reduce: Factor */
			reduce(93), /* <=, reduce: Factor */
			reduce(93), /* >, reduce: Factor */
			reduce(93), /* >=, reduce: Factor */
			reduce(93), /* ==, reduce: Factor */
			reduce(93), /* ~=, reduce: Factor */
			reduce(93), /* |, reduce: Factor */
			reduce(93), /* ~, reduce: Factor */
			reduce(93), /* &, reduce: Factor */
			reduce(93), /* .., reduce: Factor */
			reduce(93), /* <<, reduce: Factor */
			reduce(93), /* >>, reduce: Factor */
			reduce(93), /* +, reduce: Factor */
			reduce(93), /* -, reduce: Factor */
			reduce(93), /* *, reduce: Factor */
			reduce(93), /* /, reduce: Factor */
			reduce(93), /* %, reduce: Factor */
			reduce(93), /* //, reduce: Factor */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S225
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* return */
			nil,       /* ; */
			nil,       /* empty */
			nil,       /* = */
			nil,       /* break */
			nil,       /* goto */
			nil,       /* do */
			nil,       /* end */
			nil,       /* while */
			nil,       /* repeat */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			nil,       /* if */
			nil,       /* , */
			nil,       /* for */
			nil,       /* in */
			shift(41), /* function */
			nil,       /* local */
			nil,       /* :: */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			shift(48), /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			shift(52), /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			shift(56), /* not */
			shift(57), /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			shift(61), /* ( */
			nil,       /* ) */
			shift(62), /* nil */
			shift(63), /* true */
			shift(64), /* false */
			shift(65), /* ... */
			shift(66), /* numdec */
			shift(67), /* numhex */
			shift(68), /* string */
			shift(71), /* { */
			nil,       /* } */
			shift(72), /* ident */
		},
	},
	actionRow{ // S226
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* return */
			nil,       /* ; */
			nil,       /* empty */
			nil,       /* = */
			nil,       /* break */
			nil,       /* goto */
			nil,       /* do */
			nil,       /* end */
			nil,       /* while */
			nil,       /* repeat */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			nil,       /* if */
			nil,       /* , */
			nil,       /* for */
			nil,       /* in */
			nil,       /* function */
			nil,       /* local */
			nil,       /* :: */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			nil,       /* ( */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			shift(72), /* ident */
		},
	},
	actionRow{ // S227
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(426), /* ident */
		},
	},
	actionRow{ // S228
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(430), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(446), /* ( */
			nil,        /* ) */
			shift(447), /* nil */
			shift(448), /* true */
			shift(449), /* false */
			shift(450), /* ... */
			shift(451), /* numdec */
			shift(452), /* numhex */
			shift(453), /* string */
			shift(456), /* { */
			nil,        /* } */
			shift(457), /* ident */
		},
	},
	actionRow{ // S229
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(462), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(478), /* ( */
			shift(538), /* ) */
			shift(480), /* nil */
			shift(481), /* true */
			shift(482), /* false */
			shift(483), /* ... */
			shift(484), /* numdec */
			shift(485), /* numhex */
			shift(486), /* string */
			shift(489), /* { */
			nil,        /* } */
			shift(490), /* ident */
		},
	},
	actionRow{ // S230
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(103), /* $, reduce: FunctionCall */
			nil,         /* return */
			reduce(103), /* ;, reduce: FunctionCall */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(103), /* ,, reduce: FunctionCall */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(103), /* ., reduce: FunctionCall */
			reduce(103), /* :, reduce: FunctionCall */
			reduce(103), /* or, reduce: FunctionCall */
			reduce(103), /* and, reduce: FunctionCall */
			reduce(103), /* <, reduce: FunctionCall */
			reduce(103), /* <=, reduce: FunctionCall */
			reduce(103), /* >, reduce: FunctionCall */
			reduce(103), /* >=, reduce: FunctionCall */
			reduce(103), /* ==, reduce: FunctionCall */
			reduce(103), /* ~=, reduce: FunctionCall */
			reduce(103), /* |, reduce: FunctionCall */
			reduce(103), /* ~, reduce: FunctionCall */
			reduce(103), /* &, reduce: FunctionCall */
			reduce(103), /* .., reduce: FunctionCall */
			reduce(103), /* <<, reduce: FunctionCall */
			reduce(103), /* >>, reduce: FunctionCall */
			reduce(103), /* +, reduce: FunctionCall */
			reduce(103), /* -, reduce: FunctionCall */
			reduce(103), /* *, reduce: FunctionCall */
			reduce(103), /* /, reduce: FunctionCall */
			reduce(103), /* %, reduce: FunctionCall */
			reduce(103), /* //, reduce: FunctionCall */
			nil,         /* not */
			nil,         /* # */
			reduce(103), /* ^, reduce: FunctionCall */
			reduce(103), /* [, reduce: FunctionCall */
			nil,         /* ] */
			reduce(103), /* (, reduce: FunctionCall */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(103), /* string, reduce: FunctionCall */
			reduce(103), /* {, reduce: FunctionCall */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S231
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(118), /* $, reduce: Args */
			nil,         /* return */
			reduce(118), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(118), /* ,, reduce: Args */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(118), /* ., reduce: Args */
			reduce(118), /* :, reduce: Args */
			reduce(118), /* or, reduce: Args */
			reduce(118), /* and, reduce: Args */
			reduce(118), /* <, reduce: Args */
			reduce(118), /* <=, reduce: Args */
			reduce(118), /* >, reduce: Args */
			reduce(118), /* >=, reduce: Args */
			reduce(118), /* ==, reduce: Args */
			reduce(118), /* ~=, reduce: Args */
			reduce(118), /* |, reduce: Args */
			reduce(118), /* ~, reduce: Args */
			reduce(118), /* &, reduce: Args */
			reduce(118), /* .., reduce: Args */
			reduce(118), /* <<, reduce: Args */
			reduce(118), /* >>, reduce: Args */
			reduce(118), /* +, reduce: Args */
			reduce(118), /* -, reduce: Args */
			reduce(118), /* *, reduce: Args */
			reduce(118), /* /, reduce: Args */
			reduce(118), /* %, reduce: Args */
			reduce(118), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(118), /* ^, reduce: Args */
			reduce(118), /* [, reduce: Args */
			nil,         /* ] */
			reduce(118), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(118), /* string, reduce: Args */
			reduce(118), /* {, reduce: Args */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S232
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(117), /* $, reduce: Args */
			nil,         /* return */
			reduce(117), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(117), /* ,, reduce: Args */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(117), /* ., reduce: Args */
			reduce(117), /* :, reduce: Args */
			reduce(117), /* or, reduce: Args */
			reduce(117), /* and, reduce: Args */
			reduce(117), /* <, reduce: Args */
			reduce(117), /* <=, reduce: Args */
			reduce(117), /* >, reduce: Args */
			reduce(117), /* >=, reduce: Args */
			reduce(117), /* ==, reduce: Args */
			reduce(117), /* ~=, reduce: Args */
			reduce(117), /* |, reduce: Args */
			reduce(117), /* ~, reduce: Args */
			reduce(117), /* &, reduce: Args */
			reduce(117), /* .., reduce: Args */
			reduce(117), /* <<, reduce: Args */
			reduce(117), /* >>, reduce: Args */
			reduce(117), /* +, reduce: Args */
			reduce(117), /* -, reduce: Args */
			reduce(117), /* *, reduce: Args */
			reduce(117), /* /, reduce: Args */
			reduce(117), /* %, reduce: Args */
			reduce(117), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(117), /* ^, reduce: Args */
			reduce(117), /* [, reduce: Args */
			nil,         /* ] */
			reduce(117), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(117), /* string, reduce: Args */
			reduce(117), /* {, reduce: Args */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S233
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			shift(254), /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(268), /* ident */
		},
	},
	actionRow{ // S234
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			shift(492), /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			shift(540), /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S235
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(101), /* ;, reduce: PrefixExp */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(101), /* ,, reduce: PrefixExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(101), /* ., reduce: PrefixExp */
			reduce(101), /* :, reduce: PrefixExp */
			reduce(101), /* or, reduce: PrefixExp */
			reduce(101), /* and, reduce: PrefixExp */
			reduce(101), /* <, reduce: PrefixExp */
			reduce(101), /* <=, reduce: PrefixExp */
			reduce(101), /* >, reduce: PrefixExp */
			reduce(101), /* >=, reduce: PrefixExp */
			reduce(101), /* ==, reduce: PrefixExp */
			reduce(101), /* ~=, reduce: PrefixExp */
			reduce(101), /* |, reduce: PrefixExp */
			reduce(101), /* ~, reduce: PrefixExp */
			reduce(101), /* &, reduce: PrefixExp */
			reduce(101), /* .., reduce: PrefixExp */
			reduce(101), /* <<, reduce: PrefixExp */
			reduce(101), /* >>, reduce: PrefixExp */
			reduce(101), /* +, reduce: PrefixExp */
			reduce(101), /* -, reduce: PrefixExp */
			reduce(101), /* *, reduce: PrefixExp */
			reduce(101), /* /, reduce: PrefixExp */
			reduce(101), /* %, reduce: PrefixExp */
			reduce(101), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(101), /* ^, reduce: PrefixExp */
			reduce(101), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(101), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(101), /* string, reduce: PrefixExp */
			reduce(101), /* {, reduce: PrefixExp */
			reduce(101), /* }, reduce: PrefixExp */
			nil,         /* ident */
		},
	},
	actionRow{ // S236
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(97), /* ;, reduce: Var */
			nil,        /* empty */
			shift(541), /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(97), /* ,, reduce: Var */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			reduce(97), /* ., reduce: Var */
			reduce(97), /* :, reduce: Var */
			reduce(97), /* or, reduce: Var */
			reduce(97), /* and, reduce: Var */
			reduce(97), /* <, reduce: Var */
			reduce(97), /* <=, reduce: Var */
			reduce(97), /* >, reduce: Var */
			reduce(97), /* >=, reduce: Var */
			reduce(97), /* ==, reduce: Var */
			reduce(97), /* ~=, reduce: Var */
			reduce(97), /* |, reduce: Var */
			reduce(97), /* ~, reduce: Var */
			reduce(97), /* &, reduce: Var */
			reduce(97), /* .., reduce: Var */
			reduce(97), /* <<, reduce: Var */
			reduce(97), /* >>, reduce: Var */
			reduce(97), /* +, reduce: Var */
			reduce(97), /* -, reduce: Var */
			reduce(97), /* *, reduce: Var */
			reduce(97), /* /, reduce: Var */
			reduce(97), /* %, reduce: Var */
			reduce(97), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(97), /* ^, reduce: Var */
			reduce(97), /* [, reduce: Var */
			nil,        /* ] */
			reduce(97), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(97), /* string, reduce: Var */
			reduce(97), /* {, reduce: Var */
			reduce(97), /* }, reduce: Var */
			nil,        /* ident */
		},
	},
	actionRow{ // S237
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(133), /* ;, reduce: Field */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(133), /* ,, reduce: Field */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			shift(542),  /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			reduce(133), /* }, reduce: Field */
			nil,         /* ident */
		},
	},
	actionRow{ // S238
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(544), /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S239
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(100), /* ;, reduce: PrefixExp */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(100), /* ,, reduce: PrefixExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(100), /* ., reduce: PrefixExp */
			reduce(100), /* :, reduce: PrefixExp */
			reduce(100), /* or, reduce: PrefixExp */
			reduce(100), /* and, reduce: PrefixExp */
			reduce(100), /* <, reduce: PrefixExp */
			reduce(100), /* <=, reduce: PrefixExp */
			reduce(100), /* >, reduce: PrefixExp */
			reduce(100), /* >=, reduce: PrefixExp */
			reduce(100), /* ==, reduce: PrefixExp */
			reduce(100), /* ~=, reduce: PrefixExp */
			reduce(100), /* |, reduce: PrefixExp */
			reduce(100), /* ~, reduce: PrefixExp */
			reduce(100), /* &, reduce: PrefixExp */
			reduce(100), /* .., reduce: PrefixExp */
			reduce(100), /* <<, reduce: PrefixExp */
			reduce(100), /* >>, reduce: PrefixExp */
			reduce(100), /* +, reduce: PrefixExp */
			reduce(100), /* -, reduce: PrefixExp */
			reduce(100), /* *, reduce: PrefixExp */
			reduce(100), /* /, reduce: PrefixExp */
			reduce(100), /* %, reduce: PrefixExp */
			reduce(100), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(100), /* ^, reduce: PrefixExp */
			reduce(100), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(100), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(100), /* string, reduce: PrefixExp */
			reduce(100), /* {, reduce: PrefixExp */
			reduce(100), /* }, reduce: PrefixExp */
			nil,         /* ident */
		},
	},
	actionRow{ // S240
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(55), /* ;, reduce: Exp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(55), /* ,, reduce: Exp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(55), /* or, reduce: Exp */
			shift(545), /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			reduce(55), /* }, reduce: Exp */
			nil,        /* ident */
		},
	},
	actionRow{ // S241
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(57), /* ;, reduce: AndExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(57), /* ,, reduce: AndExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(57), /* or, reduce: AndExp */
			reduce(57), /* and, reduce: AndExp */
			shift(203), /* < */
			shift(204), /* <= */
			shift(205), /* > */
			shift(206), /* >= */
			shift(207), /* == */
			shift(208), /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			reduce(57), /* }, reduce: AndExp */
			nil,        /* ident */
		},
	},
	actionRow{ // S242
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(65), /* ;, reduce: CompExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(65), /* ,, reduce: CompExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(65), /* or, reduce: CompExp */
			reduce(65), /* and, reduce: CompExp */
			reduce(65), /* <, reduce: CompExp */
			reduce(65), /* <=, reduce: CompExp */
			reduce(65), /* >, reduce: CompExp */
			reduce(65), /* >=, reduce: CompExp */
			reduce(65), /* ==, reduce: CompExp */
			reduce(65), /* ~=, reduce: CompExp */
			shift(547), /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			reduce(65), /* }, reduce: CompExp */
			nil,        /* ident */
		},
	},
	actionRow{ // S243
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(67), /* ;, reduce: BitOrExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(67), /* ,, reduce: BitOrExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(67), /* or, reduce: BitOrExp */
			reduce(67), /* and, reduce: BitOrExp */
			reduce(67), /* <, reduce: BitOrExp */
			reduce(67), /* <=, reduce: BitOrExp */
			reduce(67), /* >, reduce: BitOrExp */
			reduce(67), /* >=, reduce: BitOrExp */
			reduce(67), /* ==, reduce: BitOrExp */
			reduce(67), /* ~=, reduce: BitOrExp */
			reduce(67), /* |, reduce: BitOrExp */
			shift(548), /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			reduce(67), /* }, reduce: BitOrExp */
			nil,        /* ident */
		},
	},
	actionRow{ // S244
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(69), /* ;, reduce: BitXorExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(69), /* ,, reduce: BitXorExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(69), /* or, reduce: BitXorExp */
			reduce(69), /* and, reduce: BitXorExp */
			reduce(69), /* <, reduce: BitXorExp */
			reduce(69), /* <=, reduce: BitXorExp */
			reduce(69), /* >, reduce: BitXorExp */
			reduce(69), /* >=, reduce: BitXorExp */
			reduce(69), /* ==, reduce: BitXorExp */
			reduce(69), /* ~=, reduce: BitXorExp */
			reduce(69), /* |, reduce: BitXorExp */
			reduce(69), /* ~, reduce: BitXorExp */
			shift(549), /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			reduce(69), /* }, reduce: BitXorExp */
			nil,        /* ident */
		},
	},
	actionRow{ // S245
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(71), /* ;, reduce: BitAndExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(71), /* ,, reduce: BitAndExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(71), /* or, reduce: BitAndExp */
			reduce(71), /* and, reduce: BitAndExp */
			reduce(71), /* <, reduce: BitAndExp */
			reduce(71), /* <=, reduce: BitAndExp */
			reduce(71), /* >, reduce: BitAndExp */
			reduce(71), /* >=, reduce: BitAndExp */
			reduce(71), /* ==, reduce: BitAndExp */
			reduce(71), /* ~=, reduce: BitAndExp */
			reduce(71), /* |, reduce: BitAndExp */
			reduce(71), /* ~, reduce: BitAndExp */
			reduce(71), /* &, reduce: BitAndExp */
			shift(550), /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			reduce(71), /* }, reduce: BitAndExp */
			nil,        /* ident */
		},
	},
	actionRow{ // S246
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(73), /* ;, reduce: ConcatExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(73), /* ,, reduce: ConcatExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(73), /* or, reduce: ConcatExp */
			reduce(73), /* and, reduce: ConcatExp */
			reduce(73), /* <, reduce: ConcatExp */
			reduce(73), /* <=, reduce: ConcatExp */
			reduce(73), /* >, reduce: ConcatExp */
			reduce(73), /* >=, reduce: ConcatExp */
			reduce(73), /* ==, reduce: ConcatExp */
			reduce(73), /* ~=, reduce: ConcatExp */
			reduce(73), /* |, reduce: ConcatExp */
			reduce(73), /* ~, reduce: ConcatExp */
			reduce(73), /* &, reduce: ConcatExp */
			reduce(73), /* .., reduce: ConcatExp */
			shift(214), /* << */
			shift(215), /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			reduce(73), /* }, reduce: ConcatExp */
			nil,        /* ident */
		},
	},
	actionRow{ // S247
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(77), /* ;, reduce: ShiftExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(77), /* ,, reduce: ShiftExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(77), /* or, reduce: ShiftExp */
			reduce(77), /* and, reduce: ShiftExp */
			reduce(77), /* <, reduce: ShiftExp */
			reduce(77), /* <=, reduce: ShiftExp */
			reduce(77), /* >, reduce: ShiftExp */
			reduce(77), /* >=, reduce: ShiftExp */
			reduce(77), /* ==, reduce: ShiftExp */
			reduce(77), /* ~=, reduce: ShiftExp */
			reduce(77), /* |, reduce: ShiftExp */
			reduce(77), /* ~, reduce: ShiftExp */
			reduce(77), /* &, reduce: ShiftExp */
			reduce(77), /* .., reduce: ShiftExp */
			reduce(77), /* <<, reduce: ShiftExp */
			reduce(77), /* >>, reduce: ShiftExp */
			shift(217), /* + */
			shift(218), /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			reduce(77), /* }, reduce: ShiftExp */
			nil,        /* ident */
		},
	},
	actionRow{ // S248
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(81), /* ;, reduce: Sum */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(81), /* ,, reduce: Sum */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(81), /* or, reduce: Sum */
			reduce(81), /* and, reduce: Sum */
			reduce(81), /* <, reduce: Sum */
			reduce(81), /* <=, reduce: Sum */
			reduce(81), /* >, reduce: Sum */
			reduce(81), /* >=, reduce: Sum */
			reduce(81), /* ==, reduce: Sum */
			reduce(81), /* ~=, reduce: Sum */
			reduce(81), /* |, reduce: Sum */
			reduce(81), /* ~, reduce: Sum */
			reduce(81), /* &, reduce: Sum */
			reduce(81), /* .., reduce: Sum */
			reduce(81), /* <<, reduce: Sum */
			reduce(81), /* >>, reduce: Sum */
			reduce(81), /* +, reduce: Sum */
			reduce(81), /* -, reduce: Sum */
			shift(220), /* * */
			shift(221), /* / */
			shift(222), /* % */
			shift(223), /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			reduce(81), /* }, reduce: Sum */
			nil,        /* ident */
		},
	},
	actionRow{ // S249
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(87), /* ;, reduce: Term */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(87), /* ,, reduce: Term */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(87), /* or, reduce: Term */
			reduce(87), /* and, reduce: Term */
			reduce(87), /* <, reduce: Term */
			reduce(87), /* <=, reduce: Term */
			reduce(87), /* >, reduce: Term */
			reduce(87), /* >=, reduce: Term */
			reduce(87), /* ==, reduce: Term */
			reduce(87), /* ~=, reduce: Term */
			reduce(87), /* |, reduce: Term */
			reduce(87), /* ~, reduce: Term */
			reduce(87), /* &, reduce: Term */
			reduce(87), /* .., reduce: Term */
			reduce(87), /* <<, reduce: Term */
			reduce(87), /* >>, reduce: Term */
			reduce(87), /* +, reduce: Term */
			reduce(87), /* -, reduce: Term */
			reduce(87), /* *, reduce: Term */
			reduce(87), /* /, reduce: Term */
			reduce(87), /* %, reduce: Term */
			reduce(87), /* //, reduce: Term */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			reduce(87), /* }, reduce: Term */
			nil,        /* ident */
		},
	},
	actionRow{ // S250
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(556), /* ident */
		},
	},
	actionRow{ // S251
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(94), /* ;, reduce: Factor */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(94), /* ,, reduce: Factor */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(94), /* or, reduce: Factor */
			reduce(94), /* and, reduce: Factor */
			reduce(94), /* <, reduce: Factor */
			reduce(94), /* <=, reduce: Factor */
			reduce(94), /* >, reduce: Factor */
			reduce(94), /* >=, reduce: Factor */
			reduce(94), /* ==, reduce: Factor */
			reduce(94), /* ~=, reduce: Factor */
			reduce(94), /* |, reduce: Factor */
			reduce(94), /* ~, reduce: Factor */
			reduce(94), /* &, reduce: Factor */
			reduce(94), /* .., reduce: Factor */
			reduce(94), /* <<, reduce: Factor */
			reduce(94), /* >>, reduce: Factor */
			reduce(94), /* +, reduce: Factor */
			reduce(94), /* -, reduce: Factor */
			reduce(94), /* *, reduce: Factor */
			reduce(94), /* /, reduce: Factor */
			reduce(94), /* %, reduce: Factor */
			reduce(94), /* //, reduce: Factor */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			reduce(94), /* }, reduce: Factor */
			nil,        /* ident */
		},
	},
	actionRow{ // S252
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(95), /* ;, reduce: Power */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(95), /* ,, reduce: Power */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(95), /* or, reduce: Power */
			reduce(95), /* and, reduce: Power */
			reduce(95), /* <, reduce: Power */
			reduce(95), /* <=, reduce: Power */
			reduce(95), /* >, reduce: Power */
			reduce(95), /* >=, reduce: Power */
			reduce(95), /* ==, reduce: Power */
			reduce(95), /* ~=, reduce: Power */
			reduce(95), /* |, reduce: Power */
			reduce(95), /* ~, reduce: Power */
			reduce(95), /* &, reduce: Power */
			reduce(95), /* .., reduce: Power */
			reduce(95), /* <<, reduce: Power */
			reduce(95), /* >>, reduce: Power */
			reduce(95), /* +, reduce: Power */
			reduce(95), /* -, reduce: Power */
			reduce(95), /* *, reduce: Power */
			reduce(95), /* /, reduce: Power */
			reduce(95), /* %, reduce: Power */
			reduce(95), /* //, reduce: Power */
			nil,        /* not */
			nil,        /* # */
			shift(557), /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			reduce(95), /* }, reduce: Power */
			nil,        /* ident */
		},
	},
	actionRow{ // S253
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(114), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(114), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			shift(558),  /* . */
			shift(559),  /* : */
			reduce(114), /* or, reduce: Atom */
			reduce(114), /* and, reduce: Atom */
			reduce(114), /* <, reduce: Atom */
			reduce(114), /* <=, reduce: Atom */
			reduce(114), /* >, reduce: Atom */
			reduce(114), /* >=, reduce: Atom */
			reduce(114), /* ==, reduce: Atom */
			reduce(114), /* ~=, reduce: Atom */
			reduce(114), /* |, reduce: Atom */
			reduce(114), /* ~, reduce: Atom */
			reduce(114), /* &, reduce: Atom */
			reduce(114), /* .., reduce: Atom */
			reduce(114), /* <<, reduce: Atom */
			reduce(114), /* >>, reduce: Atom */
			reduce(114), /* +, reduce: Atom */
			reduce(114), /* -, reduce: Atom */
			reduce(114), /* *, reduce: Atom */
			reduce(114), /* /, reduce: Atom */
			reduce(114), /* %, reduce: Atom */
			reduce(114), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(114), /* ^, reduce: Atom */
			shift(560),  /* [ */
			nil,         /* ] */
			shift(561),  /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			shift(563),  /* string */
			shift(565),  /* { */
			reduce(114), /* }, reduce: Atom */
			nil,         /* ident */
		},
	},
	actionRow{ // S254
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(430), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(446), /* ( */
			nil,        /* ) */
			shift(447), /* nil */
			shift(448), /* true */
			shift(449), /* false */
			shift(450), /* ... */
			shift(451), /* numdec */
			shift(452), /* numhex */
			shift(453), /* string */
			shift(456), /* { */
			nil,        /* } */
			shift(457), /* ident */
		},
	},
	actionRow{ // S255
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(168), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(184), /* ( */
			nil,        /* ) */
			shift(185), /* nil */
			shift(186), /* true */
			shift(187), /* false */
			shift(188), /* ... */
			shift(189), /* numdec */
			shift(190), /* numhex */
			shift(191), /* string */
			shift(194), /* { */
			nil,        /* } */
			shift(195), /* ident */
		},
	},
	actionRow{ // S256
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(105), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(105), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(105), /* or, reduce: Atom */
			reduce(105), /* and, reduce: Atom */
			reduce(105), /* <, reduce: Atom */
			reduce(105), /* <=, reduce: Atom */
			reduce(105), /* >, reduce: Atom */
			reduce(105), /* >=, reduce: Atom */
			reduce(105), /* ==, reduce: Atom */
			reduce(105), /* ~=, reduce: Atom */
			reduce(105), /* |, reduce: Atom */
			reduce(105), /* ~, reduce: Atom */
			reduce(105), /* &, reduce: Atom */
			reduce(105), /* .., reduce: Atom */
			reduce(105), /* <<, reduce: Atom */
			reduce(105), /* >>, reduce: Atom */
			reduce(105), /* +, reduce: Atom */
			reduce(105), /* -, reduce: Atom */
			reduce(105), /* *, reduce: Atom */
			reduce(105), /* /, reduce: Atom */
			reduce(105), /* %, reduce: Atom */
			reduce(105), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(105), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			reduce(105), /* }, reduce: Atom */
			nil,         /* ident */
		},
	},
	actionRow{ // S257
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(106), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(106), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(106), /* or, reduce: Atom */
			reduce(106), /* and, reduce: Atom */
			reduce(106), /* <, reduce: Atom */
			reduce(106), /* <=, reduce: Atom */
			reduce(106), /* >, reduce: Atom */
			reduce(106), /* >=, reduce: Atom */
			reduce(106), /* ==, reduce: Atom */
			reduce(106), /* ~=, reduce: Atom */
			reduce(106), /* |, reduce: Atom */
			reduce(106), /* ~, reduce: Atom */
			reduce(106), /* &, reduce: Atom */
			reduce(106), /* .., reduce: Atom */
			reduce(106), /* <<, reduce: Atom */
			reduce(106), /* >>, reduce: Atom */
			reduce(106), /* +, reduce: Atom */
			reduce(106), /* -, reduce: Atom */
			reduce(106), /* *, reduce: Atom */
			reduce(106), /* /, reduce: Atom */
			reduce(106), /* %, reduce: Atom */
			reduce(106), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(106), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			reduce(106), /* }, reduce: Atom */
			nil,         /* ident */
		},
	},
	actionRow{ // S258
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(107), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(107), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(107), /* or, reduce: Atom */
			reduce(107), /* and, reduce: Atom */
			reduce(107), /* <, reduce: Atom */
			reduce(107), /* <=, reduce: Atom */
			reduce(107), /* >, reduce: Atom */
			reduce(107), /* >=, reduce: Atom */
			reduce(107), /* ==, reduce: Atom */
			reduce(107), /* ~=, reduce: Atom */
			reduce(107), /* |, reduce: Atom */
			reduce(107), /* ~, reduce: Atom */
			reduce(107), /* &, reduce: Atom */
			reduce(107), /* .., reduce: Atom */
			reduce(107), /* <<, reduce: Atom */
			reduce(107), /* >>, reduce: Atom */
			reduce(107), /* +, reduce: Atom */
			reduce(107), /* -, reduce: Atom */
			reduce(107), /* *, reduce: Atom */
			reduce(107), /* /, reduce: Atom */
			reduce(107), /* %, reduce: Atom */
			reduce(107), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(107), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			reduce(107), /* }, reduce: Atom */
			nil,         /* ident */
		},
	},
	actionRow{ // S259
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(108), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(108), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(108), /* or, reduce: Atom */
			reduce(108), /* and, reduce: Atom */
			reduce(108), /* <, reduce: Atom */
			reduce(108), /* <=, reduce: Atom */
			reduce(108), /* >, reduce: Atom */
			reduce(108), /* >=, reduce: Atom */
			reduce(108), /* ==, reduce: Atom */
			reduce(108), /* ~=, reduce: Atom */
			reduce(108), /* |, reduce: Atom */
			reduce(108), /* ~, reduce: Atom */
			reduce(108), /* &, reduce: Atom */
			reduce(108), /* .., reduce: Atom */
			reduce(108), /* <<, reduce: Atom */
			reduce(108), /* >>, reduce: Atom */
			reduce(108), /* +, reduce: Atom */
			reduce(108), /* -, reduce: Atom */
			reduce(108), /* *, reduce: Atom */
			reduce(108), /* /, reduce: Atom */
			reduce(108), /* %, reduce: Atom */
			reduce(108), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(108), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			reduce(108), /* }, reduce: Atom */
			nil,         /* ident */
		},
	},
	actionRow{ // S260
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(109), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(109), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(109), /* or, reduce: Atom */
			reduce(109), /* and, reduce: Atom */
			reduce(109), /* <, reduce: Atom */
			reduce(109), /* <=, reduce: Atom */
			reduce(109), /* >, reduce: Atom */
			reduce(109), /* >=, reduce: Atom */
			reduce(109), /* ==, reduce: Atom */
			reduce(109), /* ~=, reduce: Atom */
			reduce(109), /* |, reduce: Atom */
			reduce(109), /* ~, reduce: Atom */
			reduce(109), /* &, reduce: Atom */
			reduce(109), /* .., reduce: Atom */
			reduce(109), /* <<, reduce: Atom */
			reduce(109), /* >>, reduce: Atom */
			reduce(109), /* +, reduce: Atom */
			reduce(109), /* -, reduce: Atom */
			reduce(109), /* *, reduce: Atom */
			reduce(109), /* /, reduce: Atom */
			reduce(109), /* %, reduce: Atom */
			reduce(109), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(109), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			reduce(109), /* }, reduce: Atom */
			nil,         /* ident */
		},
	},
	actionRow{ // S261
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(110), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(110), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(110), /* or, reduce: Atom */
			reduce(110), /* and, reduce: Atom */
			reduce(110), /* <, reduce: Atom */
			reduce(110), /* <=, reduce: Atom */
			reduce(110), /* >, reduce: Atom */
			reduce(110), /* >=, reduce: Atom */
			reduce(110), /* ==, reduce: Atom */
			reduce(110), /* ~=, reduce: Atom */
			reduce(110), /* |, reduce: Atom */
			reduce(110), /* ~, reduce: Atom */
			reduce(110), /* &, reduce: Atom */
			reduce(110), /* .., reduce: Atom */
			reduce(110), /* <<, reduce: Atom */
			reduce(110), /* >>, reduce: Atom */
			reduce(110), /* +, reduce: Atom */
			reduce(110), /* -, reduce: Atom */
			reduce(110), /* *, reduce: Atom */
			reduce(110), /* /, reduce: Atom */
			reduce(110), /* %, reduce: Atom */
			reduce(110), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(110), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			reduce(110), /* }, reduce: Atom */
			nil,         /* ident */
		},
	},
	actionRow{ // S262
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(111), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(111), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(111), /* or, reduce: Atom */
			reduce(111), /* and, reduce: Atom */
			reduce(111), /* <, reduce: Atom */
			reduce(111), /* <=, reduce: Atom */
			reduce(111), /* >, reduce: Atom */
			reduce(111), /* >=, reduce: Atom */
			reduce(111), /* ==, reduce: Atom */
			reduce(111), /* ~=, reduce: Atom */
			reduce(111), /* |, reduce: Atom */
			reduce(111), /* ~, reduce: Atom */
			reduce(111), /* &, reduce: Atom */
			reduce(111), /* .., reduce: Atom */
			reduce(111), /* <<, reduce: Atom */
			reduce(111), /* >>, reduce: Atom */
			reduce(111), /* +, reduce: Atom */
			reduce(111), /* -, reduce: Atom */
			reduce(111), /* *, reduce: Atom */
			reduce(111), /* /, reduce: Atom */
			reduce(111), /* %, reduce: Atom */
			reduce(111), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(111), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			reduce(111), /* }, reduce: Atom */
			nil,         /* ident */
		},
	},
	actionRow{ // S263
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(112), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(112), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(112), /* or, reduce: Atom */
			reduce(112), /* and, reduce: Atom */
			reduce(112), /* <, reduce: Atom */
			reduce(112), /* <=, reduce: Atom */
			reduce(112), /* >, reduce: Atom */
			reduce(112), /* >=, reduce: Atom */
			reduce(112), /* ==, reduce: Atom */
			reduce(112), /* ~=, reduce: Atom */
			reduce(112), /* |, reduce: Atom */
			reduce(112), /* ~, reduce: Atom */
			reduce(112), /* &, reduce: Atom */
			reduce(112), /* .., reduce: Atom */
			reduce(112), /* <<, reduce: Atom */
			reduce(112), /* >>, reduce: Atom */
			reduce(112), /* +, reduce: Atom */
			reduce(112), /* -, reduce: Atom */
			reduce(112), /* *, reduce: Atom */
			reduce(112), /* /, reduce: Atom */
			reduce(112), /* %, reduce: Atom */
			reduce(112), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(112), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			reduce(112), /* }, reduce: Atom */
			nil,         /* ident */
		},
	},
	actionRow{ // S264
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(113), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(113), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(113), /* or, reduce: Atom */
			reduce(113), /* and, reduce: Atom */
			reduce(113), /* <, reduce: Atom */
			reduce(113), /* <=, reduce: Atom */
			reduce(113), /* >, reduce: Atom */
			reduce(113), /* >=, reduce: Atom */
			reduce(113), /* ==, reduce: Atom */
			reduce(113), /* ~=, reduce: Atom */
			reduce(113), /* |, reduce: Atom */
			reduce(113), /* ~, reduce: Atom */
			reduce(113), /* &, reduce: Atom */
			reduce(113), /* .., reduce: Atom */
			reduce(113), /* <<, reduce: Atom */
			reduce(113), /* >>, reduce: Atom */
			reduce(113), /* +, reduce: Atom */
			reduce(113), /* -, reduce: Atom */
			reduce(113), /* *, reduce: Atom */
			reduce(113), /* /, reduce: Atom */
			reduce(113), /* %, reduce: Atom */
			reduce(113), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(113), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			reduce(113), /* }, reduce: Atom */
			nil,         /* ident */
		},
	},
	actionRow{ // S265
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			shift(254), /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(268), /* ident */
		},
	},
	actionRow{ // S266
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			shift(569), /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			shift(570), /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			shift(571), /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S267
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(129), /* ;, reduce: FieldList */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(129), /* ,, reduce: FieldList */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			reduce(129), /* }, reduce: FieldList */
			nil,         /* ident */
		},
	},
	actionRow{ // S268
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(134), /* ;, reduce: Name */
			nil,         /* empty */
			reduce(134), /* =, reduce: Name */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(134), /* ,, reduce: Name */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(134), /* ., reduce: Name */
			reduce(134), /* :, reduce: Name */
			reduce(134), /* or, reduce: Name */
			reduce(134), /* and, reduce: Name */
			reduce(134), /* <, reduce: Name */
			reduce(134), /* <=, reduce: Name */
			reduce(134), /* >, reduce: Name */
			reduce(134), /* >=, reduce: Name */
			reduce(134), /* ==, reduce: Name */
			reduce(134), /* ~=, reduce: Name */
			reduce(134), /* |, reduce: Name */
			reduce(134), /* ~, reduce: Name */
			reduce(134), /* &, reduce: Name */
			reduce(134), /* .., reduce: Name */
			reduce(134), /* <<, reduce: Name */
			reduce(134), /* >>, reduce: Name */
			reduce(134), /* +, reduce: Name */
			reduce(134), /* -, reduce: Name */
			reduce(134), /* *, reduce: Name */
			reduce(134), /* /, reduce: Name */
			reduce(134), /* %, reduce: Name */
			reduce(134), /* //, reduce: Name */
			nil,         /* not */
			nil,         /* # */
			reduce(134), /* ^, reduce: Name */
			reduce(134), /* [, reduce: Name */
			nil,         /* ] */
			reduce(134), /* (, reduce: Name */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(134), /* string, reduce: Name */
			reduce(134), /* {, reduce: Name */
			reduce(134), /* }, reduce: Name */
			nil,         /* ident */
		},
	},
	actionRow{ // S269
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(23), /* $, reduce: AssignStat */
			reduce(23), /* return, reduce: AssignStat */
			reduce(23), /* ;, reduce: AssignStat */
			nil,        /* empty */
			nil,        /* = */
			reduce(23), /* break, reduce: AssignStat */
			reduce(23), /* goto, reduce: AssignStat */
			reduce(23), /* do, reduce: AssignStat */
			nil,        /* end */
			reduce(23), /* while, reduce: AssignStat */
			reduce(23), /* repeat, reduce: AssignStat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(23), /* if, reduce: AssignStat */
			shift(573), /* , */
			reduce(23), /* for, reduce: AssignStat */
			nil,        /* in */
			reduce(23), /* function, reduce: AssignStat */
			reduce(23), /* local, reduce: AssignStat */
			reduce(23), /* ::, reduce: AssignStat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(23), /* (, reduce: AssignStat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(23), /* ident, reduce: AssignStat */
		},
	},
	actionRow{ // S270
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(101), /* $, reduce: PrefixExp */
			reduce(101), /* return, reduce: PrefixExp */
			reduce(101), /* ;, reduce: PrefixExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(101), /* break, reduce: PrefixExp */
			reduce(101), /* goto, reduce: PrefixExp */
			reduce(101), /* do, reduce: PrefixExp */
			nil,         /* end */
			reduce(101), /* while, reduce: PrefixExp */
			reduce(101), /* repeat, reduce: PrefixExp */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(101), /* if, reduce: PrefixExp */
			reduce(101), /* ,, reduce: PrefixExp */
			reduce(101), /* for, reduce: PrefixExp */
			nil,         /* in */
			reduce(101), /* function, reduce: PrefixExp */
			reduce(101), /* local, reduce: PrefixExp */
			reduce(101), /* ::, reduce: PrefixExp */
			reduce(101), /* ., reduce: PrefixExp */
			reduce(101), /* :, reduce: PrefixExp */
			reduce(101), /* or, reduce: PrefixExp */
			reduce(101), /* and, reduce: PrefixExp */
			reduce(101), /* <, reduce: PrefixExp */
			reduce(101), /* <=, reduce: PrefixExp */
			reduce(101), /* >, reduce: PrefixExp */
			reduce(101), /* >=, reduce: PrefixExp */
			reduce(101), /* ==, reduce: PrefixExp */
			reduce(101), /* ~=, reduce: PrefixExp */
			reduce(101), /* |, reduce: PrefixExp */
			reduce(101), /* ~, reduce: PrefixExp */
			reduce(101), /* &, reduce: PrefixExp */
			reduce(101), /* .., reduce: PrefixExp */
			reduce(101), /* <<, reduce: PrefixExp */
			reduce(101), /* >>, reduce: PrefixExp */
			reduce(101), /* +, reduce: PrefixExp */
			reduce(101), /* -, reduce: PrefixExp */
			reduce(101), /* *, reduce: PrefixExp */
			reduce(101), /* /, reduce: PrefixExp */
			reduce(101), /* %, reduce: PrefixExp */
			reduce(101), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(101), /* ^, reduce: PrefixExp */
			reduce(101), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(101), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(101), /* string, reduce: PrefixExp */
			reduce(101), /* {, reduce: PrefixExp */
			nil,         /* } */
			reduce(101), /* ident, reduce: PrefixExp */
		},
	},
	actionRow{ // S271
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(97), /* $, reduce: Var */
			reduce(97), /* return, reduce: Var */
			reduce(97), /* ;, reduce: Var */
			nil,        /* empty */
			nil,        /* = */
			reduce(97), /* break, reduce: Var */
			reduce(97), /* goto, reduce: Var */
			reduce(97), /* do, reduce: Var */
			nil,        /* end */
			reduce(97), /* while, reduce: Var */
			reduce(97), /* repeat, reduce: Var */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(97), /* if, reduce: Var */
			reduce(97), /* ,, reduce: Var */
			reduce(97), /* for, reduce: Var */
			nil,        /* in */
			reduce(97), /* function, reduce: Var */
			reduce(97), /* local, reduce: Var */
			reduce(97), /* ::, reduce: Var */
			reduce(97), /* ., reduce: Var */
			reduce(97), /* :, reduce: Var */
			reduce(97), /* or, reduce: Var */
			reduce(97), /* and, reduce: Var */
			reduce(97), /* <, reduce: Var */
			reduce(97), /* <=, reduce: Var */
			reduce(97), /* >, reduce: Var */
			reduce(97), /* >=, reduce: Var */
			reduce(97), /* ==, reduce: Var */
			reduce(97), /* ~=, reduce: Var */
			reduce(97), /* |, reduce: Var */
			reduce(97), /* ~, reduce: Var */
			reduce(97), /* &, reduce: Var */
			reduce(97), /* .., reduce: Var */
			reduce(97), /* <<, reduce: Var */
			reduce(97), /* >>, reduce: Var */
			reduce(97), /* +, reduce: Var */
			reduce(97), /* -, reduce: Var */
			reduce(97), /* *, reduce: Var */
			reduce(97), /* /, reduce: Var */
			reduce(97), /* %, reduce: Var */
			reduce(97), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(97), /* ^, reduce: Var */
			reduce(97), /* [, reduce: Var */
			nil,        /* ] */
			reduce(97), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(97), /* string, reduce: Var */
			reduce(97), /* {, reduce: Var */
			nil,        /* } */
			reduce(97), /* ident, reduce: Var */
		},
	},
	actionRow{ // S272
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(53), /* $, reduce: ExpList */
			reduce(53), /* return, reduce: ExpList */
			reduce(53), /* ;, reduce: ExpList */
			nil,        /* empty */
			nil,        /* = */
			reduce(53), /* break, reduce: ExpList */
			reduce(53), /* goto, reduce: ExpList */
			reduce(53), /* do, reduce: ExpList */
			nil,        /* end */
			reduce(53), /* while, reduce: ExpList */
			reduce(53), /* repeat, reduce: ExpList */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(53), /* if, reduce: ExpList */
			reduce(53), /* ,, reduce: ExpList */
			reduce(53), /* for, reduce: ExpList */
			nil,        /* in */
			reduce(53), /* function, reduce: ExpList */
			reduce(53), /* local, reduce: ExpList */
			reduce(53), /* ::, reduce: ExpList */
			nil,        /* . */
			nil,        /* : */
			shift(574), /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(53), /* (, reduce: ExpList */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(53), /* ident, reduce: ExpList */
		},
	},
	actionRow{ // S273
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(576), /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S274
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(100), /* $, reduce: PrefixExp */
			reduce(100), /* return, reduce: PrefixExp */
			reduce(100), /* ;, reduce: PrefixExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(100), /* break, reduce: PrefixExp */
			reduce(100), /* goto, reduce: PrefixExp */
			reduce(100), /* do, reduce: PrefixExp */
			nil,         /* end */
			reduce(100), /* while, reduce: PrefixExp */
			reduce(100), /* repeat, reduce: PrefixExp */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(100), /* if, reduce: PrefixExp */
			reduce(100), /* ,, reduce: PrefixExp */
			reduce(100), /* for, reduce: PrefixExp */
			nil,         /* in */
			reduce(100), /* function, reduce: PrefixExp */
			reduce(100), /* local, reduce: PrefixExp */
			reduce(100), /* ::, reduce: PrefixExp */
			reduce(100), /* ., reduce: PrefixExp */
			reduce(100), /* :, reduce: PrefixExp */
			reduce(100), /* or, reduce: PrefixExp */
			reduce(100), /* and, reduce: PrefixExp */
			reduce(100), /* <, reduce: PrefixExp */
			reduce(100), /* <=, reduce: PrefixExp */
			reduce(100), /* >, reduce: PrefixExp */
			reduce(100), /* >=, reduce: PrefixExp */
			reduce(100), /* ==, reduce: PrefixExp */
			reduce(100), /* ~=, reduce: PrefixExp */
			reduce(100), /* |, reduce: PrefixExp */
			reduce(100), /* ~, reduce: PrefixExp */
			reduce(100), /* &, reduce: PrefixExp */
			reduce(100), /* .., reduce: PrefixExp */
			reduce(100), /* <<, reduce: PrefixExp */
			reduce(100), /* >>, reduce: PrefixExp */
			reduce(100), /* +, reduce: PrefixExp */
			reduce(100), /* -, reduce: PrefixExp */
			reduce(100), /* *, reduce: PrefixExp */
			reduce(100), /* /, reduce: PrefixExp */
			reduce(100), /* %, reduce: PrefixExp */
			reduce(100), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(100), /* ^, reduce: PrefixExp */
			reduce(100), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(100), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(100), /* string, reduce: PrefixExp */
			reduce(100), /* {, reduce: PrefixExp */
			nil,         /* } */
			reduce(100), /* ident, reduce: PrefixExp */
		},
	},
	actionRow{ // S275
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(55), /* $, reduce: Exp */
			reduce(55), /* return, reduce: Exp */
			reduce(55), /* ;, reduce: Exp */
			nil,        /* empty */
			nil,        /* = */
			reduce(55), /* break, reduce: Exp */
			reduce(55), /* goto, reduce: Exp */
			reduce(55), /* do, reduce: Exp */
			nil,        /* end */
			reduce(55), /* while, reduce: Exp */
			reduce(55), /* repeat, reduce: Exp */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(55), /* if, reduce: Exp */
			reduce(55), /* ,, reduce: Exp */
			reduce(55), /* for, reduce: Exp */
			nil,        /* in */
			reduce(55), /* function, reduce: Exp */
			reduce(55), /* local, reduce: Exp */
			reduce(55), /* ::, reduce: Exp */
			nil,        /* . */
			nil,        /* : */
			reduce(55), /* or, reduce: Exp */
			shift(577), /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(55), /* (, reduce: Exp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(55), /* ident, reduce: Exp */
		},
	},
	actionRow{ // S276
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(57), /* $, reduce: AndExp */
			reduce(57), /* return, reduce: AndExp */
			reduce(57), /* ;, reduce: AndExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(57), /* break, reduce: AndExp */
			reduce(57), /* goto, reduce: AndExp */
			reduce(57), /* do, reduce: AndExp */
			nil,        /* end */
			reduce(57), /* while, reduce: AndExp */
			reduce(57), /* repeat, reduce: AndExp */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(57), /* if, reduce: AndExp */
			reduce(57), /* ,, reduce: AndExp */
			reduce(57), /* for, reduce: AndExp */
			nil,        /* in */
			reduce(57), /* function, reduce: AndExp */
			reduce(57), /* local, reduce: AndExp */
			reduce(57), /* ::, reduce: AndExp */
			nil,        /* . */
			nil,        /* : */
			reduce(57), /* or, reduce: AndExp */
			reduce(57), /* and, reduce: AndExp */
			shift(203), /* < */
			shift(204), /* <= */
			shift(205), /* > */
			shift(206), /* >= */
			shift(207), /* == */
			shift(208), /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(57), /* (, reduce: AndExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(57), /* ident, reduce: AndExp */
		},
	},
	actionRow{ // S277
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(65), /* $, reduce: CompExp */
			reduce(65), /* return, reduce: CompExp */
			reduce(65), /* ;, reduce: CompExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(65), /* break, reduce: CompExp */
			reduce(65), /* goto, reduce: CompExp */
			reduce(65), /* do, reduce: CompExp */
			nil,        /* end */
			reduce(65), /* while, reduce: CompExp */
			reduce(65), /* repeat, reduce: CompExp */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(65), /* if, reduce: CompExp */
			reduce(65), /* ,, reduce: CompExp */
			reduce(65), /* for, reduce: CompExp */
			nil,        /* in */
			reduce(65), /* function, reduce: CompExp */
			reduce(65), /* local, reduce: CompExp */
			reduce(65), /* ::, reduce: CompExp */
			nil,        /* . */
			nil,        /* : */
			reduce(65), /* or, reduce: CompExp */
			reduce(65), /* and, reduce: CompExp */
			reduce(65), /* <, reduce: CompExp */
			reduce(65), /* <=, reduce: CompExp */
			reduce(65), /* >, reduce: CompExp */
			reduce(65), /* >=, reduce: CompExp */
			reduce(65), /* ==, reduce: CompExp */
			reduce(65), /* ~=, reduce: CompExp */
			shift(579), /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(65), /* (, reduce: CompExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(65), /* ident, reduce: CompExp */
		},
	},
	actionRow{ // S278
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(67), /* $, reduce: BitOrExp */
			reduce(67), /* return, reduce: BitOrExp */
			reduce(67), /* ;, reduce: BitOrExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(67), /* break, reduce: BitOrExp */
			reduce(67), /* goto, reduce: BitOrExp */
			reduce(67), /* do, reduce: BitOrExp */
			nil,        /* end */
			reduce(67), /* while, reduce: BitOrExp */
			reduce(67), /* repeat, reduce: BitOrExp */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(67), /* if, reduce: BitOrExp */
			reduce(67), /* ,, reduce: BitOrExp */
			reduce(67), /* for, reduce: BitOrExp */
			nil,        /* in */
			reduce(67), /* function, reduce: BitOrExp */
			reduce(67), /* local, reduce: BitOrExp */
			reduce(67), /* ::, reduce: BitOrExp */
			nil,        /* . */
			nil,        /* : */
			reduce(67), /* or, reduce: BitOrExp */
			reduce(67), /* and, reduce: BitOrExp */
			reduce(67), /* <, reduce: BitOrExp */
			reduce(67), /* <=, reduce: BitOrExp */
			reduce(67), /* >, reduce: BitOrExp */
			reduce(67), /* >=, reduce: BitOrExp */
			reduce(67), /* ==, reduce: BitOrExp */
			reduce(67), /* ~=, reduce: BitOrExp */
			reduce(67), /* |, reduce: BitOrExp */
			shift(580), /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(67), /* (, reduce: BitOrExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(67), /* ident, reduce: BitOrExp */
		},
	},
	actionRow{ // S279
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(69), /* $, reduce: BitXorExp */
			reduce(69), /* return, reduce: BitXorExp */
			reduce(69), /* ;, reduce: BitXorExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(69), /* break, reduce: BitXorExp */
			reduce(69), /* goto, reduce: BitXorExp */
			reduce(69), /* do, reduce: BitXorExp */
			nil,        /* end */
			reduce(69), /* while, reduce: BitXorExp */
			reduce(69), /* repeat, reduce: BitXorExp */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(69), /* if, reduce: BitXorExp */
			reduce(69), /* ,, reduce: BitXorExp */
			reduce(69), /* for, reduce: BitXorExp */
			nil,        /* in */
			reduce(69), /* function, reduce: BitXorExp */
			reduce(69), /* local, reduce: BitXorExp */
			reduce(69), /* ::, reduce: BitXorExp */
			nil,        /* . */
			nil,        /* : */
			reduce(69), /* or, reduce: BitXorExp */
			reduce(69), /* and, reduce: BitXorExp */
			reduce(69), /* <, reduce: BitXorExp */
			reduce(69), /* <=, reduce: BitXorExp */
			reduce(69), /* >, reduce: BitXorExp */
			reduce(69), /* >=, reduce: BitXorExp */
			reduce(69), /* ==, reduce: BitXorExp */
			reduce(69), /* ~=, reduce: BitXorExp */
			reduce(69), /* |, reduce: BitXorExp */
			reduce(69), /* ~, reduce: BitXorExp */
			shift(581), /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(69), /* (, reduce: BitXorExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(69), /* ident, reduce: BitXorExp */
		},
	},
	actionRow{ // S280
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(71), /* $, reduce: BitAndExp */
			reduce(71), /* return, reduce: BitAndExp */
			reduce(71), /* ;, reduce: BitAndExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(71), /* break, reduce: BitAndExp */
			reduce(71), /* goto, reduce: BitAndExp */
			reduce(71), /* do, reduce: BitAndExp */
			nil,        /* end */
			reduce(71), /* while, reduce: BitAndExp */
			reduce(71), /* repeat, reduce: BitAndExp */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(71), /* if, reduce: BitAndExp */
			reduce(71), /* ,, reduce: BitAndExp */
			reduce(71), /* for, reduce: BitAndExp */
			nil,        /* in */
			reduce(71), /* function, reduce: BitAndExp */
			reduce(71), /* local, reduce: BitAndExp */
			reduce(71), /* ::, reduce: BitAndExp */
			nil,        /* . */
			nil,        /* : */
			reduce(71), /* or, reduce: BitAndExp */
			reduce(71), /* and, reduce: BitAndExp */
			reduce(71), /* <, reduce: BitAndExp */
			reduce(71), /* <=, reduce: BitAndExp */
			reduce(71), /* >, reduce: BitAndExp */
			reduce(71), /* >=, reduce: BitAndExp */
			reduce(71), /* ==, reduce: BitAndExp */
			reduce(71), /* ~=, reduce: BitAndExp */
			reduce(71), /* |, reduce: BitAndExp */
			reduce(71), /* ~, reduce: BitAndExp */
			reduce(71), /* &, reduce: BitAndExp */
			shift(582), /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(71), /* (, reduce: BitAndExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(71), /* ident, reduce: BitAndExp */
		},
	},
	actionRow{ // S281
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(73), /* $, reduce: ConcatExp */
			reduce(73), /* return, reduce: ConcatExp */
			reduce(73), /* ;, reduce: ConcatExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(73), /* break, reduce: ConcatExp */
			reduce(73), /* goto, reduce: ConcatExp */
			reduce(73), /* do, reduce: ConcatExp */
			nil,        /* end */
			reduce(73), /* while, reduce: ConcatExp */
			reduce(73), /* repeat, reduce: ConcatExp */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(73), /* if, reduce: ConcatExp */
			reduce(73), /* ,, reduce: ConcatExp */
			reduce(73), /* for, reduce: ConcatExp */
			nil,        /* in */
			reduce(73), /* function, reduce: ConcatExp */
			reduce(73), /* local, reduce: ConcatExp */
			reduce(73), /* ::, reduce: ConcatExp */
			nil,        /* . */
			nil,        /* : */
			reduce(73), /* or, reduce: ConcatExp */
			reduce(73), /* and, reduce: ConcatExp */
			reduce(73), /* <, reduce: ConcatExp */
			reduce(73), /* <=, reduce: ConcatExp */
			reduce(73), /* >, reduce: ConcatExp */
			reduce(73), /* >=, reduce: ConcatExp */
			reduce(73), /* ==, reduce: ConcatExp */
			reduce(73), /* ~=, reduce: ConcatExp */
			reduce(73), /* |, reduce: ConcatExp */
			reduce(73), /* ~, reduce: ConcatExp */
			reduce(73), /* &, reduce: ConcatExp */
			reduce(73), /* .., reduce: ConcatExp */
			shift(214), /* << */
			shift(215), /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(73), /* (, reduce: ConcatExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(73), /* ident, reduce: ConcatExp */
		},
	},
	actionRow{ // S282
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(77), /* $, reduce: ShiftExp */
			reduce(77), /* return, reduce: ShiftExp */
			reduce(77), /* ;, reduce: ShiftExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(77), /* break, reduce: ShiftExp */
			reduce(77), /* goto, reduce: ShiftExp */
			reduce(77), /* do, reduce: ShiftExp */
			nil,        /* end */
			reduce(77), /* while, reduce: ShiftExp */
			reduce(77), /* repeat, reduce: ShiftExp */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(77), /* if, reduce: ShiftExp */
			reduce(77), /* ,, reduce: ShiftExp */
			reduce(77), /* for, reduce: ShiftExp */
			nil,        /* in */
			reduce(77), /* function, reduce: ShiftExp */
			reduce(77), /* local, reduce: ShiftExp */
			reduce(77), /* ::, reduce: ShiftExp */
			nil,        /* . */
			nil,        /* : */
			reduce(77), /* or, reduce: ShiftExp */
			reduce(77), /* and, reduce: ShiftExp */
			reduce(77), /* <, reduce: ShiftExp */
			reduce(77), /* <=, reduce: ShiftExp */
			reduce(77), /* >, reduce: ShiftExp */
			reduce(77), /* >=, reduce: ShiftExp */
			reduce(77), /* ==, reduce: ShiftExp */
			reduce(77), /* ~=, reduce: ShiftExp */
			reduce(77), /* |, reduce: ShiftExp */
			reduce(77), /* ~, reduce: ShiftExp */
			reduce(77), /* &, reduce: ShiftExp */
			reduce(77), /* .., reduce: ShiftExp */
			reduce(77), /* <<, reduce: ShiftExp */
			reduce(77), /* >>, reduce: ShiftExp */
			shift(217), /* + */
			shift(218), /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(77), /* (, reduce: ShiftExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(77), /* ident, reduce: ShiftExp */
		},
	},
	actionRow{ // S283
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(81), /* $, reduce: Sum */
			reduce(81), /* return, reduce: Sum */
			reduce(81), /* ;, reduce: Sum */
			nil,        /* empty */
			nil,        /* = */
			reduce(81), /* break, reduce: Sum */
			reduce(81), /* goto, reduce: Sum */
			reduce(81), /* do, reduce: Sum */
			nil,        /* end */
			reduce(81), /* while, reduce: Sum */
			reduce(81), /* repeat, reduce: Sum */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(81), /* if, reduce: Sum */
			reduce(81), /* ,, reduce: Sum */
			reduce(81), /* for, reduce: Sum */
			nil,        /* in */
			reduce(81), /* function, reduce: Sum */
			reduce(81), /* local, reduce: Sum */
			reduce(81), /* ::, reduce: Sum */
			nil,        /* . */
			nil,        /* : */
			reduce(81), /* or, reduce: Sum */
			reduce(81), /* and, reduce: Sum */
			reduce(81), /* <, reduce: Sum */
			reduce(81), /* <=, reduce: Sum */
			reduce(81), /* >, reduce: Sum */
			reduce(81), /* >=, reduce: Sum */
			reduce(81), /* ==, reduce: Sum */
			reduce(81), /* ~=, reduce: Sum */
			reduce(81), /* |, reduce: Sum */
			reduce(81), /* ~, reduce: Sum */
			reduce(81), /* &, reduce: Sum */
			reduce(81), /* .., reduce: Sum */
			reduce(81), /* <<, reduce: Sum */
			reduce(81), /* >>, reduce: Sum */
			reduce(81), /* +, reduce: Sum */
			reduce(81), /* -, reduce: Sum */
			shift(220), /* * */
			shift(221), /* / */
			shift(222), /* % */
			shift(223), /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(81), /* (, reduce: Sum */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(81), /* ident, reduce: Sum */
		},
	},
	actionRow{ // S284
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(87), /* $, reduce: Term */
			reduce(87), /* return, reduce: Term */
			reduce(87), /* ;, reduce: Term */
			nil,        /* empty */
			nil,        /* = */
			reduce(87), /* break, reduce: Term */
			reduce(87), /* goto, reduce: Term */
			reduce(87), /* do, reduce: Term */
			nil,        /* end */
			reduce(87), /* while, reduce: Term */
			reduce(87), /* repeat, reduce: Term */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(87), /* if, reduce: Term */
			reduce(87), /* ,, reduce: Term */
			reduce(87), /* for, reduce: Term */
			nil,        /* in */
			reduce(87), /* function, reduce: Term */
			reduce(87), /* local, reduce: Term */
			reduce(87), /* ::, reduce: Term */
			nil,        /* . */
			nil,        /* : */
			reduce(87), /* or, reduce: Term */
			reduce(87), /* and, reduce: Term */
			reduce(87), /* <, reduce: Term */
			reduce(87), /* <=, reduce: Term */
			reduce(87), /* >, reduce: Term */
			reduce(87), /* >=, reduce: Term */
			reduce(87), /* ==, reduce: Term */
			reduce(87), /* ~=, reduce: Term */
			reduce(87), /* |, reduce: Term */
			reduce(87), /* ~, reduce: Term */
			reduce(87), /* &, reduce: Term */
			reduce(87), /* .., reduce: Term */
			reduce(87), /* <<, reduce: Term */
			reduce(87), /* >>, reduce: Term */
			reduce(87), /* +, reduce: Term */
			reduce(87), /* -, reduce: Term */
			reduce(87), /* *, reduce: Term */
			reduce(87), /* /, reduce: Term */
			reduce(87), /* %, reduce: Term */
			reduce(87), /* //, reduce: Term */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(87), /* (, reduce: Term */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(87), /* ident, reduce: Term */
		},
	},
	actionRow{ // S285
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(273), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(289), /* ( */
			nil,        /* ) */
			shift(290), /* nil */
			shift(291), /* true */
			shift(292), /* false */
			shift(293), /* ... */
			shift(294), /* numdec */
			shift(295), /* numhex */
			shift(296), /* string */
			shift(299), /* { */
			nil,        /* } */
			shift(300), /* ident */
		},
	},
	actionRow{ // S286
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(94), /* $, reduce: Factor */
			reduce(94), /* return, reduce: Factor */
			reduce(94), /* ;, reduce: Factor */
			nil,        /* empty */
			nil,        /* = */
			reduce(94), /* break, reduce: Factor */
			reduce(94), /* goto, reduce: Factor */
			reduce(94), /* do, reduce: Factor */
			nil,        /* end */
			reduce(94), /* while, reduce: Factor */
			reduce(94), /* repeat, reduce: Factor */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(94), /* if, reduce: Factor */
			reduce(94), /* ,, reduce: Factor */
			reduce(94), /* for, reduce: Factor */
			nil,        /* in */
			reduce(94), /* function, reduce: Factor */
			reduce(94), /* local, reduce: Factor */
			reduce(94), /* ::, reduce: Factor */
			nil,        /* . */
			nil,        /* : */
			reduce(94), /* or, reduce: Factor */
			reduce(94), /* and, reduce: Factor */
			reduce(94), /* <, reduce: Factor */
			reduce(94), /* <=, reduce: Factor */
			reduce(94), /* >, reduce: Factor */
			reduce(94), /* >=, reduce: Factor */
			reduce(94), /* ==, reduce: Factor */
			reduce(94), /* ~=, reduce: Factor */
			reduce(94), /* |, reduce: Factor */
			reduce(94), /* ~, reduce: Factor */
			reduce(94), /* &, reduce: Factor */
			reduce(94), /* .., reduce: Factor */
			reduce(94), /* <<, reduce: Factor */
			reduce(94), /* >>, reduce: Factor */
			reduce(94), /* +, reduce: Factor */
			reduce(94), /* -, reduce: Factor */
			reduce(94), /* *, reduce: Factor */
			reduce(94), /* /, reduce: Factor */
			reduce(94), /* %, reduce: Factor */
			reduce(94), /* //, reduce: Factor */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(94), /* (, reduce: Factor */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(94), /* ident, reduce: Factor */
		},
	},
	actionRow{ // S287
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(95), /* $, reduce: Power */
			reduce(95), /* return, reduce: Power */
			reduce(95), /* ;, reduce: Power */
			nil,        /* empty */
			nil,        /* = */
			reduce(95), /* break, reduce: Power */
			reduce(95), /* goto, reduce: Power */
			reduce(95), /* do, reduce: Power */
			nil,        /* end */
			reduce(95), /* while, reduce: Power */
			reduce(95), /* repeat, reduce: Power */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(95), /* if, reduce: Power */
			reduce(95), /* ,, reduce: Power */
			reduce(95), /* for, reduce: Power */
			nil,        /* in */
			reduce(95), /* function, reduce: Power */
			reduce(95), /* local, reduce: Power */
			reduce(95), /* ::, reduce: Power */
			nil,        /* . */
			nil,        /* : */
			reduce(95), /* or, reduce: Power */
			reduce(95), /* and, reduce: Power */
			reduce(95), /* <, reduce: Power */
			reduce(95), /* <=, reduce: Power */
			reduce(95), /* >, reduce: Power */
			reduce(95), /* >=, reduce: Power */
			reduce(95), /* ==, reduce: Power */
			reduce(95), /* ~=, reduce: Power */
			reduce(95), /* |, reduce: Power */
			reduce(95), /* ~, reduce: Power */
			reduce(95), /* &, reduce: Power */
			reduce(95), /* .., reduce: Power */
			reduce(95), /* <<, reduce: Power */
			reduce(95), /* >>, reduce: Power */
			reduce(95), /* +, reduce: Power */
			reduce(95), /* -, reduce: Power */
			reduce(95), /* *, reduce: Power */
			reduce(95), /* /, reduce: Power */
			reduce(95), /* %, reduce: Power */
			reduce(95), /* //, reduce: Power */
			nil,        /* not */
			nil,        /* # */
			shift(587), /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(95), /* (, reduce: Power */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(95), /* ident, reduce: Power */
		},
	},
	actionRow{ // S288
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(114), /* $, reduce: Atom */
			reduce(114), /* return, reduce: Atom */
			reduce(114), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(114), /* break, reduce: Atom */
			reduce(114), /* goto, reduce: Atom */
			reduce(114), /* do, reduce: Atom */
			nil,         /* end */
			reduce(114), /* while, reduce: Atom */
			reduce(114), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(114), /* if, reduce: Atom */
			reduce(114), /* ,, reduce: Atom */
			reduce(114), /* for, reduce: Atom */
			nil,         /* in */
			reduce(114), /* function, reduce: Atom */
			reduce(114), /* local, reduce: Atom */
			reduce(114), /* ::, reduce: Atom */
			shift(588),  /* . */
			shift(589),  /* : */
			reduce(114), /* or, reduce: Atom */
			reduce(114), /* and, reduce: Atom */
			reduce(114), /* <, reduce: Atom */
			reduce(114), /* <=, reduce: Atom */
			reduce(114), /* >, reduce: Atom */
			reduce(114), /* >=, reduce: Atom */
			reduce(114), /* ==, reduce: Atom */
			reduce(114), /* ~=, reduce: Atom */
			reduce(114), /* |, reduce: Atom */
			reduce(114), /* ~, reduce: Atom */
			reduce(114), /* &, reduce: Atom */
			reduce(114), /* .., reduce: Atom */
			reduce(114), /* <<, reduce: Atom */
			reduce(114), /* >>, reduce: Atom */
			reduce(114), /* +, reduce: Atom */
			reduce(114), /* -, reduce: Atom */
			reduce(114), /* *, reduce: Atom */
			reduce(114), /* /, reduce: Atom */
			reduce(114), /* %, reduce: Atom */
			reduce(114), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(114), /* ^, reduce: Atom */
			shift(590),  /* [ */
			nil,         /* ] */
			shift(591),  /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			shift(593),  /* string */
			shift(595),  /* { */
			nil,         /* } */
			reduce(114), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S289
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(168), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(184), /* ( */
			nil,        /* ) */
			shift(185), /* nil */
			shift(186), /* true */
			shift(187), /* false */
			shift(188), /* ... */
			shift(189), /* numdec */
			shift(190), /* numhex */
			shift(191), /* string */
			shift(194), /* { */
			nil,        /* } */
			shift(195), /* ident */
		},
	},
	actionRow{ // S290
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(105), /* $, reduce: Atom */
			reduce(105), /* return, reduce: Atom */
			reduce(105), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(105), /* break, reduce: Atom */
			reduce(105), /* goto, reduce: Atom */
			reduce(105), /* do, reduce: Atom */
			nil,         /* end */
			reduce(105), /* while, reduce: Atom */
			reduce(105), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(105), /* if, reduce: Atom */
			reduce(105), /* ,, reduce: Atom */
			reduce(105), /* for, reduce: Atom */
			nil,         /* in */
			reduce(105), /* function, reduce: Atom */
			reduce(105), /* local, reduce: Atom */
			reduce(105), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(105), /* or, reduce: Atom */
			reduce(105), /* and, reduce: Atom */
			reduce(105), /* <, reduce: Atom */
			reduce(105), /* <=, reduce: Atom */
			reduce(105), /* >, reduce: Atom */
			reduce(105), /* >=, reduce: Atom */
			reduce(105), /* ==, reduce: Atom */
			reduce(105), /* ~=, reduce: Atom */
			reduce(105), /* |, reduce: Atom */
			reduce(105), /* ~, reduce: Atom */
			reduce(105), /* &, reduce: Atom */
			reduce(105), /* .., reduce: Atom */
			reduce(105), /* <<, reduce: Atom */
			reduce(105), /* >>, reduce: Atom */
			reduce(105), /* +, reduce: Atom */
			reduce(105), /* -, reduce: Atom */
			reduce(105), /* *, reduce: Atom */
			reduce(105), /* /, reduce: Atom */
			reduce(105), /* %, reduce: Atom */
			reduce(105), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(105), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(105), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(105), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S291
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(106), /* $, reduce: Atom */
			reduce(106), /* return, reduce: Atom */
			reduce(106), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(106), /* break, reduce: Atom */
			reduce(106), /* goto, reduce: Atom */
			reduce(106), /* do, reduce: Atom */
			nil,         /* end */
			reduce(106), /* while, reduce: Atom */
			reduce(106), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(106), /* if, reduce: Atom */
			reduce(106), /* ,, reduce: Atom */
			reduce(106), /* for, reduce: Atom */
			nil,         /* in */
			reduce(106), /* function, reduce: Atom */
			reduce(106), /* local, reduce: Atom */
			reduce(106), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(106), /* or, reduce: Atom */
			reduce(106), /* and, reduce: Atom */
			reduce(106), /* <, reduce: Atom */
			reduce(106), /* <=, reduce: Atom */
			reduce(106), /* >, reduce: Atom */
			reduce(106), /* >=, reduce: Atom */
			reduce(106), /* ==, reduce: Atom */
			reduce(106), /* ~=, reduce: Atom */
			reduce(106), /* |, reduce: Atom */
			reduce(106), /* ~, reduce: Atom */
			reduce(106), /* &, reduce: Atom */
			reduce(106), /* .., reduce: Atom */
			reduce(106), /* <<, reduce: Atom */
			reduce(106), /* >>, reduce: Atom */
			reduce(106), /* +, reduce: Atom */
			reduce(106), /* -, reduce: Atom */
			reduce(106), /* *, reduce: Atom */
			reduce(106), /* /, reduce: Atom */
			reduce(106), /* %, reduce: Atom */
			reduce(106), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(106), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(106), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(106), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S292
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(107), /* $, reduce: Atom */
			reduce(107), /* return, reduce: Atom */
			reduce(107), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(107), /* break, reduce: Atom */
			reduce(107), /* goto, reduce: Atom */
			reduce(107), /* do, reduce: Atom */
			nil,         /* end */
			reduce(107), /* while, reduce: Atom */
			reduce(107), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(107), /* if, reduce: Atom */
			reduce(107), /* ,, reduce: Atom */
			reduce(107), /* for, reduce: Atom */
			nil,         /* in */
			reduce(107), /* function, reduce: Atom */
			reduce(107), /* local, reduce: Atom */
			reduce(107), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(107), /* or, reduce: Atom */
			reduce(107), /* and, reduce: Atom */
			reduce(107), /* <, reduce: Atom */
			reduce(107), /* <=, reduce: Atom */
			reduce(107), /* >, reduce: Atom */
			reduce(107), /* >=, reduce: Atom */
			reduce(107), /* ==, reduce: Atom */
			reduce(107), /* ~=, reduce: Atom */
			reduce(107), /* |, reduce: Atom */
			reduce(107), /* ~, reduce: Atom */
			reduce(107), /* &, reduce: Atom */
			reduce(107), /* .., reduce: Atom */
			reduce(107), /* <<, reduce: Atom */
			reduce(107), /* >>, reduce: Atom */
			reduce(107), /* +, reduce: Atom */
			reduce(107), /* -, reduce: Atom */
			reduce(107), /* *, reduce: Atom */
			reduce(107), /* /, reduce: Atom */
			reduce(107), /* %, reduce: Atom */
			reduce(107), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(107), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(107), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(107), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S293
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(108), /* $, reduce: Atom */
			reduce(108), /* return, reduce: Atom */
			reduce(108), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(108), /* break, reduce: Atom */
			reduce(108), /* goto, reduce: Atom */
			reduce(108), /* do, reduce: Atom */
			nil,         /* end */
			reduce(108), /* while, reduce: Atom */
			reduce(108), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(108), /* if, reduce: Atom */
			reduce(108), /* ,, reduce: Atom */
			reduce(108), /* for, reduce: Atom */
			nil,         /* in */
			reduce(108), /* function, reduce: Atom */
			reduce(108), /* local, reduce: Atom */
			reduce(108), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(108), /* or, reduce: Atom */
			reduce(108), /* and, reduce: Atom */
			reduce(108), /* <, reduce: Atom */
			reduce(108), /* <=, reduce: Atom */
			reduce(108), /* >, reduce: Atom */
			reduce(108), /* >=, reduce: Atom */
			reduce(108), /* ==, reduce: Atom */
			reduce(108), /* ~=, reduce: Atom */
			reduce(108), /* |, reduce: Atom */
			reduce(108), /* ~, reduce: Atom */
			reduce(108), /* &, reduce: Atom */
			reduce(108), /* .., reduce: Atom */
			reduce(108), /* <<, reduce: Atom */
			reduce(108), /* >>, reduce: Atom */
			reduce(108), /* +, reduce: Atom */
			reduce(108), /* -, reduce: Atom */
			reduce(108), /* *, reduce: Atom */
			reduce(108), /* /, reduce: Atom */
			reduce(108), /* %, reduce: Atom */
			reduce(108), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(108), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(108), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(108), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S294
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(109), /* $, reduce: Atom */
			reduce(109), /* return, reduce: Atom */
			reduce(109), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(109), /* break, reduce: Atom */
			reduce(109), /* goto, reduce: Atom */
			reduce(109), /* do, reduce: Atom */
			nil,         /* end */
			reduce(109), /* while, reduce: Atom */
			reduce(109), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(109), /* if, reduce: Atom */
			reduce(109), /* ,, reduce: Atom */
			reduce(109), /* for, reduce: Atom */
			nil,         /* in */
			reduce(109), /* function, reduce: Atom */
			reduce(109), /* local, reduce: Atom */
			reduce(109), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(109), /* or, reduce: Atom */
			reduce(109), /* and, reduce: Atom */
			reduce(109), /* <, reduce: Atom */
			reduce(109), /* <=, reduce: Atom */
			reduce(109), /* >, reduce: Atom */
			reduce(109), /* >=, reduce: Atom */
			reduce(109), /* ==, reduce: Atom */
			reduce(109), /* ~=, reduce: Atom */
			reduce(109), /* |, reduce: Atom */
			reduce(109), /* ~, reduce: Atom */
			reduce(109), /* &, reduce: Atom */
			reduce(109), /* .., reduce: Atom */
			reduce(109), /* <<, reduce: Atom */
			reduce(109), /* >>, reduce: Atom */
			reduce(109), /* +, reduce: Atom */
			reduce(109), /* -, reduce: Atom */
			reduce(109), /* *, reduce: Atom */
			reduce(109), /* /, reduce: Atom */
			reduce(109), /* %, reduce: Atom */
			reduce(109), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(109), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(109), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(109), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S295
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(110), /* $, reduce: Atom */
			reduce(110), /* return, reduce: Atom */
			reduce(110), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(110), /* break, reduce: Atom */
			reduce(110), /* goto, reduce: Atom */
			reduce(110), /* do, reduce: Atom */
			nil,         /* end */
			reduce(110), /* while, reduce: Atom */
			reduce(110), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(110), /* if, reduce: Atom */
			reduce(110), /* ,, reduce: Atom */
			reduce(110), /* for, reduce: Atom */
			nil,         /* in */
			reduce(110), /* function, reduce: Atom */
			reduce(110), /* local, reduce: Atom */
			reduce(110), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(110), /* or, reduce: Atom */
			reduce(110), /* and, reduce: Atom */
			reduce(110), /* <, reduce: Atom */
			reduce(110), /* <=, reduce: Atom */
			reduce(110), /* >, reduce: Atom */
			reduce(110), /* >=, reduce: Atom */
			reduce(110), /* ==, reduce: Atom */
			reduce(110), /* ~=, reduce: Atom */
			reduce(110), /* |, reduce: Atom */
			reduce(110), /* ~, reduce: Atom */
			reduce(110), /* &, reduce: Atom */
			reduce(110), /* .., reduce: Atom */
			reduce(110), /* <<, reduce: Atom */
			reduce(110), /* >>, reduce: Atom */
			reduce(110), /* +, reduce: Atom */
			reduce(110), /* -, reduce: Atom */
			reduce(110), /* *, reduce: Atom */
			reduce(110), /* /, reduce: Atom */
			reduce(110), /* %, reduce: Atom */
			reduce(110), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(110), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(110), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(110), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S296
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(111), /* $, reduce: Atom */
			reduce(111), /* return, reduce: Atom */
			reduce(111), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(111), /* break, reduce: Atom */
			reduce(111), /* goto, reduce: Atom */
			reduce(111), /* do, reduce: Atom */
			nil,         /* end */
			reduce(111), /* while, reduce: Atom */
			reduce(111), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(111), /* if, reduce: Atom */
			reduce(111), /* ,, reduce: Atom */
			reduce(111), /* for, reduce: Atom */
			nil,         /* in */
			reduce(111), /* function, reduce: Atom */
			reduce(111), /* local, reduce: Atom */
			reduce(111), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(111), /* or, reduce: Atom */
			reduce(111), /* and, reduce: Atom */
			reduce(111), /* <, reduce: Atom */
			reduce(111), /* <=, reduce: Atom */
			reduce(111), /* >, reduce: Atom */
			reduce(111), /* >=, reduce: Atom */
			reduce(111), /* ==, reduce: Atom */
			reduce(111), /* ~=, reduce: Atom */
			reduce(111), /* |, reduce: Atom */
			reduce(111), /* ~, reduce: Atom */
			reduce(111), /* &, reduce: Atom */
			reduce(111), /* .., reduce: Atom */
			reduce(111), /* <<, reduce: Atom */
			reduce(111), /* >>, reduce: Atom */
			reduce(111), /* +, reduce: Atom */
			reduce(111), /* -, reduce: Atom */
			reduce(111), /* *, reduce: Atom */
			reduce(111), /* /, reduce: Atom */
			reduce(111), /* %, reduce: Atom */
			reduce(111), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(111), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(111), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(111), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S297
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(112), /* $, reduce: Atom */
			reduce(112), /* return, reduce: Atom */
			reduce(112), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(112), /* break, reduce: Atom */
			reduce(112), /* goto, reduce: Atom */
			reduce(112), /* do, reduce: Atom */
			nil,         /* end */
			reduce(112), /* while, reduce: Atom */
			reduce(112), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(112), /* if, reduce: Atom */
			reduce(112), /* ,, reduce: Atom */
			reduce(112), /* for, reduce: Atom */
			nil,         /* in */
			reduce(112), /* function, reduce: Atom */
			reduce(112), /* local, reduce: Atom */
			reduce(112), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(112), /* or, reduce: Atom */
			reduce(112), /* and, reduce: Atom */
			reduce(112), /* <, reduce: Atom */
			reduce(112), /* <=, reduce: Atom */
			reduce(112), /* >, reduce: Atom */
			reduce(112), /* >=, reduce: Atom */
			reduce(112), /* ==, reduce: Atom */
			reduce(112), /* ~=, reduce: Atom */
			reduce(112), /* |, reduce: Atom */
			reduce(112), /* ~, reduce: Atom */
			reduce(112), /* &, reduce: Atom */
			reduce(112), /* .., reduce: Atom */
			reduce(112), /* <<, reduce: Atom */
			reduce(112), /* >>, reduce: Atom */
			reduce(112), /* +, reduce: Atom */
			reduce(112), /* -, reduce: Atom */
			reduce(112), /* *, reduce: Atom */
			reduce(112), /* /, reduce: Atom */
			reduce(112), /* %, reduce: Atom */
			reduce(112), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(112), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(112), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(112), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S298
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(113), /* $, reduce: Atom */
			reduce(113), /* return, reduce: Atom */
			reduce(113), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(113), /* break, reduce: Atom */
			reduce(113), /* goto, reduce: Atom */
			reduce(113), /* do, reduce: Atom */
			nil,         /* end */
			reduce(113), /* while, reduce: Atom */
			reduce(113), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(113), /* if, reduce: Atom */
			reduce(113), /* ,, reduce: Atom */
			reduce(113), /* for, reduce: Atom */
			nil,         /* in */
			reduce(113), /* function, reduce: Atom */
			reduce(113), /* local, reduce: Atom */
			reduce(113), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(113), /* or, reduce: Atom */
			reduce(113), /* and, reduce: Atom */
			reduce(113), /* <, reduce: Atom */
			reduce(113), /* <=, reduce: Atom */
			reduce(113), /* >, reduce: Atom */
			reduce(113), /* >=, reduce: Atom */
			reduce(113), /* ==, reduce: Atom */
			reduce(113), /* ~=, reduce: Atom */
			reduce(113), /* |, reduce: Atom */
			reduce(113), /* ~, reduce: Atom */
			reduce(113), /* &, reduce: Atom */
			reduce(113), /* .., reduce: Atom */
			reduce(113), /* <<, reduce: Atom */
			reduce(113), /* >>, reduce: Atom */
			reduce(113), /* +, reduce: Atom */
			reduce(113), /* -, reduce: Atom */
			reduce(113), /* *, reduce: Atom */
			reduce(113), /* /, reduce: Atom */
			reduce(113), /* %, reduce: Atom */
			reduce(113), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(113), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(113), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(113), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S299
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			shift(254), /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(268), /* ident */
		},
	},
	actionRow{ // S300
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(134), /* $, reduce: Name */
			reduce(134), /* return, reduce: Name */
			reduce(134), /* ;, reduce: Name */
			nil,         /* empty */
			nil,         /* = */
			reduce(134), /* break, reduce: Name */
			reduce(134), /* goto, reduce: Name */
			reduce(134), /* do, reduce: Name */
			nil,         /* end */
			reduce(134), /* while, reduce: Name */
			reduce(134), /* repeat, reduce: Name */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(134), /* if, reduce: Name */
			reduce(134), /* ,, reduce: Name */
			reduce(134), /* for, reduce: Name */
			nil,         /* in */
			reduce(134), /* function, reduce: Name */
			reduce(134), /* local, reduce: Name */
			reduce(134), /* ::, reduce: Name */
			reduce(134), /* ., reduce: Name */
			reduce(134), /* :, reduce: Name */
			reduce(134), /* or, reduce: Name */
			reduce(134), /* and, reduce: Name */
			reduce(134), /* <, reduce: Name */
			reduce(134), /* <=, reduce: Name */
			reduce(134), /* >, reduce: Name */
			reduce(134), /* >=, reduce: Name */
			reduce(134), /* ==, reduce: Name */
			reduce(134), /* ~=, reduce: Name */
			reduce(134), /* |, reduce: Name */
			reduce(134), /* ~, reduce: Name */
			reduce(134), /* &, reduce: Name */
			reduce(134), /* .., reduce: Name */
			reduce(134), /* <<, reduce: Name */
			reduce(134), /* >>, reduce: Name */
			reduce(134), /* +, reduce: Name */
			reduce(134), /* -, reduce: Name */
			reduce(134), /* *, reduce: Name */
			reduce(134), /* /, reduce: Name */
			reduce(134), /* %, reduce: Name */
			reduce(134), /* //, reduce: Name */
			nil,         /* not */
			nil,         /* # */
			reduce(134), /* ^, reduce: Name */
			reduce(134), /* [, reduce: Name */
			nil,         /* ] */
			reduce(134), /* (, reduce: Name */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(134), /* string, reduce: Name */
			reduce(134), /* {, reduce: Name */
			nil,         /* } */
			reduce(134), /* ident, reduce: Name */
		},
	},
	actionRow{ // S301
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(101), /* ., reduce: PrefixExp */
			reduce(101), /* :, reduce: PrefixExp */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			reduce(101), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(101), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(101), /* string, reduce: PrefixExp */
			reduce(101), /* {, reduce: PrefixExp */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S302
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			reduce(50),  /* =, reduce: VarList */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(50),  /* ,, reduce: VarList */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(100), /* ., reduce: PrefixExp */
			reduce(100), /* :, reduce: PrefixExp */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			reduce(100), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(100), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(100), /* string, reduce: PrefixExp */
			reduce(100), /* {, reduce: PrefixExp */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S303
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			shift(157), /* . */
			shift(598), /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			shift(159), /* [ */
			nil,        /* ] */
			shift(599), /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			shift(601), /* string */
			shift(603), /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S304
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(26), /* $, reduce: BlockStat */
			reduce(26), /* return, reduce: BlockStat */
			reduce(26), /* ;, reduce: BlockStat */
			nil,        /* empty */
			nil,        /* = */
			reduce(26), /* break, reduce: BlockStat */
			reduce(26), /* goto, reduce: BlockStat */
			reduce(26), /* do, reduce: BlockStat */
			nil,        /* end */
			reduce(26), /* while, reduce: BlockStat */
			reduce(26), /* repeat, reduce: BlockStat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(26), /* if, reduce: BlockStat */
			nil,        /* , */
			reduce(26), /* for, reduce: BlockStat */
			nil,        /* in */
			reduce(26), /* function, reduce: BlockStat */
			reduce(26), /* local, reduce: BlockStat */
			reduce(26), /* ::, reduce: BlockStat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(26), /* (, reduce: BlockStat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(26), /* ident, reduce: BlockStat */
		},
	},
	actionRow{ // S305
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			shift(605), /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			reduce(4),  /* end, reduce: Chunk */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(609), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(625), /* ( */
			nil,        /* ) */
			shift(626), /* nil */
			shift(627), /* true */
			shift(628), /* false */
			shift(629), /* ... */
			shift(630), /* numdec */
			shift(631), /* numhex */
			shift(632), /* string */
			shift(635), /* { */
			nil,        /* } */
			shift(636), /* ident */
		},
	},
	actionRow{ // S306
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(8), /* return, reduce: Stat */
			reduce(8), /* ;, reduce: Stat */
			nil,       /* empty */
			nil,       /* = */
			reduce(8), /* break, reduce: Stat */
			reduce(8), /* goto, reduce: Stat */
			reduce(8), /* do, reduce: Stat */
			reduce(8), /* end, reduce: Stat */
			reduce(8), /* while, reduce: Stat */
			reduce(8), /* repeat, reduce: Stat */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(8), /* if, reduce: Stat */
			nil,       /* , */
			reduce(8), /* for, reduce: Stat */
			nil,       /* in */
			reduce(8), /* function, reduce: Stat */
			reduce(8), /* local, reduce: Stat */
			reduce(8), /* ::, reduce: Stat */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(8), /* (, reduce: Stat */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(8), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S307
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(7), /* return, reduce: StatList */
			reduce(7), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(7), /* break, reduce: StatList */
			reduce(7), /* goto, reduce: StatList */
			reduce(7), /* do, reduce: StatList */
			reduce(7), /* end, reduce: StatList */
			reduce(7), /* while, reduce: StatList */
			reduce(7), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(7), /* if, reduce: StatList */
			nil,       /* , */
			reduce(7), /* for, reduce: StatList */
			nil,       /* in */
			reduce(7), /* function, reduce: StatList */
			reduce(7), /* local, reduce: StatList */
			reduce(7), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(7), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(7), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S308
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(9), /* return, reduce: Stat */
			reduce(9), /* ;, reduce: Stat */
			nil,       /* empty */
			nil,       /* = */
			reduce(9), /* break, reduce: Stat */
			reduce(9), /* goto, reduce: Stat */
			reduce(9), /* do, reduce: Stat */
			reduce(9), /* end, reduce: Stat */
			reduce(9), /* while, reduce: Stat */
			reduce(9), /* repeat, reduce: Stat */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(9), /* if, reduce: Stat */
			nil,       /* , */
			reduce(9), /* for, reduce: Stat */
			nil,       /* in */
			reduce(9), /* function, reduce: Stat */
			reduce(9), /* local, reduce: Stat */
			reduce(9), /* ::, reduce: Stat */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(9), /* (, reduce: Stat */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(9), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S309
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			shift(637),  /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(101), /* ., reduce: PrefixExp */
			reduce(101), /* :, reduce: PrefixExp */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			reduce(101), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(101), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(101), /* string, reduce: PrefixExp */
			reduce(101), /* {, reduce: PrefixExp */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S310
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(11), /* return, reduce: Stat */
			reduce(11), /* ;, reduce: Stat */
			nil,        /* empty */
			nil,        /* = */
			reduce(11), /* break, reduce: Stat */
			reduce(11), /* goto, reduce: Stat */
			reduce(11), /* do, reduce: Stat */
			reduce(11), /* end, reduce: Stat */
			reduce(11), /* while, reduce: Stat */
			reduce(11), /* repeat, reduce: Stat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(11), /* if, reduce: Stat */
			nil,        /* , */
			reduce(11), /* for, reduce: Stat */
			nil,        /* in */
			reduce(11), /* function, reduce: Stat */
			reduce(11), /* local, reduce: Stat */
			reduce(11), /* ::, reduce: Stat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(11), /* (, reduce: Stat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(11), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S311
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(12), /* return, reduce: Stat */
			reduce(12), /* ;, reduce: Stat */
			nil,        /* empty */
			nil,        /* = */
			reduce(12), /* break, reduce: Stat */
			reduce(12), /* goto, reduce: Stat */
			reduce(12), /* do, reduce: Stat */
			reduce(12), /* end, reduce: Stat */
			reduce(12), /* while, reduce: Stat */
			reduce(12), /* repeat, reduce: Stat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(12), /* if, reduce: Stat */
			nil,        /* , */
			reduce(12), /* for, reduce: Stat */
			nil,        /* in */
			reduce(12), /* function, reduce: Stat */
			reduce(12), /* local, reduce: Stat */
			reduce(12), /* ::, reduce: Stat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(12), /* (, reduce: Stat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(12), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S312
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(13), /* return, reduce: Stat */
			reduce(13), /* ;, reduce: Stat */
			nil,        /* empty */
			nil,        /* = */
			reduce(13), /* break, reduce: Stat */
			reduce(13), /* goto, reduce: Stat */
			reduce(13), /* do, reduce: Stat */
			reduce(13), /* end, reduce: Stat */
			reduce(13), /* while, reduce: Stat */
			reduce(13), /* repeat, reduce: Stat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(13), /* if, reduce: Stat */
			nil,        /* , */
			reduce(13), /* for, reduce: Stat */
			nil,        /* in */
			reduce(13), /* function, reduce: Stat */
			reduce(13), /* local, reduce: Stat */
			reduce(13), /* ::, reduce: Stat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(13), /* (, reduce: Stat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(13), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S313
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(14), /* return, reduce: Stat */
			reduce(14), /* ;, reduce: Stat */
			nil,        /* empty */
			nil,        /* = */
			reduce(14), /* break, reduce: Stat */
			reduce(14), /* goto, reduce: Stat */
			reduce(14), /* do, reduce: Stat */
			reduce(14), /* end, reduce: Stat */
			reduce(14), /* while, reduce: Stat */
			reduce(14), /* repeat, reduce: Stat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(14), /* if, reduce: Stat */
			nil,        /* , */
			reduce(14), /* for, reduce: Stat */
			nil,        /* in */
			reduce(14), /* function, reduce: Stat */
			reduce(14), /* local, reduce: Stat */
			reduce(14), /* ::, reduce: Stat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(14), /* (, reduce: Stat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(14), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S314
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(15), /* return, reduce: Stat */
			reduce(15), /* ;, reduce: Stat */
			nil,        /* empty */
			nil,        /* = */
			reduce(15), /* break, reduce: Stat */
			reduce(15), /* goto, reduce: Stat */
			reduce(15), /* do, reduce: Stat */
			reduce(15), /* end, reduce: Stat */
			reduce(15), /* while, reduce: Stat */
			reduce(15), /* repeat, reduce: Stat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(15), /* if, reduce: Stat */
			nil,        /* , */
			reduce(15), /* for, reduce: Stat */
			nil,        /* in */
			reduce(15), /* function, reduce: Stat */
			reduce(15), /* local, reduce: Stat */
			reduce(15), /* ::, reduce: Stat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(15), /* (, reduce: Stat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(15), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S315
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(16), /* return, reduce: Stat */
			reduce(16), /* ;, reduce: Stat */
			nil,        /* empty */
			nil,        /* = */
			reduce(16), /* break, reduce: Stat */
			reduce(16), /* goto, reduce: Stat */
			reduce(16), /* do, reduce: Stat */
			reduce(16), /* end, reduce: Stat */
			reduce(16), /* while, reduce: Stat */
			reduce(16), /* repeat, reduce: Stat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(16), /* if, reduce: Stat */
			nil,        /* , */
			reduce(16), /* for, reduce: Stat */
			nil,        /* in */
			reduce(16), /* function, reduce: Stat */
			reduce(16), /* local, reduce: Stat */
			reduce(16), /* ::, reduce: Stat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(16), /* (, reduce: Stat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(16), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S316
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(17), /* return, reduce: Stat */
			reduce(17), /* ;, reduce: Stat */
			nil,        /* empty */
			nil,        /* = */
			reduce(17), /* break, reduce: Stat */
			reduce(17), /* goto, reduce: Stat */
			reduce(17), /* do, reduce: Stat */
			reduce(17), /* end, reduce: Stat */
			reduce(17), /* while, reduce: Stat */
			reduce(17), /* repeat, reduce: Stat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(17), /* if, reduce: Stat */
			nil,        /* , */
			reduce(17), /* for, reduce: Stat */
			nil,        /* in */
			reduce(17), /* function, reduce: Stat */
			reduce(17), /* local, reduce: Stat */
			reduce(17), /* ::, reduce: Stat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(17), /* (, reduce: Stat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(17), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S317
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(18), /* return, reduce: Stat */
			reduce(18), /* ;, reduce: Stat */
			nil,        /* empty */
			nil,        /* = */
			reduce(18), /* break, reduce: Stat */
			reduce(18), /* goto, reduce: Stat */
			reduce(18), /* do, reduce: Stat */
			reduce(18), /* end, reduce: Stat */
			reduce(18), /* while, reduce: Stat */
			reduce(18), /* repeat, reduce: Stat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(18), /* if, reduce: Stat */
			nil,        /* , */
			reduce(18), /* for, reduce: Stat */
			nil,        /* in */
			reduce(18), /* function, reduce: Stat */
			reduce(18), /* local, reduce: Stat */
			reduce(18), /* ::, reduce: Stat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(18), /* (, reduce: Stat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(18), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S318
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(19), /* return, reduce: Stat */
			reduce(19), /* ;, reduce: Stat */
			nil,        /* empty */
			nil,        /* = */
			reduce(19), /* break, reduce: Stat */
			reduce(19), /* goto, reduce: Stat */
			reduce(19), /* do, reduce: Stat */
			reduce(19), /* end, reduce: Stat */
			reduce(19), /* while, reduce: Stat */
			reduce(19), /* repeat, reduce: Stat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(19), /* if, reduce: Stat */
			nil,        /* , */
			reduce(19), /* for, reduce: Stat */
			nil,        /* in */
			reduce(19), /* function, reduce: Stat */
			reduce(19), /* local, reduce: Stat */
			reduce(19), /* ::, reduce: Stat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(19), /* (, reduce: Stat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(19), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S319
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(20), /* return, reduce: Stat */
			reduce(20), /* ;, reduce: Stat */
			nil,        /* empty */
			nil,        /* = */
			reduce(20), /* break, reduce: Stat */
			reduce(20), /* goto, reduce: Stat */
			reduce(20), /* do, reduce: Stat */
			reduce(20), /* end, reduce: Stat */
			reduce(20), /* while, reduce: Stat */
			reduce(20), /* repeat, reduce: Stat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(20), /* if, reduce: Stat */
			nil,        /* , */
			reduce(20), /* for, reduce: Stat */
			nil,        /* in */
			reduce(20), /* function, reduce: Stat */
			reduce(20), /* local, reduce: Stat */
			reduce(20), /* ::, reduce: Stat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(20), /* (, reduce: Stat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(20), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S320
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(21), /* return, reduce: Stat */
			reduce(21), /* ;, reduce: Stat */
			nil,        /* empty */
			nil,        /* = */
			reduce(21), /* break, reduce: Stat */
			reduce(21), /* goto, reduce: Stat */
			reduce(21), /* do, reduce: Stat */
			reduce(21), /* end, reduce: Stat */
			reduce(21), /* while, reduce: Stat */
			reduce(21), /* repeat, reduce: Stat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(21), /* if, reduce: Stat */
			nil,        /* , */
			reduce(21), /* for, reduce: Stat */
			nil,        /* in */
			reduce(21), /* function, reduce: Stat */
			reduce(21), /* local, reduce: Stat */
			reduce(21), /* ::, reduce: Stat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(21), /* (, reduce: Stat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(21), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S321
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(22), /* return, reduce: Stat */
			reduce(22), /* ;, reduce: Stat */
			nil,        /* empty */
			nil,        /* = */
			reduce(22), /* break, reduce: Stat */
			reduce(22), /* goto, reduce: Stat */
			reduce(22), /* do, reduce: Stat */
			reduce(22), /* end, reduce: Stat */
			reduce(22), /* while, reduce: Stat */
			reduce(22), /* repeat, reduce: Stat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(22), /* if, reduce: Stat */
			nil,        /* , */
			reduce(22), /* for, reduce: Stat */
			nil,        /* in */
			reduce(22), /* function, reduce: Stat */
			reduce(22), /* local, reduce: Stat */
			reduce(22), /* ::, reduce: Stat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(22), /* (, reduce: Stat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(22), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S322
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			shift(638), /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			shift(75),  /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S323
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(24), /* return, reduce: BreakStat */
			reduce(24), /* ;, reduce: BreakStat */
			nil,        /* empty */
			nil,        /* = */
			reduce(24), /* break, reduce: BreakStat */
			reduce(24), /* goto, reduce: BreakStat */
			reduce(24), /* do, reduce: BreakStat */
			reduce(24), /* end, reduce: BreakStat */
			reduce(24), /* while, reduce: BreakStat */
			reduce(24), /* repeat, reduce: BreakStat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(24), /* if, reduce: BreakStat */
			nil,        /* , */
			reduce(24), /* for, reduce: BreakStat */
			nil,        /* in */
			reduce(24), /* function, reduce: BreakStat */
			reduce(24), /* local, reduce: BreakStat */
			reduce(24), /* ::, reduce: BreakStat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(24), /* (, reduce: BreakStat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(24), /* ident, reduce: BreakStat */
		},
	},
	actionRow{ // S324
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(640), /* ident */
		},
	},
	actionRow{ // S325
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S326
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(83),  /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(99),  /* ( */
			nil,        /* ) */
			shift(100), /* nil */
			shift(101), /* true */
			shift(102), /* false */
			shift(103), /* ... */
			shift(104), /* numdec */
			shift(105), /* numhex */
			shift(106), /* string */
			shift(109), /* { */
			nil,        /* } */
			shift(110), /* ident */
		},
	},
	actionRow{ // S327
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			nil,       /* end */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			reduce(6), /* until, reduce: StatList */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S328
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(116), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(132), /* ( */
			nil,        /* ) */
			shift(133), /* nil */
			shift(134), /* true */
			shift(135), /* false */
			shift(136), /* ... */
			shift(137), /* numdec */
			shift(138), /* numhex */
			shift(139), /* string */
			shift(142), /* { */
			nil,        /* } */
			shift(143), /* ident */
		},
	},
	actionRow{ // S329
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(146), /* ident */
		},
	},
	actionRow{ // S330
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(150), /* ident */
		},
	},
	actionRow{ // S331
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(650), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(651), /* ident */
		},
	},
	actionRow{ // S332
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(156), /* ident */
		},
	},
	actionRow{ // S333
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S334
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(83),  /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(99),  /* ( */
			nil,        /* ) */
			shift(100), /* nil */
			shift(101), /* true */
			shift(102), /* false */
			shift(103), /* ... */
			shift(104), /* numdec */
			shift(105), /* numhex */
			shift(106), /* string */
			shift(109), /* { */
			nil,        /* } */
			shift(110), /* ident */
		},
	},
	actionRow{ // S335
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(119), /* do, reduce: FunctionDef */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(119), /* or, reduce: FunctionDef */
			reduce(119), /* and, reduce: FunctionDef */
			reduce(119), /* <, reduce: FunctionDef */
			reduce(119), /* <=, reduce: FunctionDef */
			reduce(119), /* >, reduce: FunctionDef */
			reduce(119), /* >=, reduce: FunctionDef */
			reduce(119), /* ==, reduce: FunctionDef */
			reduce(119), /* ~=, reduce: FunctionDef */
			reduce(119), /* |, reduce: FunctionDef */
			reduce(119), /* ~, reduce: FunctionDef */
			reduce(119), /* &, reduce: FunctionDef */
			reduce(119), /* .., reduce: FunctionDef */
			reduce(119), /* <<, reduce: FunctionDef */
			reduce(119), /* >>, reduce: FunctionDef */
			reduce(119), /* +, reduce: FunctionDef */
			reduce(119), /* -, reduce: FunctionDef */
			reduce(119), /* *, reduce: FunctionDef */
			reduce(119), /* /, reduce: FunctionDef */
			reduce(119), /* %, reduce: FunctionDef */
			reduce(119), /* //, reduce: FunctionDef */
			nil,         /* not */
			nil,         /* # */
			reduce(119), /* ^, reduce: FunctionDef */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S336
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(123), /* ), reduce: ParList */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			shift(521),  /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			shift(523),  /* ident */
		},
	},
	actionRow{ // S337
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(83),  /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(99),  /* ( */
			nil,        /* ) */
			shift(100), /* nil */
			shift(101), /* true */
			shift(102), /* false */
			shift(103), /* ... */
			shift(104), /* numdec */
			shift(105), /* numhex */
			shift(106), /* string */
			shift(109), /* { */
			nil,        /* } */
			shift(110), /* ident */
		},
	},
	actionRow{ // S338
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(83),  /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(99),  /* ( */
			nil,        /* ) */
			shift(100), /* nil */
			shift(101), /* true */
			shift(102), /* false */
			shift(103), /* ... */
			shift(104), /* numdec */
			shift(105), /* numhex */
			shift(106), /* string */
			shift(109), /* { */
			nil,        /* } */
			shift(110), /* ident */
		},
	},
	actionRow{ // S339
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(83),  /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(99),  /* ( */
			nil,        /* ) */
			shift(100), /* nil */
			shift(101), /* true */
			shift(102), /* false */
			shift(103), /* ... */
			shift(104), /* numdec */
			shift(105), /* numhex */
			shift(106), /* string */
			shift(109), /* { */
			nil,        /* } */
			shift(110), /* ident */
		},
	},
	actionRow{ // S340
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(83),  /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(99),  /* ( */
			nil,        /* ) */
			shift(100), /* nil */
			shift(101), /* true */
			shift(102), /* false */
			shift(103), /* ... */
			shift(104), /* numdec */
			shift(105), /* numhex */
			shift(106), /* string */
			shift(109), /* { */
			nil,        /* } */
			shift(110), /* ident */
		},
	},
	actionRow{ // S341
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(83),  /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(99),  /* ( */
			nil,        /* ) */
			shift(100), /* nil */
			shift(101), /* true */
			shift(102), /* false */
			shift(103), /* ... */
			shift(104), /* numdec */
			shift(105), /* numhex */
			shift(106), /* string */
			shift(109), /* { */
			nil,        /* } */
			shift(110), /* ident */
		},
	},
	actionRow{ // S342
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(83),  /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(99),  /* ( */
			nil,        /* ) */
			shift(100), /* nil */
			shift(101), /* true */
			shift(102), /* false */
			shift(103), /* ... */
			shift(104), /* numdec */
			shift(105), /* numhex */
			shift(106), /* string */
			shift(109), /* { */
			nil,        /* } */
			shift(110), /* ident */
		},
	},
	actionRow{ // S343
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(83),  /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(99),  /* ( */
			nil,        /* ) */
			shift(100), /* nil */
			shift(101), /* true */
			shift(102), /* false */
			shift(103), /* ... */
			shift(104), /* numdec */
			shift(105), /* numhex */
			shift(106), /* string */
			shift(109), /* { */
			nil,        /* } */
			shift(110), /* ident */
		},
	},
	actionRow{ // S344
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(83),  /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(99),  /* ( */
			nil,        /* ) */
			shift(100), /* nil */
			shift(101), /* true */
			shift(102), /* false */
			shift(103), /* ... */
			shift(104), /* numdec */
			shift(105), /* numhex */
			shift(106), /* string */
			shift(109), /* { */
			nil,        /* } */
			shift(110), /* ident */
		},
	},
	actionRow{ // S345
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(83),  /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(99),  /* ( */
			nil,        /* ) */
			shift(100), /* nil */
			shift(101), /* true */
			shift(102), /* false */
			shift(103), /* ... */
			shift(104), /* numdec */
			shift(105), /* numhex */
			shift(106), /* string */
			shift(109), /* { */
			nil,        /* } */
			shift(110), /* ident */
		},
	},
	actionRow{ // S346
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			reduce(93), /* do, reduce: Factor */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(93), /* or, reduce: Factor */
			reduce(93), /* and, reduce: Factor */
			reduce(93), /* <, reduce: Factor */
			reduce(93), /* <=, reduce: Factor */
			reduce(93), /* >, reduce: Factor */
			reduce(93), /* >=, reduce: Factor */
			reduce(93), /* ==, reduce: Factor */
			reduce(93), /* ~=, reduce: Factor */
			reduce(93), /* |, reduce: Factor */
			reduce(93), /* ~, reduce: Factor */
			reduce(93), /* &, reduce: Factor */
			reduce(93), /* .., reduce: Factor */
			reduce(93), /* <<, reduce: Factor */
			reduce(93), /* >>, reduce: Factor */
			reduce(93), /* +, reduce: Factor */
			reduce(93), /* -, reduce: Factor */
			reduce(93), /* *, reduce: Factor */
			reduce(93), /* /, reduce: Factor */
			reduce(93), /* %, reduce: Factor */
			reduce(93), /* //, reduce: Factor */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S347
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(83),  /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(99),  /* ( */
			nil,        /* ) */
			shift(100), /* nil */
			shift(101), /* true */
			shift(102), /* false */
			shift(103), /* ... */
			shift(104), /* numdec */
			shift(105), /* numhex */
			shift(106), /* string */
			shift(109), /* { */
			nil,        /* } */
			shift(110), /* ident */
		},
	},
	actionRow{ // S348
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(110), /* ident */
		},
	},
	actionRow{ // S349
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(426), /* ident */
		},
	},
	actionRow{ // S350
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(430), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(446), /* ( */
			nil,        /* ) */
			shift(447), /* nil */
			shift(448), /* true */
			shift(449), /* false */
			shift(450), /* ... */
			shift(451), /* numdec */
			shift(452), /* numhex */
			shift(453), /* string */
			shift(456), /* { */
			nil,        /* } */
			shift(457), /* ident */
		},
	},
	actionRow{ // S351
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(462), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(478), /* ( */
			shift(670), /* ) */
			shift(480), /* nil */
			shift(481), /* true */
			shift(482), /* false */
			shift(483), /* ... */
			shift(484), /* numdec */
			shift(485), /* numhex */
			shift(486), /* string */
			shift(489), /* { */
			nil,        /* } */
			shift(490), /* ident */
		},
	},
	actionRow{ // S352
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(103), /* do, reduce: FunctionCall */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(103), /* ., reduce: FunctionCall */
			reduce(103), /* :, reduce: FunctionCall */
			reduce(103), /* or, reduce: FunctionCall */
			reduce(103), /* and, reduce: FunctionCall */
			reduce(103), /* <, reduce: FunctionCall */
			reduce(103), /* <=, reduce: FunctionCall */
			reduce(103), /* >, reduce: FunctionCall */
			reduce(103), /* >=, reduce: FunctionCall */
			reduce(103), /* ==, reduce: FunctionCall */
			reduce(103), /* ~=, reduce: FunctionCall */
			reduce(103), /* |, reduce: FunctionCall */
			reduce(103), /* ~, reduce: FunctionCall */
			reduce(103), /* &, reduce: FunctionCall */
			reduce(103), /* .., reduce: FunctionCall */
			reduce(103), /* <<, reduce: FunctionCall */
			reduce(103), /* >>, reduce: FunctionCall */
			reduce(103), /* +, reduce: FunctionCall */
			reduce(103), /* -, reduce: FunctionCall */
			reduce(103), /* *, reduce: FunctionCall */
			reduce(103), /* /, reduce: FunctionCall */
			reduce(103), /* %, reduce: FunctionCall */
			reduce(103), /* //, reduce: FunctionCall */
			nil,         /* not */
			nil,         /* # */
			reduce(103), /* ^, reduce: FunctionCall */
			reduce(103), /* [, reduce: FunctionCall */
			nil,         /* ] */
			reduce(103), /* (, reduce: FunctionCall */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(103), /* string, reduce: FunctionCall */
			reduce(103), /* {, reduce: FunctionCall */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S353
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(118), /* do, reduce: Args */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(118), /* ., reduce: Args */
			reduce(118), /* :, reduce: Args */
			reduce(118), /* or, reduce: Args */
			reduce(118), /* and, reduce: Args */
			reduce(118), /* <, reduce: Args */
			reduce(118), /* <=, reduce: Args */
			reduce(118), /* >, reduce: Args */
			reduce(118), /* >=, reduce: Args */
			reduce(118), /* ==, reduce: Args */
			reduce(118), /* ~=, reduce: Args */
			reduce(118), /* |, reduce: Args */
			reduce(118), /* ~, reduce: Args */
			reduce(118), /* &, reduce: Args */
			reduce(118), /* .., reduce: Args */
			reduce(118), /* <<, reduce: Args */
			reduce(118), /* >>, reduce: Args */
			reduce(118), /* +, reduce: Args */
			reduce(118), /* -, reduce: Args */
			reduce(118), /* *, reduce: Args */
			reduce(118), /* /, reduce: Args */
			reduce(118), /* %, reduce: Args */
			reduce(118), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(118), /* ^, reduce: Args */
			reduce(118), /* [, reduce: Args */
			nil,         /* ] */
			reduce(118), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(118), /* string, reduce: Args */
			reduce(118), /* {, reduce: Args */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S354
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(117), /* do, reduce: Args */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(117), /* ., reduce: Args */
			reduce(117), /* :, reduce: Args */
			reduce(117), /* or, reduce: Args */
			reduce(117), /* and, reduce: Args */
			reduce(117), /* <, reduce: Args */
			reduce(117), /* <=, reduce: Args */
			reduce(117), /* >, reduce: Args */
			reduce(117), /* >=, reduce: Args */
			reduce(117), /* ==, reduce: Args */
			reduce(117), /* ~=, reduce: Args */
			reduce(117), /* |, reduce: Args */
			reduce(117), /* ~, reduce: Args */
			reduce(117), /* &, reduce: Args */
			reduce(117), /* .., reduce: Args */
			reduce(117), /* <<, reduce: Args */
			reduce(117), /* >>, reduce: Args */
			reduce(117), /* +, reduce: Args */
			reduce(117), /* -, reduce: Args */
			reduce(117), /* *, reduce: Args */
			reduce(117), /* /, reduce: Args */
			reduce(117), /* %, reduce: Args */
			reduce(117), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(117), /* ^, reduce: Args */
			reduce(117), /* [, reduce: Args */
			nil,         /* ] */
			reduce(117), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(117), /* string, reduce: Args */
			reduce(117), /* {, reduce: Args */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S355
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			shift(254), /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(268), /* ident */
		},
	},
	actionRow{ // S356
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			shift(492), /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			shift(672), /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S357
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			shift(569), /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			shift(570), /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			shift(673), /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S358
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(678), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(694), /* ( */
			nil,        /* ) */
			shift(695), /* nil */
			shift(696), /* true */
			shift(697), /* false */
			shift(698), /* ... */
			shift(699), /* numdec */
			shift(700), /* numhex */
			shift(701), /* string */
			shift(704), /* { */
			nil,        /* } */
			shift(705), /* ident */
		},
	},
	actionRow{ // S359
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			shift(707), /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			reduce(4),  /* until, reduce: Chunk */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(711), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(727), /* ( */
			nil,        /* ) */
			shift(728), /* nil */
			shift(729), /* true */
			shift(730), /* false */
			shift(731), /* ... */
			shift(732), /* numdec */
			shift(733), /* numhex */
			shift(734), /* string */
			shift(737), /* { */
			nil,        /* } */
			shift(738), /* ident */
		},
	},
	actionRow{ // S360
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(8), /* return, reduce: Stat */
			reduce(8), /* ;, reduce: Stat */
			nil,       /* empty */
			nil,       /* = */
			reduce(8), /* break, reduce: Stat */
			reduce(8), /* goto, reduce: Stat */
			reduce(8), /* do, reduce: Stat */
			nil,       /* end */
			reduce(8), /* while, reduce: Stat */
			reduce(8), /* repeat, reduce: Stat */
			reduce(8), /* until, reduce: Stat */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(8), /* if, reduce: Stat */
			nil,       /* , */
			reduce(8), /* for, reduce: Stat */
			nil,       /* in */
			reduce(8), /* function, reduce: Stat */
			reduce(8), /* local, reduce: Stat */
			reduce(8), /* ::, reduce: Stat */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(8), /* (, reduce: Stat */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(8), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S361
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(7), /* return, reduce: StatList */
			reduce(7), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(7), /* break, reduce: StatList */
			reduce(7), /* goto, reduce: StatList */
			reduce(7), /* do, reduce: StatList */
			nil,       /* end */
			reduce(7), /* while, reduce: StatList */
			reduce(7), /* repeat, reduce: StatList */
			reduce(7), /* until, reduce: StatList */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(7), /* if, reduce: StatList */
			nil,       /* , */
			reduce(7), /* for, reduce: StatList */
			nil,       /* in */
			reduce(7), /* function, reduce: StatList */
			reduce(7), /* local, reduce: StatList */
			reduce(7), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(7), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(7), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S362
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(9), /* return, reduce: Stat */
			reduce(9), /* ;, reduce: Stat */
			nil,       /* empty */
			nil,       /* = */
			reduce(9), /* break, reduce: Stat */
			reduce(9), /* goto, reduce: Stat */
			reduce(9), /* do, reduce: Stat */
			nil,       /* end */
			reduce(9), /* while, reduce: Stat */
			reduce(9), /* repeat, reduce: Stat */
			reduce(9), /* until, reduce: Stat */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(9), /* if, reduce: Stat */
			nil,       /* , */
			reduce(9), /* for, reduce: Stat */
			nil,       /* in */
			reduce(9), /* function, reduce: Stat */
			reduce(9), /* local, reduce: Stat */
			reduce(9), /* ::, reduce: Stat */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(9), /* (, reduce: Stat */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(9), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S363
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			shift(739),  /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(101), /* ., reduce: PrefixExp */
			reduce(101), /* :, reduce: PrefixExp */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			reduce(101), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(101), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(101), /* string, reduce: PrefixExp */
			reduce(101), /* {, reduce: PrefixExp */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S364
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(11), /* return, reduce: Stat */
			reduce(11), /* ;, reduce: Stat */
			nil,        /* empty */
			nil,        /* = */
			reduce(11), /* break, reduce: Stat */
			reduce(11), /* goto, reduce: Stat */
			reduce(11), /* do, reduce: Stat */
			nil,        /* end */
			reduce(11), /* while, reduce: Stat */
			reduce(11), /* repeat, reduce: Stat */
			reduce(11), /* until, reduce: Stat */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(11), /* if, reduce: Stat */
			nil,        /* , */
			reduce(11), /* for, reduce: Stat */
			nil,        /* in */
			reduce(11), /* function, reduce: Stat */
			reduce(11), /* local, reduce: Stat */
			reduce(11), /* ::, reduce: Stat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(11), /* (, reduce: Stat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(11), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S365
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(12), /* return, reduce: Stat */
			reduce(12), /* ;, reduce: Stat */
			nil,        /* empty */
			nil,        /* = */
			reduce(12), /* break, reduce: Stat */
			reduce(12), /* goto, reduce: Stat */
			reduce(12), /* do, reduce: Stat */
			nil,        /* end */
			reduce(12), /* while, reduce: Stat */
			reduce(12), /* repeat, reduce: Stat */
			reduce(12), /* until, reduce: Stat */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(12), /* if, reduce: Stat */
			nil,        /* , */
			reduce(12), /* for, reduce: Stat */
			nil,        /* in */
			reduce(12), /* function, reduce: Stat */
			reduce(12), /* local, reduce: Stat */
			reduce(12), /* ::, reduce: Stat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(12), /* (, reduce: Stat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(12), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S366
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(13), /* return, reduce: Stat */
			reduce(13), /* ;, reduce: Stat */
			nil,        /* empty */
			nil,        /* = */
			reduce(13), /* break, reduce: Stat */
			reduce(13), /* goto, reduce: Stat */
			reduce(13), /* do, reduce: Stat */
			nil,        /* end */
			reduce(13), /* while, reduce: Stat */
			reduce(13), /* repeat, reduce: Stat */
			reduce(13), /* until, reduce: Stat */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(13), /* if, reduce: Stat */
			nil,        /* , */
			reduce(13), /* for, reduce: Stat */
			nil,        /* in */
			reduce(13), /* function, reduce: Stat */
			reduce(13), /* local, reduce: Stat */
			reduce(13), /* ::, reduce: Stat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(13), /* (, reduce: Stat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(13), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S367
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(14), /* return, reduce: Stat */
			reduce(14), /* ;, reduce: Stat */
			nil,        /* empty */
			nil,        /* = */
			reduce(14), /* break, reduce: Stat */
			reduce(14), /* goto, reduce: Stat */
			reduce(14), /* do, reduce: Stat */
			nil,        /* end */
			reduce(14), /* while, reduce: Stat */
			reduce(14), /* repeat, reduce: Stat */
			reduce(14), /* until, reduce: Stat */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(14), /* if, reduce: Stat */
			nil,        /* , */
			reduce(14), /* for, reduce: Stat */
			nil,        /* in */
			reduce(14), /* function, reduce: Stat */
			reduce(14), /* local, reduce: Stat */
			reduce(14), /* ::, reduce: Stat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(14), /* (, reduce: Stat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(14), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S368
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(15), /* return, reduce: Stat */
			reduce(15), /* ;, reduce: Stat */
			nil,        /* empty */
			nil,        /* = */
			reduce(15), /* break, reduce: Stat */
			reduce(15), /* goto, reduce: Stat */
			reduce(15), /* do, reduce: Stat */
			nil,        /* end */
			reduce(15), /* while, reduce: Stat */
			reduce(15), /* repeat, reduce: Stat */
			reduce(15), /* until, reduce: Stat */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(15), /* if, reduce: Stat */
			nil,        /* , */
			reduce(15), /* for, reduce: Stat */
			nil,        /* in */
			reduce(15), /* function, reduce: Stat */
			reduce(15), /* local, reduce: Stat */
			reduce(15), /* ::, reduce: Stat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(15), /* (, reduce: Stat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(15), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S369
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(16), /* return, reduce: Stat */
			reduce(16), /* ;, reduce: Stat */
			nil,        /* empty */
			nil,        /* = */
			reduce(16), /* break, reduce: Stat */
			reduce(16), /* goto, reduce: Stat */
			reduce(16), /* do, reduce: Stat */
			nil,        /* end */
			reduce(16), /* while, reduce: Stat */
			reduce(16), /* repeat, reduce: Stat */
			reduce(16), /* until, reduce: Stat */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(16), /* if, reduce: Stat */
			nil,        /* , */
			reduce(16), /* for, reduce: Stat */
			nil,        /* in */
			reduce(16), /* function, reduce: Stat */
			reduce(16), /* local, reduce: Stat */
			reduce(16), /* ::, reduce: Stat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(16), /* (, reduce: Stat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(16), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S370
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(17), /* return, reduce: Stat */
			reduce(17), /* ;, reduce: Stat */
			nil,        /* empty */
			nil,        /* = */
			reduce(17), /* break, reduce: Stat */
			reduce(17), /* goto, reduce: Stat */
			reduce(17), /* do, reduce: Stat */
			nil,        /* end */
			reduce(17), /* while, reduce: Stat */
			reduce(17), /* repeat, reduce: Stat */
			reduce(17), /* until, reduce: Stat */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(17), /* if, reduce: Stat */
			nil,        /* , */
			reduce(17), /* for, reduce: Stat */
			nil,        /* in */
			reduce(17), /* function, reduce: Stat */
			reduce(17), /* local, reduce: Stat */
			reduce(17), /* ::, reduce: Stat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(17), /* (, reduce: Stat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(17), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S371
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(18), /* return, reduce: Stat */
			reduce(18), /* ;, reduce: Stat */
			nil,        /* empty */
			nil,        /* = */
			reduce(18), /* break, reduce: Stat */
			reduce(18), /* goto, reduce: Stat */
			reduce(18), /* do, reduce: Stat */
			nil,        /* end */
			reduce(18), /* while, reduce: Stat */
			reduce(18), /* repeat, reduce: Stat */
			reduce(18), /* until, reduce: Stat */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(18), /* if, reduce: Stat */
			nil,        /* , */
			reduce(18), /* for, reduce: Stat */
			nil,        /* in */
			reduce(18), /* function, reduce: Stat */
			reduce(18), /* local, reduce: Stat */
			reduce(18), /* ::, reduce: Stat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(18), /* (, reduce: Stat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(18), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S372
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(19), /* return, reduce: Stat */
			reduce(19), /* ;, reduce: Stat */
			nil,        /* empty */
			nil,        /* = */
			reduce(19), /* break, reduce: Stat */
			reduce(19), /* goto, reduce: Stat */
			reduce(19), /* do, reduce: Stat */
			nil,        /* end */
			reduce(19), /* while, reduce: Stat */
			reduce(19), /* repeat, reduce: Stat */
			reduce(19), /* until, reduce: Stat */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(19), /* if, reduce: Stat */
			nil,        /* , */
			reduce(19), /* for, reduce: Stat */
			nil,        /* in */
			reduce(19), /* function, reduce: Stat */
			reduce(19), /* local, reduce: Stat */
			reduce(19), /* ::, reduce: Stat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(19), /* (, reduce: Stat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(19), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S373
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(20), /* return, reduce: Stat */
			reduce(20), /* ;, reduce: Stat */
			nil,        /* empty */
			nil,        /* = */
			reduce(20), /* break, reduce: Stat */
			reduce(20), /* goto, reduce: Stat */
			reduce(20), /* do, reduce: Stat */
			nil,        /* end */
			reduce(20), /* while, reduce: Stat */
			reduce(20), /* repeat, reduce: Stat */
			reduce(20), /* until, reduce: Stat */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(20), /* if, reduce: Stat */
			nil,        /* , */
			reduce(20), /* for, reduce: Stat */
			nil,        /* in */
			reduce(20), /* function, reduce: Stat */
			reduce(20), /* local, reduce: Stat */
			reduce(20), /* ::, reduce: Stat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(20), /* (, reduce: Stat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(20), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S374
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(21), /* return, reduce: Stat */
			reduce(21), /* ;, reduce: Stat */
			nil,        /* empty */
			nil,        /* = */
			reduce(21), /* break, reduce: Stat */
			reduce(21), /* goto, reduce: Stat */
			reduce(21), /* do, reduce: Stat */
			nil,        /* end */
			reduce(21), /* while, reduce: Stat */
			reduce(21), /* repeat, reduce: Stat */
			reduce(21), /* until, reduce: Stat */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(21), /* if, reduce: Stat */
			nil,        /* , */
			reduce(21), /* for, reduce: Stat */
			nil,        /* in */
			reduce(21), /* function, reduce: Stat */
			reduce(21), /* local, reduce: Stat */
			reduce(21), /* ::, reduce: Stat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(21), /* (, reduce: Stat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(21), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S375
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(22), /* return, reduce: Stat */
			reduce(22), /* ;, reduce: Stat */
			nil,        /* empty */
			nil,        /* = */
			reduce(22), /* break, reduce: Stat */
			reduce(22), /* goto, reduce: Stat */
			reduce(22), /* do, reduce: Stat */
			nil,        /* end */
			reduce(22), /* while, reduce: Stat */
			reduce(22), /* repeat, reduce: Stat */
			reduce(22), /* until, reduce: Stat */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(22), /* if, reduce: Stat */
			nil,        /* , */
			reduce(22), /* for, reduce: Stat */
			nil,        /* in */
			reduce(22), /* function, reduce: Stat */
			reduce(22), /* local, reduce: Stat */
			reduce(22), /* ::, reduce: Stat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(22), /* (, reduce: Stat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(22), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S376
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			shift(740), /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			shift(75),  /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S377
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(24), /* return, reduce: BreakStat */
			reduce(24), /* ;, reduce: BreakStat */
			nil,        /* empty */
			nil,        /* = */
			reduce(24), /* break, reduce: BreakStat */
			reduce(24), /* goto, reduce: BreakStat */
			reduce(24), /* do, reduce: BreakStat */
			nil,        /* end */
			reduce(24), /* while, reduce: BreakStat */
			reduce(24), /* repeat, reduce: BreakStat */
			reduce(24), /* until, reduce: BreakStat */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(24), /* if, reduce: BreakStat */
			nil,        /* , */
			reduce(24), /* for, reduce: BreakStat */
			nil,        /* in */
			reduce(24), /* function, reduce: BreakStat */
			reduce(24), /* local, reduce: BreakStat */
			reduce(24), /* ::, reduce: BreakStat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(24), /* (, reduce: BreakStat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(24), /* ident, reduce: BreakStat */
		},
	},
	actionRow{ // S378
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(742), /* ident */
		},
	},
	actionRow{ // S379
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S380
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(83),  /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(99),  /* ( */
			nil,        /* ) */
			shift(100), /* nil */
			shift(101), /* true */
			shift(102), /* false */
			shift(103), /* ... */
			shift(104), /* numdec */
			shift(105), /* numhex */
			shift(106), /* string */
			shift(109), /* { */
			nil,        /* } */
			shift(110), /* ident */
		},
	},
	actionRow{ // S381
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			nil,       /* end */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			reduce(6), /* until, reduce: StatList */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S382
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(116), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(132), /* ( */
			nil,        /* ) */
			shift(133), /* nil */
			shift(134), /* true */
			shift(135), /* false */
			shift(136), /* ... */
			shift(137), /* numdec */
			shift(138), /* numhex */
			shift(139), /* string */
			shift(142), /* { */
			nil,        /* } */
			shift(143), /* ident */
		},
	},
	actionRow{ // S383
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(146), /* ident */
		},
	},
	actionRow{ // S384
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(150), /* ident */
		},
	},
	actionRow{ // S385
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(752), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(753), /* ident */
		},
	},
	actionRow{ // S386
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(156), /* ident */
		},
	},
	actionRow{ // S387
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			reduce(6), /* elseif, reduce: StatList */
			reduce(6), /* else, reduce: StatList */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S388
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(116), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(132), /* ( */
			nil,        /* ) */
			shift(133), /* nil */
			shift(134), /* true */
			shift(135), /* false */
			shift(136), /* ... */
			shift(137), /* numdec */
			shift(138), /* numhex */
			shift(139), /* string */
			shift(142), /* { */
			nil,        /* } */
			shift(143), /* ident */
		},
	},
	actionRow{ // S389
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			reduce(119), /* then, reduce: FunctionDef */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(119), /* or, reduce: FunctionDef */
			reduce(119), /* and, reduce: FunctionDef */
			reduce(119), /* <, reduce: FunctionDef */
			reduce(119), /* <=, reduce: FunctionDef */
			reduce(119), /* >, reduce: FunctionDef */
			reduce(119), /* >=, reduce: FunctionDef */
			reduce(119), /* ==, reduce: FunctionDef */
			reduce(119), /* ~=, reduce: FunctionDef */
			reduce(119), /* |, reduce: FunctionDef */
			reduce(119), /* ~, reduce: FunctionDef */
			reduce(119), /* &, reduce: FunctionDef */
			reduce(119), /* .., reduce: FunctionDef */
			reduce(119), /* <<, reduce: FunctionDef */
			reduce(119), /* >>, reduce: FunctionDef */
			reduce(119), /* +, reduce: FunctionDef */
			reduce(119), /* -, reduce: FunctionDef */
			reduce(119), /* *, reduce: FunctionDef */
			reduce(119), /* /, reduce: FunctionDef */
			reduce(119), /* %, reduce: FunctionDef */
			reduce(119), /* //, reduce: FunctionDef */
			nil,         /* not */
			nil,         /* # */
			reduce(119), /* ^, reduce: FunctionDef */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S390
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(123), /* ), reduce: ParList */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			shift(521),  /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			shift(523),  /* ident */
		},
	},
	actionRow{ // S391
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(116), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(132), /* ( */
			nil,        /* ) */
			shift(133), /* nil */
			shift(134), /* true */
			shift(135), /* false */
			shift(136), /* ... */
			shift(137), /* numdec */
			shift(138), /* numhex */
			shift(139), /* string */
			shift(142), /* { */
			nil,        /* } */
			shift(143), /* ident */
		},
	},
	actionRow{ // S392
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(116), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(132), /* ( */
			nil,        /* ) */
			shift(133), /* nil */
			shift(134), /* true */
			shift(135), /* false */
			shift(136), /* ... */
			shift(137), /* numdec */
			shift(138), /* numhex */
			shift(139), /* string */
			shift(142), /* { */
			nil,        /* } */
			shift(143), /* ident */
		},
	},
	actionRow{ // S393
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(116), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(132), /* ( */
			nil,        /* ) */
			shift(133), /* nil */
			shift(134), /* true */
			shift(135), /* false */
			shift(136), /* ... */
			shift(137), /* numdec */
			shift(138), /* numhex */
			shift(139), /* string */
			shift(142), /* { */
			nil,        /* } */
			shift(143), /* ident */
		},
	},
	actionRow{ // S394
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(116), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(132), /* ( */
			nil,        /* ) */
			shift(133), /* nil */
			shift(134), /* true */
			shift(135), /* false */
			shift(136), /* ... */
			shift(137), /* numdec */
			shift(138), /* numhex */
			shift(139), /* string */
			shift(142), /* { */
			nil,        /* } */
			shift(143), /* ident */
		},
	},
	actionRow{ // S395
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(116), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(132), /* ( */
			nil,        /* ) */
			shift(133), /* nil */
			shift(134), /* true */
			shift(135), /* false */
			shift(136), /* ... */
			shift(137), /* numdec */
			shift(138), /* numhex */
			shift(139), /* string */
			shift(142), /* { */
			nil,        /* } */
			shift(143), /* ident */
		},
	},
	actionRow{ // S396
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(116), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(132), /* ( */
			nil,        /* ) */
			shift(133), /* nil */
			shift(134), /* true */
			shift(135), /* false */
			shift(136), /* ... */
			shift(137), /* numdec */
			shift(138), /* numhex */
			shift(139), /* string */
			shift(142), /* { */
			nil,        /* } */
			shift(143), /* ident */
		},
	},
	actionRow{ // S397
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(116), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(132), /* ( */
			nil,        /* ) */
			shift(133), /* nil */
			shift(134), /* true */
			shift(135), /* false */
			shift(136), /* ... */
			shift(137), /* numdec */
			shift(138), /* numhex */
			shift(139), /* string */
			shift(142), /* { */
			nil,        /* } */
			shift(143), /* ident */
		},
	},
	actionRow{ // S398
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(116), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(132), /* ( */
			nil,        /* ) */
			shift(133), /* nil */
			shift(134), /* true */
			shift(135), /* false */
			shift(136), /* ... */
			shift(137), /* numdec */
			shift(138), /* numhex */
			shift(139), /* string */
			shift(142), /* { */
			nil,        /* } */
			shift(143), /* ident */
		},
	},
	actionRow{ // S399
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(116), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(132), /* ( */
			nil,        /* ) */
			shift(133), /* nil */
			shift(134), /* true */
			shift(135), /* false */
			shift(136), /* ... */
			shift(137), /* numdec */
			shift(138), /* numhex */
			shift(139), /* string */
			shift(142), /* { */
			nil,        /* } */
			shift(143), /* ident */
		},
	},
	actionRow{ // S400
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			reduce(93), /* then, reduce: Factor */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(93), /* or, reduce: Factor */
			reduce(93), /* and, reduce: Factor */
			reduce(93), /* <, reduce: Factor */
			reduce(93), /* <=, reduce: Factor */
			reduce(93), /* >, reduce: Factor */
			reduce(93), /* >=, reduce: Factor */
			reduce(93), /* ==, reduce: Factor */
			reduce(93), /* ~=, reduce: Factor */
			reduce(93), /* |, reduce: Factor */
			reduce(93), /* ~, reduce: Factor */
			reduce(93), /* &, reduce: Factor */
			reduce(93), /* .., reduce: Factor */
			reduce(93), /* <<, reduce: Factor */
			reduce(93), /* >>, reduce: Factor */
			reduce(93), /* +, reduce: Factor */
			reduce(93), /* -, reduce: Factor */
			reduce(93), /* *, reduce: Factor */
			reduce(93), /* /, reduce: Factor */
			reduce(93), /* %, reduce: Factor */
			reduce(93), /* //, reduce: Factor */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S401
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(116), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(132), /* ( */
			nil,        /* ) */
			shift(133), /* nil */
			shift(134), /* true */
			shift(135), /* false */
			shift(136), /* ... */
			shift(137), /* numdec */
			shift(138), /* numhex */
			shift(139), /* string */
			shift(142), /* { */
			nil,        /* } */
			shift(143), /* ident */
		},
	},
	actionRow{ // S402
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(143), /* ident */
		},
	},
	actionRow{ // S403
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(426), /* ident */
		},
	},
	actionRow{ // S404
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(430), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(446), /* ( */
			nil,        /* ) */
			shift(447), /* nil */
			shift(448), /* true */
			shift(449), /* false */
			shift(450), /* ... */
			shift(451), /* numdec */
			shift(452), /* numhex */
			shift(453), /* string */
			shift(456), /* { */
			nil,        /* } */
			shift(457), /* ident */
		},
	},
	actionRow{ // S405
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(462), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(478), /* ( */
			shift(773), /* ) */
			shift(480), /* nil */
			shift(481), /* true */
			shift(482), /* false */
			shift(483), /* ... */
			shift(484), /* numdec */
			shift(485), /* numhex */
			shift(486), /* string */
			shift(489), /* { */
			nil,        /* } */
			shift(490), /* ident */
		},
	},
	actionRow{ // S406
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			reduce(103), /* then, reduce: FunctionCall */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(103), /* ., reduce: FunctionCall */
			reduce(103), /* :, reduce: FunctionCall */
			reduce(103), /* or, reduce: FunctionCall */
			reduce(103), /* and, reduce: FunctionCall */
			reduce(103), /* <, reduce: FunctionCall */
			reduce(103), /* <=, reduce: FunctionCall */
			reduce(103), /* >, reduce: FunctionCall */
			reduce(103), /* >=, reduce: FunctionCall */
			reduce(103), /* ==, reduce: FunctionCall */
			reduce(103), /* ~=, reduce: FunctionCall */
			reduce(103), /* |, reduce: FunctionCall */
			reduce(103), /* ~, reduce: FunctionCall */
			reduce(103), /* &, reduce: FunctionCall */
			reduce(103), /* .., reduce: FunctionCall */
			reduce(103), /* <<, reduce: FunctionCall */
			reduce(103), /* >>, reduce: FunctionCall */
			reduce(103), /* +, reduce: FunctionCall */
			reduce(103), /* -, reduce: FunctionCall */
			reduce(103), /* *, reduce: FunctionCall */
			reduce(103), /* /, reduce: FunctionCall */
			reduce(103), /* %, reduce: FunctionCall */
			reduce(103), /* //, reduce: FunctionCall */
			nil,         /* not */
			nil,         /* # */
			reduce(103), /* ^, reduce: FunctionCall */
			reduce(103), /* [, reduce: FunctionCall */
			nil,         /* ] */
			reduce(103), /* (, reduce: FunctionCall */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(103), /* string, reduce: FunctionCall */
			reduce(103), /* {, reduce: FunctionCall */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S407
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			reduce(118), /* then, reduce: Args */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(118), /* ., reduce: Args */
			reduce(118), /* :, reduce: Args */
			reduce(118), /* or, reduce: Args */
			reduce(118), /* and, reduce: Args */
			reduce(118), /* <, reduce: Args */
			reduce(118), /* <=, reduce: Args */
			reduce(118), /* >, reduce: Args */
			reduce(118), /* >=, reduce: Args */
			reduce(118), /* ==, reduce: Args */
			reduce(118), /* ~=, reduce: Args */
			reduce(118), /* |, reduce: Args */
			reduce(118), /* ~, reduce: Args */
			reduce(118), /* &, reduce: Args */
			reduce(118), /* .., reduce: Args */
			reduce(118), /* <<, reduce: Args */
			reduce(118), /* >>, reduce: Args */
			reduce(118), /* +, reduce: Args */
			reduce(118), /* -, reduce: Args */
			reduce(118), /* *, reduce: Args */
			reduce(118), /* /, reduce: Args */
			reduce(118), /* %, reduce: Args */
			reduce(118), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(118), /* ^, reduce: Args */
			reduce(118), /* [, reduce: Args */
			nil,         /* ] */
			reduce(118), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(118), /* string, reduce: Args */
			reduce(118), /* {, reduce: Args */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S408
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			reduce(117), /* then, reduce: Args */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(117), /* ., reduce: Args */
			reduce(117), /* :, reduce: Args */
			reduce(117), /* or, reduce: Args */
			reduce(117), /* and, reduce: Args */
			reduce(117), /* <, reduce: Args */
			reduce(117), /* <=, reduce: Args */
			reduce(117), /* >, reduce: Args */
			reduce(117), /* >=, reduce: Args */
			reduce(117), /* ==, reduce: Args */
			reduce(117), /* ~=, reduce: Args */
			reduce(117), /* |, reduce: Args */
			reduce(117), /* ~, reduce: Args */
			reduce(117), /* &, reduce: Args */
			reduce(117), /* .., reduce: Args */
			reduce(117), /* <<, reduce: Args */
			reduce(117), /* >>, reduce: Args */
			reduce(117), /* +, reduce: Args */
			reduce(117), /* -, reduce: Args */
			reduce(117), /* *, reduce: Args */
			reduce(117), /* /, reduce: Args */
			reduce(117), /* %, reduce: Args */
			reduce(117), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(117), /* ^, reduce: Args */
			reduce(117), /* [, reduce: Args */
			nil,         /* ] */
			reduce(117), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(117), /* string, reduce: Args */
			reduce(117), /* {, reduce: Args */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S409
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			shift(254), /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(268), /* ident */
		},
	},
	actionRow{ // S410
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			shift(492), /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			shift(775), /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S411
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			shift(569), /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			shift(570), /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			shift(776), /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S412
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(782), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(798), /* ( */
			nil,        /* ) */
			shift(799), /* nil */
			shift(800), /* true */
			shift(801), /* false */
			shift(802), /* ... */
			shift(803), /* numdec */
			shift(804), /* numhex */
			shift(805), /* string */
			shift(808), /* { */
			nil,        /* } */
			shift(809), /* ident */
		},
	},
	actionRow{ // S413
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(811), /* ident */
		},
	},
	actionRow{ // S414
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(816), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(832), /* ( */
			nil,        /* ) */
			shift(833), /* nil */
			shift(834), /* true */
			shift(835), /* false */
			shift(836), /* ... */
			shift(837), /* numdec */
			shift(838), /* numhex */
			shift(839), /* string */
			shift(842), /* { */
			nil,        /* } */
			shift(843), /* ident */
		},
	},
	actionRow{ // S415
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(40), /* $, reduce: FunctionStat */
			reduce(40), /* return, reduce: FunctionStat */
			reduce(40), /* ;, reduce: FunctionStat */
			nil,        /* empty */
			nil,        /* = */
			reduce(40), /* break, reduce: FunctionStat */
			reduce(40), /* goto, reduce: FunctionStat */
			reduce(40), /* do, reduce: FunctionStat */
			nil,        /* end */
			reduce(40), /* while, reduce: FunctionStat */
			reduce(40), /* repeat, reduce: FunctionStat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(40), /* if, reduce: FunctionStat */
			nil,        /* , */
			reduce(40), /* for, reduce: FunctionStat */
			nil,        /* in */
			reduce(40), /* function, reduce: FunctionStat */
			reduce(40), /* local, reduce: FunctionStat */
			reduce(40), /* ::, reduce: FunctionStat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(40), /* (, reduce: FunctionStat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(40), /* ident, reduce: FunctionStat */
		},
	},
	actionRow{ // S416
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(123), /* ), reduce: ParList */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			shift(521),  /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			shift(523),  /* ident */
		},
	},
	actionRow{ // S417
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(150), /* ident */
		},
	},
	actionRow{ // S418
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(422), /* ident */
		},
	},
	actionRow{ // S419
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(273), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(289), /* ( */
			nil,        /* ) */
			shift(290), /* nil */
			shift(291), /* true */
			shift(292), /* false */
			shift(293), /* ... */
			shift(294), /* numdec */
			shift(295), /* numhex */
			shift(296), /* string */
			shift(299), /* { */
			nil,        /* } */
			shift(300), /* ident */
		},
	},
	actionRow{ // S420
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(154), /* ident */
		},
	},
	actionRow{ // S421
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(416), /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S422
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(134), /* (, reduce: Name */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S423
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(44), /* $, reduce: Label */
			reduce(44), /* return, reduce: Label */
			reduce(44), /* ;, reduce: Label */
			nil,        /* empty */
			nil,        /* = */
			reduce(44), /* break, reduce: Label */
			reduce(44), /* goto, reduce: Label */
			reduce(44), /* do, reduce: Label */
			nil,        /* end */
			reduce(44), /* while, reduce: Label */
			reduce(44), /* repeat, reduce: Label */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(44), /* if, reduce: Label */
			nil,        /* , */
			reduce(44), /* for, reduce: Label */
			nil,        /* in */
			reduce(44), /* function, reduce: Label */
			reduce(44), /* local, reduce: Label */
			reduce(44), /* ::, reduce: Label */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(44), /* (, reduce: Label */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(44), /* ident, reduce: Label */
		},
	},
	actionRow{ // S424
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			reduce(99), /* =, reduce: Var */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(99), /* ,, reduce: Var */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			reduce(99), /* ., reduce: Var */
			reduce(99), /* :, reduce: Var */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			reduce(99), /* [, reduce: Var */
			nil,        /* ] */
			reduce(99), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(99), /* string, reduce: Var */
			reduce(99), /* {, reduce: Var */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S425
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(160), /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			shift(162), /* string */
			shift(164), /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S426
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(134), /* (, reduce: Name */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(134), /* string, reduce: Name */
			reduce(134), /* {, reduce: Name */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S427
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(101), /* ., reduce: PrefixExp */
			reduce(101), /* :, reduce: PrefixExp */
			reduce(101), /* or, reduce: PrefixExp */
			reduce(101), /* and, reduce: PrefixExp */
			reduce(101), /* <, reduce: PrefixExp */
			reduce(101), /* <=, reduce: PrefixExp */
			reduce(101), /* >, reduce: PrefixExp */
			reduce(101), /* >=, reduce: PrefixExp */
			reduce(101), /* ==, reduce: PrefixExp */
			reduce(101), /* ~=, reduce: PrefixExp */
			reduce(101), /* |, reduce: PrefixExp */
			reduce(101), /* ~, reduce: PrefixExp */
			reduce(101), /* &, reduce: PrefixExp */
			reduce(101), /* .., reduce: PrefixExp */
			reduce(101), /* <<, reduce: PrefixExp */
			reduce(101), /* >>, reduce: PrefixExp */
			reduce(101), /* +, reduce: PrefixExp */
			reduce(101), /* -, reduce: PrefixExp */
			reduce(101), /* *, reduce: PrefixExp */
			reduce(101), /* /, reduce: PrefixExp */
			reduce(101), /* %, reduce: PrefixExp */
			reduce(101), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(101), /* ^, reduce: PrefixExp */
			reduce(101), /* [, reduce: PrefixExp */
			reduce(101), /* ], reduce: PrefixExp */
			reduce(101), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(101), /* string, reduce: PrefixExp */
			reduce(101), /* {, reduce: PrefixExp */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S428
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			reduce(97), /* ., reduce: Var */
			reduce(97), /* :, reduce: Var */
			reduce(97), /* or, reduce: Var */
			reduce(97), /* and, reduce: Var */
			reduce(97), /* <, reduce: Var */
			reduce(97), /* <=, reduce: Var */
			reduce(97), /* >, reduce: Var */
			reduce(97), /* >=, reduce: Var */
			reduce(97), /* ==, reduce: Var */
			reduce(97), /* ~=, reduce: Var */
			reduce(97), /* |, reduce: Var */
			reduce(97), /* ~, reduce: Var */
			reduce(97), /* &, reduce: Var */
			reduce(97), /* .., reduce: Var */
			reduce(97), /* <<, reduce: Var */
			reduce(97), /* >>, reduce: Var */
			reduce(97), /* +, reduce: Var */
			reduce(97), /* -, reduce: Var */
			reduce(97), /* *, reduce: Var */
			reduce(97), /* /, reduce: Var */
			reduce(97), /* %, reduce: Var */
			reduce(97), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(97), /* ^, reduce: Var */
			reduce(97), /* [, reduce: Var */
			reduce(97), /* ], reduce: Var */
			reduce(97), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(97), /* string, reduce: Var */
			reduce(97), /* {, reduce: Var */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S429
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			shift(851), /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			shift(852), /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S430
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(854), /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S431
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(100), /* ., reduce: PrefixExp */
			reduce(100), /* :, reduce: PrefixExp */
			reduce(100), /* or, reduce: PrefixExp */
			reduce(100), /* and, reduce: PrefixExp */
			reduce(100), /* <, reduce: PrefixExp */
			reduce(100), /* <=, reduce: PrefixExp */
			reduce(100), /* >, reduce: PrefixExp */
			reduce(100), /* >=, reduce: PrefixExp */
			reduce(100), /* ==, reduce: PrefixExp */
			reduce(100), /* ~=, reduce: PrefixExp */
			reduce(100), /* |, reduce: PrefixExp */
			reduce(100), /* ~, reduce: PrefixExp */
			reduce(100), /* &, reduce: PrefixExp */
			reduce(100), /* .., reduce: PrefixExp */
			reduce(100), /* <<, reduce: PrefixExp */
			reduce(100), /* >>, reduce: PrefixExp */
			reduce(100), /* +, reduce: PrefixExp */
			reduce(100), /* -, reduce: PrefixExp */
			reduce(100), /* *, reduce: PrefixExp */
			reduce(100), /* /, reduce: PrefixExp */
			reduce(100), /* %, reduce: PrefixExp */
			reduce(100), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(100), /* ^, reduce: PrefixExp */
			reduce(100), /* [, reduce: PrefixExp */
			reduce(100), /* ], reduce: PrefixExp */
			reduce(100), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(100), /* string, reduce: PrefixExp */
			reduce(100), /* {, reduce: PrefixExp */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S432
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(55), /* or, reduce: Exp */
			shift(855), /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			reduce(55), /* ], reduce: Exp */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S433
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(57), /* or, reduce: AndExp */
			reduce(57), /* and, reduce: AndExp */
			shift(203), /* < */
			shift(204), /* <= */
			shift(205), /* > */
			shift(206), /* >= */
			shift(207), /* == */
			shift(208), /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			reduce(57), /* ], reduce: AndExp */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S434
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(65), /* or, reduce: CompExp */
			reduce(65), /* and, reduce: CompExp */
			reduce(65), /* <, reduce: CompExp */
			reduce(65), /* <=, reduce: CompExp */
			reduce(65), /* >, reduce: CompExp */
			reduce(65), /* >=, reduce: CompExp */
			reduce(65), /* ==, reduce: CompExp */
			reduce(65), /* ~=, reduce: CompExp */
			shift(857), /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			reduce(65), /* ], reduce: CompExp */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S435
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(67), /* or, reduce: BitOrExp */
			reduce(67), /* and, reduce: BitOrExp */
			reduce(67), /* <, reduce: BitOrExp */
			reduce(67), /* <=, reduce: BitOrExp */
			reduce(67), /* >, reduce: BitOrExp */
			reduce(67), /* >=, reduce: BitOrExp */
			reduce(67), /* ==, reduce: BitOrExp */
			reduce(67), /* ~=, reduce: BitOrExp */
			reduce(67), /* |, reduce: BitOrExp */
			shift(858), /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			reduce(67), /* ], reduce: BitOrExp */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S436
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(69), /* or, reduce: BitXorExp */
			reduce(69), /* and, reduce: BitXorExp */
			reduce(69), /* <, reduce: BitXorExp */
			reduce(69), /* <=, reduce: BitXorExp */
			reduce(69), /* >, reduce: BitXorExp */
			reduce(69), /* >=, reduce: BitXorExp */
			reduce(69), /* ==, reduce: BitXorExp */
			reduce(69), /* ~=, reduce: BitXorExp */
			reduce(69), /* |, reduce: BitXorExp */
			reduce(69), /* ~, reduce: BitXorExp */
			shift(859), /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			reduce(69), /* ], reduce: BitXorExp */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S437
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(71), /* or, reduce: BitAndExp */
			reduce(71), /* and, reduce: BitAndExp */
			reduce(71), /* <, reduce: BitAndExp */
			reduce(71), /* <=, reduce: BitAndExp */
			reduce(71), /* >, reduce: BitAndExp */
			reduce(71), /* >=, reduce: BitAndExp */
			reduce(71), /* ==, reduce: BitAndExp */
			reduce(71), /* ~=, reduce: BitAndExp */
			reduce(71), /* |, reduce: BitAndExp */
			reduce(71), /* ~, reduce: BitAndExp */
			reduce(71), /* &, reduce: BitAndExp */
			shift(860), /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			reduce(71), /* ], reduce: BitAndExp */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S438
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(73), /* or, reduce: ConcatExp */
			reduce(73), /* and, reduce: ConcatExp */
			reduce(73), /* <, reduce: ConcatExp */
			reduce(73), /* <=, reduce: ConcatExp */
			reduce(73), /* >, reduce: ConcatExp */
			reduce(73), /* >=, reduce: ConcatExp */
			reduce(73), /* ==, reduce: ConcatExp */
			reduce(73), /* ~=, reduce: ConcatExp */
			reduce(73), /* |, reduce: ConcatExp */
			reduce(73), /* ~, reduce: ConcatExp */
			reduce(73), /* &, reduce: ConcatExp */
			reduce(73), /* .., reduce: ConcatExp */
			shift(214), /* << */
			shift(215), /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			reduce(73), /* ], reduce: ConcatExp */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S439
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(77), /* or, reduce: ShiftExp */
			reduce(77), /* and, reduce: ShiftExp */
			reduce(77), /* <, reduce: ShiftExp */
			reduce(77), /* <=, reduce: ShiftExp */
			reduce(77), /* >, reduce: ShiftExp */
			reduce(77), /* >=, reduce: ShiftExp */
			reduce(77), /* ==, reduce: ShiftExp */
			reduce(77), /* ~=, reduce: ShiftExp */
			reduce(77), /* |, reduce: ShiftExp */
			reduce(77), /* ~, reduce: ShiftExp */
			reduce(77), /* &, reduce: ShiftExp */
			reduce(77), /* .., reduce: ShiftExp */
			reduce(77), /* <<, reduce: ShiftExp */
			reduce(77), /* >>, reduce: ShiftExp */
			shift(217), /* + */
			shift(218), /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			reduce(77), /* ], reduce: ShiftExp */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S440
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(81), /* or, reduce: Sum */
			reduce(81), /* and, reduce: Sum */
			reduce(81), /* <, reduce: Sum */
			reduce(81), /* <=, reduce: Sum */
			reduce(81), /* >, reduce: Sum */
			reduce(81), /* >=, reduce: Sum */
			reduce(81), /* ==, reduce: Sum */
			reduce(81), /* ~=, reduce: Sum */
			reduce(81), /* |, reduce: Sum */
			reduce(81), /* ~, reduce: Sum */
			reduce(81), /* &, reduce: Sum */
			reduce(81), /* .., reduce: Sum */
			reduce(81), /* <<, reduce: Sum */
			reduce(81), /* >>, reduce: Sum */
			reduce(81), /* +, reduce: Sum */
			reduce(81), /* -, reduce: Sum */
			shift(220), /* * */
			shift(221), /* / */
			shift(222), /* % */
			shift(223), /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			reduce(81), /* ], reduce: Sum */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S441
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(87), /* or, reduce: Term */
			reduce(87), /* and, reduce: Term */
			reduce(87), /* <, reduce: Term */
			reduce(87), /* <=, reduce: Term */
			reduce(87), /* >, reduce: Term */
			reduce(87), /* >=, reduce: Term */
			reduce(87), /* ==, reduce: Term */
			reduce(87), /* ~=, reduce: Term */
			reduce(87), /* |, reduce: Term */
			reduce(87), /* ~, reduce: Term */
			reduce(87), /* &, reduce: Term */
			reduce(87), /* .., reduce: Term */
			reduce(87), /* <<, reduce: Term */
			reduce(87), /* >>, reduce: Term */
			reduce(87), /* +, reduce: Term */
			reduce(87), /* -, reduce: Term */
			reduce(87), /* *, reduce: Term */
			reduce(87), /* /, reduce: Term */
			reduce(87), /* %, reduce: Term */
			reduce(87), /* //, reduce: Term */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			reduce(87), /* ], reduce: Term */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S442
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(430), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(446), /* ( */
			nil,        /* ) */
			shift(447), /* nil */
			shift(448), /* true */
			shift(449), /* false */
			shift(450), /* ... */
			shift(451), /* numdec */
			shift(452), /* numhex */
			shift(453), /* string */
			shift(456), /* { */
			nil,        /* } */
			shift(457), /* ident */
		},
	},
	actionRow{ // S443
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(94), /* or, reduce: Factor */
			reduce(94), /* and, reduce: Factor */
			reduce(94), /* <, reduce: Factor */
			reduce(94), /* <=, reduce: Factor */
			reduce(94), /* >, reduce: Factor */
			reduce(94), /* >=, reduce: Factor */
			reduce(94), /* ==, reduce: Factor */
			reduce(94), /* ~=, reduce: Factor */
			reduce(94), /* |, reduce: Factor */
			reduce(94), /* ~, reduce: Factor */
			reduce(94), /* &, reduce: Factor */
			reduce(94), /* .., reduce: Factor */
			reduce(94), /* <<, reduce: Factor */
			reduce(94), /* >>, reduce: Factor */
			reduce(94), /* +, reduce: Factor */
			reduce(94), /* -, reduce: Factor */
			reduce(94), /* *, reduce: Factor */
			reduce(94), /* /, reduce: Factor */
			reduce(94), /* %, reduce: Factor */
			reduce(94), /* //, reduce: Factor */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			reduce(94), /* ], reduce: Factor */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S444
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(95), /* or, reduce: Power */
			reduce(95), /* and, reduce: Power */
			reduce(95), /* <, reduce: Power */
			reduce(95), /* <=, reduce: Power */
			reduce(95), /* >, reduce: Power */
			reduce(95), /* >=, reduce: Power */
			reduce(95), /* ==, reduce: Power */
			reduce(95), /* ~=, reduce: Power */
			reduce(95), /* |, reduce: Power */
			reduce(95), /* ~, reduce: Power */
			reduce(95), /* &, reduce: Power */
			reduce(95), /* .., reduce: Power */
			reduce(95), /* <<, reduce: Power */
			reduce(95), /* >>, reduce: Power */
			reduce(95), /* +, reduce: Power */
			reduce(95), /* -, reduce: Power */
			reduce(95), /* *, reduce: Power */
			reduce(95), /* /, reduce: Power */
			reduce(95), /* %, reduce: Power */
			reduce(95), /* //, reduce: Power */
			nil,        /* not */
			nil,        /* # */
			shift(865), /* ^ */
			nil,        /* [ */
			reduce(95), /* ], reduce: Power */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S445
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			shift(866),  /* . */
			shift(867),  /* : */
			reduce(114), /* or, reduce: Atom */
			reduce(114), /* and, reduce: Atom */
			reduce(114), /* <, reduce: Atom */
			reduce(114), /* <=, reduce: Atom */
			reduce(114), /* >, reduce: Atom */
			reduce(114), /* >=, reduce: Atom */
			reduce(114), /* ==, reduce: Atom */
			reduce(114), /* ~=, reduce: Atom */
			reduce(114), /* |, reduce: Atom */
			reduce(114), /* ~, reduce: Atom */
			reduce(114), /* &, reduce: Atom */
			reduce(114), /* .., reduce: Atom */
			reduce(114), /* <<, reduce: Atom */
			reduce(114), /* >>, reduce: Atom */
			reduce(114), /* +, reduce: Atom */
			reduce(114), /* -, reduce: Atom */
			reduce(114), /* *, reduce: Atom */
			reduce(114), /* /, reduce: Atom */
			reduce(114), /* %, reduce: Atom */
			reduce(114), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(114), /* ^, reduce: Atom */
			shift(868),  /* [ */
			reduce(114), /* ], reduce: Atom */
			shift(869),  /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			shift(871),  /* string */
			shift(873),  /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S446
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(168), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(184), /* ( */
			nil,        /* ) */
			shift(185), /* nil */
			shift(186), /* true */
			shift(187), /* false */
			shift(188), /* ... */
			shift(189), /* numdec */
			shift(190), /* numhex */
			shift(191), /* string */
			shift(194), /* { */
			nil,        /* } */
			shift(195), /* ident */
		},
	},
	actionRow{ // S447
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(105), /* or, reduce: Atom */
			reduce(105), /* and, reduce: Atom */
			reduce(105), /* <, reduce: Atom */
			reduce(105), /* <=, reduce: Atom */
			reduce(105), /* >, reduce: Atom */
			reduce(105), /* >=, reduce: Atom */
			reduce(105), /* ==, reduce: Atom */
			reduce(105), /* ~=, reduce: Atom */
			reduce(105), /* |, reduce: Atom */
			reduce(105), /* ~, reduce: Atom */
			reduce(105), /* &, reduce: Atom */
			reduce(105), /* .., reduce: Atom */
			reduce(105), /* <<, reduce: Atom */
			reduce(105), /* >>, reduce: Atom */
			reduce(105), /* +, reduce: Atom */
			reduce(105), /* -, reduce: Atom */
			reduce(105), /* *, reduce: Atom */
			reduce(105), /* /, reduce: Atom */
			reduce(105), /* %, reduce: Atom */
			reduce(105), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(105), /* ^, reduce: Atom */
			nil,         /* [ */
			reduce(105), /* ], reduce: Atom */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S448
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(106), /* or, reduce: Atom */
			reduce(106), /* and, reduce: Atom */
			reduce(106), /* <, reduce: Atom */
			reduce(106), /* <=, reduce: Atom */
			reduce(106), /* >, reduce: Atom */
			reduce(106), /* >=, reduce: Atom */
			reduce(106), /* ==, reduce: Atom */
			reduce(106), /* ~=, reduce: Atom */
			reduce(106), /* |, reduce: Atom */
			reduce(106), /* ~, reduce: Atom */
			reduce(106), /* &, reduce: Atom */
			reduce(106), /* .., reduce: Atom */
			reduce(106), /* <<, reduce: Atom */
			reduce(106), /* >>, reduce: Atom */
			reduce(106), /* +, reduce: Atom */
			reduce(106), /* -, reduce: Atom */
			reduce(106), /* *, reduce: Atom */
			reduce(106), /* /, reduce: Atom */
			reduce(106), /* %, reduce: Atom */
			reduce(106), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(106), /* ^, reduce: Atom */
			nil,         /* [ */
			reduce(106), /* ], reduce: Atom */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S449
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(107), /* or, reduce: Atom */
			reduce(107), /* and, reduce: Atom */
			reduce(107), /* <, reduce: Atom */
			reduce(107), /* <=, reduce: Atom */
			reduce(107), /* >, reduce: Atom */
			reduce(107), /* >=, reduce: Atom */
			reduce(107), /* ==, reduce: Atom */
			reduce(107), /* ~=, reduce: Atom */
			reduce(107), /* |, reduce: Atom */
			reduce(107), /* ~, reduce: Atom */
			reduce(107), /* &, reduce: Atom */
			reduce(107), /* .., reduce: Atom */
			reduce(107), /* <<, reduce: Atom */
			reduce(107), /* >>, reduce: Atom */
			reduce(107), /* +, reduce: Atom */
			reduce(107), /* -, reduce: Atom */
			reduce(107), /* *, reduce: Atom */
			reduce(107), /* /, reduce: Atom */
			reduce(107), /* %, reduce: Atom */
			reduce(107), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(107), /* ^, reduce: Atom */
			nil,         /* [ */
			reduce(107), /* ], reduce: Atom */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S450
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(108), /* or, reduce: Atom */
			reduce(108), /* and, reduce: Atom */
			reduce(108), /* <, reduce: Atom */
			reduce(108), /* <=, reduce: Atom */
			reduce(108), /* >, reduce: Atom */
			reduce(108), /* >=, reduce: Atom */
			reduce(108), /* ==, reduce: Atom */
			reduce(108), /* ~=, reduce: Atom */
			reduce(108), /* |, reduce: Atom */
			reduce(108), /* ~, reduce: Atom */
			reduce(108), /* &, reduce: Atom */
			reduce(108), /* .., reduce: Atom */
			reduce(108), /* <<, reduce: Atom */
			reduce(108), /* >>, reduce: Atom */
			reduce(108), /* +, reduce: Atom */
			reduce(108), /* -, reduce: Atom */
			reduce(108), /* *, reduce: Atom */
			reduce(108), /* /, reduce: Atom */
			reduce(108), /* %, reduce: Atom */
			reduce(108), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(108), /* ^, reduce: Atom */
			nil,         /* [ */
			reduce(108), /* ], reduce: Atom */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S451
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(109), /* or, reduce: Atom */
			reduce(109), /* and, reduce: Atom */
			reduce(109), /* <, reduce: Atom */
			reduce(109), /* <=, reduce: Atom */
			reduce(109), /* >, reduce: Atom */
			reduce(109), /* >=, reduce: Atom */
			reduce(109), /* ==, reduce: Atom */
			reduce(109), /* ~=, reduce: Atom */
			reduce(109), /* |, reduce: Atom */
			reduce(109), /* ~, reduce: Atom */
			reduce(109), /* &, reduce: Atom */
			reduce(109), /* .., reduce: Atom */
			reduce(109), /* <<, reduce: Atom */
			reduce(109), /* >>, reduce: Atom */
			reduce(109), /* +, reduce: Atom */
			reduce(109), /* -, reduce: Atom */
			reduce(109), /* *, reduce: Atom */
			reduce(109), /* /, reduce: Atom */
			reduce(109), /* %, reduce: Atom */
			reduce(109), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(109), /* ^, reduce: Atom */
			nil,         /* [ */
			reduce(109), /* ], reduce: Atom */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S452
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(110), /* or, reduce: Atom */
			reduce(110), /* and, reduce: Atom */
			reduce(110), /* <, reduce: Atom */
			reduce(110), /* <=, reduce: Atom */
			reduce(110), /* >, reduce: Atom */
			reduce(110), /* >=, reduce: Atom */
			reduce(110), /* ==, reduce: Atom */
			reduce(110), /* ~=, reduce: Atom */
			reduce(110), /* |, reduce: Atom */
			reduce(110), /* ~, reduce: Atom */
			reduce(110), /* &, reduce: Atom */
			reduce(110), /* .., reduce: Atom */
			reduce(110), /* <<, reduce: Atom */
			reduce(110), /* >>, reduce: Atom */
			reduce(110), /* +, reduce: Atom */
			reduce(110), /* -, reduce: Atom */
			reduce(110), /* *, reduce: Atom */
			reduce(110), /* /, reduce: Atom */
			reduce(110), /* %, reduce: Atom */
			reduce(110), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(110), /* ^, reduce: Atom */
			nil,         /* [ */
			reduce(110), /* ], reduce: Atom */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S453
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(111), /* or, reduce: Atom */
			reduce(111), /* and, reduce: Atom */
			reduce(111), /* <, reduce: Atom */
			reduce(111), /* <=, reduce: Atom */
			reduce(111), /* >, reduce: Atom */
			reduce(111), /* >=, reduce: Atom */
			reduce(111), /* ==, reduce: Atom */
			reduce(111), /* ~=, reduce: Atom */
			reduce(111), /* |, reduce: Atom */
			reduce(111), /* ~, reduce: Atom */
			reduce(111), /* &, reduce: Atom */
			reduce(111), /* .., reduce: Atom */
			reduce(111), /* <<, reduce: Atom */
			reduce(111), /* >>, reduce: Atom */
			reduce(111), /* +, reduce: Atom */
			reduce(111), /* -, reduce: Atom */
			reduce(111), /* *, reduce: Atom */
			reduce(111), /* /, reduce: Atom */
			reduce(111), /* %, reduce: Atom */
			reduce(111), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(111), /* ^, reduce: Atom */
			nil,         /* [ */
			reduce(111), /* ], reduce: Atom */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S454
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(112), /* or, reduce: Atom */
			reduce(112), /* and, reduce: Atom */
			reduce(112), /* <, reduce: Atom */
			reduce(112), /* <=, reduce: Atom */
			reduce(112), /* >, reduce: Atom */
			reduce(112), /* >=, reduce: Atom */
			reduce(112), /* ==, reduce: Atom */
			reduce(112), /* ~=, reduce: Atom */
			reduce(112), /* |, reduce: Atom */
			reduce(112), /* ~, reduce: Atom */
			reduce(112), /* &, reduce: Atom */
			reduce(112), /* .., reduce: Atom */
			reduce(112), /* <<, reduce: Atom */
			reduce(112), /* >>, reduce: Atom */
			reduce(112), /* +, reduce: Atom */
			reduce(112), /* -, reduce: Atom */
			reduce(112), /* *, reduce: Atom */
			reduce(112), /* /, reduce: Atom */
			reduce(112), /* %, reduce: Atom */
			reduce(112), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(112), /* ^, reduce: Atom */
			nil,         /* [ */
			reduce(112), /* ], reduce: Atom */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S455
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(113), /* or, reduce: Atom */
			reduce(113), /* and, reduce: Atom */
			reduce(113), /* <, reduce: Atom */
			reduce(113), /* <=, reduce: Atom */
			reduce(113), /* >, reduce: Atom */
			reduce(113), /* >=, reduce: Atom */
			reduce(113), /* ==, reduce: Atom */
			reduce(113), /* ~=, reduce: Atom */
			reduce(113), /* |, reduce: Atom */
			reduce(113), /* ~, reduce: Atom */
			reduce(113), /* &, reduce: Atom */
			reduce(113), /* .., reduce: Atom */
			reduce(113), /* <<, reduce: Atom */
			reduce(113), /* >>, reduce: Atom */
			reduce(113), /* +, reduce: Atom */
			reduce(113), /* -, reduce: Atom */
			reduce(113), /* *, reduce: Atom */
			reduce(113), /* /, reduce: Atom */
			reduce(113), /* %, reduce: Atom */
			reduce(113), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(113), /* ^, reduce: Atom */
			nil,         /* [ */
			reduce(113), /* ], reduce: Atom */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S456
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			shift(254), /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(268), /* ident */
		},
	},
	actionRow{ // S457
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(134), /* ., reduce: Name */
			reduce(134), /* :, reduce: Name */
			reduce(134), /* or, reduce: Name */
			reduce(134), /* and, reduce: Name */
			reduce(134), /* <, reduce: Name */
			reduce(134), /* <=, reduce: Name */
			reduce(134), /* >, reduce: Name */
			reduce(134), /* >=, reduce: Name */
			reduce(134), /* ==, reduce: Name */
			reduce(134), /* ~=, reduce: Name */
			reduce(134), /* |, reduce: Name */
			reduce(134), /* ~, reduce: Name */
			reduce(134), /* &, reduce: Name */
			reduce(134), /* .., reduce: Name */
			reduce(134), /* <<, reduce: Name */
			reduce(134), /* >>, reduce: Name */
			reduce(134), /* +, reduce: Name */
			reduce(134), /* -, reduce: Name */
			reduce(134), /* *, reduce: Name */
			reduce(134), /* /, reduce: Name */
			reduce(134), /* %, reduce: Name */
			reduce(134), /* //, reduce: Name */
			nil,         /* not */
			nil,         /* # */
			reduce(134), /* ^, reduce: Name */
			reduce(134), /* [, reduce: Name */
			reduce(134), /* ], reduce: Name */
			reduce(134), /* (, reduce: Name */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(134), /* string, reduce: Name */
			reduce(134), /* {, reduce: Name */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S458
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			shift(876), /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			shift(877), /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S459
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(101), /* ,, reduce: PrefixExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(101), /* ., reduce: PrefixExp */
			reduce(101), /* :, reduce: PrefixExp */
			reduce(101), /* or, reduce: PrefixExp */
			reduce(101), /* and, reduce: PrefixExp */
			reduce(101), /* <, reduce: PrefixExp */
			reduce(101), /* <=, reduce: PrefixExp */
			reduce(101), /* >, reduce: PrefixExp */
			reduce(101), /* >=, reduce: PrefixExp */
			reduce(101), /* ==, reduce: PrefixExp */
			reduce(101), /* ~=, reduce: PrefixExp */
			reduce(101), /* |, reduce: PrefixExp */
			reduce(101), /* ~, reduce: PrefixExp */
			reduce(101), /* &, reduce: PrefixExp */
			reduce(101), /* .., reduce: PrefixExp */
			reduce(101), /* <<, reduce: PrefixExp */
			reduce(101), /* >>, reduce: PrefixExp */
			reduce(101), /* +, reduce: PrefixExp */
			reduce(101), /* -, reduce: PrefixExp */
			reduce(101), /* *, reduce: PrefixExp */
			reduce(101), /* /, reduce: PrefixExp */
			reduce(101), /* %, reduce: PrefixExp */
			reduce(101), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(101), /* ^, reduce: PrefixExp */
			reduce(101), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(101), /* (, reduce: PrefixExp */
			reduce(101), /* ), reduce: PrefixExp */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(101), /* string, reduce: PrefixExp */
			reduce(101), /* {, reduce: PrefixExp */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S460
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(97), /* ,, reduce: Var */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			reduce(97), /* ., reduce: Var */
			reduce(97), /* :, reduce: Var */
			reduce(97), /* or, reduce: Var */
			reduce(97), /* and, reduce: Var */
			reduce(97), /* <, reduce: Var */
			reduce(97), /* <=, reduce: Var */
			reduce(97), /* >, reduce: Var */
			reduce(97), /* >=, reduce: Var */
			reduce(97), /* ==, reduce: Var */
			reduce(97), /* ~=, reduce: Var */
			reduce(97), /* |, reduce: Var */
			reduce(97), /* ~, reduce: Var */
			reduce(97), /* &, reduce: Var */
			reduce(97), /* .., reduce: Var */
			reduce(97), /* <<, reduce: Var */
			reduce(97), /* >>, reduce: Var */
			reduce(97), /* +, reduce: Var */
			reduce(97), /* -, reduce: Var */
			reduce(97), /* *, reduce: Var */
			reduce(97), /* /, reduce: Var */
			reduce(97), /* %, reduce: Var */
			reduce(97), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(97), /* ^, reduce: Var */
			reduce(97), /* [, reduce: Var */
			nil,        /* ] */
			reduce(97), /* (, reduce: Var */
			reduce(97), /* ), reduce: Var */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(97), /* string, reduce: Var */
			reduce(97), /* {, reduce: Var */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S461
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(53), /* ,, reduce: ExpList */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			shift(878), /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			reduce(53), /* ), reduce: ExpList */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S462
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(880), /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S463
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(100), /* ,, reduce: PrefixExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(100), /* ., reduce: PrefixExp */
			reduce(100), /* :, reduce: PrefixExp */
			reduce(100), /* or, reduce: PrefixExp */
			reduce(100), /* and, reduce: PrefixExp */
			reduce(100), /* <, reduce: PrefixExp */
			reduce(100), /* <=, reduce: PrefixExp */
			reduce(100), /* >, reduce: PrefixExp */
			reduce(100), /* >=, reduce: PrefixExp */
			reduce(100), /* ==, reduce: PrefixExp */
			reduce(100), /* ~=, reduce: PrefixExp */
			reduce(100), /* |, reduce: PrefixExp */
			reduce(100), /* ~, reduce: PrefixExp */
			reduce(100), /* &, reduce: PrefixExp */
			reduce(100), /* .., reduce: PrefixExp */
			reduce(100), /* <<, reduce: PrefixExp */
			reduce(100), /* >>, reduce: PrefixExp */
			reduce(100), /* +, reduce: PrefixExp */
			reduce(100), /* -, reduce: PrefixExp */
			reduce(100), /* *, reduce: PrefixExp */
			reduce(100), /* /, reduce: PrefixExp */
			reduce(100), /* %, reduce: PrefixExp */
			reduce(100), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(100), /* ^, reduce: PrefixExp */
			reduce(100), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(100), /* (, reduce: PrefixExp */
			reduce(100), /* ), reduce: PrefixExp */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(100), /* string, reduce: PrefixExp */
			reduce(100), /* {, reduce: PrefixExp */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S464
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(55), /* ,, reduce: Exp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(55), /* or, reduce: Exp */
			shift(881), /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			reduce(55), /* ), reduce: Exp */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S465
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(57), /* ,, reduce: AndExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(57), /* or, reduce: AndExp */
			reduce(57), /* and, reduce: AndExp */
			shift(203), /* < */
			shift(204), /* <= */
			shift(205), /* > */
			shift(206), /* >= */
			shift(207), /* == */
			shift(208), /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			reduce(57), /* ), reduce: AndExp */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S466
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(65), /* ,, reduce: CompExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(65), /* or, reduce: CompExp */
			reduce(65), /* and, reduce: CompExp */
			reduce(65), /* <, reduce: CompExp */
			reduce(65), /* <=, reduce: CompExp */
			reduce(65), /* >, reduce: CompExp */
			reduce(65), /* >=, reduce: CompExp */
			reduce(65), /* ==, reduce: CompExp */
			reduce(65), /* ~=, reduce: CompExp */
			shift(883), /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			reduce(65), /* ), reduce: CompExp */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S467
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(67), /* ,, reduce: BitOrExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(67), /* or, reduce: BitOrExp */
			reduce(67), /* and, reduce: BitOrExp */
			reduce(67), /* <, reduce: BitOrExp */
			reduce(67), /* <=, reduce: BitOrExp */
			reduce(67), /* >, reduce: BitOrExp */
			reduce(67), /* >=, reduce: BitOrExp */
			reduce(67), /* ==, reduce: BitOrExp */
			reduce(67), /* ~=, reduce: BitOrExp */
			reduce(67), /* |, reduce: BitOrExp */
			shift(884), /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			reduce(67), /* ), reduce: BitOrExp */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S468
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(69), /* ,, reduce: BitXorExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(69), /* or, reduce: BitXorExp */
			reduce(69), /* and, reduce: BitXorExp */
			reduce(69), /* <, reduce: BitXorExp */
			reduce(69), /* <=, reduce: BitXorExp */
			reduce(69), /* >, reduce: BitXorExp */
			reduce(69), /* >=, reduce: BitXorExp */
			reduce(69), /* ==, reduce: BitXorExp */
			reduce(69), /* ~=, reduce: BitXorExp */
			reduce(69), /* |, reduce: BitXorExp */
			reduce(69), /* ~, reduce: BitXorExp */
			shift(885), /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			reduce(69), /* ), reduce: BitXorExp */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S469
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(71), /* ,, reduce: BitAndExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(71), /* or, reduce: BitAndExp */
			reduce(71), /* and, reduce: BitAndExp */
			reduce(71), /* <, reduce: BitAndExp */
			reduce(71), /* <=, reduce: BitAndExp */
			reduce(71), /* >, reduce: BitAndExp */
			reduce(71), /* >=, reduce: BitAndExp */
			reduce(71), /* ==, reduce: BitAndExp */
			reduce(71), /* ~=, reduce: BitAndExp */
			reduce(71), /* |, reduce: BitAndExp */
			reduce(71), /* ~, reduce: BitAndExp */
			reduce(71), /* &, reduce: BitAndExp */
			shift(886), /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			reduce(71), /* ), reduce: BitAndExp */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S470
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(73), /* ,, reduce: ConcatExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(73), /* or, reduce: ConcatExp */
			reduce(73), /* and, reduce: ConcatExp */
			reduce(73), /* <, reduce: ConcatExp */
			reduce(73), /* <=, reduce: ConcatExp */
			reduce(73), /* >, reduce: ConcatExp */
			reduce(73), /* >=, reduce: ConcatExp */
			reduce(73), /* ==, reduce: ConcatExp */
			reduce(73), /* ~=, reduce: ConcatExp */
			reduce(73), /* |, reduce: ConcatExp */
			reduce(73), /* ~, reduce: ConcatExp */
			reduce(73), /* &, reduce: ConcatExp */
			reduce(73), /* .., reduce: ConcatExp */
			shift(214), /* << */
			shift(215), /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			reduce(73), /* ), reduce: ConcatExp */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S471
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(77), /* ,, reduce: ShiftExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(77), /* or, reduce: ShiftExp */
			reduce(77), /* and, reduce: ShiftExp */
			reduce(77), /* <, reduce: ShiftExp */
			reduce(77), /* <=, reduce: ShiftExp */
			reduce(77), /* >, reduce: ShiftExp */
			reduce(77), /* >=, reduce: ShiftExp */
			reduce(77), /* ==, reduce: ShiftExp */
			reduce(77), /* ~=, reduce: ShiftExp */
			reduce(77), /* |, reduce: ShiftExp */
			reduce(77), /* ~, reduce: ShiftExp */
			reduce(77), /* &, reduce: ShiftExp */
			reduce(77), /* .., reduce: ShiftExp */
			reduce(77), /* <<, reduce: ShiftExp */
			reduce(77), /* >>, reduce: ShiftExp */
			shift(217), /* + */
			shift(218), /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			reduce(77), /* ), reduce: ShiftExp */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S472
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(81), /* ,, reduce: Sum */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(81), /* or, reduce: Sum */
			reduce(81), /* and, reduce: Sum */
			reduce(81), /* <, reduce: Sum */
			reduce(81), /* <=, reduce: Sum */
			reduce(81), /* >, reduce: Sum */
			reduce(81), /* >=, reduce: Sum */
			reduce(81), /* ==, reduce: Sum */
			reduce(81), /* ~=, reduce: Sum */
			reduce(81), /* |, reduce: Sum */
			reduce(81), /* ~, reduce: Sum */
			reduce(81), /* &, reduce: Sum */
			reduce(81), /* .., reduce: Sum */
			reduce(81), /* <<, reduce: Sum */
			reduce(81), /* >>, reduce: Sum */
			reduce(81), /* +, reduce: Sum */
			reduce(81), /* -, reduce: Sum */
			shift(220), /* * */
			shift(221), /* / */
			shift(222), /* % */
			shift(223), /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			reduce(81), /* ), reduce: Sum */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S473
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(87), /* ,, reduce: Term */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(87), /* or, reduce: Term */
			reduce(87), /* and, reduce: Term */
			reduce(87), /* <, reduce: Term */
			reduce(87), /* <=, reduce: Term */
			reduce(87), /* >, reduce: Term */
			reduce(87), /* >=, reduce: Term */
			reduce(87), /* ==, reduce: Term */
			reduce(87), /* ~=, reduce: Term */
			reduce(87), /* |, reduce: Term */
			reduce(87), /* ~, reduce: Term */
			reduce(87), /* &, reduce: Term */
			reduce(87), /* .., reduce: Term */
			reduce(87), /* <<, reduce: Term */
			reduce(87), /* >>, reduce: Term */
			reduce(87), /* +, reduce: Term */
			reduce(87), /* -, reduce: Term */
			reduce(87), /* *, reduce: Term */
			reduce(87), /* /, reduce: Term */
			reduce(87), /* %, reduce: Term */
			reduce(87), /* //, reduce: Term */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			reduce(87), /* ), reduce: Term */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S474
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(462), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(478), /* ( */
			nil,        /* ) */
			shift(480), /* nil */
			shift(481), /* true */
			shift(482), /* false */
			shift(483), /* ... */
			shift(484), /* numdec */
			shift(485), /* numhex */
			shift(486), /* string */
			shift(489), /* { */
			nil,        /* } */
			shift(490), /* ident */
		},
	},
	actionRow{ // S475
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(94), /* ,, reduce: Factor */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(94), /* or, reduce: Factor */
			reduce(94), /* and, reduce: Factor */
			reduce(94), /* <, reduce: Factor */
			reduce(94), /* <=, reduce: Factor */
			reduce(94), /* >, reduce: Factor */
			reduce(94), /* >=, reduce: Factor */
			reduce(94), /* ==, reduce: Factor */
			reduce(94), /* ~=, reduce: Factor */
			reduce(94), /* |, reduce: Factor */
			reduce(94), /* ~, reduce: Factor */
			reduce(94), /* &, reduce: Factor */
			reduce(94), /* .., reduce: Factor */
			reduce(94), /* <<, reduce: Factor */
			reduce(94), /* >>, reduce: Factor */
			reduce(94), /* +, reduce: Factor */
			reduce(94), /* -, reduce: Factor */
			reduce(94), /* *, reduce: Factor */
			reduce(94), /* /, reduce: Factor */
			reduce(94), /* %, reduce: Factor */
			reduce(94), /* //, reduce: Factor */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			reduce(94), /* ), reduce: Factor */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S476
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(95), /* ,, reduce: Power */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(95), /* or, reduce: Power */
			reduce(95), /* and, reduce: Power */
			reduce(95), /* <, reduce: Power */
			reduce(95), /* <=, reduce: Power */
			reduce(95), /* >, reduce: Power */
			reduce(95), /* >=, reduce: Power */
			reduce(95), /* ==, reduce: Power */
			reduce(95), /* ~=, reduce: Power */
			reduce(95), /* |, reduce: Power */
			reduce(95), /* ~, reduce: Power */
			reduce(95), /* &, reduce: Power */
			reduce(95), /* .., reduce: Power */
			reduce(95), /* <<, reduce: Power */
			reduce(95), /* >>, reduce: Power */
			reduce(95), /* +, reduce: Power */
			reduce(95), /* -, reduce: Power */
			reduce(95), /* *, reduce: Power */
			reduce(95), /* /, reduce: Power */
			reduce(95), /* %, reduce: Power */
			reduce(95), /* //, reduce: Power */
			nil,        /* not */
			nil,        /* # */
			shift(891), /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			reduce(95), /* ), reduce: Power */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S477
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(114), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			shift(892),  /* . */
			shift(893),  /* : */
			reduce(114), /* or, reduce: Atom */
			reduce(114), /* and, reduce: Atom */
			reduce(114), /* <, reduce: Atom */
			reduce(114), /* <=, reduce: Atom */
			reduce(114), /* >, reduce: Atom */
			reduce(114), /* >=, reduce: Atom */
			reduce(114), /* ==, reduce: Atom */
			reduce(114), /* ~=, reduce: Atom */
			reduce(114), /* |, reduce: Atom */
			reduce(114), /* ~, reduce: Atom */
			reduce(114), /* &, reduce: Atom */
			reduce(114), /* .., reduce: Atom */
			reduce(114), /* <<, reduce: Atom */
			reduce(114), /* >>, reduce: Atom */
			reduce(114), /* +, reduce: Atom */
			reduce(114), /* -, reduce: Atom */
			reduce(114), /* *, reduce: Atom */
			reduce(114), /* /, reduce: Atom */
			reduce(114), /* %, reduce: Atom */
			reduce(114), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(114), /* ^, reduce: Atom */
			shift(894),  /* [ */
			nil,         /* ] */
			shift(895),  /* ( */
			reduce(114), /* ), reduce: Atom */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			shift(897),  /* string */
			shift(899),  /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S478
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(168), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(184), /* ( */
			nil,        /* ) */
			shift(185), /* nil */
			shift(186), /* true */
			shift(187), /* false */
			shift(188), /* ... */
			shift(189), /* numdec */
			shift(190), /* numhex */
			shift(191), /* string */
			shift(194), /* { */
			nil,        /* } */
			shift(195), /* ident */
		},
	},
	actionRow{ // S479
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(115), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(115), /* ., reduce: Args */
			reduce(115), /* :, reduce: Args */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			reduce(115), /* [, reduce: Args */
			nil,         /* ] */
			reduce(115), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(115), /* string, reduce: Args */
			reduce(115), /* {, reduce: Args */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S480
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(105), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(105), /* or, reduce: Atom */
			reduce(105), /* and, reduce: Atom */
			reduce(105), /* <, reduce: Atom */
			reduce(105), /* <=, reduce: Atom */
			reduce(105), /* >, reduce: Atom */
			reduce(105), /* >=, reduce: Atom */
			reduce(105), /* ==, reduce: Atom */
			reduce(105), /* ~=, reduce: Atom */
			reduce(105), /* |, reduce: Atom */
			reduce(105), /* ~, reduce: Atom */
			reduce(105), /* &, reduce: Atom */
			reduce(105), /* .., reduce: Atom */
			reduce(105), /* <<, reduce: Atom */
			reduce(105), /* >>, reduce: Atom */
			reduce(105), /* +, reduce: Atom */
			reduce(105), /* -, reduce: Atom */
			reduce(105), /* *, reduce: Atom */
			reduce(105), /* /, reduce: Atom */
			reduce(105), /* %, reduce: Atom */
			reduce(105), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(105), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(105), /* ), reduce: Atom */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S481
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(106), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(106), /* or, reduce: Atom */
			reduce(106), /* and, reduce: Atom */
			reduce(106), /* <, reduce: Atom */
			reduce(106), /* <=, reduce: Atom */
			reduce(106), /* >, reduce: Atom */
			reduce(106), /* >=, reduce: Atom */
			reduce(106), /* ==, reduce: Atom */
			reduce(106), /* ~=, reduce: Atom */
			reduce(106), /* |, reduce: Atom */
			reduce(106), /* ~, reduce: Atom */
			reduce(106), /* &, reduce: Atom */
			reduce(106), /* .., reduce: Atom */
			reduce(106), /* <<, reduce: Atom */
			reduce(106), /* >>, reduce: Atom */
			reduce(106), /* +, reduce: Atom */
			reduce(106), /* -, reduce: Atom */
			reduce(106), /* *, reduce: Atom */
			reduce(106), /* /, reduce: Atom */
			reduce(106), /* %, reduce: Atom */
			reduce(106), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(106), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(106), /* ), reduce: Atom */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S482
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(107), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(107), /* or, reduce: Atom */
			reduce(107), /* and, reduce: Atom */
			reduce(107), /* <, reduce: Atom */
			reduce(107), /* <=, reduce: Atom */
			reduce(107), /* >, reduce: Atom */
			reduce(107), /* >=, reduce: Atom */
			reduce(107), /* ==, reduce: Atom */
			reduce(107), /* ~=, reduce: Atom */
			reduce(107), /* |, reduce: Atom */
			reduce(107), /* ~, reduce: Atom */
			reduce(107), /* &, reduce: Atom */
			reduce(107), /* .., reduce: Atom */
			reduce(107), /* <<, reduce: Atom */
			reduce(107), /* >>, reduce: Atom */
			reduce(107), /* +, reduce: Atom */
			reduce(107), /* -, reduce: Atom */
			reduce(107), /* *, reduce: Atom */
			reduce(107), /* /, reduce: Atom */
			reduce(107), /* %, reduce: Atom */
			reduce(107), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(107), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(107), /* ), reduce: Atom */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S483
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(108), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(108), /* or, reduce: Atom */
			reduce(108), /* and, reduce: Atom */
			reduce(108), /* <, reduce: Atom */
			reduce(108), /* <=, reduce: Atom */
			reduce(108), /* >, reduce: Atom */
			reduce(108), /* >=, reduce: Atom */
			reduce(108), /* ==, reduce: Atom */
			reduce(108), /* ~=, reduce: Atom */
			reduce(108), /* |, reduce: Atom */
			reduce(108), /* ~, reduce: Atom */
			reduce(108), /* &, reduce: Atom */
			reduce(108), /* .., reduce: Atom */
			reduce(108), /* <<, reduce: Atom */
			reduce(108), /* >>, reduce: Atom */
			reduce(108), /* +, reduce: Atom */
			reduce(108), /* -, reduce: Atom */
			reduce(108), /* *, reduce: Atom */
			reduce(108), /* /, reduce: Atom */
			reduce(108), /* %, reduce: Atom */
			reduce(108), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(108), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(108), /* ), reduce: Atom */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S484
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(109), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(109), /* or, reduce: Atom */
			reduce(109), /* and, reduce: Atom */
			reduce(109), /* <, reduce: Atom */
			reduce(109), /* <=, reduce: Atom */
			reduce(109), /* >, reduce: Atom */
			reduce(109), /* >=, reduce: Atom */
			reduce(109), /* ==, reduce: Atom */
			reduce(109), /* ~=, reduce: Atom */
			reduce(109), /* |, reduce: Atom */
			reduce(109), /* ~, reduce: Atom */
			reduce(109), /* &, reduce: Atom */
			reduce(109), /* .., reduce: Atom */
			reduce(109), /* <<, reduce: Atom */
			reduce(109), /* >>, reduce: Atom */
			reduce(109), /* +, reduce: Atom */
			reduce(109), /* -, reduce: Atom */
			reduce(109), /* *, reduce: Atom */
			reduce(109), /* /, reduce: Atom */
			reduce(109), /* %, reduce: Atom */
			reduce(109), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(109), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(109), /* ), reduce: Atom */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S485
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(110), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(110), /* or, reduce: Atom */
			reduce(110), /* and, reduce: Atom */
			reduce(110), /* <, reduce: Atom */
			reduce(110), /* <=, reduce: Atom */
			reduce(110), /* >, reduce: Atom */
			reduce(110), /* >=, reduce: Atom */
			reduce(110), /* ==, reduce: Atom */
			reduce(110), /* ~=, reduce: Atom */
			reduce(110), /* |, reduce: Atom */
			reduce(110), /* ~, reduce: Atom */
			reduce(110), /* &, reduce: Atom */
			reduce(110), /* .., reduce: Atom */
			reduce(110), /* <<, reduce: Atom */
			reduce(110), /* >>, reduce: Atom */
			reduce(110), /* +, reduce: Atom */
			reduce(110), /* -, reduce: Atom */
			reduce(110), /* *, reduce: Atom */
			reduce(110), /* /, reduce: Atom */
			reduce(110), /* %, reduce: Atom */
			reduce(110), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(110), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(110), /* ), reduce: Atom */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S486
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(111), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(111), /* or, reduce: Atom */
			reduce(111), /* and, reduce: Atom */
			reduce(111), /* <, reduce: Atom */
			reduce(111), /* <=, reduce: Atom */
			reduce(111), /* >, reduce: Atom */
			reduce(111), /* >=, reduce: Atom */
			reduce(111), /* ==, reduce: Atom */
			reduce(111), /* ~=, reduce: Atom */
			reduce(111), /* |, reduce: Atom */
			reduce(111), /* ~, reduce: Atom */
			reduce(111), /* &, reduce: Atom */
			reduce(111), /* .., reduce: Atom */
			reduce(111), /* <<, reduce: Atom */
			reduce(111), /* >>, reduce: Atom */
			reduce(111), /* +, reduce: Atom */
			reduce(111), /* -, reduce: Atom */
			reduce(111), /* *, reduce: Atom */
			reduce(111), /* /, reduce: Atom */
			reduce(111), /* %, reduce: Atom */
			reduce(111), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(111), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(111), /* ), reduce: Atom */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S487
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(112), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(112), /* or, reduce: Atom */
			reduce(112), /* and, reduce: Atom */
			reduce(112), /* <, reduce: Atom */
			reduce(112), /* <=, reduce: Atom */
			reduce(112), /* >, reduce: Atom */
			reduce(112), /* >=, reduce: Atom */
			reduce(112), /* ==, reduce: Atom */
			reduce(112), /* ~=, reduce: Atom */
			reduce(112), /* |, reduce: Atom */
			reduce(112), /* ~, reduce: Atom */
			reduce(112), /* &, reduce: Atom */
			reduce(112), /* .., reduce: Atom */
			reduce(112), /* <<, reduce: Atom */
			reduce(112), /* >>, reduce: Atom */
			reduce(112), /* +, reduce: Atom */
			reduce(112), /* -, reduce: Atom */
			reduce(112), /* *, reduce: Atom */
			reduce(112), /* /, reduce: Atom */
			reduce(112), /* %, reduce: Atom */
			reduce(112), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(112), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(112), /* ), reduce: Atom */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S488
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(113), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(113), /* or, reduce: Atom */
			reduce(113), /* and, reduce: Atom */
			reduce(113), /* <, reduce: Atom */
			reduce(113), /* <=, reduce: Atom */
			reduce(113), /* >, reduce: Atom */
			reduce(113), /* >=, reduce: Atom */
			reduce(113), /* ==, reduce: Atom */
			reduce(113), /* ~=, reduce: Atom */
			reduce(113), /* |, reduce: Atom */
			reduce(113), /* ~, reduce: Atom */
			reduce(113), /* &, reduce: Atom */
			reduce(113), /* .., reduce: Atom */
			reduce(113), /* <<, reduce: Atom */
			reduce(113), /* >>, reduce: Atom */
			reduce(113), /* +, reduce: Atom */
			reduce(113), /* -, reduce: Atom */
			reduce(113), /* *, reduce: Atom */
			reduce(113), /* /, reduce: Atom */
			reduce(113), /* %, reduce: Atom */
			reduce(113), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(113), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(113), /* ), reduce: Atom */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S489
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			shift(254), /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(268), /* ident */
		},
	},
	actionRow{ // S490
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(134), /* ,, reduce: Name */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(134), /* ., reduce: Name */
			reduce(134), /* :, reduce: Name */
			reduce(134), /* or, reduce: Name */
			reduce(134), /* and, reduce: Name */
			reduce(134), /* <, reduce: Name */
			reduce(134), /* <=, reduce: Name */
			reduce(134), /* >, reduce: Name */
			reduce(134), /* >=, reduce: Name */
			reduce(134), /* ==, reduce: Name */
			reduce(134), /* ~=, reduce: Name */
			reduce(134), /* |, reduce: Name */
			reduce(134), /* ~, reduce: Name */
			reduce(134), /* &, reduce: Name */
			reduce(134), /* .., reduce: Name */
			reduce(134), /* <<, reduce: Name */
			reduce(134), /* >>, reduce: Name */
			reduce(134), /* +, reduce: Name */
			reduce(134), /* -, reduce: Name */
			reduce(134), /* *, reduce: Name */
			reduce(134), /* /, reduce: Name */
			reduce(134), /* %, reduce: Name */
			reduce(134), /* //, reduce: Name */
			nil,         /* not */
			nil,         /* # */
			reduce(134), /* ^, reduce: Name */
			reduce(134), /* [, reduce: Name */
			nil,         /* ] */
			reduce(134), /* (, reduce: Name */
			reduce(134), /* ), reduce: Name */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(134), /* string, reduce: Name */
			reduce(134), /* {, reduce: Name */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S491
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			shift(569), /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			shift(570), /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			shift(902), /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S492
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(168), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(184), /* ( */
			nil,        /* ) */
			shift(185), /* nil */
			shift(186), /* true */
			shift(187), /* false */
			shift(188), /* ... */
			shift(189), /* numdec */
			shift(190), /* numhex */
			shift(191), /* string */
			shift(194), /* { */
			nil,        /* } */
			shift(195), /* ident */
		},
	},
	actionRow{ // S493
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(102), /* ., reduce: PrefixExp */
			reduce(102), /* :, reduce: PrefixExp */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			reduce(102), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(102), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(102), /* string, reduce: PrefixExp */
			reduce(102), /* {, reduce: PrefixExp */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S494
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(119), /* or, reduce: FunctionDef */
			reduce(119), /* and, reduce: FunctionDef */
			reduce(119), /* <, reduce: FunctionDef */
			reduce(119), /* <=, reduce: FunctionDef */
			reduce(119), /* >, reduce: FunctionDef */
			reduce(119), /* >=, reduce: FunctionDef */
			reduce(119), /* ==, reduce: FunctionDef */
			reduce(119), /* ~=, reduce: FunctionDef */
			reduce(119), /* |, reduce: FunctionDef */
			reduce(119), /* ~, reduce: FunctionDef */
			reduce(119), /* &, reduce: FunctionDef */
			reduce(119), /* .., reduce: FunctionDef */
			reduce(119), /* <<, reduce: FunctionDef */
			reduce(119), /* >>, reduce: FunctionDef */
			reduce(119), /* +, reduce: FunctionDef */
			reduce(119), /* -, reduce: FunctionDef */
			reduce(119), /* *, reduce: FunctionDef */
			reduce(119), /* /, reduce: FunctionDef */
			reduce(119), /* %, reduce: FunctionDef */
			reduce(119), /* //, reduce: FunctionDef */
			nil,         /* not */
			nil,         /* # */
			reduce(119), /* ^, reduce: FunctionDef */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(119), /* ), reduce: FunctionDef */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S495
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(123), /* ), reduce: ParList */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			shift(521),  /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			shift(523),  /* ident */
		},
	},
	actionRow{ // S496
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(168), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(184), /* ( */
			nil,        /* ) */
			shift(185), /* nil */
			shift(186), /* true */
			shift(187), /* false */
			shift(188), /* ... */
			shift(189), /* numdec */
			shift(190), /* numhex */
			shift(191), /* string */
			shift(194), /* { */
			nil,        /* } */
			shift(195), /* ident */
		},
	},
	actionRow{ // S497
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(168), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(184), /* ( */
			nil,        /* ) */
			shift(185), /* nil */
			shift(186), /* true */
			shift(187), /* false */
			shift(188), /* ... */
			shift(189), /* numdec */
			shift(190), /* numhex */
			shift(191), /* string */
			shift(194), /* { */
			nil,        /* } */
			shift(195), /* ident */
		},
	},
	actionRow{ // S498
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(168), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(184), /* ( */
			nil,        /* ) */
			shift(185), /* nil */
			shift(186), /* true */
			shift(187), /* false */
			shift(188), /* ... */
			shift(189), /* numdec */
			shift(190), /* numhex */
			shift(191), /* string */
			shift(194), /* { */
			nil,        /* } */
			shift(195), /* ident */
		},
	},
	actionRow{ // S499
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(168), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(184), /* ( */
			nil,        /* ) */
			shift(185), /* nil */
			shift(186), /* true */
			shift(187), /* false */
			shift(188), /* ... */
			shift(189), /* numdec */
			shift(190), /* numhex */
			shift(191), /* string */
			shift(194), /* { */
			nil,        /* } */
			shift(195), /* ident */
		},
	},
	actionRow{ // S500
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(168), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(184), /* ( */
			nil,        /* ) */
			shift(185), /* nil */
			shift(186), /* true */
			shift(187), /* false */
			shift(188), /* ... */
			shift(189), /* numdec */
			shift(190), /* numhex */
			shift(191), /* string */
			shift(194), /* { */
			nil,        /* } */
			shift(195), /* ident */
		},
	},
	actionRow{ // S501
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(168), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(184), /* ( */
			nil,        /* ) */
			shift(185), /* nil */
			shift(186), /* true */
			shift(187), /* false */
			shift(188), /* ... */
			shift(189), /* numdec */
			shift(190), /* numhex */
			shift(191), /* string */
			shift(194), /* { */
			nil,        /* } */
			shift(195), /* ident */
		},
	},
	actionRow{ // S502
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(168), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(184), /* ( */
			nil,        /* ) */
			shift(185), /* nil */
			shift(186), /* true */
			shift(187), /* false */
			shift(188), /* ... */
			shift(189), /* numdec */
			shift(190), /* numhex */
			shift(191), /* string */
			shift(194), /* { */
			nil,        /* } */
			shift(195), /* ident */
		},
	},
	actionRow{ // S503
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(168), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(184), /* ( */
			nil,        /* ) */
			shift(185), /* nil */
			shift(186), /* true */
			shift(187), /* false */
			shift(188), /* ... */
			shift(189), /* numdec */
			shift(190), /* numhex */
			shift(191), /* string */
			shift(194), /* { */
			nil,        /* } */
			shift(195), /* ident */
		},
	},
	actionRow{ // S504
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(168), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(184), /* ( */
			nil,        /* ) */
			shift(185), /* nil */
			shift(186), /* true */
			shift(187), /* false */
			shift(188), /* ... */
			shift(189), /* numdec */
			shift(190), /* numhex */
			shift(191), /* string */
			shift(194), /* { */
			nil,        /* } */
			shift(195), /* ident */
		},
	},
	actionRow{ // S505
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(93), /* or, reduce: Factor */
			reduce(93), /* and, reduce: Factor */
			reduce(93), /* <, reduce: Factor */
			reduce(93), /* <=, reduce: Factor */
			reduce(93), /* >, reduce: Factor */
			reduce(93), /* >=, reduce: Factor */
			reduce(93), /* ==, reduce: Factor */
			reduce(93), /* ~=, reduce: Factor */
			reduce(93), /* |, reduce: Factor */
			reduce(93), /* ~, reduce: Factor */
			reduce(93), /* &, reduce: Factor */
			reduce(93), /* .., reduce: Factor */
			reduce(93), /* <<, reduce: Factor */
			reduce(93), /* >>, reduce: Factor */
			reduce(93), /* +, reduce: Factor */
			reduce(93), /* -, reduce: Factor */
			reduce(93), /* *, reduce: Factor */
			reduce(93), /* /, reduce: Factor */
			reduce(93), /* %, reduce: Factor */
			reduce(93), /* //, reduce: Factor */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			reduce(93), /* ), reduce: Factor */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S506
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(168), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(184), /* ( */
			nil,        /* ) */
			shift(185), /* nil */
			shift(186), /* true */
			shift(187), /* false */
			shift(188), /* ... */
			shift(189), /* numdec */
			shift(190), /* numhex */
			shift(191), /* string */
			shift(194), /* { */
			nil,        /* } */
			shift(195), /* ident */
		},
	},
	actionRow{ // S507
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(195), /* ident */
		},
	},
	actionRow{ // S508
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(426), /* ident */
		},
	},
	actionRow{ // S509
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(430), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(446), /* ( */
			nil,        /* ) */
			shift(447), /* nil */
			shift(448), /* true */
			shift(449), /* false */
			shift(450), /* ... */
			shift(451), /* numdec */
			shift(452), /* numhex */
			shift(453), /* string */
			shift(456), /* { */
			nil,        /* } */
			shift(457), /* ident */
		},
	},
	actionRow{ // S510
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(462), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(478), /* ( */
			shift(920), /* ) */
			shift(480), /* nil */
			shift(481), /* true */
			shift(482), /* false */
			shift(483), /* ... */
			shift(484), /* numdec */
			shift(485), /* numhex */
			shift(486), /* string */
			shift(489), /* { */
			nil,        /* } */
			shift(490), /* ident */
		},
	},
	actionRow{ // S511
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(103), /* ., reduce: FunctionCall */
			reduce(103), /* :, reduce: FunctionCall */
			reduce(103), /* or, reduce: FunctionCall */
			reduce(103), /* and, reduce: FunctionCall */
			reduce(103), /* <, reduce: FunctionCall */
			reduce(103), /* <=, reduce: FunctionCall */
			reduce(103), /* >, reduce: FunctionCall */
			reduce(103), /* >=, reduce: FunctionCall */
			reduce(103), /* ==, reduce: FunctionCall */
			reduce(103), /* ~=, reduce: FunctionCall */
			reduce(103), /* |, reduce: FunctionCall */
			reduce(103), /* ~, reduce: FunctionCall */
			reduce(103), /* &, reduce: FunctionCall */
			reduce(103), /* .., reduce: FunctionCall */
			reduce(103), /* <<, reduce: FunctionCall */
			reduce(103), /* >>, reduce: FunctionCall */
			reduce(103), /* +, reduce: FunctionCall */
			reduce(103), /* -, reduce: FunctionCall */
			reduce(103), /* *, reduce: FunctionCall */
			reduce(103), /* /, reduce: FunctionCall */
			reduce(103), /* %, reduce: FunctionCall */
			reduce(103), /* //, reduce: FunctionCall */
			nil,         /* not */
			nil,         /* # */
			reduce(103), /* ^, reduce: FunctionCall */
			reduce(103), /* [, reduce: FunctionCall */
			nil,         /* ] */
			reduce(103), /* (, reduce: FunctionCall */
			reduce(103), /* ), reduce: FunctionCall */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(103), /* string, reduce: FunctionCall */
			reduce(103), /* {, reduce: FunctionCall */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S512
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(118), /* ., reduce: Args */
			reduce(118), /* :, reduce: Args */
			reduce(118), /* or, reduce: Args */
			reduce(118), /* and, reduce: Args */
			reduce(118), /* <, reduce: Args */
			reduce(118), /* <=, reduce: Args */
			reduce(118), /* >, reduce: Args */
			reduce(118), /* >=, reduce: Args */
			reduce(118), /* ==, reduce: Args */
			reduce(118), /* ~=, reduce: Args */
			reduce(118), /* |, reduce: Args */
			reduce(118), /* ~, reduce: Args */
			reduce(118), /* &, reduce: Args */
			reduce(118), /* .., reduce: Args */
			reduce(118), /* <<, reduce: Args */
			reduce(118), /* >>, reduce: Args */
			reduce(118), /* +, reduce: Args */
			reduce(118), /* -, reduce: Args */
			reduce(118), /* *, reduce: Args */
			reduce(118), /* /, reduce: Args */
			reduce(118), /* %, reduce: Args */
			reduce(118), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(118), /* ^, reduce: Args */
			reduce(118), /* [, reduce: Args */
			nil,         /* ] */
			reduce(118), /* (, reduce: Args */
			reduce(118), /* ), reduce: Args */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(118), /* string, reduce: Args */
			reduce(118), /* {, reduce: Args */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S513
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(117), /* ., reduce: Args */
			reduce(117), /* :, reduce: Args */
			reduce(117), /* or, reduce: Args */
			reduce(117), /* and, reduce: Args */
			reduce(117), /* <, reduce: Args */
			reduce(117), /* <=, reduce: Args */
			reduce(117), /* >, reduce: Args */
			reduce(117), /* >=, reduce: Args */
			reduce(117), /* ==, reduce: Args */
			reduce(117), /* ~=, reduce: Args */
			reduce(117), /* |, reduce: Args */
			reduce(117), /* ~, reduce: Args */
			reduce(117), /* &, reduce: Args */
			reduce(117), /* .., reduce: Args */
			reduce(117), /* <<, reduce: Args */
			reduce(117), /* >>, reduce: Args */
			reduce(117), /* +, reduce: Args */
			reduce(117), /* -, reduce: Args */
			reduce(117), /* *, reduce: Args */
			reduce(117), /* /, reduce: Args */
			reduce(117), /* %, reduce: Args */
			reduce(117), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(117), /* ^, reduce: Args */
			reduce(117), /* [, reduce: Args */
			nil,         /* ] */
			reduce(117), /* (, reduce: Args */
			reduce(117), /* ), reduce: Args */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(117), /* string, reduce: Args */
			reduce(117), /* {, reduce: Args */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S514
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			shift(254), /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(268), /* ident */
		},
	},
	actionRow{ // S515
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			shift(492), /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			shift(922), /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S516
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			shift(569), /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			shift(570), /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			shift(923), /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S517
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(54), /* $, reduce: ExpList */
			nil,        /* return */
			reduce(54), /* ;, reduce: ExpList */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(54), /* ,, reduce: ExpList */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			shift(198), /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S518
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(56), /* $, reduce: Exp */
			nil,        /* return */
			reduce(56), /* ;, reduce: Exp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(56), /* ,, reduce: Exp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(56), /* or, reduce: Exp */
			shift(201), /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S519
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(51), /* ,, reduce: NameList */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			reduce(51), /* ), reduce: NameList */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S520
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(925),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(120), /* ), reduce: ParList */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S521
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(122), /* ), reduce: ParList */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S522
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			shift(926), /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S523
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(134), /* ,, reduce: Name */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(134), /* ), reduce: Name */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S524
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(58), /* $, reduce: AndExp */
			nil,        /* return */
			reduce(58), /* ;, reduce: AndExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(58), /* ,, reduce: AndExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(58), /* or, reduce: AndExp */
			reduce(58), /* and, reduce: AndExp */
			shift(203), /* < */
			shift(204), /* <= */
			shift(205), /* > */
			shift(206), /* >= */
			shift(207), /* == */
			shift(208), /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S525
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(66), /* $, reduce: CompExp */
			nil,        /* return */
			reduce(66), /* ;, reduce: CompExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(66), /* ,, reduce: CompExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(66), /* or, reduce: CompExp */
			reduce(66), /* and, reduce: CompExp */
			reduce(66), /* <, reduce: CompExp */
			reduce(66), /* <=, reduce: CompExp */
			reduce(66), /* >, reduce: CompExp */
			reduce(66), /* >=, reduce: CompExp */
			reduce(66), /* ==, reduce: CompExp */
			reduce(66), /* ~=, reduce: CompExp */
			shift(209), /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S526
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(68), /* $, reduce: BitOrExp */
			nil,        /* return */
			reduce(68), /* ;, reduce: BitOrExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(68), /* ,, reduce: BitOrExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(68), /* or, reduce: BitOrExp */
			reduce(68), /* and, reduce: BitOrExp */
			reduce(68), /* <, reduce: BitOrExp */
			reduce(68), /* <=, reduce: BitOrExp */
			reduce(68), /* >, reduce: BitOrExp */
			reduce(68), /* >=, reduce: BitOrExp */
			reduce(68), /* ==, reduce: BitOrExp */
			reduce(68), /* ~=, reduce: BitOrExp */
			reduce(68), /* |, reduce: BitOrExp */
			shift(210), /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S527
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(70), /* $, reduce: BitXorExp */
			nil,        /* return */
			reduce(70), /* ;, reduce: BitXorExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(70), /* ,, reduce: BitXorExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(70), /* or, reduce: BitXorExp */
			reduce(70), /* and, reduce: BitXorExp */
			reduce(70), /* <, reduce: BitXorExp */
			reduce(70), /* <=, reduce: BitXorExp */
			reduce(70), /* >, reduce: BitXorExp */
			reduce(70), /* >=, reduce: BitXorExp */
			reduce(70), /* ==, reduce: BitXorExp */
			reduce(70), /* ~=, reduce: BitXorExp */
			reduce(70), /* |, reduce: BitXorExp */
			reduce(70), /* ~, reduce: BitXorExp */
			shift(211), /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S528
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(72), /* $, reduce: BitAndExp */
			nil,        /* return */
			reduce(72), /* ;, reduce: BitAndExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(72), /* ,, reduce: BitAndExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(72), /* or, reduce: BitAndExp */
			reduce(72), /* and, reduce: BitAndExp */
			reduce(72), /* <, reduce: BitAndExp */
			reduce(72), /* <=, reduce: BitAndExp */
			reduce(72), /* >, reduce: BitAndExp */
			reduce(72), /* >=, reduce: BitAndExp */
			reduce(72), /* ==, reduce: BitAndExp */
			reduce(72), /* ~=, reduce: BitAndExp */
			reduce(72), /* |, reduce: BitAndExp */
			reduce(72), /* ~, reduce: BitAndExp */
			reduce(72), /* &, reduce: BitAndExp */
			shift(212), /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S529
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(74), /* $, reduce: ConcatExp */
			nil,        /* return */
			reduce(74), /* ;, reduce: ConcatExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(74), /* ,, reduce: ConcatExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(74), /* or, reduce: ConcatExp */
			reduce(74), /* and, reduce: ConcatExp */
			reduce(74), /* <, reduce: ConcatExp */
			reduce(74), /* <=, reduce: ConcatExp */
			reduce(74), /* >, reduce: ConcatExp */
			reduce(74), /* >=, reduce: ConcatExp */
			reduce(74), /* ==, reduce: ConcatExp */
			reduce(74), /* ~=, reduce: ConcatExp */
			reduce(74), /* |, reduce: ConcatExp */
			reduce(74), /* ~, reduce: ConcatExp */
			reduce(74), /* &, reduce: ConcatExp */
			reduce(74), /* .., reduce: ConcatExp */
			shift(214), /* << */
			shift(215), /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S530
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(78), /* $, reduce: ShiftExp */
			nil,        /* return */
			reduce(78), /* ;, reduce: ShiftExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(78), /* ,, reduce: ShiftExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(78), /* or, reduce: ShiftExp */
			reduce(78), /* and, reduce: ShiftExp */
			reduce(78), /* <, reduce: ShiftExp */
			reduce(78), /* <=, reduce: ShiftExp */
			reduce(78), /* >, reduce: ShiftExp */
			reduce(78), /* >=, reduce: ShiftExp */
			reduce(78), /* ==, reduce: ShiftExp */
			reduce(78), /* ~=, reduce: ShiftExp */
			reduce(78), /* |, reduce: ShiftExp */
			reduce(78), /* ~, reduce: ShiftExp */
			reduce(78), /* &, reduce: ShiftExp */
			reduce(78), /* .., reduce: ShiftExp */
			reduce(78), /* <<, reduce: ShiftExp */
			reduce(78), /* >>, reduce: ShiftExp */
			shift(217), /* + */
			shift(218), /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S531
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(82), /* $, reduce: Sum */
			nil,        /* return */
			reduce(82), /* ;, reduce: Sum */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(82), /* ,, reduce: Sum */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(82), /* or, reduce: Sum */
			reduce(82), /* and, reduce: Sum */
			reduce(82), /* <, reduce: Sum */
			reduce(82), /* <=, reduce: Sum */
			reduce(82), /* >, reduce: Sum */
			reduce(82), /* >=, reduce: Sum */
			reduce(82), /* ==, reduce: Sum */
			reduce(82), /* ~=, reduce: Sum */
			reduce(82), /* |, reduce: Sum */
			reduce(82), /* ~, reduce: Sum */
			reduce(82), /* &, reduce: Sum */
			reduce(82), /* .., reduce: Sum */
			reduce(82), /* <<, reduce: Sum */
			reduce(82), /* >>, reduce: Sum */
			reduce(82), /* +, reduce: Sum */
			reduce(82), /* -, reduce: Sum */
			shift(220), /* * */
			shift(221), /* / */
			shift(222), /* % */
			shift(223), /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S532
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(88), /* $, reduce: Term */
			nil,        /* return */
			reduce(88), /* ;, reduce: Term */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(88), /* ,, reduce: Term */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(88), /* or, reduce: Term */
			reduce(88), /* and, reduce: Term */
			reduce(88), /* <, reduce: Term */
			reduce(88), /* <=, reduce: Term */
			reduce(88), /* >, reduce: Term */
			reduce(88), /* >=, reduce: Term */
			reduce(88), /* ==, reduce: Term */
			reduce(88), /* ~=, reduce: Term */
			reduce(88), /* |, reduce: Term */
			reduce(88), /* ~, reduce: Term */
			reduce(88), /* &, reduce: Term */
			reduce(88), /* .., reduce: Term */
			reduce(88), /* <<, reduce: Term */
			reduce(88), /* >>, reduce: Term */
			reduce(88), /* +, reduce: Term */
			reduce(88), /* -, reduce: Term */
			reduce(88), /* *, reduce: Term */
			reduce(88), /* /, reduce: Term */
			reduce(88), /* %, reduce: Term */
			reduce(88), /* //, reduce: Term */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S533
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(96), /* $, reduce: Power */
			nil,        /* return */
			reduce(96), /* ;, reduce: Power */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(96), /* ,, reduce: Power */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(96), /* or, reduce: Power */
			reduce(96), /* and, reduce: Power */
			reduce(96), /* <, reduce: Power */
			reduce(96), /* <=, reduce: Power */
			reduce(96), /* >, reduce: Power */
			reduce(96), /* >=, reduce: Power */
			reduce(96), /* ==, reduce: Power */
			reduce(96), /* ~=, reduce: Power */
			reduce(96), /* |, reduce: Power */
			reduce(96), /* ~, reduce: Power */
			reduce(96), /* &, reduce: Power */
			reduce(96), /* .., reduce: Power */
			reduce(96), /* <<, reduce: Power */
			reduce(96), /* >>, reduce: Power */
			reduce(96), /* +, reduce: Power */
			reduce(96), /* -, reduce: Power */
			reduce(96), /* *, reduce: Power */
			reduce(96), /* /, reduce: Power */
			reduce(96), /* %, reduce: Power */
			reduce(96), /* //, reduce: Power */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S534
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(99), /* $, reduce: Var */
			nil,        /* return */
			reduce(99), /* ;, reduce: Var */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(99), /* ,, reduce: Var */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			reduce(99), /* ., reduce: Var */
			reduce(99), /* :, reduce: Var */
			reduce(99), /* or, reduce: Var */
			reduce(99), /* and, reduce: Var */
			reduce(99), /* <, reduce: Var */
			reduce(99), /* <=, reduce: Var */
			reduce(99), /* >, reduce: Var */
			reduce(99), /* >=, reduce: Var */
			reduce(99), /* ==, reduce: Var */
			reduce(99), /* ~=, reduce: Var */
			reduce(99), /* |, reduce: Var */
			reduce(99), /* ~, reduce: Var */
			reduce(99), /* &, reduce: Var */
			reduce(99), /* .., reduce: Var */
			reduce(99), /* <<, reduce: Var */
			reduce(99), /* >>, reduce: Var */
			reduce(99), /* +, reduce: Var */
			reduce(99), /* -, reduce: Var */
			reduce(99), /* *, reduce: Var */
			reduce(99), /* /, reduce: Var */
			reduce(99), /* %, reduce: Var */
			reduce(99), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(99), /* ^, reduce: Var */
			reduce(99), /* [, reduce: Var */
			nil,        /* ] */
			reduce(99), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(99), /* string, reduce: Var */
			reduce(99), /* {, reduce: Var */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S535
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(229), /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			shift(231), /* string */
			shift(233), /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S536
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			shift(851), /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			shift(928), /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S537
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			shift(876), /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			shift(929), /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S538
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(115), /* $, reduce: Args */
			nil,         /* return */
			reduce(115), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(115), /* ,, reduce: Args */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(115), /* ., reduce: Args */
			reduce(115), /* :, reduce: Args */
			reduce(115), /* or, reduce: Args */
			reduce(115), /* and, reduce: Args */
			reduce(115), /* <, reduce: Args */
			reduce(115), /* <=, reduce: Args */
			reduce(115), /* >, reduce: Args */
			reduce(115), /* >=, reduce: Args */
			reduce(115), /* ==, reduce: Args */
			reduce(115), /* ~=, reduce: Args */
			reduce(115), /* |, reduce: Args */
			reduce(115), /* ~, reduce: Args */
			reduce(115), /* &, reduce: Args */
			reduce(115), /* .., reduce: Args */
			reduce(115), /* <<, reduce: Args */
			reduce(115), /* >>, reduce: Args */
			reduce(115), /* +, reduce: Args */
			reduce(115), /* -, reduce: Args */
			reduce(115), /* *, reduce: Args */
			reduce(115), /* /, reduce: Args */
			reduce(115), /* %, reduce: Args */
			reduce(115), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(115), /* ^, reduce: Args */
			reduce(115), /* [, reduce: Args */
			nil,         /* ] */
			reduce(115), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(115), /* string, reduce: Args */
			reduce(115), /* {, reduce: Args */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S539
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			shift(569), /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			shift(570), /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			shift(930), /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S540
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(102), /* $, reduce: PrefixExp */
			nil,         /* return */
			reduce(102), /* ;, reduce: PrefixExp */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(102), /* ,, reduce: PrefixExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(102), /* ., reduce: PrefixExp */
			reduce(102), /* :, reduce: PrefixExp */
			reduce(102), /* or, reduce: PrefixExp */
			reduce(102), /* and, reduce: PrefixExp */
			reduce(102), /* <, reduce: PrefixExp */
			reduce(102), /* <=, reduce: PrefixExp */
			reduce(102), /* >, reduce: PrefixExp */
			reduce(102), /* >=, reduce: PrefixExp */
			reduce(102), /* ==, reduce: PrefixExp */
			reduce(102), /* ~=, reduce: PrefixExp */
			reduce(102), /* |, reduce: PrefixExp */
			reduce(102), /* ~, reduce: PrefixExp */
			reduce(102), /* &, reduce: PrefixExp */
			reduce(102), /* .., reduce: PrefixExp */
			reduce(102), /* <<, reduce: PrefixExp */
			reduce(102), /* >>, reduce: PrefixExp */
			reduce(102), /* +, reduce: PrefixExp */
			reduce(102), /* -, reduce: PrefixExp */
			reduce(102), /* *, reduce: PrefixExp */
			reduce(102), /* /, reduce: PrefixExp */
			reduce(102), /* %, reduce: PrefixExp */
			reduce(102), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(102), /* ^, reduce: PrefixExp */
			reduce(102), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(102), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(102), /* string, reduce: PrefixExp */
			reduce(102), /* {, reduce: PrefixExp */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S541
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(556), /* ident */
		},
	},
	actionRow{ // S542
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(556), /* ident */
		},
	},
	actionRow{ // S543
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(119), /* ;, reduce: FunctionDef */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(119), /* ,, reduce: FunctionDef */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(119), /* or, reduce: FunctionDef */
			reduce(119), /* and, reduce: FunctionDef */
			reduce(119), /* <, reduce: FunctionDef */
			reduce(119), /* <=, reduce: FunctionDef */
			reduce(119), /* >, reduce: FunctionDef */
			reduce(119), /* >=, reduce: FunctionDef */
			reduce(119), /* ==, reduce: FunctionDef */
			reduce(119), /* ~=, reduce: FunctionDef */
			reduce(119), /* |, reduce: FunctionDef */
			reduce(119), /* ~, reduce: FunctionDef */
			reduce(119), /* &, reduce: FunctionDef */
			reduce(119), /* .., reduce: FunctionDef */
			reduce(119), /* <<, reduce: FunctionDef */
			reduce(119), /* >>, reduce: FunctionDef */
			reduce(119), /* +, reduce: FunctionDef */
			reduce(119), /* -, reduce: FunctionDef */
			reduce(119), /* *, reduce: FunctionDef */
			reduce(119), /* /, reduce: FunctionDef */
			reduce(119), /* %, reduce: FunctionDef */
			reduce(119), /* //, reduce: FunctionDef */
			nil,         /* not */
			nil,         /* # */
			reduce(119), /* ^, reduce: FunctionDef */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			reduce(119), /* }, reduce: FunctionDef */
			nil,         /* ident */
		},
	},
	actionRow{ // S544
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(123), /* ), reduce: ParList */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			shift(521),  /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			shift(523),  /* ident */
		},
	},
	actionRow{ // S545
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(556), /* ident */
		},
	},
	actionRow{ // S546
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(556), /* ident */
		},
	},
	actionRow{ // S547
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(556), /* ident */
		},
	},
	actionRow{ // S548
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(556), /* ident */
		},
	},
	actionRow{ // S549
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(556), /* ident */
		},
	},
	actionRow{ // S550
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(556), /* ident */
		},
	},
	actionRow{ // S551
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(556), /* ident */
		},
	},
	actionRow{ // S552
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(556), /* ident */
		},
	},
	actionRow{ // S553
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(556), /* ident */
		},
	},
	actionRow{ // S554
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(97), /* ;, reduce: Var */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(97), /* ,, reduce: Var */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			reduce(97), /* ., reduce: Var */
			reduce(97), /* :, reduce: Var */
			reduce(97), /* or, reduce: Var */
			reduce(97), /* and, reduce: Var */
			reduce(97), /* <, reduce: Var */
			reduce(97), /* <=, reduce: Var */
			reduce(97), /* >, reduce: Var */
			reduce(97), /* >=, reduce: Var */
			reduce(97), /* ==, reduce: Var */
			reduce(97), /* ~=, reduce: Var */
			reduce(97), /* |, reduce: Var */
			reduce(97), /* ~, reduce: Var */
			reduce(97), /* &, reduce: Var */
			reduce(97), /* .., reduce: Var */
			reduce(97), /* <<, reduce: Var */
			reduce(97), /* >>, reduce: Var */
			reduce(97), /* +, reduce: Var */
			reduce(97), /* -, reduce: Var */
			reduce(97), /* *, reduce: Var */
			reduce(97), /* /, reduce: Var */
			reduce(97), /* %, reduce: Var */
			reduce(97), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(97), /* ^, reduce: Var */
			reduce(97), /* [, reduce: Var */
			nil,        /* ] */
			reduce(97), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(97), /* string, reduce: Var */
			reduce(97), /* {, reduce: Var */
			reduce(97), /* }, reduce: Var */
			nil,        /* ident */
		},
	},
	actionRow{ // S555
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(93), /* ;, reduce: Factor */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(93), /* ,, reduce: Factor */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(93), /* or, reduce: Factor */
			reduce(93), /* and, reduce: Factor */
			reduce(93), /* <, reduce: Factor */
			reduce(93), /* <=, reduce: Factor */
			reduce(93), /* >, reduce: Factor */
			reduce(93), /* >=, reduce: Factor */
			reduce(93), /* ==, reduce: Factor */
			reduce(93), /* ~=, reduce: Factor */
			reduce(93), /* |, reduce: Factor */
			reduce(93), /* ~, reduce: Factor */
			reduce(93), /* &, reduce: Factor */
			reduce(93), /* .., reduce: Factor */
			reduce(93), /* <<, reduce: Factor */
			reduce(93), /* >>, reduce: Factor */
			reduce(93), /* +, reduce: Factor */
			reduce(93), /* -, reduce: Factor */
			reduce(93), /* *, reduce: Factor */
			reduce(93), /* /, reduce: Factor */
			reduce(93), /* %, reduce: Factor */
			reduce(93), /* //, reduce: Factor */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			reduce(93), /* }, reduce: Factor */
			nil,        /* ident */
		},
	},
	actionRow{ // S556
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(134), /* ;, reduce: Name */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(134), /* ,, reduce: Name */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(134), /* ., reduce: Name */
			reduce(134), /* :, reduce: Name */
			reduce(134), /* or, reduce: Name */
			reduce(134), /* and, reduce: Name */
			reduce(134), /* <, reduce: Name */
			reduce(134), /* <=, reduce: Name */
			reduce(134), /* >, reduce: Name */
			reduce(134), /* >=, reduce: Name */
			reduce(134), /* ==, reduce: Name */
			reduce(134), /* ~=, reduce: Name */
			reduce(134), /* |, reduce: Name */
			reduce(134), /* ~, reduce: Name */
			reduce(134), /* &, reduce: Name */
			reduce(134), /* .., reduce: Name */
			reduce(134), /* <<, reduce: Name */
			reduce(134), /* >>, reduce: Name */
			reduce(134), /* +, reduce: Name */
			reduce(134), /* -, reduce: Name */
			reduce(134), /* *, reduce: Name */
			reduce(134), /* /, reduce: Name */
			reduce(134), /* %, reduce: Name */
			reduce(134), /* //, reduce: Name */
			nil,         /* not */
			nil,         /* # */
			reduce(134), /* ^, reduce: Name */
			reduce(134), /* [, reduce: Name */
			nil,         /* ] */
			reduce(134), /* (, reduce: Name */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(134), /* string, reduce: Name */
			reduce(134), /* {, reduce: Name */
			reduce(134), /* }, reduce: Name */
			nil,         /* ident */
		},
	},
	actionRow{ // S557
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(556), /* ident */
		},
	},
	actionRow{ // S558
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(556), /* ident */
		},
	},
	actionRow{ // S559
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(426), /* ident */
		},
	},
	actionRow{ // S560
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(430), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(446), /* ( */
			nil,        /* ) */
			shift(447), /* nil */
			shift(448), /* true */
			shift(449), /* false */
			shift(450), /* ... */
			shift(451), /* numdec */
			shift(452), /* numhex */
			shift(453), /* string */
			shift(456), /* { */
			nil,        /* } */
			shift(457), /* ident */
		},
	},
	actionRow{ // S561
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(462), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(478), /* ( */
			shift(949), /* ) */
			shift(480), /* nil */
			shift(481), /* true */
			shift(482), /* false */
			shift(483), /* ... */
			shift(484), /* numdec */
			shift(485), /* numhex */
			shift(486), /* string */
			shift(489), /* { */
			nil,        /* } */
			shift(490), /* ident */
		},
	},
	actionRow{ // S562
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(103), /* ;, reduce: FunctionCall */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(103), /* ,, reduce: FunctionCall */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(103), /* ., reduce: FunctionCall */
			reduce(103), /* :, reduce: FunctionCall */
			reduce(103), /* or, reduce: FunctionCall */
			reduce(103), /* and, reduce: FunctionCall */
			reduce(103), /* <, reduce: FunctionCall */
			reduce(103), /* <=, reduce: FunctionCall */
			reduce(103), /* >, reduce: FunctionCall */
			reduce(103), /* >=, reduce: FunctionCall */
			reduce(103), /* ==, reduce: FunctionCall */
			reduce(103), /* ~=, reduce: FunctionCall */
			reduce(103), /* |, reduce: FunctionCall */
			reduce(103), /* ~, reduce: FunctionCall */
			reduce(103), /* &, reduce: FunctionCall */
			reduce(103), /* .., reduce: FunctionCall */
			reduce(103), /* <<, reduce: FunctionCall */
			reduce(103), /* >>, reduce: FunctionCall */
			reduce(103), /* +, reduce: FunctionCall */
			reduce(103), /* -, reduce: FunctionCall */
			reduce(103), /* *, reduce: FunctionCall */
			reduce(103), /* /, reduce: FunctionCall */
			reduce(103), /* %, reduce: FunctionCall */
			reduce(103), /* //, reduce: FunctionCall */
			nil,         /* not */
			nil,         /* # */
			reduce(103), /* ^, reduce: FunctionCall */
			reduce(103), /* [, reduce: FunctionCall */
			nil,         /* ] */
			reduce(103), /* (, reduce: FunctionCall */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(103), /* string, reduce: FunctionCall */
			reduce(103), /* {, reduce: FunctionCall */
			reduce(103), /* }, reduce: FunctionCall */
			nil,         /* ident */
		},
	},
	actionRow{ // S563
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(118), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(118), /* ,, reduce: Args */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(118), /* ., reduce: Args */
			reduce(118), /* :, reduce: Args */
			reduce(118), /* or, reduce: Args */
			reduce(118), /* and, reduce: Args */
			reduce(118), /* <, reduce: Args */
			reduce(118), /* <=, reduce: Args */
			reduce(118), /* >, reduce: Args */
			reduce(118), /* >=, reduce: Args */
			reduce(118), /* ==, reduce: Args */
			reduce(118), /* ~=, reduce: Args */
			reduce(118), /* |, reduce: Args */
			reduce(118), /* ~, reduce: Args */
			reduce(118), /* &, reduce: Args */
			reduce(118), /* .., reduce: Args */
			reduce(118), /* <<, reduce: Args */
			reduce(118), /* >>, reduce: Args */
			reduce(118), /* +, reduce: Args */
			reduce(118), /* -, reduce: Args */
			reduce(118), /* *, reduce: Args */
			reduce(118), /* /, reduce: Args */
			reduce(118), /* %, reduce: Args */
			reduce(118), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(118), /* ^, reduce: Args */
			reduce(118), /* [, reduce: Args */
			nil,         /* ] */
			reduce(118), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(118), /* string, reduce: Args */
			reduce(118), /* {, reduce: Args */
			reduce(118), /* }, reduce: Args */
			nil,         /* ident */
		},
	},
	actionRow{ // S564
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(117), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(117), /* ,, reduce: Args */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(117), /* ., reduce: Args */
			reduce(117), /* :, reduce: Args */
			reduce(117), /* or, reduce: Args */
			reduce(117), /* and, reduce: Args */
			reduce(117), /* <, reduce: Args */
			reduce(117), /* <=, reduce: Args */
			reduce(117), /* >, reduce: Args */
			reduce(117), /* >=, reduce: Args */
			reduce(117), /* ==, reduce: Args */
			reduce(117), /* ~=, reduce: Args */
			reduce(117), /* |, reduce: Args */
			reduce(117), /* ~, reduce: Args */
			reduce(117), /* &, reduce: Args */
			reduce(117), /* .., reduce: Args */
			reduce(117), /* <<, reduce: Args */
			reduce(117), /* >>, reduce: Args */
			reduce(117), /* +, reduce: Args */
			reduce(117), /* -, reduce: Args */
			reduce(117), /* *, reduce: Args */
			reduce(117), /* /, reduce: Args */
			reduce(117), /* %, reduce: Args */
			reduce(117), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(117), /* ^, reduce: Args */
			reduce(117), /* [, reduce: Args */
			nil,         /* ] */
			reduce(117), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(117), /* string, reduce: Args */
			reduce(117), /* {, reduce: Args */
			reduce(117), /* }, reduce: Args */
			nil,         /* ident */
		},
	},
	actionRow{ // S565
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			shift(254), /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(268), /* ident */
		},
	},
	actionRow{ // S566
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			shift(851), /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			shift(951), /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S567
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			shift(492), /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			shift(952), /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S568
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			shift(569), /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			shift(570), /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			shift(953), /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S569
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			reduce(128), /* function, reduce: FieldSep */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			reduce(128), /* ~, reduce: FieldSep */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			reduce(128), /* -, reduce: FieldSep */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			reduce(128), /* not, reduce: FieldSep */
			reduce(128), /* #, reduce: FieldSep */
			nil,         /* ^ */
			reduce(128), /* [, reduce: FieldSep */
			nil,         /* ] */
			reduce(128), /* (, reduce: FieldSep */
			nil,         /* ) */
			reduce(128), /* nil, reduce: FieldSep */
			reduce(128), /* true, reduce: FieldSep */
			reduce(128), /* false, reduce: FieldSep */
			reduce(128), /* ..., reduce: FieldSep */
			reduce(128), /* numdec, reduce: FieldSep */
			reduce(128), /* numhex, reduce: FieldSep */
			reduce(128), /* string, reduce: FieldSep */
			reduce(128), /* {, reduce: FieldSep */
			reduce(128), /* }, reduce: FieldSep */
			reduce(128), /* ident, reduce: FieldSep */
		},
	},
	actionRow{ // S570
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			reduce(127), /* function, reduce: FieldSep */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			reduce(127), /* ~, reduce: FieldSep */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			reduce(127), /* -, reduce: FieldSep */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			reduce(127), /* not, reduce: FieldSep */
			reduce(127), /* #, reduce: FieldSep */
			nil,         /* ^ */
			reduce(127), /* [, reduce: FieldSep */
			nil,         /* ] */
			reduce(127), /* (, reduce: FieldSep */
			nil,         /* ) */
			reduce(127), /* nil, reduce: FieldSep */
			reduce(127), /* true, reduce: FieldSep */
			reduce(127), /* false, reduce: FieldSep */
			reduce(127), /* ..., reduce: FieldSep */
			reduce(127), /* numdec, reduce: FieldSep */
			reduce(127), /* numhex, reduce: FieldSep */
			reduce(127), /* string, reduce: FieldSep */
			reduce(127), /* {, reduce: FieldSep */
			reduce(127), /* }, reduce: FieldSep */
			reduce(127), /* ident, reduce: FieldSep */
		},
	},
	actionRow{ // S571
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(125), /* $, reduce: TableConstructor */
			nil,         /* return */
			reduce(125), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(125), /* ,, reduce: TableConstructor */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(125), /* or, reduce: TableConstructor */
			reduce(125), /* and, reduce: TableConstructor */
			reduce(125), /* <, reduce: TableConstructor */
			reduce(125), /* <=, reduce: TableConstructor */
			reduce(125), /* >, reduce: TableConstructor */
			reduce(125), /* >=, reduce: TableConstructor */
			reduce(125), /* ==, reduce: TableConstructor */
			reduce(125), /* ~=, reduce: TableConstructor */
			reduce(125), /* |, reduce: TableConstructor */
			reduce(125), /* ~, reduce: TableConstructor */
			reduce(125), /* &, reduce: TableConstructor */
			reduce(125), /* .., reduce: TableConstructor */
			reduce(125), /* <<, reduce: TableConstructor */
			reduce(125), /* >>, reduce: TableConstructor */
			reduce(125), /* +, reduce: TableConstructor */
			reduce(125), /* -, reduce: TableConstructor */
			reduce(125), /* *, reduce: TableConstructor */
			reduce(125), /* /, reduce: TableConstructor */
			reduce(125), /* %, reduce: TableConstructor */
			reduce(125), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(125), /* ^, reduce: TableConstructor */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S572
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			shift(254), /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			shift(955), /* } */
			shift(268), /* ident */
		},
	},
	actionRow{ // S573
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(273), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(289), /* ( */
			nil,        /* ) */
			shift(290), /* nil */
			shift(291), /* true */
			shift(292), /* false */
			shift(293), /* ... */
			shift(294), /* numdec */
			shift(295), /* numhex */
			shift(296), /* string */
			shift(299), /* { */
			nil,        /* } */
			shift(300), /* ident */
		},
	},
	actionRow{ // S574
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(273), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(289), /* ( */
			nil,        /* ) */
			shift(290), /* nil */
			shift(291), /* true */
			shift(292), /* false */
			shift(293), /* ... */
			shift(294), /* numdec */
			shift(295), /* numhex */
			shift(296), /* string */
			shift(299), /* { */
			nil,        /* } */
			shift(300), /* ident */
		},
	},
	actionRow{ // S575
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(119), /* $, reduce: FunctionDef */
			reduce(119), /* return, reduce: FunctionDef */
			reduce(119), /* ;, reduce: FunctionDef */
			nil,         /* empty */
			nil,         /* = */
			reduce(119), /* break, reduce: FunctionDef */
			reduce(119), /* goto, reduce: FunctionDef */
			reduce(119), /* do, reduce: FunctionDef */
			nil,         /* end */
			reduce(119), /* while, reduce: FunctionDef */
			reduce(119), /* repeat, reduce: FunctionDef */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(119), /* if, reduce: FunctionDef */
			reduce(119), /* ,, reduce: FunctionDef */
			reduce(119), /* for, reduce: FunctionDef */
			nil,         /* in */
			reduce(119), /* function, reduce: FunctionDef */
			reduce(119), /* local, reduce: FunctionDef */
			reduce(119), /* ::, reduce: FunctionDef */
			nil,         /* . */
			nil,         /* : */
			reduce(119), /* or, reduce: FunctionDef */
			reduce(119), /* and, reduce: FunctionDef */
			reduce(119), /* <, reduce: FunctionDef */
			reduce(119), /* <=, reduce: FunctionDef */
			reduce(119), /* >, reduce: FunctionDef */
			reduce(119), /* >=, reduce: FunctionDef */
			reduce(119), /* ==, reduce: FunctionDef */
			reduce(119), /* ~=, reduce: FunctionDef */
			reduce(119), /* |, reduce: FunctionDef */
			reduce(119), /* ~, reduce: FunctionDef */
			reduce(119), /* &, reduce: FunctionDef */
			reduce(119), /* .., reduce: FunctionDef */
			reduce(119), /* <<, reduce: FunctionDef */
			reduce(119), /* >>, reduce: FunctionDef */
			reduce(119), /* +, reduce: FunctionDef */
			reduce(119), /* -, reduce: FunctionDef */
			reduce(119), /* *, reduce: FunctionDef */
			reduce(119), /* /, reduce: FunctionDef */
			reduce(119), /* %, reduce: FunctionDef */
			reduce(119), /* //, reduce: FunctionDef */
			nil,         /* not */
			nil,         /* # */
			reduce(119), /* ^, reduce: FunctionDef */
			nil,         /* [ */
			nil,         /* ] */
			reduce(119), /* (, reduce: FunctionDef */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(119), /* ident, reduce: FunctionDef */
		},
	},
	actionRow{ // S576
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(123), /* ), reduce: ParList */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			shift(521),  /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			shift(523),  /* ident */
		},
	},
	actionRow{ // S577
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(273), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(289), /* ( */
			nil,        /* ) */
			shift(290), /* nil */
			shift(291), /* true */
			shift(292), /* false */
			shift(293), /* ... */
			shift(294), /* numdec */
			shift(295), /* numhex */
			shift(296), /* string */
			shift(299), /* { */
			nil,        /* } */
			shift(300), /* ident */
		},
	},
	actionRow{ // S578
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(273), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(289), /* ( */
			nil,        /* ) */
			shift(290), /* nil */
			shift(291), /* true */
			shift(292), /* false */
			shift(293), /* ... */
			shift(294), /* numdec */
			shift(295), /* numhex */
			shift(296), /* string */
			shift(299), /* { */
			nil,        /* } */
			shift(300), /* ident */
		},
	},
	actionRow{ // S579
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(273), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(289), /* ( */
			nil,        /* ) */
			shift(290), /* nil */
			shift(291), /* true */
			shift(292), /* false */
			shift(293), /* ... */
			shift(294), /* numdec */
			shift(295), /* numhex */
			shift(296), /* string */
			shift(299), /* { */
			nil,        /* } */
			shift(300), /* ident */
		},
	},
	actionRow{ // S580
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(273), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(289), /* ( */
			nil,        /* ) */
			shift(290), /* nil */
			shift(291), /* true */
			shift(292), /* false */
			shift(293), /* ... */
			shift(294), /* numdec */
			shift(295), /* numhex */
			shift(296), /* string */
			shift(299), /* { */
			nil,        /* } */
			shift(300), /* ident */
		},
	},
	actionRow{ // S581
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(273), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(289), /* ( */
			nil,        /* ) */
			shift(290), /* nil */
			shift(291), /* true */
			shift(292), /* false */
			shift(293), /* ... */
			shift(294), /* numdec */
			shift(295), /* numhex */
			shift(296), /* string */
			shift(299), /* { */
			nil,        /* } */
			shift(300), /* ident */
		},
	},
	actionRow{ // S582
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(273), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(289), /* ( */
			nil,        /* ) */
			shift(290), /* nil */
			shift(291), /* true */
			shift(292), /* false */
			shift(293), /* ... */
			shift(294), /* numdec */
			shift(295), /* numhex */
			shift(296), /* string */
			shift(299), /* { */
			nil,        /* } */
			shift(300), /* ident */
		},
	},
	actionRow{ // S583
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(273), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(289), /* ( */
			nil,        /* ) */
			shift(290), /* nil */
			shift(291), /* true */
			shift(292), /* false */
			shift(293), /* ... */
			shift(294), /* numdec */
			shift(295), /* numhex */
			shift(296), /* string */
			shift(299), /* { */
			nil,        /* } */
			shift(300), /* ident */
		},
	},
	actionRow{ // S584
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(273), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(289), /* ( */
			nil,        /* ) */
			shift(290), /* nil */
			shift(291), /* true */
			shift(292), /* false */
			shift(293), /* ... */
			shift(294), /* numdec */
			shift(295), /* numhex */
			shift(296), /* string */
			shift(299), /* { */
			nil,        /* } */
			shift(300), /* ident */
		},
	},
	actionRow{ // S585
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(273), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(289), /* ( */
			nil,        /* ) */
			shift(290), /* nil */
			shift(291), /* true */
			shift(292), /* false */
			shift(293), /* ... */
			shift(294), /* numdec */
			shift(295), /* numhex */
			shift(296), /* string */
			shift(299), /* { */
			nil,        /* } */
			shift(300), /* ident */
		},
	},
	actionRow{ // S586
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(93), /* $, reduce: Factor */
			reduce(93), /* return, reduce: Factor */
			reduce(93), /* ;, reduce: Factor */
			nil,        /* empty */
			nil,        /* = */
			reduce(93), /* break, reduce: Factor */
			reduce(93), /* goto, reduce: Factor */
			reduce(93), /* do, reduce: Factor */
			nil,        /* end */
			reduce(93), /* while, reduce: Factor */
			reduce(93), /* repeat, reduce: Factor */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(93), /* if, reduce: Factor */
			reduce(93), /* ,, reduce: Factor */
			reduce(93), /* for, reduce: Factor */
			nil,        /* in */
			reduce(93), /* function, reduce: Factor */
			reduce(93), /* local, reduce: Factor */
			reduce(93), /* ::, reduce: Factor */
			nil,        /* . */
			nil,        /* : */
			reduce(93), /* or, reduce: Factor */
			reduce(93), /* and, reduce: Factor */
			reduce(93), /* <, reduce: Factor */
			reduce(93), /* <=, reduce: Factor */
			reduce(93), /* >, reduce: Factor */
			reduce(93), /* >=, reduce: Factor */
			reduce(93), /* ==, reduce: Factor */
			reduce(93), /* ~=, reduce: Factor */
			reduce(93), /* |, reduce: Factor */
			reduce(93), /* ~, reduce: Factor */
			reduce(93), /* &, reduce: Factor */
			reduce(93), /* .., reduce: Factor */
			reduce(93), /* <<, reduce: Factor */
			reduce(93), /* >>, reduce: Factor */
			reduce(93), /* +, reduce: Factor */
			reduce(93), /* -, reduce: Factor */
			reduce(93), /* *, reduce: Factor */
			reduce(93), /* /, reduce: Factor */
			reduce(93), /* %, reduce: Factor */
			reduce(93), /* //, reduce: Factor */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(93), /* (, reduce: Factor */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(93), /* ident, reduce: Factor */
		},
	},
	actionRow{ // S587
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(273), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(289), /* ( */
			nil,        /* ) */
			shift(290), /* nil */
			shift(291), /* true */
			shift(292), /* false */
			shift(293), /* ... */
			shift(294), /* numdec */
			shift(295), /* numhex */
			shift(296), /* string */
			shift(299), /* { */
			nil,        /* } */
			shift(300), /* ident */
		},
	},
	actionRow{ // S588
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(300), /* ident */
		},
	},
	actionRow{ // S589
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(426), /* ident */
		},
	},
	actionRow{ // S590
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(430), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(446), /* ( */
			nil,        /* ) */
			shift(447), /* nil */
			shift(448), /* true */
			shift(449), /* false */
			shift(450), /* ... */
			shift(451), /* numdec */
			shift(452), /* numhex */
			shift(453), /* string */
			shift(456), /* { */
			nil,        /* } */
			shift(457), /* ident */
		},
	},
	actionRow{ // S591
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(462), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(478), /* ( */
			shift(974), /* ) */
			shift(480), /* nil */
			shift(481), /* true */
			shift(482), /* false */
			shift(483), /* ... */
			shift(484), /* numdec */
			shift(485), /* numhex */
			shift(486), /* string */
			shift(489), /* { */
			nil,        /* } */
			shift(490), /* ident */
		},
	},
	actionRow{ // S592
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(103), /* $, reduce: FunctionCall */
			reduce(103), /* return, reduce: FunctionCall */
			reduce(103), /* ;, reduce: FunctionCall */
			nil,         /* empty */
			nil,         /* = */
			reduce(103), /* break, reduce: FunctionCall */
			reduce(103), /* goto, reduce: FunctionCall */
			reduce(103), /* do, reduce: FunctionCall */
			nil,         /* end */
			reduce(103), /* while, reduce: FunctionCall */
			reduce(103), /* repeat, reduce: FunctionCall */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(103), /* if, reduce: FunctionCall */
			reduce(103), /* ,, reduce: FunctionCall */
			reduce(103), /* for, reduce: FunctionCall */
			nil,         /* in */
			reduce(103), /* function, reduce: FunctionCall */
			reduce(103), /* local, reduce: FunctionCall */
			reduce(103), /* ::, reduce: FunctionCall */
			reduce(103), /* ., reduce: FunctionCall */
			reduce(103), /* :, reduce: FunctionCall */
			reduce(103), /* or, reduce: FunctionCall */
			reduce(103), /* and, reduce: FunctionCall */
			reduce(103), /* <, reduce: FunctionCall */
			reduce(103), /* <=, reduce: FunctionCall */
			reduce(103), /* >, reduce: FunctionCall */
			reduce(103), /* >=, reduce: FunctionCall */
			reduce(103), /* ==, reduce: FunctionCall */
			reduce(103), /* ~=, reduce: FunctionCall */
			reduce(103), /* |, reduce: FunctionCall */
			reduce(103), /* ~, reduce: FunctionCall */
			reduce(103), /* &, reduce: FunctionCall */
			reduce(103), /* .., reduce: FunctionCall */
			reduce(103), /* <<, reduce: FunctionCall */
			reduce(103), /* >>, reduce: FunctionCall */
			reduce(103), /* +, reduce: FunctionCall */
			reduce(103), /* -, reduce: FunctionCall */
			reduce(103), /* *, reduce: FunctionCall */
			reduce(103), /* /, reduce: FunctionCall */
			reduce(103), /* %, reduce: FunctionCall */
			reduce(103), /* //, reduce: FunctionCall */
			nil,         /* not */
			nil,         /* # */
			reduce(103), /* ^, reduce: FunctionCall */
			reduce(103), /* [, reduce: FunctionCall */
			nil,         /* ] */
			reduce(103), /* (, reduce: FunctionCall */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(103), /* string, reduce: FunctionCall */
			reduce(103), /* {, reduce: FunctionCall */
			nil,         /* } */
			reduce(103), /* ident, reduce: FunctionCall */
		},
	},
	actionRow{ // S593
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(118), /* $, reduce: Args */
			reduce(118), /* return, reduce: Args */
			reduce(118), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			reduce(118), /* break, reduce: Args */
			reduce(118), /* goto, reduce: Args */
			reduce(118), /* do, reduce: Args */
			nil,         /* end */
			reduce(118), /* while, reduce: Args */
			reduce(118), /* repeat, reduce: Args */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(118), /* if, reduce: Args */
			reduce(118), /* ,, reduce: Args */
			reduce(118), /* for, reduce: Args */
			nil,         /* in */
			reduce(118), /* function, reduce: Args */
			reduce(118), /* local, reduce: Args */
			reduce(118), /* ::, reduce: Args */
			reduce(118), /* ., reduce: Args */
			reduce(118), /* :, reduce: Args */
			reduce(118), /* or, reduce: Args */
			reduce(118), /* and, reduce: Args */
			reduce(118), /* <, reduce: Args */
			reduce(118), /* <=, reduce: Args */
			reduce(118), /* >, reduce: Args */
			reduce(118), /* >=, reduce: Args */
			reduce(118), /* ==, reduce: Args */
			reduce(118), /* ~=, reduce: Args */
			reduce(118), /* |, reduce: Args */
			reduce(118), /* ~, reduce: Args */
			reduce(118), /* &, reduce: Args */
			reduce(118), /* .., reduce: Args */
			reduce(118), /* <<, reduce: Args */
			reduce(118), /* >>, reduce: Args */
			reduce(118), /* +, reduce: Args */
			reduce(118), /* -, reduce: Args */
			reduce(118), /* *, reduce: Args */
			reduce(118), /* /, reduce: Args */
			reduce(118), /* %, reduce: Args */
			reduce(118), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(118), /* ^, reduce: Args */
			reduce(118), /* [, reduce: Args */
			nil,         /* ] */
			reduce(118), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(118), /* string, reduce: Args */
			reduce(118), /* {, reduce: Args */
			nil,         /* } */
			reduce(118), /* ident, reduce: Args */
		},
	},
	actionRow{ // S594
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(117), /* $, reduce: Args */
			reduce(117), /* return, reduce: Args */
			reduce(117), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			reduce(117), /* break, reduce: Args */
			reduce(117), /* goto, reduce: Args */
			reduce(117), /* do, reduce: Args */
			nil,         /* end */
			reduce(117), /* while, reduce: Args */
			reduce(117), /* repeat, reduce: Args */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(117), /* if, reduce: Args */
			reduce(117), /* ,, reduce: Args */
			reduce(117), /* for, reduce: Args */
			nil,         /* in */
			reduce(117), /* function, reduce: Args */
			reduce(117), /* local, reduce: Args */
			reduce(117), /* ::, reduce: Args */
			reduce(117), /* ., reduce: Args */
			reduce(117), /* :, reduce: Args */
			reduce(117), /* or, reduce: Args */
			reduce(117), /* and, reduce: Args */
			reduce(117), /* <, reduce: Args */
			reduce(117), /* <=, reduce: Args */
			reduce(117), /* >, reduce: Args */
			reduce(117), /* >=, reduce: Args */
			reduce(117), /* ==, reduce: Args */
			reduce(117), /* ~=, reduce: Args */
			reduce(117), /* |, reduce: Args */
			reduce(117), /* ~, reduce: Args */
			reduce(117), /* &, reduce: Args */
			reduce(117), /* .., reduce: Args */
			reduce(117), /* <<, reduce: Args */
			reduce(117), /* >>, reduce: Args */
			reduce(117), /* +, reduce: Args */
			reduce(117), /* -, reduce: Args */
			reduce(117), /* *, reduce: Args */
			reduce(117), /* /, reduce: Args */
			reduce(117), /* %, reduce: Args */
			reduce(117), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(117), /* ^, reduce: Args */
			reduce(117), /* [, reduce: Args */
			nil,         /* ] */
			reduce(117), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(117), /* string, reduce: Args */
			reduce(117), /* {, reduce: Args */
			nil,         /* } */
			reduce(117), /* ident, reduce: Args */
		},
	},
	actionRow{ // S595
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			shift(254), /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(268), /* ident */
		},
	},
	actionRow{ // S596
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			shift(492), /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			shift(976), /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S597
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			shift(569), /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			shift(570), /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			shift(977), /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S598
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(426), /* ident */
		},
	},
	actionRow{ // S599
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(462), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(478), /* ( */
			shift(981), /* ) */
			shift(480), /* nil */
			shift(481), /* true */
			shift(482), /* false */
			shift(483), /* ... */
			shift(484), /* numdec */
			shift(485), /* numhex */
			shift(486), /* string */
			shift(489), /* { */
			nil,        /* } */
			shift(490), /* ident */
		},
	},
	actionRow{ // S600
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(103), /* ., reduce: FunctionCall */
			reduce(103), /* :, reduce: FunctionCall */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			reduce(103), /* [, reduce: FunctionCall */
			nil,         /* ] */
			reduce(103), /* (, reduce: FunctionCall */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(103), /* string, reduce: FunctionCall */
			reduce(103), /* {, reduce: FunctionCall */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S601
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(118), /* ., reduce: Args */
			reduce(118), /* :, reduce: Args */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			reduce(118), /* [, reduce: Args */
			nil,         /* ] */
			reduce(118), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(118), /* string, reduce: Args */
			reduce(118), /* {, reduce: Args */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S602
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(117), /* ., reduce: Args */
			reduce(117), /* :, reduce: Args */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			reduce(117), /* [, reduce: Args */
			nil,         /* ] */
			reduce(117), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(117), /* string, reduce: Args */
			reduce(117), /* {, reduce: Args */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S603
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			shift(254), /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(268), /* ident */
		},
	},
	actionRow{ // S604
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			shift(983), /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			reduce(2),  /* end, reduce: Chunk */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			shift(984), /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S605
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* return */
			nil,       /* ; */
			nil,       /* empty */
			nil,       /* = */
			nil,       /* break */
			nil,       /* goto */
			nil,       /* do */
			reduce(3), /* end, reduce: Chunk */
			nil,       /* while */
			nil,       /* repeat */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			nil,       /* if */
			nil,       /* , */
			nil,       /* for */
			nil,       /* in */
			nil,       /* function */
			nil,       /* local */
			nil,       /* :: */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			nil,       /* ( */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			nil,       /* ident */
		},
	},
	actionRow{ // S606
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(101), /* ;, reduce: PrefixExp */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(101), /* end, reduce: PrefixExp */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(101), /* ,, reduce: PrefixExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(101), /* ., reduce: PrefixExp */
			reduce(101), /* :, reduce: PrefixExp */
			reduce(101), /* or, reduce: PrefixExp */
			reduce(101), /* and, reduce: PrefixExp */
			reduce(101), /* <, reduce: PrefixExp */
			reduce(101), /* <=, reduce: PrefixExp */
			reduce(101), /* >, reduce: PrefixExp */
			reduce(101), /* >=, reduce: PrefixExp */
			reduce(101), /* ==, reduce: PrefixExp */
			reduce(101), /* ~=, reduce: PrefixExp */
			reduce(101), /* |, reduce: PrefixExp */
			reduce(101), /* ~, reduce: PrefixExp */
			reduce(101), /* &, reduce: PrefixExp */
			reduce(101), /* .., reduce: PrefixExp */
			reduce(101), /* <<, reduce: PrefixExp */
			reduce(101), /* >>, reduce: PrefixExp */
			reduce(101), /* +, reduce: PrefixExp */
			reduce(101), /* -, reduce: PrefixExp */
			reduce(101), /* *, reduce: PrefixExp */
			reduce(101), /* /, reduce: PrefixExp */
			reduce(101), /* %, reduce: PrefixExp */
			reduce(101), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(101), /* ^, reduce: PrefixExp */
			reduce(101), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(101), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(101), /* string, reduce: PrefixExp */
			reduce(101), /* {, reduce: PrefixExp */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S607
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(97), /* ;, reduce: Var */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			reduce(97), /* end, reduce: Var */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(97), /* ,, reduce: Var */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			reduce(97), /* ., reduce: Var */
			reduce(97), /* :, reduce: Var */
			reduce(97), /* or, reduce: Var */
			reduce(97), /* and, reduce: Var */
			reduce(97), /* <, reduce: Var */
			reduce(97), /* <=, reduce: Var */
			reduce(97), /* >, reduce: Var */
			reduce(97), /* >=, reduce: Var */
			reduce(97), /* ==, reduce: Var */
			reduce(97), /* ~=, reduce: Var */
			reduce(97), /* |, reduce: Var */
			reduce(97), /* ~, reduce: Var */
			reduce(97), /* &, reduce: Var */
			reduce(97), /* .., reduce: Var */
			reduce(97), /* <<, reduce: Var */
			reduce(97), /* >>, reduce: Var */
			reduce(97), /* +, reduce: Var */
			reduce(97), /* -, reduce: Var */
			reduce(97), /* *, reduce: Var */
			reduce(97), /* /, reduce: Var */
			reduce(97), /* %, reduce: Var */
			reduce(97), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(97), /* ^, reduce: Var */
			reduce(97), /* [, reduce: Var */
			nil,        /* ] */
			reduce(97), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(97), /* string, reduce: Var */
			reduce(97), /* {, reduce: Var */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S608
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(53), /* ;, reduce: ExpList */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			reduce(53), /* end, reduce: ExpList */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(53), /* ,, reduce: ExpList */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			shift(985), /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S609
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(987), /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S610
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(100), /* ;, reduce: PrefixExp */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(100), /* end, reduce: PrefixExp */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(100), /* ,, reduce: PrefixExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(100), /* ., reduce: PrefixExp */
			reduce(100), /* :, reduce: PrefixExp */
			reduce(100), /* or, reduce: PrefixExp */
			reduce(100), /* and, reduce: PrefixExp */
			reduce(100), /* <, reduce: PrefixExp */
			reduce(100), /* <=, reduce: PrefixExp */
			reduce(100), /* >, reduce: PrefixExp */
			reduce(100), /* >=, reduce: PrefixExp */
			reduce(100), /* ==, reduce: PrefixExp */
			reduce(100), /* ~=, reduce: PrefixExp */
			reduce(100), /* |, reduce: PrefixExp */
			reduce(100), /* ~, reduce: PrefixExp */
			reduce(100), /* &, reduce: PrefixExp */
			reduce(100), /* .., reduce: PrefixExp */
			reduce(100), /* <<, reduce: PrefixExp */
			reduce(100), /* >>, reduce: PrefixExp */
			reduce(100), /* +, reduce: PrefixExp */
			reduce(100), /* -, reduce: PrefixExp */
			reduce(100), /* *, reduce: PrefixExp */
			reduce(100), /* /, reduce: PrefixExp */
			reduce(100), /* %, reduce: PrefixExp */
			reduce(100), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(100), /* ^, reduce: PrefixExp */
			reduce(100), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(100), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(100), /* string, reduce: PrefixExp */
			reduce(100), /* {, reduce: PrefixExp */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S611
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(55), /* ;, reduce: Exp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			reduce(55), /* end, reduce: Exp */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(55), /* ,, reduce: Exp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(55), /* or, reduce: Exp */
			shift(988), /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S612
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(57), /* ;, reduce: AndExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			reduce(57), /* end, reduce: AndExp */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(57), /* ,, reduce: AndExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(57), /* or, reduce: AndExp */
			reduce(57), /* and, reduce: AndExp */
			shift(203), /* < */
			shift(204), /* <= */
			shift(205), /* > */
			shift(206), /* >= */
			shift(207), /* == */
			shift(208), /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S613
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(65), /* ;, reduce: CompExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			reduce(65), /* end, reduce: CompExp */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(65), /* ,, reduce: CompExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(65), /* or, reduce: CompExp */
			reduce(65), /* and, reduce: CompExp */
			reduce(65), /* <, reduce: CompExp */
			reduce(65), /* <=, reduce: CompExp */
			reduce(65), /* >, reduce: CompExp */
			reduce(65), /* >=, reduce: CompExp */
			reduce(65), /* ==, reduce: CompExp */
			reduce(65), /* ~=, reduce: CompExp */
			shift(990), /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S614
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(67), /* ;, reduce: BitOrExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			reduce(67), /* end, reduce: BitOrExp */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(67), /* ,, reduce: BitOrExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(67), /* or, reduce: BitOrExp */
			reduce(67), /* and, reduce: BitOrExp */
			reduce(67), /* <, reduce: BitOrExp */
			reduce(67), /* <=, reduce: BitOrExp */
			reduce(67), /* >, reduce: BitOrExp */
			reduce(67), /* >=, reduce: BitOrExp */
			reduce(67), /* ==, reduce: BitOrExp */
			reduce(67), /* ~=, reduce: BitOrExp */
			reduce(67), /* |, reduce: BitOrExp */
			shift(991), /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S615
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(69), /* ;, reduce: BitXorExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			reduce(69), /* end, reduce: BitXorExp */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(69), /* ,, reduce: BitXorExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(69), /* or, reduce: BitXorExp */
			reduce(69), /* and, reduce: BitXorExp */
			reduce(69), /* <, reduce: BitXorExp */
			reduce(69), /* <=, reduce: BitXorExp */
			reduce(69), /* >, reduce: BitXorExp */
			reduce(69), /* >=, reduce: BitXorExp */
			reduce(69), /* ==, reduce: BitXorExp */
			reduce(69), /* ~=, reduce: BitXorExp */
			reduce(69), /* |, reduce: BitXorExp */
			reduce(69), /* ~, reduce: BitXorExp */
			shift(992), /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S616
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(71), /* ;, reduce: BitAndExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			reduce(71), /* end, reduce: BitAndExp */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(71), /* ,, reduce: BitAndExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(71), /* or, reduce: BitAndExp */
			reduce(71), /* and, reduce: BitAndExp */
			reduce(71), /* <, reduce: BitAndExp */
			reduce(71), /* <=, reduce: BitAndExp */
			reduce(71), /* >, reduce: BitAndExp */
			reduce(71), /* >=, reduce: BitAndExp */
			reduce(71), /* ==, reduce: BitAndExp */
			reduce(71), /* ~=, reduce: BitAndExp */
			reduce(71), /* |, reduce: BitAndExp */
			reduce(71), /* ~, reduce: BitAndExp */
			reduce(71), /* &, reduce: BitAndExp */
			shift(993), /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S617
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(73), /* ;, reduce: ConcatExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			reduce(73), /* end, reduce: ConcatExp */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(73), /* ,, reduce: ConcatExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(73), /* or, reduce: ConcatExp */
			reduce(73), /* and, reduce: ConcatExp */
			reduce(73), /* <, reduce: ConcatExp */
			reduce(73), /* <=, reduce: ConcatExp */
			reduce(73), /* >, reduce: ConcatExp */
			reduce(73), /* >=, reduce: ConcatExp */
			reduce(73), /* ==, reduce: ConcatExp */
			reduce(73), /* ~=, reduce: ConcatExp */
			reduce(73), /* |, reduce: ConcatExp */
			reduce(73), /* ~, reduce: ConcatExp */
			reduce(73), /* &, reduce: ConcatExp */
			reduce(73), /* .., reduce: ConcatExp */
			shift(214), /* << */
			shift(215), /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S618
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(77), /* ;, reduce: ShiftExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			reduce(77), /* end, reduce: ShiftExp */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(77), /* ,, reduce: ShiftExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(77), /* or, reduce: ShiftExp */
			reduce(77), /* and, reduce: ShiftExp */
			reduce(77), /* <, reduce: ShiftExp */
			reduce(77), /* <=, reduce: ShiftExp */
			reduce(77), /* >, reduce: ShiftExp */
			reduce(77), /* >=, reduce: ShiftExp */
			reduce(77), /* ==, reduce: ShiftExp */
			reduce(77), /* ~=, reduce: ShiftExp */
			reduce(77), /* |, reduce: ShiftExp */
			reduce(77), /* ~, reduce: ShiftExp */
			reduce(77), /* &, reduce: ShiftExp */
			reduce(77), /* .., reduce: ShiftExp */
			reduce(77), /* <<, reduce: ShiftExp */
			reduce(77), /* >>, reduce: ShiftExp */
			shift(217), /* + */
			shift(218), /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S619
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(81), /* ;, reduce: Sum */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			reduce(81), /* end, reduce: Sum */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(81), /* ,, reduce: Sum */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(81), /* or, reduce: Sum */
			reduce(81), /* and, reduce: Sum */
			reduce(81), /* <, reduce: Sum */
			reduce(81), /* <=, reduce: Sum */
			reduce(81), /* >, reduce: Sum */
			reduce(81), /* >=, reduce: Sum */
			reduce(81), /* ==, reduce: Sum */
			reduce(81), /* ~=, reduce: Sum */
			reduce(81), /* |, reduce: Sum */
			reduce(81), /* ~, reduce: Sum */
			reduce(81), /* &, reduce: Sum */
			reduce(81), /* .., reduce: Sum */
			reduce(81), /* <<, reduce: Sum */
			reduce(81), /* >>, reduce: Sum */
			reduce(81), /* +, reduce: Sum */
			reduce(81), /* -, reduce: Sum */
			shift(220), /* * */
			shift(221), /* / */
			shift(222), /* % */
			shift(223), /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S620
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(87), /* ;, reduce: Term */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			reduce(87), /* end, reduce: Term */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(87), /* ,, reduce: Term */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(87), /* or, reduce: Term */
			reduce(87), /* and, reduce: Term */
			reduce(87), /* <, reduce: Term */
			reduce(87), /* <=, reduce: Term */
			reduce(87), /* >, reduce: Term */
			reduce(87), /* >=, reduce: Term */
			reduce(87), /* ==, reduce: Term */
			reduce(87), /* ~=, reduce: Term */
			reduce(87), /* |, reduce: Term */
			reduce(87), /* ~, reduce: Term */
			reduce(87), /* &, reduce: Term */
			reduce(87), /* .., reduce: Term */
			reduce(87), /* <<, reduce: Term */
			reduce(87), /* >>, reduce: Term */
			reduce(87), /* +, reduce: Term */
			reduce(87), /* -, reduce: Term */
			reduce(87), /* *, reduce: Term */
			reduce(87), /* /, reduce: Term */
			reduce(87), /* %, reduce: Term */
			reduce(87), /* //, reduce: Term */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S621
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(609), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(625), /* ( */
			nil,        /* ) */
			shift(626), /* nil */
			shift(627), /* true */
			shift(628), /* false */
			shift(629), /* ... */
			shift(630), /* numdec */
			shift(631), /* numhex */
			shift(632), /* string */
			shift(635), /* { */
			nil,        /* } */
			shift(636), /* ident */
		},
	},
	actionRow{ // S622
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(94), /* ;, reduce: Factor */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			reduce(94), /* end, reduce: Factor */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(94), /* ,, reduce: Factor */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(94), /* or, reduce: Factor */
			reduce(94), /* and, reduce: Factor */
			reduce(94), /* <, reduce: Factor */
			reduce(94), /* <=, reduce: Factor */
			reduce(94), /* >, reduce: Factor */
			reduce(94), /* >=, reduce: Factor */
			reduce(94), /* ==, reduce: Factor */
			reduce(94), /* ~=, reduce: Factor */
			reduce(94), /* |, reduce: Factor */
			reduce(94), /* ~, reduce: Factor */
			reduce(94), /* &, reduce: Factor */
			reduce(94), /* .., reduce: Factor */
			reduce(94), /* <<, reduce: Factor */
			reduce(94), /* >>, reduce: Factor */
			reduce(94), /* +, reduce: Factor */
			reduce(94), /* -, reduce: Factor */
			reduce(94), /* *, reduce: Factor */
			reduce(94), /* /, reduce: Factor */
			reduce(94), /* %, reduce: Factor */
			reduce(94), /* //, reduce: Factor */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S623
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(95), /* ;, reduce: Power */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			reduce(95), /* end, reduce: Power */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(95), /* ,, reduce: Power */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(95), /* or, reduce: Power */
			reduce(95), /* and, reduce: Power */
			reduce(95), /* <, reduce: Power */
			reduce(95), /* <=, reduce: Power */
			reduce(95), /* >, reduce: Power */
			reduce(95), /* >=, reduce: Power */
			reduce(95), /* ==, reduce: Power */
			reduce(95), /* ~=, reduce: Power */
			reduce(95), /* |, reduce: Power */
			reduce(95), /* ~, reduce: Power */
			reduce(95), /* &, reduce: Power */
			reduce(95), /* .., reduce: Power */
			reduce(95), /* <<, reduce: Power */
			reduce(95), /* >>, reduce: Power */
			reduce(95), /* +, reduce: Power */
			reduce(95), /* -, reduce: Power */
			reduce(95), /* *, reduce: Power */
			reduce(95), /* /, reduce: Power */
			reduce(95), /* %, reduce: Power */
			reduce(95), /* //, reduce: Power */
			nil,        /* not */
			nil,        /* # */
			shift(998), /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S624
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(114), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(114), /* end, reduce: Atom */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(114), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			shift(999),  /* . */
			shift(1000), /* : */
			reduce(114), /* or, reduce: Atom */
			reduce(114), /* and, reduce: Atom */
			reduce(114), /* <, reduce: Atom */
			reduce(114), /* <=, reduce: Atom */
			reduce(114), /* >, reduce: Atom */
			reduce(114), /* >=, reduce: Atom */
			reduce(114), /* ==, reduce: Atom */
			reduce(114), /* ~=, reduce: Atom */
			reduce(114), /* |, reduce: Atom */
			reduce(114), /* ~, reduce: Atom */
			reduce(114), /* &, reduce: Atom */
			reduce(114), /* .., reduce: Atom */
			reduce(114), /* <<, reduce: Atom */
			reduce(114), /* >>, reduce: Atom */
			reduce(114), /* +, reduce: Atom */
			reduce(114), /* -, reduce: Atom */
			reduce(114), /* *, reduce: Atom */
			reduce(114), /* /, reduce: Atom */
			reduce(114), /* %, reduce: Atom */
			reduce(114), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(114), /* ^, reduce: Atom */
			shift(1001), /* [ */
			nil,         /* ] */
			shift(1002), /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			shift(1004), /* string */
			shift(1006), /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S625
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(168), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(184), /* ( */
			nil,        /* ) */
			shift(185), /* nil */
			shift(186), /* true */
			shift(187), /* false */
			shift(188), /* ... */
			shift(189), /* numdec */
			shift(190), /* numhex */
			shift(191), /* string */
			shift(194), /* { */
			nil,        /* } */
			shift(195), /* ident */
		},
	},
	actionRow{ // S626
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(105), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(105), /* end, reduce: Atom */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(105), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(105), /* or, reduce: Atom */
			reduce(105), /* and, reduce: Atom */
			reduce(105), /* <, reduce: Atom */
			reduce(105), /* <=, reduce: Atom */
			reduce(105), /* >, reduce: Atom */
			reduce(105), /* >=, reduce: Atom */
			reduce(105), /* ==, reduce: Atom */
			reduce(105), /* ~=, reduce: Atom */
			reduce(105), /* |, reduce: Atom */
			reduce(105), /* ~, reduce: Atom */
			reduce(105), /* &, reduce: Atom */
			reduce(105), /* .., reduce: Atom */
			reduce(105), /* <<, reduce: Atom */
			reduce(105), /* >>, reduce: Atom */
			reduce(105), /* +, reduce: Atom */
			reduce(105), /* -, reduce: Atom */
			reduce(105), /* *, reduce: Atom */
			reduce(105), /* /, reduce: Atom */
			reduce(105), /* %, reduce: Atom */
			reduce(105), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(105), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S627
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(106), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(106), /* end, reduce: Atom */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(106), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(106), /* or, reduce: Atom */
			reduce(106), /* and, reduce: Atom */
			reduce(106), /* <, reduce: Atom */
			reduce(106), /* <=, reduce: Atom */
			reduce(106), /* >, reduce: Atom */
			reduce(106), /* >=, reduce: Atom */
			reduce(106), /* ==, reduce: Atom */
			reduce(106), /* ~=, reduce: Atom */
			reduce(106), /* |, reduce: Atom */
			reduce(106), /* ~, reduce: Atom */
			reduce(106), /* &, reduce: Atom */
			reduce(106), /* .., reduce: Atom */
			reduce(106), /* <<, reduce: Atom */
			reduce(106), /* >>, reduce: Atom */
			reduce(106), /* +, reduce: Atom */
			reduce(106), /* -, reduce: Atom */
			reduce(106), /* *, reduce: Atom */
			reduce(106), /* /, reduce: Atom */
			reduce(106), /* %, reduce: Atom */
			reduce(106), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(106), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S628
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(107), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(107), /* end, reduce: Atom */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(107), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(107), /* or, reduce: Atom */
			reduce(107), /* and, reduce: Atom */
			reduce(107), /* <, reduce: Atom */
			reduce(107), /* <=, reduce: Atom */
			reduce(107), /* >, reduce: Atom */
			reduce(107), /* >=, reduce: Atom */
			reduce(107), /* ==, reduce: Atom */
			reduce(107), /* ~=, reduce: Atom */
			reduce(107), /* |, reduce: Atom */
			reduce(107), /* ~, reduce: Atom */
			reduce(107), /* &, reduce: Atom */
			reduce(107), /* .., reduce: Atom */
			reduce(107), /* <<, reduce: Atom */
			reduce(107), /* >>, reduce: Atom */
			reduce(107), /* +, reduce: Atom */
			reduce(107), /* -, reduce: Atom */
			reduce(107), /* *, reduce: Atom */
			reduce(107), /* /, reduce: Atom */
			reduce(107), /* %, reduce: Atom */
			reduce(107), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(107), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S629
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(108), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(108), /* end, reduce: Atom */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(108), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(108), /* or, reduce: Atom */
			reduce(108), /* and, reduce: Atom */
			reduce(108), /* <, reduce: Atom */
			reduce(108), /* <=, reduce: Atom */
			reduce(108), /* >, reduce: Atom */
			reduce(108), /* >=, reduce: Atom */
			reduce(108), /* ==, reduce: Atom */
			reduce(108), /* ~=, reduce: Atom */
			reduce(108), /* |, reduce: Atom */
			reduce(108), /* ~, reduce: Atom */
			reduce(108), /* &, reduce: Atom */
			reduce(108), /* .., reduce: Atom */
			reduce(108), /* <<, reduce: Atom */
			reduce(108), /* >>, reduce: Atom */
			reduce(108), /* +, reduce: Atom */
			reduce(108), /* -, reduce: Atom */
			reduce(108), /* *, reduce: Atom */
			reduce(108), /* /, reduce: Atom */
			reduce(108), /* %, reduce: Atom */
			reduce(108), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(108), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S630
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(109), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(109), /* end, reduce: Atom */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(109), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(109), /* or, reduce: Atom */
			reduce(109), /* and, reduce: Atom */
			reduce(109), /* <, reduce: Atom */
			reduce(109), /* <=, reduce: Atom */
			reduce(109), /* >, reduce: Atom */
			reduce(109), /* >=, reduce: Atom */
			reduce(109), /* ==, reduce: Atom */
			reduce(109), /* ~=, reduce: Atom */
			reduce(109), /* |, reduce: Atom */
			reduce(109), /* ~, reduce: Atom */
			reduce(109), /* &, reduce: Atom */
			reduce(109), /* .., reduce: Atom */
			reduce(109), /* <<, reduce: Atom */
			reduce(109), /* >>, reduce: Atom */
			reduce(109), /* +, reduce: Atom */
			reduce(109), /* -, reduce: Atom */
			reduce(109), /* *, reduce: Atom */
			reduce(109), /* /, reduce: Atom */
			reduce(109), /* %, reduce: Atom */
			reduce(109), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(109), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S631
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(110), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(110), /* end, reduce: Atom */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(110), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(110), /* or, reduce: Atom */
			reduce(110), /* and, reduce: Atom */
			reduce(110), /* <, reduce: Atom */
			reduce(110), /* <=, reduce: Atom */
			reduce(110), /* >, reduce: Atom */
			reduce(110), /* >=, reduce: Atom */
			reduce(110), /* ==, reduce: Atom */
			reduce(110), /* ~=, reduce: Atom */
			reduce(110), /* |, reduce: Atom */
			reduce(110), /* ~, reduce: Atom */
			reduce(110), /* &, reduce: Atom */
			reduce(110), /* .., reduce: Atom */
			reduce(110), /* <<, reduce: Atom */
			reduce(110), /* >>, reduce: Atom */
			reduce(110), /* +, reduce: Atom */
			reduce(110), /* -, reduce: Atom */
			reduce(110), /* *, reduce: Atom */
			reduce(110), /* /, reduce: Atom */
			reduce(110), /* %, reduce: Atom */
			reduce(110), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(110), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S632
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(111), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(111), /* end, reduce: Atom */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(111), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(111), /* or, reduce: Atom */
			reduce(111), /* and, reduce: Atom */
			reduce(111), /* <, reduce: Atom */
			reduce(111), /* <=, reduce: Atom */
			reduce(111), /* >, reduce: Atom */
			reduce(111), /* >=, reduce: Atom */
			reduce(111), /* ==, reduce: Atom */
			reduce(111), /* ~=, reduce: Atom */
			reduce(111), /* |, reduce: Atom */
			reduce(111), /* ~, reduce: Atom */
			reduce(111), /* &, reduce: Atom */
			reduce(111), /* .., reduce: Atom */
			reduce(111), /* <<, reduce: Atom */
			reduce(111), /* >>, reduce: Atom */
			reduce(111), /* +, reduce: Atom */
			reduce(111), /* -, reduce: Atom */
			reduce(111), /* *, reduce: Atom */
			reduce(111), /* /, reduce: Atom */
			reduce(111), /* %, reduce: Atom */
			reduce(111), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(111), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S633
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(112), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(112), /* end, reduce: Atom */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(112), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(112), /* or, reduce: Atom */
			reduce(112), /* and, reduce: Atom */
			reduce(112), /* <, reduce: Atom */
			reduce(112), /* <=, reduce: Atom */
			reduce(112), /* >, reduce: Atom */
			reduce(112), /* >=, reduce: Atom */
			reduce(112), /* ==, reduce: Atom */
			reduce(112), /* ~=, reduce: Atom */
			reduce(112), /* |, reduce: Atom */
			reduce(112), /* ~, reduce: Atom */
			reduce(112), /* &, reduce: Atom */
			reduce(112), /* .., reduce: Atom */
			reduce(112), /* <<, reduce: Atom */
			reduce(112), /* >>, reduce: Atom */
			reduce(112), /* +, reduce: Atom */
			reduce(112), /* -, reduce: Atom */
			reduce(112), /* *, reduce: Atom */
			reduce(112), /* /, reduce: Atom */
			reduce(112), /* %, reduce: Atom */
			reduce(112), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(112), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S634
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(113), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(113), /* end, reduce: Atom */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(113), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(113), /* or, reduce: Atom */
			reduce(113), /* and, reduce: Atom */
			reduce(113), /* <, reduce: Atom */
			reduce(113), /* <=, reduce: Atom */
			reduce(113), /* >, reduce: Atom */
			reduce(113), /* >=, reduce: Atom */
			reduce(113), /* ==, reduce: Atom */
			reduce(113), /* ~=, reduce: Atom */
			reduce(113), /* |, reduce: Atom */
			reduce(113), /* ~, reduce: Atom */
			reduce(113), /* &, reduce: Atom */
			reduce(113), /* .., reduce: Atom */
			reduce(113), /* <<, reduce: Atom */
			reduce(113), /* >>, reduce: Atom */
			reduce(113), /* +, reduce: Atom */
			reduce(113), /* -, reduce: Atom */
			reduce(113), /* *, reduce: Atom */
			reduce(113), /* /, reduce: Atom */
			reduce(113), /* %, reduce: Atom */
			reduce(113), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(113), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S635
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			shift(254), /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(268), /* ident */
		},
	},
	actionRow{ // S636
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(134), /* ;, reduce: Name */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(134), /* end, reduce: Name */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(134), /* ,, reduce: Name */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(134), /* ., reduce: Name */
			reduce(134), /* :, reduce: Name */
			reduce(134), /* or, reduce: Name */
			reduce(134), /* and, reduce: Name */
			reduce(134), /* <, reduce: Name */
			reduce(134), /* <=, reduce: Name */
			reduce(134), /* >, reduce: Name */
			reduce(134), /* >=, reduce: Name */
			reduce(134), /* ==, reduce: Name */
			reduce(134), /* ~=, reduce: Name */
			reduce(134), /* |, reduce: Name */
			reduce(134), /* ~, reduce: Name */
			reduce(134), /* &, reduce: Name */
			reduce(134), /* .., reduce: Name */
			reduce(134), /* <<, reduce: Name */
			reduce(134), /* >>, reduce: Name */
			reduce(134), /* +, reduce: Name */
			reduce(134), /* -, reduce: Name */
			reduce(134), /* *, reduce: Name */
			reduce(134), /* /, reduce: Name */
			reduce(134), /* %, reduce: Name */
			reduce(134), /* //, reduce: Name */
			nil,         /* not */
			nil,         /* # */
			reduce(134), /* ^, reduce: Name */
			reduce(134), /* [, reduce: Name */
			nil,         /* ] */
			reduce(134), /* (, reduce: Name */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(134), /* string, reduce: Name */
			reduce(134), /* {, reduce: Name */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S637
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(10), /* return, reduce: Stat */
			reduce(10), /* ;, reduce: Stat */
			nil,        /* empty */
			nil,        /* = */
			reduce(10), /* break, reduce: Stat */
			reduce(10), /* goto, reduce: Stat */
			reduce(10), /* do, reduce: Stat */
			reduce(10), /* end, reduce: Stat */
			reduce(10), /* while, reduce: Stat */
			reduce(10), /* repeat, reduce: Stat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(10), /* if, reduce: Stat */
			nil,        /* , */
			reduce(10), /* for, reduce: Stat */
			nil,        /* in */
			reduce(10), /* function, reduce: Stat */
			reduce(10), /* local, reduce: Stat */
			reduce(10), /* ::, reduce: Stat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(10), /* (, reduce: Stat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(10), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S638
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1013), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1029), /* ( */
			nil,         /* ) */
			shift(1030), /* nil */
			shift(1031), /* true */
			shift(1032), /* false */
			shift(1033), /* ... */
			shift(1034), /* numdec */
			shift(1035), /* numhex */
			shift(1036), /* string */
			shift(1039), /* { */
			nil,         /* } */
			shift(1040), /* ident */
		},
	},
	actionRow{ // S639
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(25), /* return, reduce: GotoStat */
			reduce(25), /* ;, reduce: GotoStat */
			nil,        /* empty */
			nil,        /* = */
			reduce(25), /* break, reduce: GotoStat */
			reduce(25), /* goto, reduce: GotoStat */
			reduce(25), /* do, reduce: GotoStat */
			reduce(25), /* end, reduce: GotoStat */
			reduce(25), /* while, reduce: GotoStat */
			reduce(25), /* repeat, reduce: GotoStat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(25), /* if, reduce: GotoStat */
			nil,        /* , */
			reduce(25), /* for, reduce: GotoStat */
			nil,        /* in */
			reduce(25), /* function, reduce: GotoStat */
			reduce(25), /* local, reduce: GotoStat */
			reduce(25), /* ::, reduce: GotoStat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(25), /* (, reduce: GotoStat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(25), /* ident, reduce: GotoStat */
		},
	},
	actionRow{ // S640
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(134), /* return, reduce: Name */
			reduce(134), /* ;, reduce: Name */
			nil,         /* empty */
			nil,         /* = */
			reduce(134), /* break, reduce: Name */
			reduce(134), /* goto, reduce: Name */
			reduce(134), /* do, reduce: Name */
			reduce(134), /* end, reduce: Name */
			reduce(134), /* while, reduce: Name */
			reduce(134), /* repeat, reduce: Name */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(134), /* if, reduce: Name */
			nil,         /* , */
			reduce(134), /* for, reduce: Name */
			nil,         /* in */
			reduce(134), /* function, reduce: Name */
			reduce(134), /* local, reduce: Name */
			reduce(134), /* ::, reduce: Name */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(134), /* (, reduce: Name */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(134), /* ident, reduce: Name */
		},
	},
	actionRow{ // S641
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(1041), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S642
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			shift(1042), /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			shift(334),  /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S643
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			shift(1043), /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S644
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			shift(1044), /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			shift(388),  /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S645
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			shift(1045), /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(51),  /* ,, reduce: NameList */
			nil,         /* for */
			reduce(51),  /* in, reduce: NameList */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S646
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(413),  /* , */
			nil,         /* for */
			shift(1046), /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S647
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1048), /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S648
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(51), /* return, reduce: NameList */
			reduce(51), /* ;, reduce: NameList */
			nil,        /* empty */
			reduce(51), /* =, reduce: NameList */
			reduce(51), /* break, reduce: NameList */
			reduce(51), /* goto, reduce: NameList */
			reduce(51), /* do, reduce: NameList */
			reduce(51), /* end, reduce: NameList */
			reduce(51), /* while, reduce: NameList */
			reduce(51), /* repeat, reduce: NameList */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(51), /* if, reduce: NameList */
			reduce(51), /* ,, reduce: NameList */
			reduce(51), /* for, reduce: NameList */
			nil,        /* in */
			reduce(51), /* function, reduce: NameList */
			reduce(51), /* local, reduce: NameList */
			reduce(51), /* ::, reduce: NameList */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(51), /* (, reduce: NameList */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(51), /* ident, reduce: NameList */
		},
	},
	actionRow{ // S649
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(42),  /* return, reduce: LocalStat */
			reduce(42),  /* ;, reduce: LocalStat */
			nil,         /* empty */
			shift(1049), /* = */
			reduce(42),  /* break, reduce: LocalStat */
			reduce(42),  /* goto, reduce: LocalStat */
			reduce(42),  /* do, reduce: LocalStat */
			reduce(42),  /* end, reduce: LocalStat */
			reduce(42),  /* while, reduce: LocalStat */
			reduce(42),  /* repeat, reduce: LocalStat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(42),  /* if, reduce: LocalStat */
			shift(1050), /* , */
			reduce(42),  /* for, reduce: LocalStat */
			nil,         /* in */
			reduce(42),  /* function, reduce: LocalStat */
			reduce(42),  /* local, reduce: LocalStat */
			reduce(42),  /* ::, reduce: LocalStat */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(42),  /* (, reduce: LocalStat */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(42),  /* ident, reduce: LocalStat */
		},
	},
	actionRow{ // S650
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(422), /* ident */
		},
	},
	actionRow{ // S651
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(134), /* return, reduce: Name */
			reduce(134), /* ;, reduce: Name */
			nil,         /* empty */
			reduce(134), /* =, reduce: Name */
			reduce(134), /* break, reduce: Name */
			reduce(134), /* goto, reduce: Name */
			reduce(134), /* do, reduce: Name */
			reduce(134), /* end, reduce: Name */
			reduce(134), /* while, reduce: Name */
			reduce(134), /* repeat, reduce: Name */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(134), /* if, reduce: Name */
			reduce(134), /* ,, reduce: Name */
			reduce(134), /* for, reduce: Name */
			nil,         /* in */
			reduce(134), /* function, reduce: Name */
			reduce(134), /* local, reduce: Name */
			reduce(134), /* ::, reduce: Name */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(134), /* (, reduce: Name */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(134), /* ident, reduce: Name */
		},
	},
	actionRow{ // S652
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			shift(1052), /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S653
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(1053), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S654
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			reduce(56), /* do, reduce: Exp */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(56), /* or, reduce: Exp */
			shift(337), /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S655
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(1054), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S656
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			reduce(58), /* do, reduce: AndExp */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(58), /* or, reduce: AndExp */
			reduce(58), /* and, reduce: AndExp */
			shift(203), /* < */
			shift(204), /* <= */
			shift(205), /* > */
			shift(206), /* >= */
			shift(207), /* == */
			shift(208), /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S657
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			reduce(66), /* do, reduce: CompExp */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(66), /* or, reduce: CompExp */
			reduce(66), /* and, reduce: CompExp */
			reduce(66), /* <, reduce: CompExp */
			reduce(66), /* <=, reduce: CompExp */
			reduce(66), /* >, reduce: CompExp */
			reduce(66), /* >=, reduce: CompExp */
			reduce(66), /* ==, reduce: CompExp */
			reduce(66), /* ~=, reduce: CompExp */
			shift(339), /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S658
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			reduce(68), /* do, reduce: BitOrExp */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(68), /* or, reduce: BitOrExp */
			reduce(68), /* and, reduce: BitOrExp */
			reduce(68), /* <, reduce: BitOrExp */
			reduce(68), /* <=, reduce: BitOrExp */
			reduce(68), /* >, reduce: BitOrExp */
			reduce(68), /* >=, reduce: BitOrExp */
			reduce(68), /* ==, reduce: BitOrExp */
			reduce(68), /* ~=, reduce: BitOrExp */
			reduce(68), /* |, reduce: BitOrExp */
			shift(340), /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S659
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			reduce(70), /* do, reduce: BitXorExp */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(70), /* or, reduce: BitXorExp */
			reduce(70), /* and, reduce: BitXorExp */
			reduce(70), /* <, reduce: BitXorExp */
			reduce(70), /* <=, reduce: BitXorExp */
			reduce(70), /* >, reduce: BitXorExp */
			reduce(70), /* >=, reduce: BitXorExp */
			reduce(70), /* ==, reduce: BitXorExp */
			reduce(70), /* ~=, reduce: BitXorExp */
			reduce(70), /* |, reduce: BitXorExp */
			reduce(70), /* ~, reduce: BitXorExp */
			shift(341), /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S660
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			reduce(72), /* do, reduce: BitAndExp */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(72), /* or, reduce: BitAndExp */
			reduce(72), /* and, reduce: BitAndExp */
			reduce(72), /* <, reduce: BitAndExp */
			reduce(72), /* <=, reduce: BitAndExp */
			reduce(72), /* >, reduce: BitAndExp */
			reduce(72), /* >=, reduce: BitAndExp */
			reduce(72), /* ==, reduce: BitAndExp */
			reduce(72), /* ~=, reduce: BitAndExp */
			reduce(72), /* |, reduce: BitAndExp */
			reduce(72), /* ~, reduce: BitAndExp */
			reduce(72), /* &, reduce: BitAndExp */
			shift(342), /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S661
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			reduce(74), /* do, reduce: ConcatExp */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(74), /* or, reduce: ConcatExp */
			reduce(74), /* and, reduce: ConcatExp */
			reduce(74), /* <, reduce: ConcatExp */
			reduce(74), /* <=, reduce: ConcatExp */
			reduce(74), /* >, reduce: ConcatExp */
			reduce(74), /* >=, reduce: ConcatExp */
			reduce(74), /* ==, reduce: ConcatExp */
			reduce(74), /* ~=, reduce: ConcatExp */
			reduce(74), /* |, reduce: ConcatExp */
			reduce(74), /* ~, reduce: ConcatExp */
			reduce(74), /* &, reduce: ConcatExp */
			reduce(74), /* .., reduce: ConcatExp */
			shift(214), /* << */
			shift(215), /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S662
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			reduce(78), /* do, reduce: ShiftExp */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(78), /* or, reduce: ShiftExp */
			reduce(78), /* and, reduce: ShiftExp */
			reduce(78), /* <, reduce: ShiftExp */
			reduce(78), /* <=, reduce: ShiftExp */
			reduce(78), /* >, reduce: ShiftExp */
			reduce(78), /* >=, reduce: ShiftExp */
			reduce(78), /* ==, reduce: ShiftExp */
			reduce(78), /* ~=, reduce: ShiftExp */
			reduce(78), /* |, reduce: ShiftExp */
			reduce(78), /* ~, reduce: ShiftExp */
			reduce(78), /* &, reduce: ShiftExp */
			reduce(78), /* .., reduce: ShiftExp */
			reduce(78), /* <<, reduce: ShiftExp */
			reduce(78), /* >>, reduce: ShiftExp */
			shift(217), /* + */
			shift(218), /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S663
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			reduce(82), /* do, reduce: Sum */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(82), /* or, reduce: Sum */
			reduce(82), /* and, reduce: Sum */
			reduce(82), /* <, reduce: Sum */
			reduce(82), /* <=, reduce: Sum */
			reduce(82), /* >, reduce: Sum */
			reduce(82), /* >=, reduce: Sum */
			reduce(82), /* ==, reduce: Sum */
			reduce(82), /* ~=, reduce: Sum */
			reduce(82), /* |, reduce: Sum */
			reduce(82), /* ~, reduce: Sum */
			reduce(82), /* &, reduce: Sum */
			reduce(82), /* .., reduce: Sum */
			reduce(82), /* <<, reduce: Sum */
			reduce(82), /* >>, reduce: Sum */
			reduce(82), /* +, reduce: Sum */
			reduce(82), /* -, reduce: Sum */
			shift(220), /* * */
			shift(221), /* / */
			shift(222), /* % */
			shift(223), /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S664
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			reduce(88), /* do, reduce: Term */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(88), /* or, reduce: Term */
			reduce(88), /* and, reduce: Term */
			reduce(88), /* <, reduce: Term */
			reduce(88), /* <=, reduce: Term */
			reduce(88), /* >, reduce: Term */
			reduce(88), /* >=, reduce: Term */
			reduce(88), /* ==, reduce: Term */
			reduce(88), /* ~=, reduce: Term */
			reduce(88), /* |, reduce: Term */
			reduce(88), /* ~, reduce: Term */
			reduce(88), /* &, reduce: Term */
			reduce(88), /* .., reduce: Term */
			reduce(88), /* <<, reduce: Term */
			reduce(88), /* >>, reduce: Term */
			reduce(88), /* +, reduce: Term */
			reduce(88), /* -, reduce: Term */
			reduce(88), /* *, reduce: Term */
			reduce(88), /* /, reduce: Term */
			reduce(88), /* %, reduce: Term */
			reduce(88), /* //, reduce: Term */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S665
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			reduce(96), /* do, reduce: Power */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(96), /* or, reduce: Power */
			reduce(96), /* and, reduce: Power */
			reduce(96), /* <, reduce: Power */
			reduce(96), /* <=, reduce: Power */
			reduce(96), /* >, reduce: Power */
			reduce(96), /* >=, reduce: Power */
			reduce(96), /* ==, reduce: Power */
			reduce(96), /* ~=, reduce: Power */
			reduce(96), /* |, reduce: Power */
			reduce(96), /* ~, reduce: Power */
			reduce(96), /* &, reduce: Power */
			reduce(96), /* .., reduce: Power */
			reduce(96), /* <<, reduce: Power */
			reduce(96), /* >>, reduce: Power */
			reduce(96), /* +, reduce: Power */
			reduce(96), /* -, reduce: Power */
			reduce(96), /* *, reduce: Power */
			reduce(96), /* /, reduce: Power */
			reduce(96), /* %, reduce: Power */
			reduce(96), /* //, reduce: Power */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S666
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			reduce(99), /* do, reduce: Var */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			reduce(99), /* ., reduce: Var */
			reduce(99), /* :, reduce: Var */
			reduce(99), /* or, reduce: Var */
			reduce(99), /* and, reduce: Var */
			reduce(99), /* <, reduce: Var */
			reduce(99), /* <=, reduce: Var */
			reduce(99), /* >, reduce: Var */
			reduce(99), /* >=, reduce: Var */
			reduce(99), /* ==, reduce: Var */
			reduce(99), /* ~=, reduce: Var */
			reduce(99), /* |, reduce: Var */
			reduce(99), /* ~, reduce: Var */
			reduce(99), /* &, reduce: Var */
			reduce(99), /* .., reduce: Var */
			reduce(99), /* <<, reduce: Var */
			reduce(99), /* >>, reduce: Var */
			reduce(99), /* +, reduce: Var */
			reduce(99), /* -, reduce: Var */
			reduce(99), /* *, reduce: Var */
			reduce(99), /* /, reduce: Var */
			reduce(99), /* %, reduce: Var */
			reduce(99), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(99), /* ^, reduce: Var */
			reduce(99), /* [, reduce: Var */
			nil,        /* ] */
			reduce(99), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(99), /* string, reduce: Var */
			reduce(99), /* {, reduce: Var */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S667
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(351), /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			shift(353), /* string */
			shift(355), /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S668
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			shift(851),  /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			shift(1056), /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S669
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(876),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(1057), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S670
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(115), /* do, reduce: Args */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(115), /* ., reduce: Args */
			reduce(115), /* :, reduce: Args */
			reduce(115), /* or, reduce: Args */
			reduce(115), /* and, reduce: Args */
			reduce(115), /* <, reduce: Args */
			reduce(115), /* <=, reduce: Args */
			reduce(115), /* >, reduce: Args */
			reduce(115), /* >=, reduce: Args */
			reduce(115), /* ==, reduce: Args */
			reduce(115), /* ~=, reduce: Args */
			reduce(115), /* |, reduce: Args */
			reduce(115), /* ~, reduce: Args */
			reduce(115), /* &, reduce: Args */
			reduce(115), /* .., reduce: Args */
			reduce(115), /* <<, reduce: Args */
			reduce(115), /* >>, reduce: Args */
			reduce(115), /* +, reduce: Args */
			reduce(115), /* -, reduce: Args */
			reduce(115), /* *, reduce: Args */
			reduce(115), /* /, reduce: Args */
			reduce(115), /* %, reduce: Args */
			reduce(115), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(115), /* ^, reduce: Args */
			reduce(115), /* [, reduce: Args */
			nil,         /* ] */
			reduce(115), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(115), /* string, reduce: Args */
			reduce(115), /* {, reduce: Args */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S671
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			shift(569),  /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(570),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			shift(1058), /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S672
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(102), /* do, reduce: PrefixExp */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(102), /* ., reduce: PrefixExp */
			reduce(102), /* :, reduce: PrefixExp */
			reduce(102), /* or, reduce: PrefixExp */
			reduce(102), /* and, reduce: PrefixExp */
			reduce(102), /* <, reduce: PrefixExp */
			reduce(102), /* <=, reduce: PrefixExp */
			reduce(102), /* >, reduce: PrefixExp */
			reduce(102), /* >=, reduce: PrefixExp */
			reduce(102), /* ==, reduce: PrefixExp */
			reduce(102), /* ~=, reduce: PrefixExp */
			reduce(102), /* |, reduce: PrefixExp */
			reduce(102), /* ~, reduce: PrefixExp */
			reduce(102), /* &, reduce: PrefixExp */
			reduce(102), /* .., reduce: PrefixExp */
			reduce(102), /* <<, reduce: PrefixExp */
			reduce(102), /* >>, reduce: PrefixExp */
			reduce(102), /* +, reduce: PrefixExp */
			reduce(102), /* -, reduce: PrefixExp */
			reduce(102), /* *, reduce: PrefixExp */
			reduce(102), /* /, reduce: PrefixExp */
			reduce(102), /* %, reduce: PrefixExp */
			reduce(102), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(102), /* ^, reduce: PrefixExp */
			reduce(102), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(102), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(102), /* string, reduce: PrefixExp */
			reduce(102), /* {, reduce: PrefixExp */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S673
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(125), /* do, reduce: TableConstructor */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(125), /* or, reduce: TableConstructor */
			reduce(125), /* and, reduce: TableConstructor */
			reduce(125), /* <, reduce: TableConstructor */
			reduce(125), /* <=, reduce: TableConstructor */
			reduce(125), /* >, reduce: TableConstructor */
			reduce(125), /* >=, reduce: TableConstructor */
			reduce(125), /* ==, reduce: TableConstructor */
			reduce(125), /* ~=, reduce: TableConstructor */
			reduce(125), /* |, reduce: TableConstructor */
			reduce(125), /* ~, reduce: TableConstructor */
			reduce(125), /* &, reduce: TableConstructor */
			reduce(125), /* .., reduce: TableConstructor */
			reduce(125), /* <<, reduce: TableConstructor */
			reduce(125), /* >>, reduce: TableConstructor */
			reduce(125), /* +, reduce: TableConstructor */
			reduce(125), /* -, reduce: TableConstructor */
			reduce(125), /* *, reduce: TableConstructor */
			reduce(125), /* /, reduce: TableConstructor */
			reduce(125), /* %, reduce: TableConstructor */
			reduce(125), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(125), /* ^, reduce: TableConstructor */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S674
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(238),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			shift(254),  /* [ */
			nil,         /* ] */
			shift(255),  /* ( */
			nil,         /* ) */
			shift(256),  /* nil */
			shift(257),  /* true */
			shift(258),  /* false */
			shift(259),  /* ... */
			shift(260),  /* numdec */
			shift(261),  /* numhex */
			shift(262),  /* string */
			shift(265),  /* { */
			shift(1060), /* } */
			shift(268),  /* ident */
		},
	},
	actionRow{ // S675
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(101), /* $, reduce: PrefixExp */
			reduce(101), /* return, reduce: PrefixExp */
			reduce(101), /* ;, reduce: PrefixExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(101), /* break, reduce: PrefixExp */
			reduce(101), /* goto, reduce: PrefixExp */
			reduce(101), /* do, reduce: PrefixExp */
			nil,         /* end */
			reduce(101), /* while, reduce: PrefixExp */
			reduce(101), /* repeat, reduce: PrefixExp */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(101), /* if, reduce: PrefixExp */
			nil,         /* , */
			reduce(101), /* for, reduce: PrefixExp */
			nil,         /* in */
			reduce(101), /* function, reduce: PrefixExp */
			reduce(101), /* local, reduce: PrefixExp */
			reduce(101), /* ::, reduce: PrefixExp */
			reduce(101), /* ., reduce: PrefixExp */
			reduce(101), /* :, reduce: PrefixExp */
			reduce(101), /* or, reduce: PrefixExp */
			reduce(101), /* and, reduce: PrefixExp */
			reduce(101), /* <, reduce: PrefixExp */
			reduce(101), /* <=, reduce: PrefixExp */
			reduce(101), /* >, reduce: PrefixExp */
			reduce(101), /* >=, reduce: PrefixExp */
			reduce(101), /* ==, reduce: PrefixExp */
			reduce(101), /* ~=, reduce: PrefixExp */
			reduce(101), /* |, reduce: PrefixExp */
			reduce(101), /* ~, reduce: PrefixExp */
			reduce(101), /* &, reduce: PrefixExp */
			reduce(101), /* .., reduce: PrefixExp */
			reduce(101), /* <<, reduce: PrefixExp */
			reduce(101), /* >>, reduce: PrefixExp */
			reduce(101), /* +, reduce: PrefixExp */
			reduce(101), /* -, reduce: PrefixExp */
			reduce(101), /* *, reduce: PrefixExp */
			reduce(101), /* /, reduce: PrefixExp */
			reduce(101), /* %, reduce: PrefixExp */
			reduce(101), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(101), /* ^, reduce: PrefixExp */
			reduce(101), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(101), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(101), /* string, reduce: PrefixExp */
			reduce(101), /* {, reduce: PrefixExp */
			nil,         /* } */
			reduce(101), /* ident, reduce: PrefixExp */
		},
	},
	actionRow{ // S676
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(97), /* $, reduce: Var */
			reduce(97), /* return, reduce: Var */
			reduce(97), /* ;, reduce: Var */
			nil,        /* empty */
			nil,        /* = */
			reduce(97), /* break, reduce: Var */
			reduce(97), /* goto, reduce: Var */
			reduce(97), /* do, reduce: Var */
			nil,        /* end */
			reduce(97), /* while, reduce: Var */
			reduce(97), /* repeat, reduce: Var */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(97), /* if, reduce: Var */
			nil,        /* , */
			reduce(97), /* for, reduce: Var */
			nil,        /* in */
			reduce(97), /* function, reduce: Var */
			reduce(97), /* local, reduce: Var */
			reduce(97), /* ::, reduce: Var */
			reduce(97), /* ., reduce: Var */
			reduce(97), /* :, reduce: Var */
			reduce(97), /* or, reduce: Var */
			reduce(97), /* and, reduce: Var */
			reduce(97), /* <, reduce: Var */
			reduce(97), /* <=, reduce: Var */
			reduce(97), /* >, reduce: Var */
			reduce(97), /* >=, reduce: Var */
			reduce(97), /* ==, reduce: Var */
			reduce(97), /* ~=, reduce: Var */
			reduce(97), /* |, reduce: Var */
			reduce(97), /* ~, reduce: Var */
			reduce(97), /* &, reduce: Var */
			reduce(97), /* .., reduce: Var */
			reduce(97), /* <<, reduce: Var */
			reduce(97), /* >>, reduce: Var */
			reduce(97), /* +, reduce: Var */
			reduce(97), /* -, reduce: Var */
			reduce(97), /* *, reduce: Var */
			reduce(97), /* /, reduce: Var */
			reduce(97), /* %, reduce: Var */
			reduce(97), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(97), /* ^, reduce: Var */
			reduce(97), /* [, reduce: Var */
			nil,        /* ] */
			reduce(97), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(97), /* string, reduce: Var */
			reduce(97), /* {, reduce: Var */
			nil,        /* } */
			reduce(97), /* ident, reduce: Var */
		},
	},
	actionRow{ // S677
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(28),  /* $, reduce: RepeatStat */
			reduce(28),  /* return, reduce: RepeatStat */
			reduce(28),  /* ;, reduce: RepeatStat */
			nil,         /* empty */
			nil,         /* = */
			reduce(28),  /* break, reduce: RepeatStat */
			reduce(28),  /* goto, reduce: RepeatStat */
			reduce(28),  /* do, reduce: RepeatStat */
			nil,         /* end */
			reduce(28),  /* while, reduce: RepeatStat */
			reduce(28),  /* repeat, reduce: RepeatStat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(28),  /* if, reduce: RepeatStat */
			nil,         /* , */
			reduce(28),  /* for, reduce: RepeatStat */
			nil,         /* in */
			reduce(28),  /* function, reduce: RepeatStat */
			reduce(28),  /* local, reduce: RepeatStat */
			reduce(28),  /* ::, reduce: RepeatStat */
			nil,         /* . */
			nil,         /* : */
			shift(1061), /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(28),  /* (, reduce: RepeatStat */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(28),  /* ident, reduce: RepeatStat */
		},
	},
	actionRow{ // S678
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1063), /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S679
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(100), /* $, reduce: PrefixExp */
			reduce(100), /* return, reduce: PrefixExp */
			reduce(100), /* ;, reduce: PrefixExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(100), /* break, reduce: PrefixExp */
			reduce(100), /* goto, reduce: PrefixExp */
			reduce(100), /* do, reduce: PrefixExp */
			nil,         /* end */
			reduce(100), /* while, reduce: PrefixExp */
			reduce(100), /* repeat, reduce: PrefixExp */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(100), /* if, reduce: PrefixExp */
			nil,         /* , */
			reduce(100), /* for, reduce: PrefixExp */
			nil,         /* in */
			reduce(100), /* function, reduce: PrefixExp */
			reduce(100), /* local, reduce: PrefixExp */
			reduce(100), /* ::, reduce: PrefixExp */
			reduce(100), /* ., reduce: PrefixExp */
			reduce(100), /* :, reduce: PrefixExp */
			reduce(100), /* or, reduce: PrefixExp */
			reduce(100), /* and, reduce: PrefixExp */
			reduce(100), /* <, reduce: PrefixExp */
			reduce(100), /* <=, reduce: PrefixExp */
			reduce(100), /* >, reduce: PrefixExp */
			reduce(100), /* >=, reduce: PrefixExp */
			reduce(100), /* ==, reduce: PrefixExp */
			reduce(100), /* ~=, reduce: PrefixExp */
			reduce(100), /* |, reduce: PrefixExp */
			reduce(100), /* ~, reduce: PrefixExp */
			reduce(100), /* &, reduce: PrefixExp */
			reduce(100), /* .., reduce: PrefixExp */
			reduce(100), /* <<, reduce: PrefixExp */
			reduce(100), /* >>, reduce: PrefixExp */
			reduce(100), /* +, reduce: PrefixExp */
			reduce(100), /* -, reduce: PrefixExp */
			reduce(100), /* *, reduce: PrefixExp */
			reduce(100), /* /, reduce: PrefixExp */
			reduce(100), /* %, reduce: PrefixExp */
			reduce(100), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(100), /* ^, reduce: PrefixExp */
			reduce(100), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(100), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(100), /* string, reduce: PrefixExp */
			reduce(100), /* {, reduce: PrefixExp */
			nil,         /* } */
			reduce(100), /* ident, reduce: PrefixExp */
		},
	},
	actionRow{ // S680
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(55),  /* $, reduce: Exp */
			reduce(55),  /* return, reduce: Exp */
			reduce(55),  /* ;, reduce: Exp */
			nil,         /* empty */
			nil,         /* = */
			reduce(55),  /* break, reduce: Exp */
			reduce(55),  /* goto, reduce: Exp */
			reduce(55),  /* do, reduce: Exp */
			nil,         /* end */
			reduce(55),  /* while, reduce: Exp */
			reduce(55),  /* repeat, reduce: Exp */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(55),  /* if, reduce: Exp */
			nil,         /* , */
			reduce(55),  /* for, reduce: Exp */
			nil,         /* in */
			reduce(55),  /* function, reduce: Exp */
			reduce(55),  /* local, reduce: Exp */
			reduce(55),  /* ::, reduce: Exp */
			nil,         /* . */
			nil,         /* : */
			reduce(55),  /* or, reduce: Exp */
			shift(1064), /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(55),  /* (, reduce: Exp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(55),  /* ident, reduce: Exp */
		},
	},
	actionRow{ // S681
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(57), /* $, reduce: AndExp */
			reduce(57), /* return, reduce: AndExp */
			reduce(57), /* ;, reduce: AndExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(57), /* break, reduce: AndExp */
			reduce(57), /* goto, reduce: AndExp */
			reduce(57), /* do, reduce: AndExp */
			nil,        /* end */
			reduce(57), /* while, reduce: AndExp */
			reduce(57), /* repeat, reduce: AndExp */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(57), /* if, reduce: AndExp */
			nil,        /* , */
			reduce(57), /* for, reduce: AndExp */
			nil,        /* in */
			reduce(57), /* function, reduce: AndExp */
			reduce(57), /* local, reduce: AndExp */
			reduce(57), /* ::, reduce: AndExp */
			nil,        /* . */
			nil,        /* : */
			reduce(57), /* or, reduce: AndExp */
			reduce(57), /* and, reduce: AndExp */
			shift(203), /* < */
			shift(204), /* <= */
			shift(205), /* > */
			shift(206), /* >= */
			shift(207), /* == */
			shift(208), /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(57), /* (, reduce: AndExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(57), /* ident, reduce: AndExp */
		},
	},
	actionRow{ // S682
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(65),  /* $, reduce: CompExp */
			reduce(65),  /* return, reduce: CompExp */
			reduce(65),  /* ;, reduce: CompExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(65),  /* break, reduce: CompExp */
			reduce(65),  /* goto, reduce: CompExp */
			reduce(65),  /* do, reduce: CompExp */
			nil,         /* end */
			reduce(65),  /* while, reduce: CompExp */
			reduce(65),  /* repeat, reduce: CompExp */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(65),  /* if, reduce: CompExp */
			nil,         /* , */
			reduce(65),  /* for, reduce: CompExp */
			nil,         /* in */
			reduce(65),  /* function, reduce: CompExp */
			reduce(65),  /* local, reduce: CompExp */
			reduce(65),  /* ::, reduce: CompExp */
			nil,         /* . */
			nil,         /* : */
			reduce(65),  /* or, reduce: CompExp */
			reduce(65),  /* and, reduce: CompExp */
			reduce(65),  /* <, reduce: CompExp */
			reduce(65),  /* <=, reduce: CompExp */
			reduce(65),  /* >, reduce: CompExp */
			reduce(65),  /* >=, reduce: CompExp */
			reduce(65),  /* ==, reduce: CompExp */
			reduce(65),  /* ~=, reduce: CompExp */
			shift(1066), /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(65),  /* (, reduce: CompExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(65),  /* ident, reduce: CompExp */
		},
	},
	actionRow{ // S683
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(67),  /* $, reduce: BitOrExp */
			reduce(67),  /* return, reduce: BitOrExp */
			reduce(67),  /* ;, reduce: BitOrExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(67),  /* break, reduce: BitOrExp */
			reduce(67),  /* goto, reduce: BitOrExp */
			reduce(67),  /* do, reduce: BitOrExp */
			nil,         /* end */
			reduce(67),  /* while, reduce: BitOrExp */
			reduce(67),  /* repeat, reduce: BitOrExp */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(67),  /* if, reduce: BitOrExp */
			nil,         /* , */
			reduce(67),  /* for, reduce: BitOrExp */
			nil,         /* in */
			reduce(67),  /* function, reduce: BitOrExp */
			reduce(67),  /* local, reduce: BitOrExp */
			reduce(67),  /* ::, reduce: BitOrExp */
			nil,         /* . */
			nil,         /* : */
			reduce(67),  /* or, reduce: BitOrExp */
			reduce(67),  /* and, reduce: BitOrExp */
			reduce(67),  /* <, reduce: BitOrExp */
			reduce(67),  /* <=, reduce: BitOrExp */
			reduce(67),  /* >, reduce: BitOrExp */
			reduce(67),  /* >=, reduce: BitOrExp */
			reduce(67),  /* ==, reduce: BitOrExp */
			reduce(67),  /* ~=, reduce: BitOrExp */
			reduce(67),  /* |, reduce: BitOrExp */
			shift(1067), /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(67),  /* (, reduce: BitOrExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(67),  /* ident, reduce: BitOrExp */
		},
	},
	actionRow{ // S684
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(69),  /* $, reduce: BitXorExp */
			reduce(69),  /* return, reduce: BitXorExp */
			reduce(69),  /* ;, reduce: BitXorExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(69),  /* break, reduce: BitXorExp */
			reduce(69),  /* goto, reduce: BitXorExp */
			reduce(69),  /* do, reduce: BitXorExp */
			nil,         /* end */
			reduce(69),  /* while, reduce: BitXorExp */
			reduce(69),  /* repeat, reduce: BitXorExp */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(69),  /* if, reduce: BitXorExp */
			nil,         /* , */
			reduce(69),  /* for, reduce: BitXorExp */
			nil,         /* in */
			reduce(69),  /* function, reduce: BitXorExp */
			reduce(69),  /* local, reduce: BitXorExp */
			reduce(69),  /* ::, reduce: BitXorExp */
			nil,         /* . */
			nil,         /* : */
			reduce(69),  /* or, reduce: BitXorExp */
			reduce(69),  /* and, reduce: BitXorExp */
			reduce(69),  /* <, reduce: BitXorExp */
			reduce(69),  /* <=, reduce: BitXorExp */
			reduce(69),  /* >, reduce: BitXorExp */
			reduce(69),  /* >=, reduce: BitXorExp */
			reduce(69),  /* ==, reduce: BitXorExp */
			reduce(69),  /* ~=, reduce: BitXorExp */
			reduce(69),  /* |, reduce: BitXorExp */
			reduce(69),  /* ~, reduce: BitXorExp */
			shift(1068), /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(69),  /* (, reduce: BitXorExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(69),  /* ident, reduce: BitXorExp */
		},
	},
	actionRow{ // S685
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(71),  /* $, reduce: BitAndExp */
			reduce(71),  /* return, reduce: BitAndExp */
			reduce(71),  /* ;, reduce: BitAndExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(71),  /* break, reduce: BitAndExp */
			reduce(71),  /* goto, reduce: BitAndExp */
			reduce(71),  /* do, reduce: BitAndExp */
			nil,         /* end */
			reduce(71),  /* while, reduce: BitAndExp */
			reduce(71),  /* repeat, reduce: BitAndExp */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(71),  /* if, reduce: BitAndExp */
			nil,         /* , */
			reduce(71),  /* for, reduce: BitAndExp */
			nil,         /* in */
			reduce(71),  /* function, reduce: BitAndExp */
			reduce(71),  /* local, reduce: BitAndExp */
			reduce(71),  /* ::, reduce: BitAndExp */
			nil,         /* . */
			nil,         /* : */
			reduce(71),  /* or, reduce: BitAndExp */
			reduce(71),  /* and, reduce: BitAndExp */
			reduce(71),  /* <, reduce: BitAndExp */
			reduce(71),  /* <=, reduce: BitAndExp */
			reduce(71),  /* >, reduce: BitAndExp */
			reduce(71),  /* >=, reduce: BitAndExp */
			reduce(71),  /* ==, reduce: BitAndExp */
			reduce(71),  /* ~=, reduce: BitAndExp */
			reduce(71),  /* |, reduce: BitAndExp */
			reduce(71),  /* ~, reduce: BitAndExp */
			reduce(71),  /* &, reduce: BitAndExp */
			shift(1069), /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(71),  /* (, reduce: BitAndExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(71),  /* ident, reduce: BitAndExp */
		},
	},
	actionRow{ // S686
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(73), /* $, reduce: ConcatExp */
			reduce(73), /* return, reduce: ConcatExp */
			reduce(73), /* ;, reduce: ConcatExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(73), /* break, reduce: ConcatExp */
			reduce(73), /* goto, reduce: ConcatExp */
			reduce(73), /* do, reduce: ConcatExp */
			nil,        /* end */
			reduce(73), /* while, reduce: ConcatExp */
			reduce(73), /* repeat, reduce: ConcatExp */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(73), /* if, reduce: ConcatExp */
			nil,        /* , */
			reduce(73), /* for, reduce: ConcatExp */
			nil,        /* in */
			reduce(73), /* function, reduce: ConcatExp */
			reduce(73), /* local, reduce: ConcatExp */
			reduce(73), /* ::, reduce: ConcatExp */
			nil,        /* . */
			nil,        /* : */
			reduce(73), /* or, reduce: ConcatExp */
			reduce(73), /* and, reduce: ConcatExp */
			reduce(73), /* <, reduce: ConcatExp */
			reduce(73), /* <=, reduce: ConcatExp */
			reduce(73), /* >, reduce: ConcatExp */
			reduce(73), /* >=, reduce: ConcatExp */
			reduce(73), /* ==, reduce: ConcatExp */
			reduce(73), /* ~=, reduce: ConcatExp */
			reduce(73), /* |, reduce: ConcatExp */
			reduce(73), /* ~, reduce: ConcatExp */
			reduce(73), /* &, reduce: ConcatExp */
			reduce(73), /* .., reduce: ConcatExp */
			shift(214), /* << */
			shift(215), /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(73), /* (, reduce: ConcatExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(73), /* ident, reduce: ConcatExp */
		},
	},
	actionRow{ // S687
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(77), /* $, reduce: ShiftExp */
			reduce(77), /* return, reduce: ShiftExp */
			reduce(77), /* ;, reduce: ShiftExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(77), /* break, reduce: ShiftExp */
			reduce(77), /* goto, reduce: ShiftExp */
			reduce(77), /* do, reduce: ShiftExp */
			nil,        /* end */
			reduce(77), /* while, reduce: ShiftExp */
			reduce(77), /* repeat, reduce: ShiftExp */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(77), /* if, reduce: ShiftExp */
			nil,        /* , */
			reduce(77), /* for, reduce: ShiftExp */
			nil,        /* in */
			reduce(77), /* function, reduce: ShiftExp */
			reduce(77), /* local, reduce: ShiftExp */
			reduce(77), /* ::, reduce: ShiftExp */
			nil,        /* . */
			nil,        /* : */
			reduce(77), /* or, reduce: ShiftExp */
			reduce(77), /* and, reduce: ShiftExp */
			reduce(77), /* <, reduce: ShiftExp */
			reduce(77), /* <=, reduce: ShiftExp */
			reduce(77), /* >, reduce: ShiftExp */
			reduce(77), /* >=, reduce: ShiftExp */
			reduce(77), /* ==, reduce: ShiftExp */
			reduce(77), /* ~=, reduce: ShiftExp */
			reduce(77), /* |, reduce: ShiftExp */
			reduce(77), /* ~, reduce: ShiftExp */
			reduce(77), /* &, reduce: ShiftExp */
			reduce(77), /* .., reduce: ShiftExp */
			reduce(77), /* <<, reduce: ShiftExp */
			reduce(77), /* >>, reduce: ShiftExp */
			shift(217), /* + */
			shift(218), /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(77), /* (, reduce: ShiftExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(77), /* ident, reduce: ShiftExp */
		},
	},
	actionRow{ // S688
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(81), /* $, reduce: Sum */
			reduce(81), /* return, reduce: Sum */
			reduce(81), /* ;, reduce: Sum */
			nil,        /* empty */
			nil,        /* = */
			reduce(81), /* break, reduce: Sum */
			reduce(81), /* goto, reduce: Sum */
			reduce(81), /* do, reduce: Sum */
			nil,        /* end */
			reduce(81), /* while, reduce: Sum */
			reduce(81), /* repeat, reduce: Sum */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(81), /* if, reduce: Sum */
			nil,        /* , */
			reduce(81), /* for, reduce: Sum */
			nil,        /* in */
			reduce(81), /* function, reduce: Sum */
			reduce(81), /* local, reduce: Sum */
			reduce(81), /* ::, reduce: Sum */
			nil,        /* . */
			nil,        /* : */
			reduce(81), /* or, reduce: Sum */
			reduce(81), /* and, reduce: Sum */
			reduce(81), /* <, reduce: Sum */
			reduce(81), /* <=, reduce: Sum */
			reduce(81), /* >, reduce: Sum */
			reduce(81), /* >=, reduce: Sum */
			reduce(81), /* ==, reduce: Sum */
			reduce(81), /* ~=, reduce: Sum */
			reduce(81), /* |, reduce: Sum */
			reduce(81), /* ~, reduce: Sum */
			reduce(81), /* &, reduce: Sum */
			reduce(81), /* .., reduce: Sum */
			reduce(81), /* <<, reduce: Sum */
			reduce(81), /* >>, reduce: Sum */
			reduce(81), /* +, reduce: Sum */
			reduce(81), /* -, reduce: Sum */
			shift(220), /* * */
			shift(221), /* / */
			shift(222), /* % */
			shift(223), /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(81), /* (, reduce: Sum */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(81), /* ident, reduce: Sum */
		},
	},
	actionRow{ // S689
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(87), /* $, reduce: Term */
			reduce(87), /* return, reduce: Term */
			reduce(87), /* ;, reduce: Term */
			nil,        /* empty */
			nil,        /* = */
			reduce(87), /* break, reduce: Term */
			reduce(87), /* goto, reduce: Term */
			reduce(87), /* do, reduce: Term */
			nil,        /* end */
			reduce(87), /* while, reduce: Term */
			reduce(87), /* repeat, reduce: Term */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(87), /* if, reduce: Term */
			nil,        /* , */
			reduce(87), /* for, reduce: Term */
			nil,        /* in */
			reduce(87), /* function, reduce: Term */
			reduce(87), /* local, reduce: Term */
			reduce(87), /* ::, reduce: Term */
			nil,        /* . */
			nil,        /* : */
			reduce(87), /* or, reduce: Term */
			reduce(87), /* and, reduce: Term */
			reduce(87), /* <, reduce: Term */
			reduce(87), /* <=, reduce: Term */
			reduce(87), /* >, reduce: Term */
			reduce(87), /* >=, reduce: Term */
			reduce(87), /* ==, reduce: Term */
			reduce(87), /* ~=, reduce: Term */
			reduce(87), /* |, reduce: Term */
			reduce(87), /* ~, reduce: Term */
			reduce(87), /* &, reduce: Term */
			reduce(87), /* .., reduce: Term */
			reduce(87), /* <<, reduce: Term */
			reduce(87), /* >>, reduce: Term */
			reduce(87), /* +, reduce: Term */
			reduce(87), /* -, reduce: Term */
			reduce(87), /* *, reduce: Term */
			reduce(87), /* /, reduce: Term */
			reduce(87), /* %, reduce: Term */
			reduce(87), /* //, reduce: Term */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(87), /* (, reduce: Term */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(87), /* ident, reduce: Term */
		},
	},
	actionRow{ // S690
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(678), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(694), /* ( */
			nil,        /* ) */
			shift(695), /* nil */
			shift(696), /* true */
			shift(697), /* false */
			shift(698), /* ... */
			shift(699), /* numdec */
			shift(700), /* numhex */
			shift(701), /* string */
			shift(704), /* { */
			nil,        /* } */
			shift(705), /* ident */
		},
	},
	actionRow{ // S691
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(94), /* $, reduce: Factor */
			reduce(94), /* return, reduce: Factor */
			reduce(94), /* ;, reduce: Factor */
			nil,        /* empty */
			nil,        /* = */
			reduce(94), /* break, reduce: Factor */
			reduce(94), /* goto, reduce: Factor */
			reduce(94), /* do, reduce: Factor */
			nil,        /* end */
			reduce(94), /* while, reduce: Factor */
			reduce(94), /* repeat, reduce: Factor */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(94), /* if, reduce: Factor */
			nil,        /* , */
			reduce(94), /* for, reduce: Factor */
			nil,        /* in */
			reduce(94), /* function, reduce: Factor */
			reduce(94), /* local, reduce: Factor */
			reduce(94), /* ::, reduce: Factor */
			nil,        /* . */
			nil,        /* : */
			reduce(94), /* or, reduce: Factor */
			reduce(94), /* and, reduce: Factor */
			reduce(94), /* <, reduce: Factor */
			reduce(94), /* <=, reduce: Factor */
			reduce(94), /* >, reduce: Factor */
			reduce(94), /* >=, reduce: Factor */
			reduce(94), /* ==, reduce: Factor */
			reduce(94), /* ~=, reduce: Factor */
			reduce(94), /* |, reduce: Factor */
			reduce(94), /* ~, reduce: Factor */
			reduce(94), /* &, reduce: Factor */
			reduce(94), /* .., reduce: Factor */
			reduce(94), /* <<, reduce: Factor */
			reduce(94), /* >>, reduce: Factor */
			reduce(94), /* +, reduce: Factor */
			reduce(94), /* -, reduce: Factor */
			reduce(94), /* *, reduce: Factor */
			reduce(94), /* /, reduce: Factor */
			reduce(94), /* %, reduce: Factor */
			reduce(94), /* //, reduce: Factor */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(94), /* (, reduce: Factor */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(94), /* ident, reduce: Factor */
		},
	},
	actionRow{ // S692
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(95),  /* $, reduce: Power */
			reduce(95),  /* return, reduce: Power */
			reduce(95),  /* ;, reduce: Power */
			nil,         /* empty */
			nil,         /* = */
			reduce(95),  /* break, reduce: Power */
			reduce(95),  /* goto, reduce: Power */
			reduce(95),  /* do, reduce: Power */
			nil,         /* end */
			reduce(95),  /* while, reduce: Power */
			reduce(95),  /* repeat, reduce: Power */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(95),  /* if, reduce: Power */
			nil,         /* , */
			reduce(95),  /* for, reduce: Power */
			nil,         /* in */
			reduce(95),  /* function, reduce: Power */
			reduce(95),  /* local, reduce: Power */
			reduce(95),  /* ::, reduce: Power */
			nil,         /* . */
			nil,         /* : */
			reduce(95),  /* or, reduce: Power */
			reduce(95),  /* and, reduce: Power */
			reduce(95),  /* <, reduce: Power */
			reduce(95),  /* <=, reduce: Power */
			reduce(95),  /* >, reduce: Power */
			reduce(95),  /* >=, reduce: Power */
			reduce(95),  /* ==, reduce: Power */
			reduce(95),  /* ~=, reduce: Power */
			reduce(95),  /* |, reduce: Power */
			reduce(95),  /* ~, reduce: Power */
			reduce(95),  /* &, reduce: Power */
			reduce(95),  /* .., reduce: Power */
			reduce(95),  /* <<, reduce: Power */
			reduce(95),  /* >>, reduce: Power */
			reduce(95),  /* +, reduce: Power */
			reduce(95),  /* -, reduce: Power */
			reduce(95),  /* *, reduce: Power */
			reduce(95),  /* /, reduce: Power */
			reduce(95),  /* %, reduce: Power */
			reduce(95),  /* //, reduce: Power */
			nil,         /* not */
			nil,         /* # */
			shift(1074), /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(95),  /* (, reduce: Power */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(95),  /* ident, reduce: Power */
		},
	},
	actionRow{ // S693
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(114), /* $, reduce: Atom */
			reduce(114), /* return, reduce: Atom */
			reduce(114), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(114), /* break, reduce: Atom */
			reduce(114), /* goto, reduce: Atom */
			reduce(114), /* do, reduce: Atom */
			nil,         /* end */
			reduce(114), /* while, reduce: Atom */
			reduce(114), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(114), /* if, reduce: Atom */
			nil,         /* , */
			reduce(114), /* for, reduce: Atom */
			nil,         /* in */
			reduce(114), /* function, reduce: Atom */
			reduce(114), /* local, reduce: Atom */
			reduce(114), /* ::, reduce: Atom */
			shift(1075), /* . */
			shift(1076), /* : */
			reduce(114), /* or, reduce: Atom */
			reduce(114), /* and, reduce: Atom */
			reduce(114), /* <, reduce: Atom */
			reduce(114), /* <=, reduce: Atom */
			reduce(114), /* >, reduce: Atom */
			reduce(114), /* >=, reduce: Atom */
			reduce(114), /* ==, reduce: Atom */
			reduce(114), /* ~=, reduce: Atom */
			reduce(114), /* |, reduce: Atom */
			reduce(114), /* ~, reduce: Atom */
			reduce(114), /* &, reduce: Atom */
			reduce(114), /* .., reduce: Atom */
			reduce(114), /* <<, reduce: Atom */
			reduce(114), /* >>, reduce: Atom */
			reduce(114), /* +, reduce: Atom */
			reduce(114), /* -, reduce: Atom */
			reduce(114), /* *, reduce: Atom */
			reduce(114), /* /, reduce: Atom */
			reduce(114), /* %, reduce: Atom */
			reduce(114), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(114), /* ^, reduce: Atom */
			shift(1077), /* [ */
			nil,         /* ] */
			shift(1078), /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			shift(1080), /* string */
			shift(1082), /* { */
			nil,         /* } */
			reduce(114), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S694
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(168), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(184), /* ( */
			nil,        /* ) */
			shift(185), /* nil */
			shift(186), /* true */
			shift(187), /* false */
			shift(188), /* ... */
			shift(189), /* numdec */
			shift(190), /* numhex */
			shift(191), /* string */
			shift(194), /* { */
			nil,        /* } */
			shift(195), /* ident */
		},
	},
	actionRow{ // S695
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(105), /* $, reduce: Atom */
			reduce(105), /* return, reduce: Atom */
			reduce(105), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(105), /* break, reduce: Atom */
			reduce(105), /* goto, reduce: Atom */
			reduce(105), /* do, reduce: Atom */
			nil,         /* end */
			reduce(105), /* while, reduce: Atom */
			reduce(105), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(105), /* if, reduce: Atom */
			nil,         /* , */
			reduce(105), /* for, reduce: Atom */
			nil,         /* in */
			reduce(105), /* function, reduce: Atom */
			reduce(105), /* local, reduce: Atom */
			reduce(105), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(105), /* or, reduce: Atom */
			reduce(105), /* and, reduce: Atom */
			reduce(105), /* <, reduce: Atom */
			reduce(105), /* <=, reduce: Atom */
			reduce(105), /* >, reduce: Atom */
			reduce(105), /* >=, reduce: Atom */
			reduce(105), /* ==, reduce: Atom */
			reduce(105), /* ~=, reduce: Atom */
			reduce(105), /* |, reduce: Atom */
			reduce(105), /* ~, reduce: Atom */
			reduce(105), /* &, reduce: Atom */
			reduce(105), /* .., reduce: Atom */
			reduce(105), /* <<, reduce: Atom */
			reduce(105), /* >>, reduce: Atom */
			reduce(105), /* +, reduce: Atom */
			reduce(105), /* -, reduce: Atom */
			reduce(105), /* *, reduce: Atom */
			reduce(105), /* /, reduce: Atom */
			reduce(105), /* %, reduce: Atom */
			reduce(105), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(105), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(105), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(105), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S696
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(106), /* $, reduce: Atom */
			reduce(106), /* return, reduce: Atom */
			reduce(106), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(106), /* break, reduce: Atom */
			reduce(106), /* goto, reduce: Atom */
			reduce(106), /* do, reduce: Atom */
			nil,         /* end */
			reduce(106), /* while, reduce: Atom */
			reduce(106), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(106), /* if, reduce: Atom */
			nil,         /* , */
			reduce(106), /* for, reduce: Atom */
			nil,         /* in */
			reduce(106), /* function, reduce: Atom */
			reduce(106), /* local, reduce: Atom */
			reduce(106), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(106), /* or, reduce: Atom */
			reduce(106), /* and, reduce: Atom */
			reduce(106), /* <, reduce: Atom */
			reduce(106), /* <=, reduce: Atom */
			reduce(106), /* >, reduce: Atom */
			reduce(106), /* >=, reduce: Atom */
			reduce(106), /* ==, reduce: Atom */
			reduce(106), /* ~=, reduce: Atom */
			reduce(106), /* |, reduce: Atom */
			reduce(106), /* ~, reduce: Atom */
			reduce(106), /* &, reduce: Atom */
			reduce(106), /* .., reduce: Atom */
			reduce(106), /* <<, reduce: Atom */
			reduce(106), /* >>, reduce: Atom */
			reduce(106), /* +, reduce: Atom */
			reduce(106), /* -, reduce: Atom */
			reduce(106), /* *, reduce: Atom */
			reduce(106), /* /, reduce: Atom */
			reduce(106), /* %, reduce: Atom */
			reduce(106), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(106), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(106), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(106), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S697
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(107), /* $, reduce: Atom */
			reduce(107), /* return, reduce: Atom */
			reduce(107), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(107), /* break, reduce: Atom */
			reduce(107), /* goto, reduce: Atom */
			reduce(107), /* do, reduce: Atom */
			nil,         /* end */
			reduce(107), /* while, reduce: Atom */
			reduce(107), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(107), /* if, reduce: Atom */
			nil,         /* , */
			reduce(107), /* for, reduce: Atom */
			nil,         /* in */
			reduce(107), /* function, reduce: Atom */
			reduce(107), /* local, reduce: Atom */
			reduce(107), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(107), /* or, reduce: Atom */
			reduce(107), /* and, reduce: Atom */
			reduce(107), /* <, reduce: Atom */
			reduce(107), /* <=, reduce: Atom */
			reduce(107), /* >, reduce: Atom */
			reduce(107), /* >=, reduce: Atom */
			reduce(107), /* ==, reduce: Atom */
			reduce(107), /* ~=, reduce: Atom */
			reduce(107), /* |, reduce: Atom */
			reduce(107), /* ~, reduce: Atom */
			reduce(107), /* &, reduce: Atom */
			reduce(107), /* .., reduce: Atom */
			reduce(107), /* <<, reduce: Atom */
			reduce(107), /* >>, reduce: Atom */
			reduce(107), /* +, reduce: Atom */
			reduce(107), /* -, reduce: Atom */
			reduce(107), /* *, reduce: Atom */
			reduce(107), /* /, reduce: Atom */
			reduce(107), /* %, reduce: Atom */
			reduce(107), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(107), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(107), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(107), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S698
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(108), /* $, reduce: Atom */
			reduce(108), /* return, reduce: Atom */
			reduce(108), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(108), /* break, reduce: Atom */
			reduce(108), /* goto, reduce: Atom */
			reduce(108), /* do, reduce: Atom */
			nil,         /* end */
			reduce(108), /* while, reduce: Atom */
			reduce(108), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(108), /* if, reduce: Atom */
			nil,         /* , */
			reduce(108), /* for, reduce: Atom */
			nil,         /* in */
			reduce(108), /* function, reduce: Atom */
			reduce(108), /* local, reduce: Atom */
			reduce(108), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(108), /* or, reduce: Atom */
			reduce(108), /* and, reduce: Atom */
			reduce(108), /* <, reduce: Atom */
			reduce(108), /* <=, reduce: Atom */
			reduce(108), /* >, reduce: Atom */
			reduce(108), /* >=, reduce: Atom */
			reduce(108), /* ==, reduce: Atom */
			reduce(108), /* ~=, reduce: Atom */
			reduce(108), /* |, reduce: Atom */
			reduce(108), /* ~, reduce: Atom */
			reduce(108), /* &, reduce: Atom */
			reduce(108), /* .., reduce: Atom */
			reduce(108), /* <<, reduce: Atom */
			reduce(108), /* >>, reduce: Atom */
			reduce(108), /* +, reduce: Atom */
			reduce(108), /* -, reduce: Atom */
			reduce(108), /* *, reduce: Atom */
			reduce(108), /* /, reduce: Atom */
			reduce(108), /* %, reduce: Atom */
			reduce(108), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(108), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(108), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(108), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S699
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(109), /* $, reduce: Atom */
			reduce(109), /* return, reduce: Atom */
			reduce(109), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(109), /* break, reduce: Atom */
			reduce(109), /* goto, reduce: Atom */
			reduce(109), /* do, reduce: Atom */
			nil,         /* end */
			reduce(109), /* while, reduce: Atom */
			reduce(109), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(109), /* if, reduce: Atom */
			nil,         /* , */
			reduce(109), /* for, reduce: Atom */
			nil,         /* in */
			reduce(109), /* function, reduce: Atom */
			reduce(109), /* local, reduce: Atom */
			reduce(109), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(109), /* or, reduce: Atom */
			reduce(109), /* and, reduce: Atom */
			reduce(109), /* <, reduce: Atom */
			reduce(109), /* <=, reduce: Atom */
			reduce(109), /* >, reduce: Atom */
			reduce(109), /* >=, reduce: Atom */
			reduce(109), /* ==, reduce: Atom */
			reduce(109), /* ~=, reduce: Atom */
			reduce(109), /* |, reduce: Atom */
			reduce(109), /* ~, reduce: Atom */
			reduce(109), /* &, reduce: Atom */
			reduce(109), /* .., reduce: Atom */
			reduce(109), /* <<, reduce: Atom */
			reduce(109), /* >>, reduce: Atom */
			reduce(109), /* +, reduce: Atom */
			reduce(109), /* -, reduce: Atom */
			reduce(109), /* *, reduce: Atom */
			reduce(109), /* /, reduce: Atom */
			reduce(109), /* %, reduce: Atom */
			reduce(109), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(109), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(109), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(109), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S700
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(110), /* $, reduce: Atom */
			reduce(110), /* return, reduce: Atom */
			reduce(110), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(110), /* break, reduce: Atom */
			reduce(110), /* goto, reduce: Atom */
			reduce(110), /* do, reduce: Atom */
			nil,         /* end */
			reduce(110), /* while, reduce: Atom */
			reduce(110), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(110), /* if, reduce: Atom */
			nil,         /* , */
			reduce(110), /* for, reduce: Atom */
			nil,         /* in */
			reduce(110), /* function, reduce: Atom */
			reduce(110), /* local, reduce: Atom */
			reduce(110), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(110), /* or, reduce: Atom */
			reduce(110), /* and, reduce: Atom */
			reduce(110), /* <, reduce: Atom */
			reduce(110), /* <=, reduce: Atom */
			reduce(110), /* >, reduce: Atom */
			reduce(110), /* >=, reduce: Atom */
			reduce(110), /* ==, reduce: Atom */
			reduce(110), /* ~=, reduce: Atom */
			reduce(110), /* |, reduce: Atom */
			reduce(110), /* ~, reduce: Atom */
			reduce(110), /* &, reduce: Atom */
			reduce(110), /* .., reduce: Atom */
			reduce(110), /* <<, reduce: Atom */
			reduce(110), /* >>, reduce: Atom */
			reduce(110), /* +, reduce: Atom */
			reduce(110), /* -, reduce: Atom */
			reduce(110), /* *, reduce: Atom */
			reduce(110), /* /, reduce: Atom */
			reduce(110), /* %, reduce: Atom */
			reduce(110), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(110), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(110), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(110), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S701
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(111), /* $, reduce: Atom */
			reduce(111), /* return, reduce: Atom */
			reduce(111), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(111), /* break, reduce: Atom */
			reduce(111), /* goto, reduce: Atom */
			reduce(111), /* do, reduce: Atom */
			nil,         /* end */
			reduce(111), /* while, reduce: Atom */
			reduce(111), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(111), /* if, reduce: Atom */
			nil,         /* , */
			reduce(111), /* for, reduce: Atom */
			nil,         /* in */
			reduce(111), /* function, reduce: Atom */
			reduce(111), /* local, reduce: Atom */
			reduce(111), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(111), /* or, reduce: Atom */
			reduce(111), /* and, reduce: Atom */
			reduce(111), /* <, reduce: Atom */
			reduce(111), /* <=, reduce: Atom */
			reduce(111), /* >, reduce: Atom */
			reduce(111), /* >=, reduce: Atom */
			reduce(111), /* ==, reduce: Atom */
			reduce(111), /* ~=, reduce: Atom */
			reduce(111), /* |, reduce: Atom */
			reduce(111), /* ~, reduce: Atom */
			reduce(111), /* &, reduce: Atom */
			reduce(111), /* .., reduce: Atom */
			reduce(111), /* <<, reduce: Atom */
			reduce(111), /* >>, reduce: Atom */
			reduce(111), /* +, reduce: Atom */
			reduce(111), /* -, reduce: Atom */
			reduce(111), /* *, reduce: Atom */
			reduce(111), /* /, reduce: Atom */
			reduce(111), /* %, reduce: Atom */
			reduce(111), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(111), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(111), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(111), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S702
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(112), /* $, reduce: Atom */
			reduce(112), /* return, reduce: Atom */
			reduce(112), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(112), /* break, reduce: Atom */
			reduce(112), /* goto, reduce: Atom */
			reduce(112), /* do, reduce: Atom */
			nil,         /* end */
			reduce(112), /* while, reduce: Atom */
			reduce(112), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(112), /* if, reduce: Atom */
			nil,         /* , */
			reduce(112), /* for, reduce: Atom */
			nil,         /* in */
			reduce(112), /* function, reduce: Atom */
			reduce(112), /* local, reduce: Atom */
			reduce(112), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(112), /* or, reduce: Atom */
			reduce(112), /* and, reduce: Atom */
			reduce(112), /* <, reduce: Atom */
			reduce(112), /* <=, reduce: Atom */
			reduce(112), /* >, reduce: Atom */
			reduce(112), /* >=, reduce: Atom */
			reduce(112), /* ==, reduce: Atom */
			reduce(112), /* ~=, reduce: Atom */
			reduce(112), /* |, reduce: Atom */
			reduce(112), /* ~, reduce: Atom */
			reduce(112), /* &, reduce: Atom */
			reduce(112), /* .., reduce: Atom */
			reduce(112), /* <<, reduce: Atom */
			reduce(112), /* >>, reduce: Atom */
			reduce(112), /* +, reduce: Atom */
			reduce(112), /* -, reduce: Atom */
			reduce(112), /* *, reduce: Atom */
			reduce(112), /* /, reduce: Atom */
			reduce(112), /* %, reduce: Atom */
			reduce(112), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(112), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(112), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(112), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S703
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(113), /* $, reduce: Atom */
			reduce(113), /* return, reduce: Atom */
			reduce(113), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(113), /* break, reduce: Atom */
			reduce(113), /* goto, reduce: Atom */
			reduce(113), /* do, reduce: Atom */
			nil,         /* end */
			reduce(113), /* while, reduce: Atom */
			reduce(113), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(113), /* if, reduce: Atom */
			nil,         /* , */
			reduce(113), /* for, reduce: Atom */
			nil,         /* in */
			reduce(113), /* function, reduce: Atom */
			reduce(113), /* local, reduce: Atom */
			reduce(113), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(113), /* or, reduce: Atom */
			reduce(113), /* and, reduce: Atom */
			reduce(113), /* <, reduce: Atom */
			reduce(113), /* <=, reduce: Atom */
			reduce(113), /* >, reduce: Atom */
			reduce(113), /* >=, reduce: Atom */
			reduce(113), /* ==, reduce: Atom */
			reduce(113), /* ~=, reduce: Atom */
			reduce(113), /* |, reduce: Atom */
			reduce(113), /* ~, reduce: Atom */
			reduce(113), /* &, reduce: Atom */
			reduce(113), /* .., reduce: Atom */
			reduce(113), /* <<, reduce: Atom */
			reduce(113), /* >>, reduce: Atom */
			reduce(113), /* +, reduce: Atom */
			reduce(113), /* -, reduce: Atom */
			reduce(113), /* *, reduce: Atom */
			reduce(113), /* /, reduce: Atom */
			reduce(113), /* %, reduce: Atom */
			reduce(113), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(113), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(113), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(113), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S704
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			shift(254), /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(268), /* ident */
		},
	},
	actionRow{ // S705
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(134), /* $, reduce: Name */
			reduce(134), /* return, reduce: Name */
			reduce(134), /* ;, reduce: Name */
			nil,         /* empty */
			nil,         /* = */
			reduce(134), /* break, reduce: Name */
			reduce(134), /* goto, reduce: Name */
			reduce(134), /* do, reduce: Name */
			nil,         /* end */
			reduce(134), /* while, reduce: Name */
			reduce(134), /* repeat, reduce: Name */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(134), /* if, reduce: Name */
			nil,         /* , */
			reduce(134), /* for, reduce: Name */
			nil,         /* in */
			reduce(134), /* function, reduce: Name */
			reduce(134), /* local, reduce: Name */
			reduce(134), /* ::, reduce: Name */
			reduce(134), /* ., reduce: Name */
			reduce(134), /* :, reduce: Name */
			reduce(134), /* or, reduce: Name */
			reduce(134), /* and, reduce: Name */
			reduce(134), /* <, reduce: Name */
			reduce(134), /* <=, reduce: Name */
			reduce(134), /* >, reduce: Name */
			reduce(134), /* >=, reduce: Name */
			reduce(134), /* ==, reduce: Name */
			reduce(134), /* ~=, reduce: Name */
			reduce(134), /* |, reduce: Name */
			reduce(134), /* ~, reduce: Name */
			reduce(134), /* &, reduce: Name */
			reduce(134), /* .., reduce: Name */
			reduce(134), /* <<, reduce: Name */
			reduce(134), /* >>, reduce: Name */
			reduce(134), /* +, reduce: Name */
			reduce(134), /* -, reduce: Name */
			reduce(134), /* *, reduce: Name */
			reduce(134), /* /, reduce: Name */
			reduce(134), /* %, reduce: Name */
			reduce(134), /* //, reduce: Name */
			nil,         /* not */
			nil,         /* # */
			reduce(134), /* ^, reduce: Name */
			reduce(134), /* [, reduce: Name */
			nil,         /* ] */
			reduce(134), /* (, reduce: Name */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(134), /* string, reduce: Name */
			reduce(134), /* {, reduce: Name */
			nil,         /* } */
			reduce(134), /* ident, reduce: Name */
		},
	},
	actionRow{ // S706
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			shift(1085), /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			reduce(2),   /* until, reduce: Chunk */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(1086), /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S707
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* return */
			nil,       /* ; */
			nil,       /* empty */
			nil,       /* = */
			nil,       /* break */
			nil,       /* goto */
			nil,       /* do */
			nil,       /* end */
			nil,       /* while */
			nil,       /* repeat */
			reduce(3), /* until, reduce: Chunk */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			nil,       /* if */
			nil,       /* , */
			nil,       /* for */
			nil,       /* in */
			nil,       /* function */
			nil,       /* local */
			nil,       /* :: */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			nil,       /* ( */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			nil,       /* ident */
		},
	},
	actionRow{ // S708
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(101), /* ;, reduce: PrefixExp */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			reduce(101), /* until, reduce: PrefixExp */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(101), /* ,, reduce: PrefixExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(101), /* ., reduce: PrefixExp */
			reduce(101), /* :, reduce: PrefixExp */
			reduce(101), /* or, reduce: PrefixExp */
			reduce(101), /* and, reduce: PrefixExp */
			reduce(101), /* <, reduce: PrefixExp */
			reduce(101), /* <=, reduce: PrefixExp */
			reduce(101), /* >, reduce: PrefixExp */
			reduce(101), /* >=, reduce: PrefixExp */
			reduce(101), /* ==, reduce: PrefixExp */
			reduce(101), /* ~=, reduce: PrefixExp */
			reduce(101), /* |, reduce: PrefixExp */
			reduce(101), /* ~, reduce: PrefixExp */
			reduce(101), /* &, reduce: PrefixExp */
			reduce(101), /* .., reduce: PrefixExp */
			reduce(101), /* <<, reduce: PrefixExp */
			reduce(101), /* >>, reduce: PrefixExp */
			reduce(101), /* +, reduce: PrefixExp */
			reduce(101), /* -, reduce: PrefixExp */
			reduce(101), /* *, reduce: PrefixExp */
			reduce(101), /* /, reduce: PrefixExp */
			reduce(101), /* %, reduce: PrefixExp */
			reduce(101), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(101), /* ^, reduce: PrefixExp */
			reduce(101), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(101), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(101), /* string, reduce: PrefixExp */
			reduce(101), /* {, reduce: PrefixExp */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S709
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(97), /* ;, reduce: Var */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			reduce(97), /* until, reduce: Var */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(97), /* ,, reduce: Var */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			reduce(97), /* ., reduce: Var */
			reduce(97), /* :, reduce: Var */
			reduce(97), /* or, reduce: Var */
			reduce(97), /* and, reduce: Var */
			reduce(97), /* <, reduce: Var */
			reduce(97), /* <=, reduce: Var */
			reduce(97), /* >, reduce: Var */
			reduce(97), /* >=, reduce: Var */
			reduce(97), /* ==, reduce: Var */
			reduce(97), /* ~=, reduce: Var */
			reduce(97), /* |, reduce: Var */
			reduce(97), /* ~, reduce: Var */
			reduce(97), /* &, reduce: Var */
			reduce(97), /* .., reduce: Var */
			reduce(97), /* <<, reduce: Var */
			reduce(97), /* >>, reduce: Var */
			reduce(97), /* +, reduce: Var */
			reduce(97), /* -, reduce: Var */
			reduce(97), /* *, reduce: Var */
			reduce(97), /* /, reduce: Var */
			reduce(97), /* %, reduce: Var */
			reduce(97), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(97), /* ^, reduce: Var */
			reduce(97), /* [, reduce: Var */
			nil,        /* ] */
			reduce(97), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(97), /* string, reduce: Var */
			reduce(97), /* {, reduce: Var */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S710
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(53),  /* ;, reduce: ExpList */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			reduce(53),  /* until, reduce: ExpList */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(53),  /* ,, reduce: ExpList */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			shift(1087), /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S711
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1089), /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S712
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(100), /* ;, reduce: PrefixExp */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			reduce(100), /* until, reduce: PrefixExp */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(100), /* ,, reduce: PrefixExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(100), /* ., reduce: PrefixExp */
			reduce(100), /* :, reduce: PrefixExp */
			reduce(100), /* or, reduce: PrefixExp */
			reduce(100), /* and, reduce: PrefixExp */
			reduce(100), /* <, reduce: PrefixExp */
			reduce(100), /* <=, reduce: PrefixExp */
			reduce(100), /* >, reduce: PrefixExp */
			reduce(100), /* >=, reduce: PrefixExp */
			reduce(100), /* ==, reduce: PrefixExp */
			reduce(100), /* ~=, reduce: PrefixExp */
			reduce(100), /* |, reduce: PrefixExp */
			reduce(100), /* ~, reduce: PrefixExp */
			reduce(100), /* &, reduce: PrefixExp */
			reduce(100), /* .., reduce: PrefixExp */
			reduce(100), /* <<, reduce: PrefixExp */
			reduce(100), /* >>, reduce: PrefixExp */
			reduce(100), /* +, reduce: PrefixExp */
			reduce(100), /* -, reduce: PrefixExp */
			reduce(100), /* *, reduce: PrefixExp */
			reduce(100), /* /, reduce: PrefixExp */
			reduce(100), /* %, reduce: PrefixExp */
			reduce(100), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(100), /* ^, reduce: PrefixExp */
			reduce(100), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(100), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(100), /* string, reduce: PrefixExp */
			reduce(100), /* {, reduce: PrefixExp */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S713
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(55),  /* ;, reduce: Exp */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			reduce(55),  /* until, reduce: Exp */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(55),  /* ,, reduce: Exp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(55),  /* or, reduce: Exp */
			shift(1090), /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S714
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(57), /* ;, reduce: AndExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			reduce(57), /* until, reduce: AndExp */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(57), /* ,, reduce: AndExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(57), /* or, reduce: AndExp */
			reduce(57), /* and, reduce: AndExp */
			shift(203), /* < */
			shift(204), /* <= */
			shift(205), /* > */
			shift(206), /* >= */
			shift(207), /* == */
			shift(208), /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S715
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(65),  /* ;, reduce: CompExp */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			reduce(65),  /* until, reduce: CompExp */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(65),  /* ,, reduce: CompExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(65),  /* or, reduce: CompExp */
			reduce(65),  /* and, reduce: CompExp */
			reduce(65),  /* <, reduce: CompExp */
			reduce(65),  /* <=, reduce: CompExp */
			reduce(65),  /* >, reduce: CompExp */
			reduce(65),  /* >=, reduce: CompExp */
			reduce(65),  /* ==, reduce: CompExp */
			reduce(65),  /* ~=, reduce: CompExp */
			shift(1092), /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S716
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(67),  /* ;, reduce: BitOrExp */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			reduce(67),  /* until, reduce: BitOrExp */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(67),  /* ,, reduce: BitOrExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(67),  /* or, reduce: BitOrExp */
			reduce(67),  /* and, reduce: BitOrExp */
			reduce(67),  /* <, reduce: BitOrExp */
			reduce(67),  /* <=, reduce: BitOrExp */
			reduce(67),  /* >, reduce: BitOrExp */
			reduce(67),  /* >=, reduce: BitOrExp */
			reduce(67),  /* ==, reduce: BitOrExp */
			reduce(67),  /* ~=, reduce: BitOrExp */
			reduce(67),  /* |, reduce: BitOrExp */
			shift(1093), /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S717
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(69),  /* ;, reduce: BitXorExp */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			reduce(69),  /* until, reduce: BitXorExp */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(69),  /* ,, reduce: BitXorExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(69),  /* or, reduce: BitXorExp */
			reduce(69),  /* and, reduce: BitXorExp */
			reduce(69),  /* <, reduce: BitXorExp */
			reduce(69),  /* <=, reduce: BitXorExp */
			reduce(69),  /* >, reduce: BitXorExp */
			reduce(69),  /* >=, reduce: BitXorExp */
			reduce(69),  /* ==, reduce: BitXorExp */
			reduce(69),  /* ~=, reduce: BitXorExp */
			reduce(69),  /* |, reduce: BitXorExp */
			reduce(69),  /* ~, reduce: BitXorExp */
			shift(1094), /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S718
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(71),  /* ;, reduce: BitAndExp */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			reduce(71),  /* until, reduce: BitAndExp */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(71),  /* ,, reduce: BitAndExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(71),  /* or, reduce: BitAndExp */
			reduce(71),  /* and, reduce: BitAndExp */
			reduce(71),  /* <, reduce: BitAndExp */
			reduce(71),  /* <=, reduce: BitAndExp */
			reduce(71),  /* >, reduce: BitAndExp */
			reduce(71),  /* >=, reduce: BitAndExp */
			reduce(71),  /* ==, reduce: BitAndExp */
			reduce(71),  /* ~=, reduce: BitAndExp */
			reduce(71),  /* |, reduce: BitAndExp */
			reduce(71),  /* ~, reduce: BitAndExp */
			reduce(71),  /* &, reduce: BitAndExp */
			shift(1095), /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S719
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(73), /* ;, reduce: ConcatExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			reduce(73), /* until, reduce: ConcatExp */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(73), /* ,, reduce: ConcatExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(73), /* or, reduce: ConcatExp */
			reduce(73), /* and, reduce: ConcatExp */
			reduce(73), /* <, reduce: ConcatExp */
			reduce(73), /* <=, reduce: ConcatExp */
			reduce(73), /* >, reduce: ConcatExp */
			reduce(73), /* >=, reduce: ConcatExp */
			reduce(73), /* ==, reduce: ConcatExp */
			reduce(73), /* ~=, reduce: ConcatExp */
			reduce(73), /* |, reduce: ConcatExp */
			reduce(73), /* ~, reduce: ConcatExp */
			reduce(73), /* &, reduce: ConcatExp */
			reduce(73), /* .., reduce: ConcatExp */
			shift(214), /* << */
			shift(215), /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S720
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(77), /* ;, reduce: ShiftExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			reduce(77), /* until, reduce: ShiftExp */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(77), /* ,, reduce: ShiftExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(77), /* or, reduce: ShiftExp */
			reduce(77), /* and, reduce: ShiftExp */
			reduce(77), /* <, reduce: ShiftExp */
			reduce(77), /* <=, reduce: ShiftExp */
			reduce(77), /* >, reduce: ShiftExp */
			reduce(77), /* >=, reduce: ShiftExp */
			reduce(77), /* ==, reduce: ShiftExp */
			reduce(77), /* ~=, reduce: ShiftExp */
			reduce(77), /* |, reduce: ShiftExp */
			reduce(77), /* ~, reduce: ShiftExp */
			reduce(77), /* &, reduce: ShiftExp */
			reduce(77), /* .., reduce: ShiftExp */
			reduce(77), /* <<, reduce: ShiftExp */
			reduce(77), /* >>, reduce: ShiftExp */
			shift(217), /* + */
			shift(218), /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S721
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(81), /* ;, reduce: Sum */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			reduce(81), /* until, reduce: Sum */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(81), /* ,, reduce: Sum */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(81), /* or, reduce: Sum */
			reduce(81), /* and, reduce: Sum */
			reduce(81), /* <, reduce: Sum */
			reduce(81), /* <=, reduce: Sum */
			reduce(81), /* >, reduce: Sum */
			reduce(81), /* >=, reduce: Sum */
			reduce(81), /* ==, reduce: Sum */
			reduce(81), /* ~=, reduce: Sum */
			reduce(81), /* |, reduce: Sum */
			reduce(81), /* ~, reduce: Sum */
			reduce(81), /* &, reduce: Sum */
			reduce(81), /* .., reduce: Sum */
			reduce(81), /* <<, reduce: Sum */
			reduce(81), /* >>, reduce: Sum */
			reduce(81), /* +, reduce: Sum */
			reduce(81), /* -, reduce: Sum */
			shift(220), /* * */
			shift(221), /* / */
			shift(222), /* % */
			shift(223), /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S722
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(87), /* ;, reduce: Term */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			reduce(87), /* until, reduce: Term */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(87), /* ,, reduce: Term */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(87), /* or, reduce: Term */
			reduce(87), /* and, reduce: Term */
			reduce(87), /* <, reduce: Term */
			reduce(87), /* <=, reduce: Term */
			reduce(87), /* >, reduce: Term */
			reduce(87), /* >=, reduce: Term */
			reduce(87), /* ==, reduce: Term */
			reduce(87), /* ~=, reduce: Term */
			reduce(87), /* |, reduce: Term */
			reduce(87), /* ~, reduce: Term */
			reduce(87), /* &, reduce: Term */
			reduce(87), /* .., reduce: Term */
			reduce(87), /* <<, reduce: Term */
			reduce(87), /* >>, reduce: Term */
			reduce(87), /* +, reduce: Term */
			reduce(87), /* -, reduce: Term */
			reduce(87), /* *, reduce: Term */
			reduce(87), /* /, reduce: Term */
			reduce(87), /* %, reduce: Term */
			reduce(87), /* //, reduce: Term */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S723
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(711), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(727), /* ( */
			nil,        /* ) */
			shift(728), /* nil */
			shift(729), /* true */
			shift(730), /* false */
			shift(731), /* ... */
			shift(732), /* numdec */
			shift(733), /* numhex */
			shift(734), /* string */
			shift(737), /* { */
			nil,        /* } */
			shift(738), /* ident */
		},
	},
	actionRow{ // S724
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(94), /* ;, reduce: Factor */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			reduce(94), /* until, reduce: Factor */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(94), /* ,, reduce: Factor */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(94), /* or, reduce: Factor */
			reduce(94), /* and, reduce: Factor */
			reduce(94), /* <, reduce: Factor */
			reduce(94), /* <=, reduce: Factor */
			reduce(94), /* >, reduce: Factor */
			reduce(94), /* >=, reduce: Factor */
			reduce(94), /* ==, reduce: Factor */
			reduce(94), /* ~=, reduce: Factor */
			reduce(94), /* |, reduce: Factor */
			reduce(94), /* ~, reduce: Factor */
			reduce(94), /* &, reduce: Factor */
			reduce(94), /* .., reduce: Factor */
			reduce(94), /* <<, reduce: Factor */
			reduce(94), /* >>, reduce: Factor */
			reduce(94), /* +, reduce: Factor */
			reduce(94), /* -, reduce: Factor */
			reduce(94), /* *, reduce: Factor */
			reduce(94), /* /, reduce: Factor */
			reduce(94), /* %, reduce: Factor */
			reduce(94), /* //, reduce: Factor */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S725
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(95),  /* ;, reduce: Power */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			reduce(95),  /* until, reduce: Power */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(95),  /* ,, reduce: Power */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(95),  /* or, reduce: Power */
			reduce(95),  /* and, reduce: Power */
			reduce(95),  /* <, reduce: Power */
			reduce(95),  /* <=, reduce: Power */
			reduce(95),  /* >, reduce: Power */
			reduce(95),  /* >=, reduce: Power */
			reduce(95),  /* ==, reduce: Power */
			reduce(95),  /* ~=, reduce: Power */
			reduce(95),  /* |, reduce: Power */
			reduce(95),  /* ~, reduce: Power */
			reduce(95),  /* &, reduce: Power */
			reduce(95),  /* .., reduce: Power */
			reduce(95),  /* <<, reduce: Power */
			reduce(95),  /* >>, reduce: Power */
			reduce(95),  /* +, reduce: Power */
			reduce(95),  /* -, reduce: Power */
			reduce(95),  /* *, reduce: Power */
			reduce(95),  /* /, reduce: Power */
			reduce(95),  /* %, reduce: Power */
			reduce(95),  /* //, reduce: Power */
			nil,         /* not */
			nil,         /* # */
			shift(1100), /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S726
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(114), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			reduce(114), /* until, reduce: Atom */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(114), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			shift(1101), /* . */
			shift(1102), /* : */
			reduce(114), /* or, reduce: Atom */
			reduce(114), /* and, reduce: Atom */
			reduce(114), /* <, reduce: Atom */
			reduce(114), /* <=, reduce: Atom */
			reduce(114), /* >, reduce: Atom */
			reduce(114), /* >=, reduce: Atom */
			reduce(114), /* ==, reduce: Atom */
			reduce(114), /* ~=, reduce: Atom */
			reduce(114), /* |, reduce: Atom */
			reduce(114), /* ~, reduce: Atom */
			reduce(114), /* &, reduce: Atom */
			reduce(114), /* .., reduce: Atom */
			reduce(114), /* <<, reduce: Atom */
			reduce(114), /* >>, reduce: Atom */
			reduce(114), /* +, reduce: Atom */
			reduce(114), /* -, reduce: Atom */
			reduce(114), /* *, reduce: Atom */
			reduce(114), /* /, reduce: Atom */
			reduce(114), /* %, reduce: Atom */
			reduce(114), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(114), /* ^, reduce: Atom */
			shift(1103), /* [ */
			nil,         /* ] */
			shift(1104), /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			shift(1106), /* string */
			shift(1108), /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S727
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(168), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(184), /* ( */
			nil,        /* ) */
			shift(185), /* nil */
			shift(186), /* true */
			shift(187), /* false */
			shift(188), /* ... */
			shift(189), /* numdec */
			shift(190), /* numhex */
			shift(191), /* string */
			shift(194), /* { */
			nil,        /* } */
			shift(195), /* ident */
		},
	},
	actionRow{ // S728
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(105), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			reduce(105), /* until, reduce: Atom */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(105), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(105), /* or, reduce: Atom */
			reduce(105), /* and, reduce: Atom */
			reduce(105), /* <, reduce: Atom */
			reduce(105), /* <=, reduce: Atom */
			reduce(105), /* >, reduce: Atom */
			reduce(105), /* >=, reduce: Atom */
			reduce(105), /* ==, reduce: Atom */
			reduce(105), /* ~=, reduce: Atom */
			reduce(105), /* |, reduce: Atom */
			reduce(105), /* ~, reduce: Atom */
			reduce(105), /* &, reduce: Atom */
			reduce(105), /* .., reduce: Atom */
			reduce(105), /* <<, reduce: Atom */
			reduce(105), /* >>, reduce: Atom */
			reduce(105), /* +, reduce: Atom */
			reduce(105), /* -, reduce: Atom */
			reduce(105), /* *, reduce: Atom */
			reduce(105), /* /, reduce: Atom */
			reduce(105), /* %, reduce: Atom */
			reduce(105), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(105), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S729
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(106), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			reduce(106), /* until, reduce: Atom */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(106), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(106), /* or, reduce: Atom */
			reduce(106), /* and, reduce: Atom */
			reduce(106), /* <, reduce: Atom */
			reduce(106), /* <=, reduce: Atom */
			reduce(106), /* >, reduce: Atom */
			reduce(106), /* >=, reduce: Atom */
			reduce(106), /* ==, reduce: Atom */
			reduce(106), /* ~=, reduce: Atom */
			reduce(106), /* |, reduce: Atom */
			reduce(106), /* ~, reduce: Atom */
			reduce(106), /* &, reduce: Atom */
			reduce(106), /* .., reduce: Atom */
			reduce(106), /* <<, reduce: Atom */
			reduce(106), /* >>, reduce: Atom */
			reduce(106), /* +, reduce: Atom */
			reduce(106), /* -, reduce: Atom */
			reduce(106), /* *, reduce: Atom */
			reduce(106), /* /, reduce: Atom */
			reduce(106), /* %, reduce: Atom */
			reduce(106), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(106), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S730
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(107), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			reduce(107), /* until, reduce: Atom */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(107), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(107), /* or, reduce: Atom */
			reduce(107), /* and, reduce: Atom */
			reduce(107), /* <, reduce: Atom */
			reduce(107), /* <=, reduce: Atom */
			reduce(107), /* >, reduce: Atom */
			reduce(107), /* >=, reduce: Atom */
			reduce(107), /* ==, reduce: Atom */
			reduce(107), /* ~=, reduce: Atom */
			reduce(107), /* |, reduce: Atom */
			reduce(107), /* ~, reduce: Atom */
			reduce(107), /* &, reduce: Atom */
			reduce(107), /* .., reduce: Atom */
			reduce(107), /* <<, reduce: Atom */
			reduce(107), /* >>, reduce: Atom */
			reduce(107), /* +, reduce: Atom */
			reduce(107), /* -, reduce: Atom */
			reduce(107), /* *, reduce: Atom */
			reduce(107), /* /, reduce: Atom */
			reduce(107), /* %, reduce: Atom */
			reduce(107), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(107), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S731
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(108), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			reduce(108), /* until, reduce: Atom */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(108), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(108), /* or, reduce: Atom */
			reduce(108), /* and, reduce: Atom */
			reduce(108), /* <, reduce: Atom */
			reduce(108), /* <=, reduce: Atom */
			reduce(108), /* >, reduce: Atom */
			reduce(108), /* >=, reduce: Atom */
			reduce(108), /* ==, reduce: Atom */
			reduce(108), /* ~=, reduce: Atom */
			reduce(108), /* |, reduce: Atom */
			reduce(108), /* ~, reduce: Atom */
			reduce(108), /* &, reduce: Atom */
			reduce(108), /* .., reduce: Atom */
			reduce(108), /* <<, reduce: Atom */
			reduce(108), /* >>, reduce: Atom */
			reduce(108), /* +, reduce: Atom */
			reduce(108), /* -, reduce: Atom */
			reduce(108), /* *, reduce: Atom */
			reduce(108), /* /, reduce: Atom */
			reduce(108), /* %, reduce: Atom */
			reduce(108), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(108), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S732
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(109), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			reduce(109), /* until, reduce: Atom */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(109), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(109), /* or, reduce: Atom */
			reduce(109), /* and, reduce: Atom */
			reduce(109), /* <, reduce: Atom */
			reduce(109), /* <=, reduce: Atom */
			reduce(109), /* >, reduce: Atom */
			reduce(109), /* >=, reduce: Atom */
			reduce(109), /* ==, reduce: Atom */
			reduce(109), /* ~=, reduce: Atom */
			reduce(109), /* |, reduce: Atom */
			reduce(109), /* ~, reduce: Atom */
			reduce(109), /* &, reduce: Atom */
			reduce(109), /* .., reduce: Atom */
			reduce(109), /* <<, reduce: Atom */
			reduce(109), /* >>, reduce: Atom */
			reduce(109), /* +, reduce: Atom */
			reduce(109), /* -, reduce: Atom */
			reduce(109), /* *, reduce: Atom */
			reduce(109), /* /, reduce: Atom */
			reduce(109), /* %, reduce: Atom */
			reduce(109), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(109), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S733
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(110), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			reduce(110), /* until, reduce: Atom */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(110), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(110), /* or, reduce: Atom */
			reduce(110), /* and, reduce: Atom */
			reduce(110), /* <, reduce: Atom */
			reduce(110), /* <=, reduce: Atom */
			reduce(110), /* >, reduce: Atom */
			reduce(110), /* >=, reduce: Atom */
			reduce(110), /* ==, reduce: Atom */
			reduce(110), /* ~=, reduce: Atom */
			reduce(110), /* |, reduce: Atom */
			reduce(110), /* ~, reduce: Atom */
			reduce(110), /* &, reduce: Atom */
			reduce(110), /* .., reduce: Atom */
			reduce(110), /* <<, reduce: Atom */
			reduce(110), /* >>, reduce: Atom */
			reduce(110), /* +, reduce: Atom */
			reduce(110), /* -, reduce: Atom */
			reduce(110), /* *, reduce: Atom */
			reduce(110), /* /, reduce: Atom */
			reduce(110), /* %, reduce: Atom */
			reduce(110), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(110), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S734
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(111), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			reduce(111), /* until, reduce: Atom */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(111), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(111), /* or, reduce: Atom */
			reduce(111), /* and, reduce: Atom */
			reduce(111), /* <, reduce: Atom */
			reduce(111), /* <=, reduce: Atom */
			reduce(111), /* >, reduce: Atom */
			reduce(111), /* >=, reduce: Atom */
			reduce(111), /* ==, reduce: Atom */
			reduce(111), /* ~=, reduce: Atom */
			reduce(111), /* |, reduce: Atom */
			reduce(111), /* ~, reduce: Atom */
			reduce(111), /* &, reduce: Atom */
			reduce(111), /* .., reduce: Atom */
			reduce(111), /* <<, reduce: Atom */
			reduce(111), /* >>, reduce: Atom */
			reduce(111), /* +, reduce: Atom */
			reduce(111), /* -, reduce: Atom */
			reduce(111), /* *, reduce: Atom */
			reduce(111), /* /, reduce: Atom */
			reduce(111), /* %, reduce: Atom */
			reduce(111), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(111), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S735
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(112), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			reduce(112), /* until, reduce: Atom */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(112), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(112), /* or, reduce: Atom */
			reduce(112), /* and, reduce: Atom */
			reduce(112), /* <, reduce: Atom */
			reduce(112), /* <=, reduce: Atom */
			reduce(112), /* >, reduce: Atom */
			reduce(112), /* >=, reduce: Atom */
			reduce(112), /* ==, reduce: Atom */
			reduce(112), /* ~=, reduce: Atom */
			reduce(112), /* |, reduce: Atom */
			reduce(112), /* ~, reduce: Atom */
			reduce(112), /* &, reduce: Atom */
			reduce(112), /* .., reduce: Atom */
			reduce(112), /* <<, reduce: Atom */
			reduce(112), /* >>, reduce: Atom */
			reduce(112), /* +, reduce: Atom */
			reduce(112), /* -, reduce: Atom */
			reduce(112), /* *, reduce: Atom */
			reduce(112), /* /, reduce: Atom */
			reduce(112), /* %, reduce: Atom */
			reduce(112), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(112), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S736
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(113), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			reduce(113), /* until, reduce: Atom */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(113), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(113), /* or, reduce: Atom */
			reduce(113), /* and, reduce: Atom */
			reduce(113), /* <, reduce: Atom */
			reduce(113), /* <=, reduce: Atom */
			reduce(113), /* >, reduce: Atom */
			reduce(113), /* >=, reduce: Atom */
			reduce(113), /* ==, reduce: Atom */
			reduce(113), /* ~=, reduce: Atom */
			reduce(113), /* |, reduce: Atom */
			reduce(113), /* ~, reduce: Atom */
			reduce(113), /* &, reduce: Atom */
			reduce(113), /* .., reduce: Atom */
			reduce(113), /* <<, reduce: Atom */
			reduce(113), /* >>, reduce: Atom */
			reduce(113), /* +, reduce: Atom */
			reduce(113), /* -, reduce: Atom */
			reduce(113), /* *, reduce: Atom */
			reduce(113), /* /, reduce: Atom */
			reduce(113), /* %, reduce: Atom */
			reduce(113), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(113), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S737
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			shift(254), /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(268), /* ident */
		},
	},
	actionRow{ // S738
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(134), /* ;, reduce: Name */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			reduce(134), /* until, reduce: Name */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(134), /* ,, reduce: Name */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(134), /* ., reduce: Name */
			reduce(134), /* :, reduce: Name */
			reduce(134), /* or, reduce: Name */
			reduce(134), /* and, reduce: Name */
			reduce(134), /* <, reduce: Name */
			reduce(134), /* <=, reduce: Name */
			reduce(134), /* >, reduce: Name */
			reduce(134), /* >=, reduce: Name */
			reduce(134), /* ==, reduce: Name */
			reduce(134), /* ~=, reduce: Name */
			reduce(134), /* |, reduce: Name */
			reduce(134), /* ~, reduce: Name */
			reduce(134), /* &, reduce: Name */
			reduce(134), /* .., reduce: Name */
			reduce(134), /* <<, reduce: Name */
			reduce(134), /* >>, reduce: Name */
			reduce(134), /* +, reduce: Name */
			reduce(134), /* -, reduce: Name */
			reduce(134), /* *, reduce: Name */
			reduce(134), /* /, reduce: Name */
			reduce(134), /* %, reduce: Name */
			reduce(134), /* //, reduce: Name */
			nil,         /* not */
			nil,         /* # */
			reduce(134), /* ^, reduce: Name */
			reduce(134), /* [, reduce: Name */
			nil,         /* ] */
			reduce(134), /* (, reduce: Name */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(134), /* string, reduce: Name */
			reduce(134), /* {, reduce: Name */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S739
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(10), /* return, reduce: Stat */
			reduce(10), /* ;, reduce: Stat */
			nil,        /* empty */
			nil,        /* = */
			reduce(10), /* break, reduce: Stat */
			reduce(10), /* goto, reduce: Stat */
			reduce(10), /* do, reduce: Stat */
			nil,        /* end */
			reduce(10), /* while, reduce: Stat */
			reduce(10), /* repeat, reduce: Stat */
			reduce(10), /* until, reduce: Stat */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(10), /* if, reduce: Stat */
			nil,        /* , */
			reduce(10), /* for, reduce: Stat */
			nil,        /* in */
			reduce(10), /* function, reduce: Stat */
			reduce(10), /* local, reduce: Stat */
			reduce(10), /* ::, reduce: Stat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(10), /* (, reduce: Stat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(10), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S740
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1115), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1131), /* ( */
			nil,         /* ) */
			shift(1132), /* nil */
			shift(1133), /* true */
			shift(1134), /* false */
			shift(1135), /* ... */
			shift(1136), /* numdec */
			shift(1137), /* numhex */
			shift(1138), /* string */
			shift(1141), /* { */
			nil,         /* } */
			shift(1142), /* ident */
		},
	},
	actionRow{ // S741
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(25), /* return, reduce: GotoStat */
			reduce(25), /* ;, reduce: GotoStat */
			nil,        /* empty */
			nil,        /* = */
			reduce(25), /* break, reduce: GotoStat */
			reduce(25), /* goto, reduce: GotoStat */
			reduce(25), /* do, reduce: GotoStat */
			nil,        /* end */
			reduce(25), /* while, reduce: GotoStat */
			reduce(25), /* repeat, reduce: GotoStat */
			reduce(25), /* until, reduce: GotoStat */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(25), /* if, reduce: GotoStat */
			nil,        /* , */
			reduce(25), /* for, reduce: GotoStat */
			nil,        /* in */
			reduce(25), /* function, reduce: GotoStat */
			reduce(25), /* local, reduce: GotoStat */
			reduce(25), /* ::, reduce: GotoStat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(25), /* (, reduce: GotoStat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(25), /* ident, reduce: GotoStat */
		},
	},
	actionRow{ // S742
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(134), /* return, reduce: Name */
			reduce(134), /* ;, reduce: Name */
			nil,         /* empty */
			nil,         /* = */
			reduce(134), /* break, reduce: Name */
			reduce(134), /* goto, reduce: Name */
			reduce(134), /* do, reduce: Name */
			nil,         /* end */
			reduce(134), /* while, reduce: Name */
			reduce(134), /* repeat, reduce: Name */
			reduce(134), /* until, reduce: Name */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(134), /* if, reduce: Name */
			nil,         /* , */
			reduce(134), /* for, reduce: Name */
			nil,         /* in */
			reduce(134), /* function, reduce: Name */
			reduce(134), /* local, reduce: Name */
			reduce(134), /* ::, reduce: Name */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(134), /* (, reduce: Name */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(134), /* ident, reduce: Name */
		},
	},
	actionRow{ // S743
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(1143), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S744
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			shift(1144), /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			shift(334),  /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S745
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			shift(1145), /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S746
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			shift(1146), /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			shift(388),  /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S747
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			shift(1147), /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(51),  /* ,, reduce: NameList */
			nil,         /* for */
			reduce(51),  /* in, reduce: NameList */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S748
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(413),  /* , */
			nil,         /* for */
			shift(1148), /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S749
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1150), /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S750
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(51), /* return, reduce: NameList */
			reduce(51), /* ;, reduce: NameList */
			nil,        /* empty */
			reduce(51), /* =, reduce: NameList */
			reduce(51), /* break, reduce: NameList */
			reduce(51), /* goto, reduce: NameList */
			reduce(51), /* do, reduce: NameList */
			nil,        /* end */
			reduce(51), /* while, reduce: NameList */
			reduce(51), /* repeat, reduce: NameList */
			reduce(51), /* until, reduce: NameList */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(51), /* if, reduce: NameList */
			reduce(51), /* ,, reduce: NameList */
			reduce(51), /* for, reduce: NameList */
			nil,        /* in */
			reduce(51), /* function, reduce: NameList */
			reduce(51), /* local, reduce: NameList */
			reduce(51), /* ::, reduce: NameList */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(51), /* (, reduce: NameList */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(51), /* ident, reduce: NameList */
		},
	},
	actionRow{ // S751
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(42),  /* return, reduce: LocalStat */
			reduce(42),  /* ;, reduce: LocalStat */
			nil,         /* empty */
			shift(1151), /* = */
			reduce(42),  /* break, reduce: LocalStat */
			reduce(42),  /* goto, reduce: LocalStat */
			reduce(42),  /* do, reduce: LocalStat */
			nil,         /* end */
			reduce(42),  /* while, reduce: LocalStat */
			reduce(42),  /* repeat, reduce: LocalStat */
			reduce(42),  /* until, reduce: LocalStat */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(42),  /* if, reduce: LocalStat */
			shift(1152), /* , */
			reduce(42),  /* for, reduce: LocalStat */
			nil,         /* in */
			reduce(42),  /* function, reduce: LocalStat */
			reduce(42),  /* local, reduce: LocalStat */
			reduce(42),  /* ::, reduce: LocalStat */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(42),  /* (, reduce: LocalStat */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(42),  /* ident, reduce: LocalStat */
		},
	},
	actionRow{ // S752
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(422), /* ident */
		},
	},
	actionRow{ // S753
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(134), /* return, reduce: Name */
			reduce(134), /* ;, reduce: Name */
			nil,         /* empty */
			reduce(134), /* =, reduce: Name */
			reduce(134), /* break, reduce: Name */
			reduce(134), /* goto, reduce: Name */
			reduce(134), /* do, reduce: Name */
			nil,         /* end */
			reduce(134), /* while, reduce: Name */
			reduce(134), /* repeat, reduce: Name */
			reduce(134), /* until, reduce: Name */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(134), /* if, reduce: Name */
			reduce(134), /* ,, reduce: Name */
			reduce(134), /* for, reduce: Name */
			nil,         /* in */
			reduce(134), /* function, reduce: Name */
			reduce(134), /* local, reduce: Name */
			reduce(134), /* ::, reduce: Name */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(134), /* (, reduce: Name */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(134), /* ident, reduce: Name */
		},
	},
	actionRow{ // S754
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			shift(1154), /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S755
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(1155), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			shift(1156), /* elseif */
			shift(1158), /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S756
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			shift(1159), /* return */
			shift(1160), /* ; */
			nil,         /* empty */
			nil,         /* = */
			shift(1177), /* break */
			shift(1178), /* goto */
			shift(1179), /* do */
			reduce(5),   /* end, reduce: Chunk */
			shift(1180), /* while */
			shift(1181), /* repeat */
			nil,         /* until */
			nil,         /* then */
			reduce(5),   /* elseif, reduce: Chunk */
			reduce(5),   /* else, reduce: Chunk */
			shift(1182), /* if */
			nil,         /* , */
			shift(1183), /* for */
			nil,         /* in */
			shift(1184), /* function */
			shift(1185), /* local */
			shift(1186), /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(34),   /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			shift(35),   /* ident */
		},
	},
	actionRow{ // S757
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			reduce(56), /* then, reduce: Exp */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(56), /* or, reduce: Exp */
			shift(391), /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S758
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(1187), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S759
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			reduce(58), /* then, reduce: AndExp */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(58), /* or, reduce: AndExp */
			reduce(58), /* and, reduce: AndExp */
			shift(203), /* < */
			shift(204), /* <= */
			shift(205), /* > */
			shift(206), /* >= */
			shift(207), /* == */
			shift(208), /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S760
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			reduce(66), /* then, reduce: CompExp */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(66), /* or, reduce: CompExp */
			reduce(66), /* and, reduce: CompExp */
			reduce(66), /* <, reduce: CompExp */
			reduce(66), /* <=, reduce: CompExp */
			reduce(66), /* >, reduce: CompExp */
			reduce(66), /* >=, reduce: CompExp */
			reduce(66), /* ==, reduce: CompExp */
			reduce(66), /* ~=, reduce: CompExp */
			shift(393), /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S761
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			reduce(68), /* then, reduce: BitOrExp */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(68), /* or, reduce: BitOrExp */
			reduce(68), /* and, reduce: BitOrExp */
			reduce(68), /* <, reduce: BitOrExp */
			reduce(68), /* <=, reduce: BitOrExp */
			reduce(68), /* >, reduce: BitOrExp */
			reduce(68), /* >=, reduce: BitOrExp */
			reduce(68), /* ==, reduce: BitOrExp */
			reduce(68), /* ~=, reduce: BitOrExp */
			reduce(68), /* |, reduce: BitOrExp */
			shift(394), /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S762
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			reduce(70), /* then, reduce: BitXorExp */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(70), /* or, reduce: BitXorExp */
			reduce(70), /* and, reduce: BitXorExp */
			reduce(70), /* <, reduce: BitXorExp */
			reduce(70), /* <=, reduce: BitXorExp */
			reduce(70), /* >, reduce: BitXorExp */
			reduce(70), /* >=, reduce: BitXorExp */
			reduce(70), /* ==, reduce: BitXorExp */
			reduce(70), /* ~=, reduce: BitXorExp */
			reduce(70), /* |, reduce: BitXorExp */
			reduce(70), /* ~, reduce: BitXorExp */
			shift(395), /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S763
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			reduce(72), /* then, reduce: BitAndExp */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(72), /* or, reduce: BitAndExp */
			reduce(72), /* and, reduce: BitAndExp */
			reduce(72), /* <, reduce: BitAndExp */
			reduce(72), /* <=, reduce: BitAndExp */
			reduce(72), /* >, reduce: BitAndExp */
			reduce(72), /* >=, reduce: BitAndExp */
			reduce(72), /* ==, reduce: BitAndExp */
			reduce(72), /* ~=, reduce: BitAndExp */
			reduce(72), /* |, reduce: BitAndExp */
			reduce(72), /* ~, reduce: BitAndExp */
			reduce(72), /* &, reduce: BitAndExp */
			shift(396), /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S764
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			reduce(74), /* then, reduce: ConcatExp */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(74), /* or, reduce: ConcatExp */
			reduce(74), /* and, reduce: ConcatExp */
			reduce(74), /* <, reduce: ConcatExp */
			reduce(74), /* <=, reduce: ConcatExp */
			reduce(74), /* >, reduce: ConcatExp */
			reduce(74), /* >=, reduce: ConcatExp */
			reduce(74), /* ==, reduce: ConcatExp */
			reduce(74), /* ~=, reduce: ConcatExp */
			reduce(74), /* |, reduce: ConcatExp */
			reduce(74), /* ~, reduce: ConcatExp */
			reduce(74), /* &, reduce: ConcatExp */
			reduce(74), /* .., reduce: ConcatExp */
			shift(214), /* << */
			shift(215), /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S765
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			reduce(78), /* then, reduce: ShiftExp */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(78), /* or, reduce: ShiftExp */
			reduce(78), /* and, reduce: ShiftExp */
			reduce(78), /* <, reduce: ShiftExp */
			reduce(78), /* <=, reduce: ShiftExp */
			reduce(78), /* >, reduce: ShiftExp */
			reduce(78), /* >=, reduce: ShiftExp */
			reduce(78), /* ==, reduce: ShiftExp */
			reduce(78), /* ~=, reduce: ShiftExp */
			reduce(78), /* |, reduce: ShiftExp */
			reduce(78), /* ~, reduce: ShiftExp */
			reduce(78), /* &, reduce: ShiftExp */
			reduce(78), /* .., reduce: ShiftExp */
			reduce(78), /* <<, reduce: ShiftExp */
			reduce(78), /* >>, reduce: ShiftExp */
			shift(217), /* + */
			shift(218), /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S766
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			reduce(82), /* then, reduce: Sum */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(82), /* or, reduce: Sum */
			reduce(82), /* and, reduce: Sum */
			reduce(82), /* <, reduce: Sum */
			reduce(82), /* <=, reduce: Sum */
			reduce(82), /* >, reduce: Sum */
			reduce(82), /* >=, reduce: Sum */
			reduce(82), /* ==, reduce: Sum */
			reduce(82), /* ~=, reduce: Sum */
			reduce(82), /* |, reduce: Sum */
			reduce(82), /* ~, reduce: Sum */
			reduce(82), /* &, reduce: Sum */
			reduce(82), /* .., reduce: Sum */
			reduce(82), /* <<, reduce: Sum */
			reduce(82), /* >>, reduce: Sum */
			reduce(82), /* +, reduce: Sum */
			reduce(82), /* -, reduce: Sum */
			shift(220), /* * */
			shift(221), /* / */
			shift(222), /* % */
			shift(223), /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S767
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			reduce(88), /* then, reduce: Term */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(88), /* or, reduce: Term */
			reduce(88), /* and, reduce: Term */
			reduce(88), /* <, reduce: Term */
			reduce(88), /* <=, reduce: Term */
			reduce(88), /* >, reduce: Term */
			reduce(88), /* >=, reduce: Term */
			reduce(88), /* ==, reduce: Term */
			reduce(88), /* ~=, reduce: Term */
			reduce(88), /* |, reduce: Term */
			reduce(88), /* ~, reduce: Term */
			reduce(88), /* &, reduce: Term */
			reduce(88), /* .., reduce: Term */
			reduce(88), /* <<, reduce: Term */
			reduce(88), /* >>, reduce: Term */
			reduce(88), /* +, reduce: Term */
			reduce(88), /* -, reduce: Term */
			reduce(88), /* *, reduce: Term */
			reduce(88), /* /, reduce: Term */
			reduce(88), /* %, reduce: Term */
			reduce(88), /* //, reduce: Term */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S768
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			reduce(96), /* then, reduce: Power */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(96), /* or, reduce: Power */
			reduce(96), /* and, reduce: Power */
			reduce(96), /* <, reduce: Power */
			reduce(96), /* <=, reduce: Power */
			reduce(96), /* >, reduce: Power */
			reduce(96), /* >=, reduce: Power */
			reduce(96), /* ==, reduce: Power */
			reduce(96), /* ~=, reduce: Power */
			reduce(96), /* |, reduce: Power */
			reduce(96), /* ~, reduce: Power */
			reduce(96), /* &, reduce: Power */
			reduce(96), /* .., reduce: Power */
			reduce(96), /* <<, reduce: Power */
			reduce(96), /* >>, reduce: Power */
			reduce(96), /* +, reduce: Power */
			reduce(96), /* -, reduce: Power */
			reduce(96), /* *, reduce: Power */
			reduce(96), /* /, reduce: Power */
			reduce(96), /* %, reduce: Power */
			reduce(96), /* //, reduce: Power */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S769
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			reduce(99), /* then, reduce: Var */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			reduce(99), /* ., reduce: Var */
			reduce(99), /* :, reduce: Var */
			reduce(99), /* or, reduce: Var */
			reduce(99), /* and, reduce: Var */
			reduce(99), /* <, reduce: Var */
			reduce(99), /* <=, reduce: Var */
			reduce(99), /* >, reduce: Var */
			reduce(99), /* >=, reduce: Var */
			reduce(99), /* ==, reduce: Var */
			reduce(99), /* ~=, reduce: Var */
			reduce(99), /* |, reduce: Var */
			reduce(99), /* ~, reduce: Var */
			reduce(99), /* &, reduce: Var */
			reduce(99), /* .., reduce: Var */
			reduce(99), /* <<, reduce: Var */
			reduce(99), /* >>, reduce: Var */
			reduce(99), /* +, reduce: Var */
			reduce(99), /* -, reduce: Var */
			reduce(99), /* *, reduce: Var */
			reduce(99), /* /, reduce: Var */
			reduce(99), /* %, reduce: Var */
			reduce(99), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(99), /* ^, reduce: Var */
			reduce(99), /* [, reduce: Var */
			nil,        /* ] */
			reduce(99), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(99), /* string, reduce: Var */
			reduce(99), /* {, reduce: Var */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S770
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(405), /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			shift(407), /* string */
			shift(409), /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S771
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			shift(851),  /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			shift(1189), /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S772
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(876),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(1190), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S773
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			reduce(115), /* then, reduce: Args */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(115), /* ., reduce: Args */
			reduce(115), /* :, reduce: Args */
			reduce(115), /* or, reduce: Args */
			reduce(115), /* and, reduce: Args */
			reduce(115), /* <, reduce: Args */
			reduce(115), /* <=, reduce: Args */
			reduce(115), /* >, reduce: Args */
			reduce(115), /* >=, reduce: Args */
			reduce(115), /* ==, reduce: Args */
			reduce(115), /* ~=, reduce: Args */
			reduce(115), /* |, reduce: Args */
			reduce(115), /* ~, reduce: Args */
			reduce(115), /* &, reduce: Args */
			reduce(115), /* .., reduce: Args */
			reduce(115), /* <<, reduce: Args */
			reduce(115), /* >>, reduce: Args */
			reduce(115), /* +, reduce: Args */
			reduce(115), /* -, reduce: Args */
			reduce(115), /* *, reduce: Args */
			reduce(115), /* /, reduce: Args */
			reduce(115), /* %, reduce: Args */
			reduce(115), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(115), /* ^, reduce: Args */
			reduce(115), /* [, reduce: Args */
			nil,         /* ] */
			reduce(115), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(115), /* string, reduce: Args */
			reduce(115), /* {, reduce: Args */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S774
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			shift(569),  /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(570),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			shift(1191), /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S775
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			reduce(102), /* then, reduce: PrefixExp */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(102), /* ., reduce: PrefixExp */
			reduce(102), /* :, reduce: PrefixExp */
			reduce(102), /* or, reduce: PrefixExp */
			reduce(102), /* and, reduce: PrefixExp */
			reduce(102), /* <, reduce: PrefixExp */
			reduce(102), /* <=, reduce: PrefixExp */
			reduce(102), /* >, reduce: PrefixExp */
			reduce(102), /* >=, reduce: PrefixExp */
			reduce(102), /* ==, reduce: PrefixExp */
			reduce(102), /* ~=, reduce: PrefixExp */
			reduce(102), /* |, reduce: PrefixExp */
			reduce(102), /* ~, reduce: PrefixExp */
			reduce(102), /* &, reduce: PrefixExp */
			reduce(102), /* .., reduce: PrefixExp */
			reduce(102), /* <<, reduce: PrefixExp */
			reduce(102), /* >>, reduce: PrefixExp */
			reduce(102), /* +, reduce: PrefixExp */
			reduce(102), /* -, reduce: PrefixExp */
			reduce(102), /* *, reduce: PrefixExp */
			reduce(102), /* /, reduce: PrefixExp */
			reduce(102), /* %, reduce: PrefixExp */
			reduce(102), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(102), /* ^, reduce: PrefixExp */
			reduce(102), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(102), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(102), /* string, reduce: PrefixExp */
			reduce(102), /* {, reduce: PrefixExp */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S776
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			reduce(125), /* then, reduce: TableConstructor */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(125), /* or, reduce: TableConstructor */
			reduce(125), /* and, reduce: TableConstructor */
			reduce(125), /* <, reduce: TableConstructor */
			reduce(125), /* <=, reduce: TableConstructor */
			reduce(125), /* >, reduce: TableConstructor */
			reduce(125), /* >=, reduce: TableConstructor */
			reduce(125), /* ==, reduce: TableConstructor */
			reduce(125), /* ~=, reduce: TableConstructor */
			reduce(125), /* |, reduce: TableConstructor */
			reduce(125), /* ~, reduce: TableConstructor */
			reduce(125), /* &, reduce: TableConstructor */
			reduce(125), /* .., reduce: TableConstructor */
			reduce(125), /* <<, reduce: TableConstructor */
			reduce(125), /* >>, reduce: TableConstructor */
			reduce(125), /* +, reduce: TableConstructor */
			reduce(125), /* -, reduce: TableConstructor */
			reduce(125), /* *, reduce: TableConstructor */
			reduce(125), /* /, reduce: TableConstructor */
			reduce(125), /* %, reduce: TableConstructor */
			reduce(125), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(125), /* ^, reduce: TableConstructor */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S777
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(238),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			shift(254),  /* [ */
			nil,         /* ] */
			shift(255),  /* ( */
			nil,         /* ) */
			shift(256),  /* nil */
			shift(257),  /* true */
			shift(258),  /* false */
			shift(259),  /* ... */
			shift(260),  /* numdec */
			shift(261),  /* numhex */
			shift(262),  /* string */
			shift(265),  /* { */
			shift(1193), /* } */
			shift(268),  /* ident */
		},
	},
	actionRow{ // S778
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(101), /* ,, reduce: PrefixExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(101), /* ., reduce: PrefixExp */
			reduce(101), /* :, reduce: PrefixExp */
			reduce(101), /* or, reduce: PrefixExp */
			reduce(101), /* and, reduce: PrefixExp */
			reduce(101), /* <, reduce: PrefixExp */
			reduce(101), /* <=, reduce: PrefixExp */
			reduce(101), /* >, reduce: PrefixExp */
			reduce(101), /* >=, reduce: PrefixExp */
			reduce(101), /* ==, reduce: PrefixExp */
			reduce(101), /* ~=, reduce: PrefixExp */
			reduce(101), /* |, reduce: PrefixExp */
			reduce(101), /* ~, reduce: PrefixExp */
			reduce(101), /* &, reduce: PrefixExp */
			reduce(101), /* .., reduce: PrefixExp */
			reduce(101), /* <<, reduce: PrefixExp */
			reduce(101), /* >>, reduce: PrefixExp */
			reduce(101), /* +, reduce: PrefixExp */
			reduce(101), /* -, reduce: PrefixExp */
			reduce(101), /* *, reduce: PrefixExp */
			reduce(101), /* /, reduce: PrefixExp */
			reduce(101), /* %, reduce: PrefixExp */
			reduce(101), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(101), /* ^, reduce: PrefixExp */
			reduce(101), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(101), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(101), /* string, reduce: PrefixExp */
			reduce(101), /* {, reduce: PrefixExp */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S779
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(97), /* ,, reduce: Var */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			reduce(97), /* ., reduce: Var */
			reduce(97), /* :, reduce: Var */
			reduce(97), /* or, reduce: Var */
			reduce(97), /* and, reduce: Var */
			reduce(97), /* <, reduce: Var */
			reduce(97), /* <=, reduce: Var */
			reduce(97), /* >, reduce: Var */
			reduce(97), /* >=, reduce: Var */
			reduce(97), /* ==, reduce: Var */
			reduce(97), /* ~=, reduce: Var */
			reduce(97), /* |, reduce: Var */
			reduce(97), /* ~, reduce: Var */
			reduce(97), /* &, reduce: Var */
			reduce(97), /* .., reduce: Var */
			reduce(97), /* <<, reduce: Var */
			reduce(97), /* >>, reduce: Var */
			reduce(97), /* +, reduce: Var */
			reduce(97), /* -, reduce: Var */
			reduce(97), /* *, reduce: Var */
			reduce(97), /* /, reduce: Var */
			reduce(97), /* %, reduce: Var */
			reduce(97), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(97), /* ^, reduce: Var */
			reduce(97), /* [, reduce: Var */
			nil,        /* ] */
			reduce(97), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(97), /* string, reduce: Var */
			reduce(97), /* {, reduce: Var */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S780
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(1194), /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			shift(1195), /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S781
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			shift(1196), /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S782
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1198), /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S783
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(100), /* ,, reduce: PrefixExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(100), /* ., reduce: PrefixExp */
			reduce(100), /* :, reduce: PrefixExp */
			reduce(100), /* or, reduce: PrefixExp */
			reduce(100), /* and, reduce: PrefixExp */
			reduce(100), /* <, reduce: PrefixExp */
			reduce(100), /* <=, reduce: PrefixExp */
			reduce(100), /* >, reduce: PrefixExp */
			reduce(100), /* >=, reduce: PrefixExp */
			reduce(100), /* ==, reduce: PrefixExp */
			reduce(100), /* ~=, reduce: PrefixExp */
			reduce(100), /* |, reduce: PrefixExp */
			reduce(100), /* ~, reduce: PrefixExp */
			reduce(100), /* &, reduce: PrefixExp */
			reduce(100), /* .., reduce: PrefixExp */
			reduce(100), /* <<, reduce: PrefixExp */
			reduce(100), /* >>, reduce: PrefixExp */
			reduce(100), /* +, reduce: PrefixExp */
			reduce(100), /* -, reduce: PrefixExp */
			reduce(100), /* *, reduce: PrefixExp */
			reduce(100), /* /, reduce: PrefixExp */
			reduce(100), /* %, reduce: PrefixExp */
			reduce(100), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(100), /* ^, reduce: PrefixExp */
			reduce(100), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(100), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(100), /* string, reduce: PrefixExp */
			reduce(100), /* {, reduce: PrefixExp */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S784
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(55),  /* ,, reduce: Exp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(55),  /* or, reduce: Exp */
			shift(1199), /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S785
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(57), /* ,, reduce: AndExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(57), /* or, reduce: AndExp */
			reduce(57), /* and, reduce: AndExp */
			shift(203), /* < */
			shift(204), /* <= */
			shift(205), /* > */
			shift(206), /* >= */
			shift(207), /* == */
			shift(208), /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S786
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(65),  /* ,, reduce: CompExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(65),  /* or, reduce: CompExp */
			reduce(65),  /* and, reduce: CompExp */
			reduce(65),  /* <, reduce: CompExp */
			reduce(65),  /* <=, reduce: CompExp */
			reduce(65),  /* >, reduce: CompExp */
			reduce(65),  /* >=, reduce: CompExp */
			reduce(65),  /* ==, reduce: CompExp */
			reduce(65),  /* ~=, reduce: CompExp */
			shift(1201), /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S787
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(67),  /* ,, reduce: BitOrExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(67),  /* or, reduce: BitOrExp */
			reduce(67),  /* and, reduce: BitOrExp */
			reduce(67),  /* <, reduce: BitOrExp */
			reduce(67),  /* <=, reduce: BitOrExp */
			reduce(67),  /* >, reduce: BitOrExp */
			reduce(67),  /* >=, reduce: BitOrExp */
			reduce(67),  /* ==, reduce: BitOrExp */
			reduce(67),  /* ~=, reduce: BitOrExp */
			reduce(67),  /* |, reduce: BitOrExp */
			shift(1202), /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S788
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(69),  /* ,, reduce: BitXorExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(69),  /* or, reduce: BitXorExp */
			reduce(69),  /* and, reduce: BitXorExp */
			reduce(69),  /* <, reduce: BitXorExp */
			reduce(69),  /* <=, reduce: BitXorExp */
			reduce(69),  /* >, reduce: BitXorExp */
			reduce(69),  /* >=, reduce: BitXorExp */
			reduce(69),  /* ==, reduce: BitXorExp */
			reduce(69),  /* ~=, reduce: BitXorExp */
			reduce(69),  /* |, reduce: BitXorExp */
			reduce(69),  /* ~, reduce: BitXorExp */
			shift(1203), /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S789
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(71),  /* ,, reduce: BitAndExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(71),  /* or, reduce: BitAndExp */
			reduce(71),  /* and, reduce: BitAndExp */
			reduce(71),  /* <, reduce: BitAndExp */
			reduce(71),  /* <=, reduce: BitAndExp */
			reduce(71),  /* >, reduce: BitAndExp */
			reduce(71),  /* >=, reduce: BitAndExp */
			reduce(71),  /* ==, reduce: BitAndExp */
			reduce(71),  /* ~=, reduce: BitAndExp */
			reduce(71),  /* |, reduce: BitAndExp */
			reduce(71),  /* ~, reduce: BitAndExp */
			reduce(71),  /* &, reduce: BitAndExp */
			shift(1204), /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S790
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(73), /* ,, reduce: ConcatExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(73), /* or, reduce: ConcatExp */
			reduce(73), /* and, reduce: ConcatExp */
			reduce(73), /* <, reduce: ConcatExp */
			reduce(73), /* <=, reduce: ConcatExp */
			reduce(73), /* >, reduce: ConcatExp */
			reduce(73), /* >=, reduce: ConcatExp */
			reduce(73), /* ==, reduce: ConcatExp */
			reduce(73), /* ~=, reduce: ConcatExp */
			reduce(73), /* |, reduce: ConcatExp */
			reduce(73), /* ~, reduce: ConcatExp */
			reduce(73), /* &, reduce: ConcatExp */
			reduce(73), /* .., reduce: ConcatExp */
			shift(214), /* << */
			shift(215), /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S791
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(77), /* ,, reduce: ShiftExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(77), /* or, reduce: ShiftExp */
			reduce(77), /* and, reduce: ShiftExp */
			reduce(77), /* <, reduce: ShiftExp */
			reduce(77), /* <=, reduce: ShiftExp */
			reduce(77), /* >, reduce: ShiftExp */
			reduce(77), /* >=, reduce: ShiftExp */
			reduce(77), /* ==, reduce: ShiftExp */
			reduce(77), /* ~=, reduce: ShiftExp */
			reduce(77), /* |, reduce: ShiftExp */
			reduce(77), /* ~, reduce: ShiftExp */
			reduce(77), /* &, reduce: ShiftExp */
			reduce(77), /* .., reduce: ShiftExp */
			reduce(77), /* <<, reduce: ShiftExp */
			reduce(77), /* >>, reduce: ShiftExp */
			shift(217), /* + */
			shift(218), /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S792
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(81), /* ,, reduce: Sum */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(81), /* or, reduce: Sum */
			reduce(81), /* and, reduce: Sum */
			reduce(81), /* <, reduce: Sum */
			reduce(81), /* <=, reduce: Sum */
			reduce(81), /* >, reduce: Sum */
			reduce(81), /* >=, reduce: Sum */
			reduce(81), /* ==, reduce: Sum */
			reduce(81), /* ~=, reduce: Sum */
			reduce(81), /* |, reduce: Sum */
			reduce(81), /* ~, reduce: Sum */
			reduce(81), /* &, reduce: Sum */
			reduce(81), /* .., reduce: Sum */
			reduce(81), /* <<, reduce: Sum */
			reduce(81), /* >>, reduce: Sum */
			reduce(81), /* +, reduce: Sum */
			reduce(81), /* -, reduce: Sum */
			shift(220), /* * */
			shift(221), /* / */
			shift(222), /* % */
			shift(223), /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S793
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(87), /* ,, reduce: Term */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(87), /* or, reduce: Term */
			reduce(87), /* and, reduce: Term */
			reduce(87), /* <, reduce: Term */
			reduce(87), /* <=, reduce: Term */
			reduce(87), /* >, reduce: Term */
			reduce(87), /* >=, reduce: Term */
			reduce(87), /* ==, reduce: Term */
			reduce(87), /* ~=, reduce: Term */
			reduce(87), /* |, reduce: Term */
			reduce(87), /* ~, reduce: Term */
			reduce(87), /* &, reduce: Term */
			reduce(87), /* .., reduce: Term */
			reduce(87), /* <<, reduce: Term */
			reduce(87), /* >>, reduce: Term */
			reduce(87), /* +, reduce: Term */
			reduce(87), /* -, reduce: Term */
			reduce(87), /* *, reduce: Term */
			reduce(87), /* /, reduce: Term */
			reduce(87), /* %, reduce: Term */
			reduce(87), /* //, reduce: Term */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S794
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(782), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(798), /* ( */
			nil,        /* ) */
			shift(799), /* nil */
			shift(800), /* true */
			shift(801), /* false */
			shift(802), /* ... */
			shift(803), /* numdec */
			shift(804), /* numhex */
			shift(805), /* string */
			shift(808), /* { */
			nil,        /* } */
			shift(809), /* ident */
		},
	},
	actionRow{ // S795
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(94), /* ,, reduce: Factor */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(94), /* or, reduce: Factor */
			reduce(94), /* and, reduce: Factor */
			reduce(94), /* <, reduce: Factor */
			reduce(94), /* <=, reduce: Factor */
			reduce(94), /* >, reduce: Factor */
			reduce(94), /* >=, reduce: Factor */
			reduce(94), /* ==, reduce: Factor */
			reduce(94), /* ~=, reduce: Factor */
			reduce(94), /* |, reduce: Factor */
			reduce(94), /* ~, reduce: Factor */
			reduce(94), /* &, reduce: Factor */
			reduce(94), /* .., reduce: Factor */
			reduce(94), /* <<, reduce: Factor */
			reduce(94), /* >>, reduce: Factor */
			reduce(94), /* +, reduce: Factor */
			reduce(94), /* -, reduce: Factor */
			reduce(94), /* *, reduce: Factor */
			reduce(94), /* /, reduce: Factor */
			reduce(94), /* %, reduce: Factor */
			reduce(94), /* //, reduce: Factor */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S796
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(95),  /* ,, reduce: Power */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(95),  /* or, reduce: Power */
			reduce(95),  /* and, reduce: Power */
			reduce(95),  /* <, reduce: Power */
			reduce(95),  /* <=, reduce: Power */
			reduce(95),  /* >, reduce: Power */
			reduce(95),  /* >=, reduce: Power */
			reduce(95),  /* ==, reduce: Power */
			reduce(95),  /* ~=, reduce: Power */
			reduce(95),  /* |, reduce: Power */
			reduce(95),  /* ~, reduce: Power */
			reduce(95),  /* &, reduce: Power */
			reduce(95),  /* .., reduce: Power */
			reduce(95),  /* <<, reduce: Power */
			reduce(95),  /* >>, reduce: Power */
			reduce(95),  /* +, reduce: Power */
			reduce(95),  /* -, reduce: Power */
			reduce(95),  /* *, reduce: Power */
			reduce(95),  /* /, reduce: Power */
			reduce(95),  /* %, reduce: Power */
			reduce(95),  /* //, reduce: Power */
			nil,         /* not */
			nil,         /* # */
			shift(1209), /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S797
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(114), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			shift(1210), /* . */
			shift(1211), /* : */
			reduce(114), /* or, reduce: Atom */
			reduce(114), /* and, reduce: Atom */
			reduce(114), /* <, reduce: Atom */
			reduce(114), /* <=, reduce: Atom */
			reduce(114), /* >, reduce: Atom */
			reduce(114), /* >=, reduce: Atom */
			reduce(114), /* ==, reduce: Atom */
			reduce(114), /* ~=, reduce: Atom */
			reduce(114), /* |, reduce: Atom */
			reduce(114), /* ~, reduce: Atom */
			reduce(114), /* &, reduce: Atom */
			reduce(114), /* .., reduce: Atom */
			reduce(114), /* <<, reduce: Atom */
			reduce(114), /* >>, reduce: Atom */
			reduce(114), /* +, reduce: Atom */
			reduce(114), /* -, reduce: Atom */
			reduce(114), /* *, reduce: Atom */
			reduce(114), /* /, reduce: Atom */
			reduce(114), /* %, reduce: Atom */
			reduce(114), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(114), /* ^, reduce: Atom */
			shift(1212), /* [ */
			nil,         /* ] */
			shift(1213), /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			shift(1215), /* string */
			shift(1217), /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S798
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(168), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(184), /* ( */
			nil,        /* ) */
			shift(185), /* nil */
			shift(186), /* true */
			shift(187), /* false */
			shift(188), /* ... */
			shift(189), /* numdec */
			shift(190), /* numhex */
			shift(191), /* string */
			shift(194), /* { */
			nil,        /* } */
			shift(195), /* ident */
		},
	},
	actionRow{ // S799
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(105), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(105), /* or, reduce: Atom */
			reduce(105), /* and, reduce: Atom */
			reduce(105), /* <, reduce: Atom */
			reduce(105), /* <=, reduce: Atom */
			reduce(105), /* >, reduce: Atom */
			reduce(105), /* >=, reduce: Atom */
			reduce(105), /* ==, reduce: Atom */
			reduce(105), /* ~=, reduce: Atom */
			reduce(105), /* |, reduce: Atom */
			reduce(105), /* ~, reduce: Atom */
			reduce(105), /* &, reduce: Atom */
			reduce(105), /* .., reduce: Atom */
			reduce(105), /* <<, reduce: Atom */
			reduce(105), /* >>, reduce: Atom */
			reduce(105), /* +, reduce: Atom */
			reduce(105), /* -, reduce: Atom */
			reduce(105), /* *, reduce: Atom */
			reduce(105), /* /, reduce: Atom */
			reduce(105), /* %, reduce: Atom */
			reduce(105), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(105), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S800
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(106), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(106), /* or, reduce: Atom */
			reduce(106), /* and, reduce: Atom */
			reduce(106), /* <, reduce: Atom */
			reduce(106), /* <=, reduce: Atom */
			reduce(106), /* >, reduce: Atom */
			reduce(106), /* >=, reduce: Atom */
			reduce(106), /* ==, reduce: Atom */
			reduce(106), /* ~=, reduce: Atom */
			reduce(106), /* |, reduce: Atom */
			reduce(106), /* ~, reduce: Atom */
			reduce(106), /* &, reduce: Atom */
			reduce(106), /* .., reduce: Atom */
			reduce(106), /* <<, reduce: Atom */
			reduce(106), /* >>, reduce: Atom */
			reduce(106), /* +, reduce: Atom */
			reduce(106), /* -, reduce: Atom */
			reduce(106), /* *, reduce: Atom */
			reduce(106), /* /, reduce: Atom */
			reduce(106), /* %, reduce: Atom */
			reduce(106), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(106), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S801
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(107), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(107), /* or, reduce: Atom */
			reduce(107), /* and, reduce: Atom */
			reduce(107), /* <, reduce: Atom */
			reduce(107), /* <=, reduce: Atom */
			reduce(107), /* >, reduce: Atom */
			reduce(107), /* >=, reduce: Atom */
			reduce(107), /* ==, reduce: Atom */
			reduce(107), /* ~=, reduce: Atom */
			reduce(107), /* |, reduce: Atom */
			reduce(107), /* ~, reduce: Atom */
			reduce(107), /* &, reduce: Atom */
			reduce(107), /* .., reduce: Atom */
			reduce(107), /* <<, reduce: Atom */
			reduce(107), /* >>, reduce: Atom */
			reduce(107), /* +, reduce: Atom */
			reduce(107), /* -, reduce: Atom */
			reduce(107), /* *, reduce: Atom */
			reduce(107), /* /, reduce: Atom */
			reduce(107), /* %, reduce: Atom */
			reduce(107), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(107), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S802
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(108), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(108), /* or, reduce: Atom */
			reduce(108), /* and, reduce: Atom */
			reduce(108), /* <, reduce: Atom */
			reduce(108), /* <=, reduce: Atom */
			reduce(108), /* >, reduce: Atom */
			reduce(108), /* >=, reduce: Atom */
			reduce(108), /* ==, reduce: Atom */
			reduce(108), /* ~=, reduce: Atom */
			reduce(108), /* |, reduce: Atom */
			reduce(108), /* ~, reduce: Atom */
			reduce(108), /* &, reduce: Atom */
			reduce(108), /* .., reduce: Atom */
			reduce(108), /* <<, reduce: Atom */
			reduce(108), /* >>, reduce: Atom */
			reduce(108), /* +, reduce: Atom */
			reduce(108), /* -, reduce: Atom */
			reduce(108), /* *, reduce: Atom */
			reduce(108), /* /, reduce: Atom */
			reduce(108), /* %, reduce: Atom */
			reduce(108), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(108), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S803
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(109), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(109), /* or, reduce: Atom */
			reduce(109), /* and, reduce: Atom */
			reduce(109), /* <, reduce: Atom */
			reduce(109), /* <=, reduce: Atom */
			reduce(109), /* >, reduce: Atom */
			reduce(109), /* >=, reduce: Atom */
			reduce(109), /* ==, reduce: Atom */
			reduce(109), /* ~=, reduce: Atom */
			reduce(109), /* |, reduce: Atom */
			reduce(109), /* ~, reduce: Atom */
			reduce(109), /* &, reduce: Atom */
			reduce(109), /* .., reduce: Atom */
			reduce(109), /* <<, reduce: Atom */
			reduce(109), /* >>, reduce: Atom */
			reduce(109), /* +, reduce: Atom */
			reduce(109), /* -, reduce: Atom */
			reduce(109), /* *, reduce: Atom */
			reduce(109), /* /, reduce: Atom */
			reduce(109), /* %, reduce: Atom */
			reduce(109), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(109), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S804
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(110), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(110), /* or, reduce: Atom */
			reduce(110), /* and, reduce: Atom */
			reduce(110), /* <, reduce: Atom */
			reduce(110), /* <=, reduce: Atom */
			reduce(110), /* >, reduce: Atom */
			reduce(110), /* >=, reduce: Atom */
			reduce(110), /* ==, reduce: Atom */
			reduce(110), /* ~=, reduce: Atom */
			reduce(110), /* |, reduce: Atom */
			reduce(110), /* ~, reduce: Atom */
			reduce(110), /* &, reduce: Atom */
			reduce(110), /* .., reduce: Atom */
			reduce(110), /* <<, reduce: Atom */
			reduce(110), /* >>, reduce: Atom */
			reduce(110), /* +, reduce: Atom */
			reduce(110), /* -, reduce: Atom */
			reduce(110), /* *, reduce: Atom */
			reduce(110), /* /, reduce: Atom */
			reduce(110), /* %, reduce: Atom */
			reduce(110), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(110), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S805
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(111), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(111), /* or, reduce: Atom */
			reduce(111), /* and, reduce: Atom */
			reduce(111), /* <, reduce: Atom */
			reduce(111), /* <=, reduce: Atom */
			reduce(111), /* >, reduce: Atom */
			reduce(111), /* >=, reduce: Atom */
			reduce(111), /* ==, reduce: Atom */
			reduce(111), /* ~=, reduce: Atom */
			reduce(111), /* |, reduce: Atom */
			reduce(111), /* ~, reduce: Atom */
			reduce(111), /* &, reduce: Atom */
			reduce(111), /* .., reduce: Atom */
			reduce(111), /* <<, reduce: Atom */
			reduce(111), /* >>, reduce: Atom */
			reduce(111), /* +, reduce: Atom */
			reduce(111), /* -, reduce: Atom */
			reduce(111), /* *, reduce: Atom */
			reduce(111), /* /, reduce: Atom */
			reduce(111), /* %, reduce: Atom */
			reduce(111), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(111), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S806
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(112), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(112), /* or, reduce: Atom */
			reduce(112), /* and, reduce: Atom */
			reduce(112), /* <, reduce: Atom */
			reduce(112), /* <=, reduce: Atom */
			reduce(112), /* >, reduce: Atom */
			reduce(112), /* >=, reduce: Atom */
			reduce(112), /* ==, reduce: Atom */
			reduce(112), /* ~=, reduce: Atom */
			reduce(112), /* |, reduce: Atom */
			reduce(112), /* ~, reduce: Atom */
			reduce(112), /* &, reduce: Atom */
			reduce(112), /* .., reduce: Atom */
			reduce(112), /* <<, reduce: Atom */
			reduce(112), /* >>, reduce: Atom */
			reduce(112), /* +, reduce: Atom */
			reduce(112), /* -, reduce: Atom */
			reduce(112), /* *, reduce: Atom */
			reduce(112), /* /, reduce: Atom */
			reduce(112), /* %, reduce: Atom */
			reduce(112), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(112), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S807
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(113), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(113), /* or, reduce: Atom */
			reduce(113), /* and, reduce: Atom */
			reduce(113), /* <, reduce: Atom */
			reduce(113), /* <=, reduce: Atom */
			reduce(113), /* >, reduce: Atom */
			reduce(113), /* >=, reduce: Atom */
			reduce(113), /* ==, reduce: Atom */
			reduce(113), /* ~=, reduce: Atom */
			reduce(113), /* |, reduce: Atom */
			reduce(113), /* ~, reduce: Atom */
			reduce(113), /* &, reduce: Atom */
			reduce(113), /* .., reduce: Atom */
			reduce(113), /* <<, reduce: Atom */
			reduce(113), /* >>, reduce: Atom */
			reduce(113), /* +, reduce: Atom */
			reduce(113), /* -, reduce: Atom */
			reduce(113), /* *, reduce: Atom */
			reduce(113), /* /, reduce: Atom */
			reduce(113), /* %, reduce: Atom */
			reduce(113), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(113), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S808
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			shift(254), /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(268), /* ident */
		},
	},
	actionRow{ // S809
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(134), /* ,, reduce: Name */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(134), /* ., reduce: Name */
			reduce(134), /* :, reduce: Name */
			reduce(134), /* or, reduce: Name */
			reduce(134), /* and, reduce: Name */
			reduce(134), /* <, reduce: Name */
			reduce(134), /* <=, reduce: Name */
			reduce(134), /* >, reduce: Name */
			reduce(134), /* >=, reduce: Name */
			reduce(134), /* ==, reduce: Name */
			reduce(134), /* ~=, reduce: Name */
			reduce(134), /* |, reduce: Name */
			reduce(134), /* ~, reduce: Name */
			reduce(134), /* &, reduce: Name */
			reduce(134), /* .., reduce: Name */
			reduce(134), /* <<, reduce: Name */
			reduce(134), /* >>, reduce: Name */
			reduce(134), /* +, reduce: Name */
			reduce(134), /* -, reduce: Name */
			reduce(134), /* *, reduce: Name */
			reduce(134), /* /, reduce: Name */
			reduce(134), /* %, reduce: Name */
			reduce(134), /* //, reduce: Name */
			nil,         /* not */
			nil,         /* # */
			reduce(134), /* ^, reduce: Name */
			reduce(134), /* [, reduce: Name */
			nil,         /* ] */
			reduce(134), /* (, reduce: Name */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(134), /* string, reduce: Name */
			reduce(134), /* {, reduce: Name */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S810
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(52), /* ,, reduce: NameList */
			nil,        /* for */
			reduce(52), /* in, reduce: NameList */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S811
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(134), /* ,, reduce: Name */
			nil,         /* for */
			reduce(134), /* in, reduce: Name */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S812
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			shift(1220), /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(1221), /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S813
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(101), /* do, reduce: PrefixExp */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(101), /* ,, reduce: PrefixExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(101), /* ., reduce: PrefixExp */
			reduce(101), /* :, reduce: PrefixExp */
			reduce(101), /* or, reduce: PrefixExp */
			reduce(101), /* and, reduce: PrefixExp */
			reduce(101), /* <, reduce: PrefixExp */
			reduce(101), /* <=, reduce: PrefixExp */
			reduce(101), /* >, reduce: PrefixExp */
			reduce(101), /* >=, reduce: PrefixExp */
			reduce(101), /* ==, reduce: PrefixExp */
			reduce(101), /* ~=, reduce: PrefixExp */
			reduce(101), /* |, reduce: PrefixExp */
			reduce(101), /* ~, reduce: PrefixExp */
			reduce(101), /* &, reduce: PrefixExp */
			reduce(101), /* .., reduce: PrefixExp */
			reduce(101), /* <<, reduce: PrefixExp */
			reduce(101), /* >>, reduce: PrefixExp */
			reduce(101), /* +, reduce: PrefixExp */
			reduce(101), /* -, reduce: PrefixExp */
			reduce(101), /* *, reduce: PrefixExp */
			reduce(101), /* /, reduce: PrefixExp */
			reduce(101), /* %, reduce: PrefixExp */
			reduce(101), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(101), /* ^, reduce: PrefixExp */
			reduce(101), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(101), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(101), /* string, reduce: PrefixExp */
			reduce(101), /* {, reduce: PrefixExp */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S814
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			reduce(97), /* do, reduce: Var */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(97), /* ,, reduce: Var */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			reduce(97), /* ., reduce: Var */
			reduce(97), /* :, reduce: Var */
			reduce(97), /* or, reduce: Var */
			reduce(97), /* and, reduce: Var */
			reduce(97), /* <, reduce: Var */
			reduce(97), /* <=, reduce: Var */
			reduce(97), /* >, reduce: Var */
			reduce(97), /* >=, reduce: Var */
			reduce(97), /* ==, reduce: Var */
			reduce(97), /* ~=, reduce: Var */
			reduce(97), /* |, reduce: Var */
			reduce(97), /* ~, reduce: Var */
			reduce(97), /* &, reduce: Var */
			reduce(97), /* .., reduce: Var */
			reduce(97), /* <<, reduce: Var */
			reduce(97), /* >>, reduce: Var */
			reduce(97), /* +, reduce: Var */
			reduce(97), /* -, reduce: Var */
			reduce(97), /* *, reduce: Var */
			reduce(97), /* /, reduce: Var */
			reduce(97), /* %, reduce: Var */
			reduce(97), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(97), /* ^, reduce: Var */
			reduce(97), /* [, reduce: Var */
			nil,        /* ] */
			reduce(97), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(97), /* string, reduce: Var */
			reduce(97), /* {, reduce: Var */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S815
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(53),  /* do, reduce: ExpList */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(53),  /* ,, reduce: ExpList */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			shift(1222), /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S816
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1224), /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S817
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(100), /* do, reduce: PrefixExp */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(100), /* ,, reduce: PrefixExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(100), /* ., reduce: PrefixExp */
			reduce(100), /* :, reduce: PrefixExp */
			reduce(100), /* or, reduce: PrefixExp */
			reduce(100), /* and, reduce: PrefixExp */
			reduce(100), /* <, reduce: PrefixExp */
			reduce(100), /* <=, reduce: PrefixExp */
			reduce(100), /* >, reduce: PrefixExp */
			reduce(100), /* >=, reduce: PrefixExp */
			reduce(100), /* ==, reduce: PrefixExp */
			reduce(100), /* ~=, reduce: PrefixExp */
			reduce(100), /* |, reduce: PrefixExp */
			reduce(100), /* ~, reduce: PrefixExp */
			reduce(100), /* &, reduce: PrefixExp */
			reduce(100), /* .., reduce: PrefixExp */
			reduce(100), /* <<, reduce: PrefixExp */
			reduce(100), /* >>, reduce: PrefixExp */
			reduce(100), /* +, reduce: PrefixExp */
			reduce(100), /* -, reduce: PrefixExp */
			reduce(100), /* *, reduce: PrefixExp */
			reduce(100), /* /, reduce: PrefixExp */
			reduce(100), /* %, reduce: PrefixExp */
			reduce(100), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(100), /* ^, reduce: PrefixExp */
			reduce(100), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(100), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(100), /* string, reduce: PrefixExp */
			reduce(100), /* {, reduce: PrefixExp */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S818
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(55),  /* do, reduce: Exp */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(55),  /* ,, reduce: Exp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(55),  /* or, reduce: Exp */
			shift(1225), /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S819
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			reduce(57), /* do, reduce: AndExp */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(57), /* ,, reduce: AndExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(57), /* or, reduce: AndExp */
			reduce(57), /* and, reduce: AndExp */
			shift(203), /* < */
			shift(204), /* <= */
			shift(205), /* > */
			shift(206), /* >= */
			shift(207), /* == */
			shift(208), /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S820
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(65),  /* do, reduce: CompExp */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(65),  /* ,, reduce: CompExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(65),  /* or, reduce: CompExp */
			reduce(65),  /* and, reduce: CompExp */
			reduce(65),  /* <, reduce: CompExp */
			reduce(65),  /* <=, reduce: CompExp */
			reduce(65),  /* >, reduce: CompExp */
			reduce(65),  /* >=, reduce: CompExp */
			reduce(65),  /* ==, reduce: CompExp */
			reduce(65),  /* ~=, reduce: CompExp */
			shift(1227), /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S821
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(67),  /* do, reduce: BitOrExp */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(67),  /* ,, reduce: BitOrExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(67),  /* or, reduce: BitOrExp */
			reduce(67),  /* and, reduce: BitOrExp */
			reduce(67),  /* <, reduce: BitOrExp */
			reduce(67),  /* <=, reduce: BitOrExp */
			reduce(67),  /* >, reduce: BitOrExp */
			reduce(67),  /* >=, reduce: BitOrExp */
			reduce(67),  /* ==, reduce: BitOrExp */
			reduce(67),  /* ~=, reduce: BitOrExp */
			reduce(67),  /* |, reduce: BitOrExp */
			shift(1228), /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S822
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(69),  /* do, reduce: BitXorExp */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(69),  /* ,, reduce: BitXorExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(69),  /* or, reduce: BitXorExp */
			reduce(69),  /* and, reduce: BitXorExp */
			reduce(69),  /* <, reduce: BitXorExp */
			reduce(69),  /* <=, reduce: BitXorExp */
			reduce(69),  /* >, reduce: BitXorExp */
			reduce(69),  /* >=, reduce: BitXorExp */
			reduce(69),  /* ==, reduce: BitXorExp */
			reduce(69),  /* ~=, reduce: BitXorExp */
			reduce(69),  /* |, reduce: BitXorExp */
			reduce(69),  /* ~, reduce: BitXorExp */
			shift(1229), /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S823
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(71),  /* do, reduce: BitAndExp */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(71),  /* ,, reduce: BitAndExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(71),  /* or, reduce: BitAndExp */
			reduce(71),  /* and, reduce: BitAndExp */
			reduce(71),  /* <, reduce: BitAndExp */
			reduce(71),  /* <=, reduce: BitAndExp */
			reduce(71),  /* >, reduce: BitAndExp */
			reduce(71),  /* >=, reduce: BitAndExp */
			reduce(71),  /* ==, reduce: BitAndExp */
			reduce(71),  /* ~=, reduce: BitAndExp */
			reduce(71),  /* |, reduce: BitAndExp */
			reduce(71),  /* ~, reduce: BitAndExp */
			reduce(71),  /* &, reduce: BitAndExp */
			shift(1230), /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S824
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			reduce(73), /* do, reduce: ConcatExp */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(73), /* ,, reduce: ConcatExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(73), /* or, reduce: ConcatExp */
			reduce(73), /* and, reduce: ConcatExp */
			reduce(73), /* <, reduce: ConcatExp */
			reduce(73), /* <=, reduce: ConcatExp */
			reduce(73), /* >, reduce: ConcatExp */
			reduce(73), /* >=, reduce: ConcatExp */
			reduce(73), /* ==, reduce: ConcatExp */
			reduce(73), /* ~=, reduce: ConcatExp */
			reduce(73), /* |, reduce: ConcatExp */
			reduce(73), /* ~, reduce: ConcatExp */
			reduce(73), /* &, reduce: ConcatExp */
			reduce(73), /* .., reduce: ConcatExp */
			shift(214), /* << */
			shift(215), /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S825
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			reduce(77), /* do, reduce: ShiftExp */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(77), /* ,, reduce: ShiftExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(77), /* or, reduce: ShiftExp */
			reduce(77), /* and, reduce: ShiftExp */
			reduce(77), /* <, reduce: ShiftExp */
			reduce(77), /* <=, reduce: ShiftExp */
			reduce(77), /* >, reduce: ShiftExp */
			reduce(77), /* >=, reduce: ShiftExp */
			reduce(77), /* ==, reduce: ShiftExp */
			reduce(77), /* ~=, reduce: ShiftExp */
			reduce(77), /* |, reduce: ShiftExp */
			reduce(77), /* ~, reduce: ShiftExp */
			reduce(77), /* &, reduce: ShiftExp */
			reduce(77), /* .., reduce: ShiftExp */
			reduce(77), /* <<, reduce: ShiftExp */
			reduce(77), /* >>, reduce: ShiftExp */
			shift(217), /* + */
			shift(218), /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S826
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			reduce(81), /* do, reduce: Sum */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(81), /* ,, reduce: Sum */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(81), /* or, reduce: Sum */
			reduce(81), /* and, reduce: Sum */
			reduce(81), /* <, reduce: Sum */
			reduce(81), /* <=, reduce: Sum */
			reduce(81), /* >, reduce: Sum */
			reduce(81), /* >=, reduce: Sum */
			reduce(81), /* ==, reduce: Sum */
			reduce(81), /* ~=, reduce: Sum */
			reduce(81), /* |, reduce: Sum */
			reduce(81), /* ~, reduce: Sum */
			reduce(81), /* &, reduce: Sum */
			reduce(81), /* .., reduce: Sum */
			reduce(81), /* <<, reduce: Sum */
			reduce(81), /* >>, reduce: Sum */
			reduce(81), /* +, reduce: Sum */
			reduce(81), /* -, reduce: Sum */
			shift(220), /* * */
			shift(221), /* / */
			shift(222), /* % */
			shift(223), /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S827
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			reduce(87), /* do, reduce: Term */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(87), /* ,, reduce: Term */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(87), /* or, reduce: Term */
			reduce(87), /* and, reduce: Term */
			reduce(87), /* <, reduce: Term */
			reduce(87), /* <=, reduce: Term */
			reduce(87), /* >, reduce: Term */
			reduce(87), /* >=, reduce: Term */
			reduce(87), /* ==, reduce: Term */
			reduce(87), /* ~=, reduce: Term */
			reduce(87), /* |, reduce: Term */
			reduce(87), /* ~, reduce: Term */
			reduce(87), /* &, reduce: Term */
			reduce(87), /* .., reduce: Term */
			reduce(87), /* <<, reduce: Term */
			reduce(87), /* >>, reduce: Term */
			reduce(87), /* +, reduce: Term */
			reduce(87), /* -, reduce: Term */
			reduce(87), /* *, reduce: Term */
			reduce(87), /* /, reduce: Term */
			reduce(87), /* %, reduce: Term */
			reduce(87), /* //, reduce: Term */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S828
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(816), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(832), /* ( */
			nil,        /* ) */
			shift(833), /* nil */
			shift(834), /* true */
			shift(835), /* false */
			shift(836), /* ... */
			shift(837), /* numdec */
			shift(838), /* numhex */
			shift(839), /* string */
			shift(842), /* { */
			nil,        /* } */
			shift(843), /* ident */
		},
	},
	actionRow{ // S829
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			reduce(94), /* do, reduce: Factor */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(94), /* ,, reduce: Factor */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(94), /* or, reduce: Factor */
			reduce(94), /* and, reduce: Factor */
			reduce(94), /* <, reduce: Factor */
			reduce(94), /* <=, reduce: Factor */
			reduce(94), /* >, reduce: Factor */
			reduce(94), /* >=, reduce: Factor */
			reduce(94), /* ==, reduce: Factor */
			reduce(94), /* ~=, reduce: Factor */
			reduce(94), /* |, reduce: Factor */
			reduce(94), /* ~, reduce: Factor */
			reduce(94), /* &, reduce: Factor */
			reduce(94), /* .., reduce: Factor */
			reduce(94), /* <<, reduce: Factor */
			reduce(94), /* >>, reduce: Factor */
			reduce(94), /* +, reduce: Factor */
			reduce(94), /* -, reduce: Factor */
			reduce(94), /* *, reduce: Factor */
			reduce(94), /* /, reduce: Factor */
			reduce(94), /* %, reduce: Factor */
			reduce(94), /* //, reduce: Factor */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S830
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(95),  /* do, reduce: Power */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(95),  /* ,, reduce: Power */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(95),  /* or, reduce: Power */
			reduce(95),  /* and, reduce: Power */
			reduce(95),  /* <, reduce: Power */
			reduce(95),  /* <=, reduce: Power */
			reduce(95),  /* >, reduce: Power */
			reduce(95),  /* >=, reduce: Power */
			reduce(95),  /* ==, reduce: Power */
			reduce(95),  /* ~=, reduce: Power */
			reduce(95),  /* |, reduce: Power */
			reduce(95),  /* ~, reduce: Power */
			reduce(95),  /* &, reduce: Power */
			reduce(95),  /* .., reduce: Power */
			reduce(95),  /* <<, reduce: Power */
			reduce(95),  /* >>, reduce: Power */
			reduce(95),  /* +, reduce: Power */
			reduce(95),  /* -, reduce: Power */
			reduce(95),  /* *, reduce: Power */
			reduce(95),  /* /, reduce: Power */
			reduce(95),  /* %, reduce: Power */
			reduce(95),  /* //, reduce: Power */
			nil,         /* not */
			nil,         /* # */
			shift(1235), /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S831
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(114), /* do, reduce: Atom */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(114), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			shift(1236), /* . */
			shift(1237), /* : */
			reduce(114), /* or, reduce: Atom */
			reduce(114), /* and, reduce: Atom */
			reduce(114), /* <, reduce: Atom */
			reduce(114), /* <=, reduce: Atom */
			reduce(114), /* >, reduce: Atom */
			reduce(114), /* >=, reduce: Atom */
			reduce(114), /* ==, reduce: Atom */
			reduce(114), /* ~=, reduce: Atom */
			reduce(114), /* |, reduce: Atom */
			reduce(114), /* ~, reduce: Atom */
			reduce(114), /* &, reduce: Atom */
			reduce(114), /* .., reduce: Atom */
			reduce(114), /* <<, reduce: Atom */
			reduce(114), /* >>, reduce: Atom */
			reduce(114), /* +, reduce: Atom */
			reduce(114), /* -, reduce: Atom */
			reduce(114), /* *, reduce: Atom */
			reduce(114), /* /, reduce: Atom */
			reduce(114), /* %, reduce: Atom */
			reduce(114), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(114), /* ^, reduce: Atom */
			shift(1238), /* [ */
			nil,         /* ] */
			shift(1239), /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			shift(1241), /* string */
			shift(1243), /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S832
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(168), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(184), /* ( */
			nil,        /* ) */
			shift(185), /* nil */
			shift(186), /* true */
			shift(187), /* false */
			shift(188), /* ... */
			shift(189), /* numdec */
			shift(190), /* numhex */
			shift(191), /* string */
			shift(194), /* { */
			nil,        /* } */
			shift(195), /* ident */
		},
	},
	actionRow{ // S833
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(105), /* do, reduce: Atom */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(105), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(105), /* or, reduce: Atom */
			reduce(105), /* and, reduce: Atom */
			reduce(105), /* <, reduce: Atom */
			reduce(105), /* <=, reduce: Atom */
			reduce(105), /* >, reduce: Atom */
			reduce(105), /* >=, reduce: Atom */
			reduce(105), /* ==, reduce: Atom */
			reduce(105), /* ~=, reduce: Atom */
			reduce(105), /* |, reduce: Atom */
			reduce(105), /* ~, reduce: Atom */
			reduce(105), /* &, reduce: Atom */
			reduce(105), /* .., reduce: Atom */
			reduce(105), /* <<, reduce: Atom */
			reduce(105), /* >>, reduce: Atom */
			reduce(105), /* +, reduce: Atom */
			reduce(105), /* -, reduce: Atom */
			reduce(105), /* *, reduce: Atom */
			reduce(105), /* /, reduce: Atom */
			reduce(105), /* %, reduce: Atom */
			reduce(105), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(105), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S834
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(106), /* do, reduce: Atom */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(106), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(106), /* or, reduce: Atom */
			reduce(106), /* and, reduce: Atom */
			reduce(106), /* <, reduce: Atom */
			reduce(106), /* <=, reduce: Atom */
			reduce(106), /* >, reduce: Atom */
			reduce(106), /* >=, reduce: Atom */
			reduce(106), /* ==, reduce: Atom */
			reduce(106), /* ~=, reduce: Atom */
			reduce(106), /* |, reduce: Atom */
			reduce(106), /* ~, reduce: Atom */
			reduce(106), /* &, reduce: Atom */
			reduce(106), /* .., reduce: Atom */
			reduce(106), /* <<, reduce: Atom */
			reduce(106), /* >>, reduce: Atom */
			reduce(106), /* +, reduce: Atom */
			reduce(106), /* -, reduce: Atom */
			reduce(106), /* *, reduce: Atom */
			reduce(106), /* /, reduce: Atom */
			reduce(106), /* %, reduce: Atom */
			reduce(106), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(106), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S835
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(107), /* do, reduce: Atom */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(107), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(107), /* or, reduce: Atom */
			reduce(107), /* and, reduce: Atom */
			reduce(107), /* <, reduce: Atom */
			reduce(107), /* <=, reduce: Atom */
			reduce(107), /* >, reduce: Atom */
			reduce(107), /* >=, reduce: Atom */
			reduce(107), /* ==, reduce: Atom */
			reduce(107), /* ~=, reduce: Atom */
			reduce(107), /* |, reduce: Atom */
			reduce(107), /* ~, reduce: Atom */
			reduce(107), /* &, reduce: Atom */
			reduce(107), /* .., reduce: Atom */
			reduce(107), /* <<, reduce: Atom */
			reduce(107), /* >>, reduce: Atom */
			reduce(107), /* +, reduce: Atom */
			reduce(107), /* -, reduce: Atom */
			reduce(107), /* *, reduce: Atom */
			reduce(107), /* /, reduce: Atom */
			reduce(107), /* %, reduce: Atom */
			reduce(107), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(107), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S836
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(108), /* do, reduce: Atom */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(108), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(108), /* or, reduce: Atom */
			reduce(108), /* and, reduce: Atom */
			reduce(108), /* <, reduce: Atom */
			reduce(108), /* <=, reduce: Atom */
			reduce(108), /* >, reduce: Atom */
			reduce(108), /* >=, reduce: Atom */
			reduce(108), /* ==, reduce: Atom */
			reduce(108), /* ~=, reduce: Atom */
			reduce(108), /* |, reduce: Atom */
			reduce(108), /* ~, reduce: Atom */
			reduce(108), /* &, reduce: Atom */
			reduce(108), /* .., reduce: Atom */
			reduce(108), /* <<, reduce: Atom */
			reduce(108), /* >>, reduce: Atom */
			reduce(108), /* +, reduce: Atom */
			reduce(108), /* -, reduce: Atom */
			reduce(108), /* *, reduce: Atom */
			reduce(108), /* /, reduce: Atom */
			reduce(108), /* %, reduce: Atom */
			reduce(108), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(108), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S837
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(109), /* do, reduce: Atom */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(109), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(109), /* or, reduce: Atom */
			reduce(109), /* and, reduce: Atom */
			reduce(109), /* <, reduce: Atom */
			reduce(109), /* <=, reduce: Atom */
			reduce(109), /* >, reduce: Atom */
			reduce(109), /* >=, reduce: Atom */
			reduce(109), /* ==, reduce: Atom */
			reduce(109), /* ~=, reduce: Atom */
			reduce(109), /* |, reduce: Atom */
			reduce(109), /* ~, reduce: Atom */
			reduce(109), /* &, reduce: Atom */
			reduce(109), /* .., reduce: Atom */
			reduce(109), /* <<, reduce: Atom */
			reduce(109), /* >>, reduce: Atom */
			reduce(109), /* +, reduce: Atom */
			reduce(109), /* -, reduce: Atom */
			reduce(109), /* *, reduce: Atom */
			reduce(109), /* /, reduce: Atom */
			reduce(109), /* %, reduce: Atom */
			reduce(109), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(109), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S838
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(110), /* do, reduce: Atom */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(110), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(110), /* or, reduce: Atom */
			reduce(110), /* and, reduce: Atom */
			reduce(110), /* <, reduce: Atom */
			reduce(110), /* <=, reduce: Atom */
			reduce(110), /* >, reduce: Atom */
			reduce(110), /* >=, reduce: Atom */
			reduce(110), /* ==, reduce: Atom */
			reduce(110), /* ~=, reduce: Atom */
			reduce(110), /* |, reduce: Atom */
			reduce(110), /* ~, reduce: Atom */
			reduce(110), /* &, reduce: Atom */
			reduce(110), /* .., reduce: Atom */
			reduce(110), /* <<, reduce: Atom */
			reduce(110), /* >>, reduce: Atom */
			reduce(110), /* +, reduce: Atom */
			reduce(110), /* -, reduce: Atom */
			reduce(110), /* *, reduce: Atom */
			reduce(110), /* /, reduce: Atom */
			reduce(110), /* %, reduce: Atom */
			reduce(110), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(110), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S839
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(111), /* do, reduce: Atom */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(111), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(111), /* or, reduce: Atom */
			reduce(111), /* and, reduce: Atom */
			reduce(111), /* <, reduce: Atom */
			reduce(111), /* <=, reduce: Atom */
			reduce(111), /* >, reduce: Atom */
			reduce(111), /* >=, reduce: Atom */
			reduce(111), /* ==, reduce: Atom */
			reduce(111), /* ~=, reduce: Atom */
			reduce(111), /* |, reduce: Atom */
			reduce(111), /* ~, reduce: Atom */
			reduce(111), /* &, reduce: Atom */
			reduce(111), /* .., reduce: Atom */
			reduce(111), /* <<, reduce: Atom */
			reduce(111), /* >>, reduce: Atom */
			reduce(111), /* +, reduce: Atom */
			reduce(111), /* -, reduce: Atom */
			reduce(111), /* *, reduce: Atom */
			reduce(111), /* /, reduce: Atom */
			reduce(111), /* %, reduce: Atom */
			reduce(111), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(111), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S840
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(112), /* do, reduce: Atom */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(112), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(112), /* or, reduce: Atom */
			reduce(112), /* and, reduce: Atom */
			reduce(112), /* <, reduce: Atom */
			reduce(112), /* <=, reduce: Atom */
			reduce(112), /* >, reduce: Atom */
			reduce(112), /* >=, reduce: Atom */
			reduce(112), /* ==, reduce: Atom */
			reduce(112), /* ~=, reduce: Atom */
			reduce(112), /* |, reduce: Atom */
			reduce(112), /* ~, reduce: Atom */
			reduce(112), /* &, reduce: Atom */
			reduce(112), /* .., reduce: Atom */
			reduce(112), /* <<, reduce: Atom */
			reduce(112), /* >>, reduce: Atom */
			reduce(112), /* +, reduce: Atom */
			reduce(112), /* -, reduce: Atom */
			reduce(112), /* *, reduce: Atom */
			reduce(112), /* /, reduce: Atom */
			reduce(112), /* %, reduce: Atom */
			reduce(112), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(112), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S841
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(113), /* do, reduce: Atom */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(113), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(113), /* or, reduce: Atom */
			reduce(113), /* and, reduce: Atom */
			reduce(113), /* <, reduce: Atom */
			reduce(113), /* <=, reduce: Atom */
			reduce(113), /* >, reduce: Atom */
			reduce(113), /* >=, reduce: Atom */
			reduce(113), /* ==, reduce: Atom */
			reduce(113), /* ~=, reduce: Atom */
			reduce(113), /* |, reduce: Atom */
			reduce(113), /* ~, reduce: Atom */
			reduce(113), /* &, reduce: Atom */
			reduce(113), /* .., reduce: Atom */
			reduce(113), /* <<, reduce: Atom */
			reduce(113), /* >>, reduce: Atom */
			reduce(113), /* +, reduce: Atom */
			reduce(113), /* -, reduce: Atom */
			reduce(113), /* *, reduce: Atom */
			reduce(113), /* /, reduce: Atom */
			reduce(113), /* %, reduce: Atom */
			reduce(113), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(113), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S842
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			shift(254), /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(268), /* ident */
		},
	},
	actionRow{ // S843
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(134), /* do, reduce: Name */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(134), /* ,, reduce: Name */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(134), /* ., reduce: Name */
			reduce(134), /* :, reduce: Name */
			reduce(134), /* or, reduce: Name */
			reduce(134), /* and, reduce: Name */
			reduce(134), /* <, reduce: Name */
			reduce(134), /* <=, reduce: Name */
			reduce(134), /* >, reduce: Name */
			reduce(134), /* >=, reduce: Name */
			reduce(134), /* ==, reduce: Name */
			reduce(134), /* ~=, reduce: Name */
			reduce(134), /* |, reduce: Name */
			reduce(134), /* ~, reduce: Name */
			reduce(134), /* &, reduce: Name */
			reduce(134), /* .., reduce: Name */
			reduce(134), /* <<, reduce: Name */
			reduce(134), /* >>, reduce: Name */
			reduce(134), /* +, reduce: Name */
			reduce(134), /* -, reduce: Name */
			reduce(134), /* *, reduce: Name */
			reduce(134), /* /, reduce: Name */
			reduce(134), /* %, reduce: Name */
			reduce(134), /* //, reduce: Name */
			nil,         /* not */
			nil,         /* # */
			reduce(134), /* ^, reduce: Name */
			reduce(134), /* [, reduce: Name */
			nil,         /* ] */
			reduce(134), /* (, reduce: Name */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(134), /* string, reduce: Name */
			reduce(134), /* {, reduce: Name */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S844
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(1246), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S845
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			reduce(46), /* ., reduce: DottedName */
			reduce(46), /* :, reduce: DottedName */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(46), /* (, reduce: DottedName */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S846
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(48), /* (, reduce: FuncName */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S847
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(43), /* $, reduce: LocalStat */
			reduce(43), /* return, reduce: LocalStat */
			reduce(43), /* ;, reduce: LocalStat */
			nil,        /* empty */
			nil,        /* = */
			reduce(43), /* break, reduce: LocalStat */
			reduce(43), /* goto, reduce: LocalStat */
			reduce(43), /* do, reduce: LocalStat */
			nil,        /* end */
			reduce(43), /* while, reduce: LocalStat */
			reduce(43), /* repeat, reduce: LocalStat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(43), /* if, reduce: LocalStat */
			shift(573), /* , */
			reduce(43), /* for, reduce: LocalStat */
			nil,        /* in */
			reduce(43), /* function, reduce: LocalStat */
			reduce(43), /* local, reduce: LocalStat */
			reduce(43), /* ::, reduce: LocalStat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(43), /* (, reduce: LocalStat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(43), /* ident, reduce: LocalStat */
		},
	},
	actionRow{ // S848
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(52), /* $, reduce: NameList */
			reduce(52), /* return, reduce: NameList */
			reduce(52), /* ;, reduce: NameList */
			nil,        /* empty */
			reduce(52), /* =, reduce: NameList */
			reduce(52), /* break, reduce: NameList */
			reduce(52), /* goto, reduce: NameList */
			reduce(52), /* do, reduce: NameList */
			nil,        /* end */
			reduce(52), /* while, reduce: NameList */
			reduce(52), /* repeat, reduce: NameList */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(52), /* if, reduce: NameList */
			reduce(52), /* ,, reduce: NameList */
			reduce(52), /* for, reduce: NameList */
			nil,        /* in */
			reduce(52), /* function, reduce: NameList */
			reduce(52), /* local, reduce: NameList */
			reduce(52), /* ::, reduce: NameList */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(52), /* (, reduce: NameList */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(52), /* ident, reduce: NameList */
		},
	},
	actionRow{ // S849
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(41), /* $, reduce: LocalFunctionStat */
			reduce(41), /* return, reduce: LocalFunctionStat */
			reduce(41), /* ;, reduce: LocalFunctionStat */
			nil,        /* empty */
			nil,        /* = */
			reduce(41), /* break, reduce: LocalFunctionStat */
			reduce(41), /* goto, reduce: LocalFunctionStat */
			reduce(41), /* do, reduce: LocalFunctionStat */
			nil,        /* end */
			reduce(41), /* while, reduce: LocalFunctionStat */
			reduce(41), /* repeat, reduce: LocalFunctionStat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(41), /* if, reduce: LocalFunctionStat */
			nil,        /* , */
			reduce(41), /* for, reduce: LocalFunctionStat */
			nil,        /* in */
			reduce(41), /* function, reduce: LocalFunctionStat */
			reduce(41), /* local, reduce: LocalFunctionStat */
			reduce(41), /* ::, reduce: LocalFunctionStat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(41), /* (, reduce: LocalFunctionStat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(41), /* ident, reduce: LocalFunctionStat */
		},
	},
	actionRow{ // S850
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(104), /* ;, reduce: FunctionCall */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(104), /* ., reduce: FunctionCall */
			reduce(104), /* :, reduce: FunctionCall */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			reduce(104), /* [, reduce: FunctionCall */
			nil,         /* ] */
			reduce(104), /* (, reduce: FunctionCall */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(104), /* string, reduce: FunctionCall */
			reduce(104), /* {, reduce: FunctionCall */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S851
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(430), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(446), /* ( */
			nil,        /* ) */
			shift(447), /* nil */
			shift(448), /* true */
			shift(449), /* false */
			shift(450), /* ... */
			shift(451), /* numdec */
			shift(452), /* numhex */
			shift(453), /* string */
			shift(456), /* { */
			nil,        /* } */
			shift(457), /* ident */
		},
	},
	actionRow{ // S852
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			reduce(98), /* =, reduce: Var */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(98), /* ,, reduce: Var */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			reduce(98), /* ., reduce: Var */
			reduce(98), /* :, reduce: Var */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			reduce(98), /* [, reduce: Var */
			nil,        /* ] */
			reduce(98), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(98), /* string, reduce: Var */
			reduce(98), /* {, reduce: Var */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S853
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(119), /* or, reduce: FunctionDef */
			reduce(119), /* and, reduce: FunctionDef */
			reduce(119), /* <, reduce: FunctionDef */
			reduce(119), /* <=, reduce: FunctionDef */
			reduce(119), /* >, reduce: FunctionDef */
			reduce(119), /* >=, reduce: FunctionDef */
			reduce(119), /* ==, reduce: FunctionDef */
			reduce(119), /* ~=, reduce: FunctionDef */
			reduce(119), /* |, reduce: FunctionDef */
			reduce(119), /* ~, reduce: FunctionDef */
			reduce(119), /* &, reduce: FunctionDef */
			reduce(119), /* .., reduce: FunctionDef */
			reduce(119), /* <<, reduce: FunctionDef */
			reduce(119), /* >>, reduce: FunctionDef */
			reduce(119), /* +, reduce: FunctionDef */
			reduce(119), /* -, reduce: FunctionDef */
			reduce(119), /* *, reduce: FunctionDef */
			reduce(119), /* /, reduce: FunctionDef */
			reduce(119), /* %, reduce: FunctionDef */
			reduce(119), /* //, reduce: FunctionDef */
			nil,         /* not */
			nil,         /* # */
			reduce(119), /* ^, reduce: FunctionDef */
			nil,         /* [ */
			reduce(119), /* ], reduce: FunctionDef */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S854
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(123), /* ), reduce: ParList */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			shift(521),  /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			shift(523),  /* ident */
		},
	},
	actionRow{ // S855
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(430), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(446), /* ( */
			nil,        /* ) */
			shift(447), /* nil */
			shift(448), /* true */
			shift(449), /* false */
			shift(450), /* ... */
			shift(451), /* numdec */
			shift(452), /* numhex */
			shift(453), /* string */
			shift(456), /* { */
			nil,        /* } */
			shift(457), /* ident */
		},
	},
	actionRow{ // S856
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(430), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(446), /* ( */
			nil,        /* ) */
			shift(447), /* nil */
			shift(448), /* true */
			shift(449), /* false */
			shift(450), /* ... */
			shift(451), /* numdec */
			shift(452), /* numhex */
			shift(453), /* string */
			shift(456), /* { */
			nil,        /* } */
			shift(457), /* ident */
		},
	},
	actionRow{ // S857
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(430), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(446), /* ( */
			nil,        /* ) */
			shift(447), /* nil */
			shift(448), /* true */
			shift(449), /* false */
			shift(450), /* ... */
			shift(451), /* numdec */
			shift(452), /* numhex */
			shift(453), /* string */
			shift(456), /* { */
			nil,        /* } */
			shift(457), /* ident */
		},
	},
	actionRow{ // S858
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(430), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(446), /* ( */
			nil,        /* ) */
			shift(447), /* nil */
			shift(448), /* true */
			shift(449), /* false */
			shift(450), /* ... */
			shift(451), /* numdec */
			shift(452), /* numhex */
			shift(453), /* string */
			shift(456), /* { */
			nil,        /* } */
			shift(457), /* ident */
		},
	},
	actionRow{ // S859
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(430), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(446), /* ( */
			nil,        /* ) */
			shift(447), /* nil */
			shift(448), /* true */
			shift(449), /* false */
			shift(450), /* ... */
			shift(451), /* numdec */
			shift(452), /* numhex */
			shift(453), /* string */
			shift(456), /* { */
			nil,        /* } */
			shift(457), /* ident */
		},
	},
	actionRow{ // S860
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(430), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(446), /* ( */
			nil,        /* ) */
			shift(447), /* nil */
			shift(448), /* true */
			shift(449), /* false */
			shift(450), /* ... */
			shift(451), /* numdec */
			shift(452), /* numhex */
			shift(453), /* string */
			shift(456), /* { */
			nil,        /* } */
			shift(457), /* ident */
		},
	},
	actionRow{ // S861
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(430), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(446), /* ( */
			nil,        /* ) */
			shift(447), /* nil */
			shift(448), /* true */
			shift(449), /* false */
			shift(450), /* ... */
			shift(451), /* numdec */
			shift(452), /* numhex */
			shift(453), /* string */
			shift(456), /* { */
			nil,        /* } */
			shift(457), /* ident */
		},
	},
	actionRow{ // S862
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(430), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(446), /* ( */
			nil,        /* ) */
			shift(447), /* nil */
			shift(448), /* true */
			shift(449), /* false */
			shift(450), /* ... */
			shift(451), /* numdec */
			shift(452), /* numhex */
			shift(453), /* string */
			shift(456), /* { */
			nil,        /* } */
			shift(457), /* ident */
		},
	},
	actionRow{ // S863
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(430), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(446), /* ( */
			nil,        /* ) */
			shift(447), /* nil */
			shift(448), /* true */
			shift(449), /* false */
			shift(450), /* ... */
			shift(451), /* numdec */
			shift(452), /* numhex */
			shift(453), /* string */
			shift(456), /* { */
			nil,        /* } */
			shift(457), /* ident */
		},
	},
	actionRow{ // S864
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(93), /* or, reduce: Factor */
			reduce(93), /* and, reduce: Factor */
			reduce(93), /* <, reduce: Factor */
			reduce(93), /* <=, reduce: Factor */
			reduce(93), /* >, reduce: Factor */
			reduce(93), /* >=, reduce: Factor */
			reduce(93), /* ==, reduce: Factor */
			reduce(93), /* ~=, reduce: Factor */
			reduce(93), /* |, reduce: Factor */
			reduce(93), /* ~, reduce: Factor */
			reduce(93), /* &, reduce: Factor */
			reduce(93), /* .., reduce: Factor */
			reduce(93), /* <<, reduce: Factor */
			reduce(93), /* >>, reduce: Factor */
			reduce(93), /* +, reduce: Factor */
			reduce(93), /* -, reduce: Factor */
			reduce(93), /* *, reduce: Factor */
			reduce(93), /* /, reduce: Factor */
			reduce(93), /* %, reduce: Factor */
			reduce(93), /* //, reduce: Factor */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			reduce(93), /* ], reduce: Factor */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S865
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(430), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(446), /* ( */
			nil,        /* ) */
			shift(447), /* nil */
			shift(448), /* true */
			shift(449), /* false */
			shift(450), /* ... */
			shift(451), /* numdec */
			shift(452), /* numhex */
			shift(453), /* string */
			shift(456), /* { */
			nil,        /* } */
			shift(457), /* ident */
		},
	},
	actionRow{ // S866
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(457), /* ident */
		},
	},
	actionRow{ // S867
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(426), /* ident */
		},
	},
	actionRow{ // S868
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(430), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(446), /* ( */
			nil,        /* ) */
			shift(447), /* nil */
			shift(448), /* true */
			shift(449), /* false */
			shift(450), /* ... */
			shift(451), /* numdec */
			shift(452), /* numhex */
			shift(453), /* string */
			shift(456), /* { */
			nil,        /* } */
			shift(457), /* ident */
		},
	},
	actionRow{ // S869
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(462),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(478),  /* ( */
			shift(1263), /* ) */
			shift(480),  /* nil */
			shift(481),  /* true */
			shift(482),  /* false */
			shift(483),  /* ... */
			shift(484),  /* numdec */
			shift(485),  /* numhex */
			shift(486),  /* string */
			shift(489),  /* { */
			nil,         /* } */
			shift(490),  /* ident */
		},
	},
	actionRow{ // S870
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(103), /* ., reduce: FunctionCall */
			reduce(103), /* :, reduce: FunctionCall */
			reduce(103), /* or, reduce: FunctionCall */
			reduce(103), /* and, reduce: FunctionCall */
			reduce(103), /* <, reduce: FunctionCall */
			reduce(103), /* <=, reduce: FunctionCall */
			reduce(103), /* >, reduce: FunctionCall */
			reduce(103), /* >=, reduce: FunctionCall */
			reduce(103), /* ==, reduce: FunctionCall */
			reduce(103), /* ~=, reduce: FunctionCall */
			reduce(103), /* |, reduce: FunctionCall */
			reduce(103), /* ~, reduce: FunctionCall */
			reduce(103), /* &, reduce: FunctionCall */
			reduce(103), /* .., reduce: FunctionCall */
			reduce(103), /* <<, reduce: FunctionCall */
			reduce(103), /* >>, reduce: FunctionCall */
			reduce(103), /* +, reduce: FunctionCall */
			reduce(103), /* -, reduce: FunctionCall */
			reduce(103), /* *, reduce: FunctionCall */
			reduce(103), /* /, reduce: FunctionCall */
			reduce(103), /* %, reduce: FunctionCall */
			reduce(103), /* //, reduce: FunctionCall */
			nil,         /* not */
			nil,         /* # */
			reduce(103), /* ^, reduce: FunctionCall */
			reduce(103), /* [, reduce: FunctionCall */
			reduce(103), /* ], reduce: FunctionCall */
			reduce(103), /* (, reduce: FunctionCall */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(103), /* string, reduce: FunctionCall */
			reduce(103), /* {, reduce: FunctionCall */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S871
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(118), /* ., reduce: Args */
			reduce(118), /* :, reduce: Args */
			reduce(118), /* or, reduce: Args */
			reduce(118), /* and, reduce: Args */
			reduce(118), /* <, reduce: Args */
			reduce(118), /* <=, reduce: Args */
			reduce(118), /* >, reduce: Args */
			reduce(118), /* >=, reduce: Args */
			reduce(118), /* ==, reduce: Args */
			reduce(118), /* ~=, reduce: Args */
			reduce(118), /* |, reduce: Args */
			reduce(118), /* ~, reduce: Args */
			reduce(118), /* &, reduce: Args */
			reduce(118), /* .., reduce: Args */
			reduce(118), /* <<, reduce: Args */
			reduce(118), /* >>, reduce: Args */
			reduce(118), /* +, reduce: Args */
			reduce(118), /* -, reduce: Args */
			reduce(118), /* *, reduce: Args */
			reduce(118), /* /, reduce: Args */
			reduce(118), /* %, reduce: Args */
			reduce(118), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(118), /* ^, reduce: Args */
			reduce(118), /* [, reduce: Args */
			reduce(118), /* ], reduce: Args */
			reduce(118), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(118), /* string, reduce: Args */
			reduce(118), /* {, reduce: Args */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S872
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(117), /* ., reduce: Args */
			reduce(117), /* :, reduce: Args */
			reduce(117), /* or, reduce: Args */
			reduce(117), /* and, reduce: Args */
			reduce(117), /* <, reduce: Args */
			reduce(117), /* <=, reduce: Args */
			reduce(117), /* >, reduce: Args */
			reduce(117), /* >=, reduce: Args */
			reduce(117), /* ==, reduce: Args */
			reduce(117), /* ~=, reduce: Args */
			reduce(117), /* |, reduce: Args */
			reduce(117), /* ~, reduce: Args */
			reduce(117), /* &, reduce: Args */
			reduce(117), /* .., reduce: Args */
			reduce(117), /* <<, reduce: Args */
			reduce(117), /* >>, reduce: Args */
			reduce(117), /* +, reduce: Args */
			reduce(117), /* -, reduce: Args */
			reduce(117), /* *, reduce: Args */
			reduce(117), /* /, reduce: Args */
			reduce(117), /* %, reduce: Args */
			reduce(117), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(117), /* ^, reduce: Args */
			reduce(117), /* [, reduce: Args */
			reduce(117), /* ], reduce: Args */
			reduce(117), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(117), /* string, reduce: Args */
			reduce(117), /* {, reduce: Args */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S873
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			shift(254), /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(268), /* ident */
		},
	},
	actionRow{ // S874
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			shift(492),  /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(1265), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S875
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			shift(569),  /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(570),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			shift(1266), /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S876
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(462), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(478), /* ( */
			nil,        /* ) */
			shift(480), /* nil */
			shift(481), /* true */
			shift(482), /* false */
			shift(483), /* ... */
			shift(484), /* numdec */
			shift(485), /* numhex */
			shift(486), /* string */
			shift(489), /* { */
			nil,        /* } */
			shift(490), /* ident */
		},
	},
	actionRow{ // S877
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(116), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(116), /* ., reduce: Args */
			reduce(116), /* :, reduce: Args */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			reduce(116), /* [, reduce: Args */
			nil,         /* ] */
			reduce(116), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(116), /* string, reduce: Args */
			reduce(116), /* {, reduce: Args */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S878
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(462), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(478), /* ( */
			nil,        /* ) */
			shift(480), /* nil */
			shift(481), /* true */
			shift(482), /* false */
			shift(483), /* ... */
			shift(484), /* numdec */
			shift(485), /* numhex */
			shift(486), /* string */
			shift(489), /* { */
			nil,        /* } */
			shift(490), /* ident */
		},
	},
	actionRow{ // S879
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(119), /* ,, reduce: FunctionDef */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(119), /* or, reduce: FunctionDef */
			reduce(119), /* and, reduce: FunctionDef */
			reduce(119), /* <, reduce: FunctionDef */
			reduce(119), /* <=, reduce: FunctionDef */
			reduce(119), /* >, reduce: FunctionDef */
			reduce(119), /* >=, reduce: FunctionDef */
			reduce(119), /* ==, reduce: FunctionDef */
			reduce(119), /* ~=, reduce: FunctionDef */
			reduce(119), /* |, reduce: FunctionDef */
			reduce(119), /* ~, reduce: FunctionDef */
			reduce(119), /* &, reduce: FunctionDef */
			reduce(119), /* .., reduce: FunctionDef */
			reduce(119), /* <<, reduce: FunctionDef */
			reduce(119), /* >>, reduce: FunctionDef */
			reduce(119), /* +, reduce: FunctionDef */
			reduce(119), /* -, reduce: FunctionDef */
			reduce(119), /* *, reduce: FunctionDef */
			reduce(119), /* /, reduce: FunctionDef */
			reduce(119), /* %, reduce: FunctionDef */
			reduce(119), /* //, reduce: FunctionDef */
			nil,         /* not */
			nil,         /* # */
			reduce(119), /* ^, reduce: FunctionDef */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(119), /* ), reduce: FunctionDef */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S880
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(123), /* ), reduce: ParList */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			shift(521),  /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			shift(523),  /* ident */
		},
	},
	actionRow{ // S881
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(462), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(478), /* ( */
			nil,        /* ) */
			shift(480), /* nil */
			shift(481), /* true */
			shift(482), /* false */
			shift(483), /* ... */
			shift(484), /* numdec */
			shift(485), /* numhex */
			shift(486), /* string */
			shift(489), /* { */
			nil,        /* } */
			shift(490), /* ident */
		},
	},
	actionRow{ // S882
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(462), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(478), /* ( */
			nil,        /* ) */
			shift(480), /* nil */
			shift(481), /* true */
			shift(482), /* false */
			shift(483), /* ... */
			shift(484), /* numdec */
			shift(485), /* numhex */
			shift(486), /* string */
			shift(489), /* { */
			nil,        /* } */
			shift(490), /* ident */
		},
	},
	actionRow{ // S883
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(462), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(478), /* ( */
			nil,        /* ) */
			shift(480), /* nil */
			shift(481), /* true */
			shift(482), /* false */
			shift(483), /* ... */
			shift(484), /* numdec */
			shift(485), /* numhex */
			shift(486), /* string */
			shift(489), /* { */
			nil,        /* } */
			shift(490), /* ident */
		},
	},
	actionRow{ // S884
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(462), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(478), /* ( */
			nil,        /* ) */
			shift(480), /* nil */
			shift(481), /* true */
			shift(482), /* false */
			shift(483), /* ... */
			shift(484), /* numdec */
			shift(485), /* numhex */
			shift(486), /* string */
			shift(489), /* { */
			nil,        /* } */
			shift(490), /* ident */
		},
	},
	actionRow{ // S885
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(462), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(478), /* ( */
			nil,        /* ) */
			shift(480), /* nil */
			shift(481), /* true */
			shift(482), /* false */
			shift(483), /* ... */
			shift(484), /* numdec */
			shift(485), /* numhex */
			shift(486), /* string */
			shift(489), /* { */
			nil,        /* } */
			shift(490), /* ident */
		},
	},
	actionRow{ // S886
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(462), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(478), /* ( */
			nil,        /* ) */
			shift(480), /* nil */
			shift(481), /* true */
			shift(482), /* false */
			shift(483), /* ... */
			shift(484), /* numdec */
			shift(485), /* numhex */
			shift(486), /* string */
			shift(489), /* { */
			nil,        /* } */
			shift(490), /* ident */
		},
	},
	actionRow{ // S887
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(462), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(478), /* ( */
			nil,        /* ) */
			shift(480), /* nil */
			shift(481), /* true */
			shift(482), /* false */
			shift(483), /* ... */
			shift(484), /* numdec */
			shift(485), /* numhex */
			shift(486), /* string */
			shift(489), /* { */
			nil,        /* } */
			shift(490), /* ident */
		},
	},
	actionRow{ // S888
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(462), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(478), /* ( */
			nil,        /* ) */
			shift(480), /* nil */
			shift(481), /* true */
			shift(482), /* false */
			shift(483), /* ... */
			shift(484), /* numdec */
			shift(485), /* numhex */
			shift(486), /* string */
			shift(489), /* { */
			nil,        /* } */
			shift(490), /* ident */
		},
	},
	actionRow{ // S889
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(462), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(478), /* ( */
			nil,        /* ) */
			shift(480), /* nil */
			shift(481), /* true */
			shift(482), /* false */
			shift(483), /* ... */
			shift(484), /* numdec */
			shift(485), /* numhex */
			shift(486), /* string */
			shift(489), /* { */
			nil,        /* } */
			shift(490), /* ident */
		},
	},
	actionRow{ // S890
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(93), /* ,, reduce: Factor */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(93), /* or, reduce: Factor */
			reduce(93), /* and, reduce: Factor */
			reduce(93), /* <, reduce: Factor */
			reduce(93), /* <=, reduce: Factor */
			reduce(93), /* >, reduce: Factor */
			reduce(93), /* >=, reduce: Factor */
			reduce(93), /* ==, reduce: Factor */
			reduce(93), /* ~=, reduce: Factor */
			reduce(93), /* |, reduce: Factor */
			reduce(93), /* ~, reduce: Factor */
			reduce(93), /* &, reduce: Factor */
			reduce(93), /* .., reduce: Factor */
			reduce(93), /* <<, reduce: Factor */
			reduce(93), /* >>, reduce: Factor */
			reduce(93), /* +, reduce: Factor */
			reduce(93), /* -, reduce: Factor */
			reduce(93), /* *, reduce: Factor */
			reduce(93), /* /, reduce: Factor */
			reduce(93), /* %, reduce: Factor */
			reduce(93), /* //, reduce: Factor */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			reduce(93), /* ), reduce: Factor */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S891
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(462), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(478), /* ( */
			nil,        /* ) */
			shift(480), /* nil */
			shift(481), /* true */
			shift(482), /* false */
			shift(483), /* ... */
			shift(484), /* numdec */
			shift(485), /* numhex */
			shift(486), /* string */
			shift(489), /* { */
			nil,        /* } */
			shift(490), /* ident */
		},
	},
	actionRow{ // S892
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(490), /* ident */
		},
	},
	actionRow{ // S893
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(426), /* ident */
		},
	},
	actionRow{ // S894
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(430), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(446), /* ( */
			nil,        /* ) */
			shift(447), /* nil */
			shift(448), /* true */
			shift(449), /* false */
			shift(450), /* ... */
			shift(451), /* numdec */
			shift(452), /* numhex */
			shift(453), /* string */
			shift(456), /* { */
			nil,        /* } */
			shift(457), /* ident */
		},
	},
	actionRow{ // S895
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(462),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(478),  /* ( */
			shift(1285), /* ) */
			shift(480),  /* nil */
			shift(481),  /* true */
			shift(482),  /* false */
			shift(483),  /* ... */
			shift(484),  /* numdec */
			shift(485),  /* numhex */
			shift(486),  /* string */
			shift(489),  /* { */
			nil,         /* } */
			shift(490),  /* ident */
		},
	},
	actionRow{ // S896
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(103), /* ,, reduce: FunctionCall */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(103), /* ., reduce: FunctionCall */
			reduce(103), /* :, reduce: FunctionCall */
			reduce(103), /* or, reduce: FunctionCall */
			reduce(103), /* and, reduce: FunctionCall */
			reduce(103), /* <, reduce: FunctionCall */
			reduce(103), /* <=, reduce: FunctionCall */
			reduce(103), /* >, reduce: FunctionCall */
			reduce(103), /* >=, reduce: FunctionCall */
			reduce(103), /* ==, reduce: FunctionCall */
			reduce(103), /* ~=, reduce: FunctionCall */
			reduce(103), /* |, reduce: FunctionCall */
			reduce(103), /* ~, reduce: FunctionCall */
			reduce(103), /* &, reduce: FunctionCall */
			reduce(103), /* .., reduce: FunctionCall */
			reduce(103), /* <<, reduce: FunctionCall */
			reduce(103), /* >>, reduce: FunctionCall */
			reduce(103), /* +, reduce: FunctionCall */
			reduce(103), /* -, reduce: FunctionCall */
			reduce(103), /* *, reduce: FunctionCall */
			reduce(103), /* /, reduce: FunctionCall */
			reduce(103), /* %, reduce: FunctionCall */
			reduce(103), /* //, reduce: FunctionCall */
			nil,         /* not */
			nil,         /* # */
			reduce(103), /* ^, reduce: FunctionCall */
			reduce(103), /* [, reduce: FunctionCall */
			nil,         /* ] */
			reduce(103), /* (, reduce: FunctionCall */
			reduce(103), /* ), reduce: FunctionCall */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(103), /* string, reduce: FunctionCall */
			reduce(103), /* {, reduce: FunctionCall */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S897
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(118), /* ,, reduce: Args */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(118), /* ., reduce: Args */
			reduce(118), /* :, reduce: Args */
			reduce(118), /* or, reduce: Args */
			reduce(118), /* and, reduce: Args */
			reduce(118), /* <, reduce: Args */
			reduce(118), /* <=, reduce: Args */
			reduce(118), /* >, reduce: Args */
			reduce(118), /* >=, reduce: Args */
			reduce(118), /* ==, reduce: Args */
			reduce(118), /* ~=, reduce: Args */
			reduce(118), /* |, reduce: Args */
			reduce(118), /* ~, reduce: Args */
			reduce(118), /* &, reduce: Args */
			reduce(118), /* .., reduce: Args */
			reduce(118), /* <<, reduce: Args */
			reduce(118), /* >>, reduce: Args */
			reduce(118), /* +, reduce: Args */
			reduce(118), /* -, reduce: Args */
			reduce(118), /* *, reduce: Args */
			reduce(118), /* /, reduce: Args */
			reduce(118), /* %, reduce: Args */
			reduce(118), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(118), /* ^, reduce: Args */
			reduce(118), /* [, reduce: Args */
			nil,         /* ] */
			reduce(118), /* (, reduce: Args */
			reduce(118), /* ), reduce: Args */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(118), /* string, reduce: Args */
			reduce(118), /* {, reduce: Args */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S898
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(117), /* ,, reduce: Args */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(117), /* ., reduce: Args */
			reduce(117), /* :, reduce: Args */
			reduce(117), /* or, reduce: Args */
			reduce(117), /* and, reduce: Args */
			reduce(117), /* <, reduce: Args */
			reduce(117), /* <=, reduce: Args */
			reduce(117), /* >, reduce: Args */
			reduce(117), /* >=, reduce: Args */
			reduce(117), /* ==, reduce: Args */
			reduce(117), /* ~=, reduce: Args */
			reduce(117), /* |, reduce: Args */
			reduce(117), /* ~, reduce: Args */
			reduce(117), /* &, reduce: Args */
			reduce(117), /* .., reduce: Args */
			reduce(117), /* <<, reduce: Args */
			reduce(117), /* >>, reduce: Args */
			reduce(117), /* +, reduce: Args */
			reduce(117), /* -, reduce: Args */
			reduce(117), /* *, reduce: Args */
			reduce(117), /* /, reduce: Args */
			reduce(117), /* %, reduce: Args */
			reduce(117), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(117), /* ^, reduce: Args */
			reduce(117), /* [, reduce: Args */
			nil,         /* ] */
			reduce(117), /* (, reduce: Args */
			reduce(117), /* ), reduce: Args */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(117), /* string, reduce: Args */
			reduce(117), /* {, reduce: Args */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S899
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			shift(254), /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(268), /* ident */
		},
	},
	actionRow{ // S900
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			shift(492),  /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(1287), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S901
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			shift(569),  /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(570),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			shift(1288), /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S902
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(125), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(125), /* ., reduce: TableConstructor */
			reduce(125), /* :, reduce: TableConstructor */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			reduce(125), /* [, reduce: TableConstructor */
			nil,         /* ] */
			reduce(125), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(125), /* string, reduce: TableConstructor */
			reduce(125), /* {, reduce: TableConstructor */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S903
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(238),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			shift(254),  /* [ */
			nil,         /* ] */
			shift(255),  /* ( */
			nil,         /* ) */
			shift(256),  /* nil */
			shift(257),  /* true */
			shift(258),  /* false */
			shift(259),  /* ... */
			shift(260),  /* numdec */
			shift(261),  /* numhex */
			shift(262),  /* string */
			shift(265),  /* { */
			shift(1290), /* } */
			shift(268),  /* ident */
		},
	},
	actionRow{ // S904
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(56), /* or, reduce: Exp */
			shift(496), /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			reduce(56), /* ), reduce: Exp */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S905
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(1291), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S906
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(58), /* or, reduce: AndExp */
			reduce(58), /* and, reduce: AndExp */
			shift(203), /* < */
			shift(204), /* <= */
			shift(205), /* > */
			shift(206), /* >= */
			shift(207), /* == */
			shift(208), /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			reduce(58), /* ), reduce: AndExp */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S907
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(66), /* or, reduce: CompExp */
			reduce(66), /* and, reduce: CompExp */
			reduce(66), /* <, reduce: CompExp */
			reduce(66), /* <=, reduce: CompExp */
			reduce(66), /* >, reduce: CompExp */
			reduce(66), /* >=, reduce: CompExp */
			reduce(66), /* ==, reduce: CompExp */
			reduce(66), /* ~=, reduce: CompExp */
			shift(498), /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			reduce(66), /* ), reduce: CompExp */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S908
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(68), /* or, reduce: BitOrExp */
			reduce(68), /* and, reduce: BitOrExp */
			reduce(68), /* <, reduce: BitOrExp */
			reduce(68), /* <=, reduce: BitOrExp */
			reduce(68), /* >, reduce: BitOrExp */
			reduce(68), /* >=, reduce: BitOrExp */
			reduce(68), /* ==, reduce: BitOrExp */
			reduce(68), /* ~=, reduce: BitOrExp */
			reduce(68), /* |, reduce: BitOrExp */
			shift(499), /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			reduce(68), /* ), reduce: BitOrExp */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S909
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(70), /* or, reduce: BitXorExp */
			reduce(70), /* and, reduce: BitXorExp */
			reduce(70), /* <, reduce: BitXorExp */
			reduce(70), /* <=, reduce: BitXorExp */
			reduce(70), /* >, reduce: BitXorExp */
			reduce(70), /* >=, reduce: BitXorExp */
			reduce(70), /* ==, reduce: BitXorExp */
			reduce(70), /* ~=, reduce: BitXorExp */
			reduce(70), /* |, reduce: BitXorExp */
			reduce(70), /* ~, reduce: BitXorExp */
			shift(500), /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			reduce(70), /* ), reduce: BitXorExp */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S910
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(72), /* or, reduce: BitAndExp */
			reduce(72), /* and, reduce: BitAndExp */
			reduce(72), /* <, reduce: BitAndExp */
			reduce(72), /* <=, reduce: BitAndExp */
			reduce(72), /* >, reduce: BitAndExp */
			reduce(72), /* >=, reduce: BitAndExp */
			reduce(72), /* ==, reduce: BitAndExp */
			reduce(72), /* ~=, reduce: BitAndExp */
			reduce(72), /* |, reduce: BitAndExp */
			reduce(72), /* ~, reduce: BitAndExp */
			reduce(72), /* &, reduce: BitAndExp */
			shift(501), /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			reduce(72), /* ), reduce: BitAndExp */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S911
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(74), /* or, reduce: ConcatExp */
			reduce(74), /* and, reduce: ConcatExp */
			reduce(74), /* <, reduce: ConcatExp */
			reduce(74), /* <=, reduce: ConcatExp */
			reduce(74), /* >, reduce: ConcatExp */
			reduce(74), /* >=, reduce: ConcatExp */
			reduce(74), /* ==, reduce: ConcatExp */
			reduce(74), /* ~=, reduce: ConcatExp */
			reduce(74), /* |, reduce: ConcatExp */
			reduce(74), /* ~, reduce: ConcatExp */
			reduce(74), /* &, reduce: ConcatExp */
			reduce(74), /* .., reduce: ConcatExp */
			shift(214), /* << */
			shift(215), /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			reduce(74), /* ), reduce: ConcatExp */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S912
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(78), /* or, reduce: ShiftExp */
			reduce(78), /* and, reduce: ShiftExp */
			reduce(78), /* <, reduce: ShiftExp */
			reduce(78), /* <=, reduce: ShiftExp */
			reduce(78), /* >, reduce: ShiftExp */
			reduce(78), /* >=, reduce: ShiftExp */
			reduce(78), /* ==, reduce: ShiftExp */
			reduce(78), /* ~=, reduce: ShiftExp */
			reduce(78), /* |, reduce: ShiftExp */
			reduce(78), /* ~, reduce: ShiftExp */
			reduce(78), /* &, reduce: ShiftExp */
			reduce(78), /* .., reduce: ShiftExp */
			reduce(78), /* <<, reduce: ShiftExp */
			reduce(78), /* >>, reduce: ShiftExp */
			shift(217), /* + */
			shift(218), /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			reduce(78), /* ), reduce: ShiftExp */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S913
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(82), /* or, reduce: Sum */
			reduce(82), /* and, reduce: Sum */
			reduce(82), /* <, reduce: Sum */
			reduce(82), /* <=, reduce: Sum */
			reduce(82), /* >, reduce: Sum */
			reduce(82), /* >=, reduce: Sum */
			reduce(82), /* ==, reduce: Sum */
			reduce(82), /* ~=, reduce: Sum */
			reduce(82), /* |, reduce: Sum */
			reduce(82), /* ~, reduce: Sum */
			reduce(82), /* &, reduce: Sum */
			reduce(82), /* .., reduce: Sum */
			reduce(82), /* <<, reduce: Sum */
			reduce(82), /* >>, reduce: Sum */
			reduce(82), /* +, reduce: Sum */
			reduce(82), /* -, reduce: Sum */
			shift(220), /* * */
			shift(221), /* / */
			shift(222), /* % */
			shift(223), /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			reduce(82), /* ), reduce: Sum */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S914
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(88), /* or, reduce: Term */
			reduce(88), /* and, reduce: Term */
			reduce(88), /* <, reduce: Term */
			reduce(88), /* <=, reduce: Term */
			reduce(88), /* >, reduce: Term */
			reduce(88), /* >=, reduce: Term */
			reduce(88), /* ==, reduce: Term */
			reduce(88), /* ~=, reduce: Term */
			reduce(88), /* |, reduce: Term */
			reduce(88), /* ~, reduce: Term */
			reduce(88), /* &, reduce: Term */
			reduce(88), /* .., reduce: Term */
			reduce(88), /* <<, reduce: Term */
			reduce(88), /* >>, reduce: Term */
			reduce(88), /* +, reduce: Term */
			reduce(88), /* -, reduce: Term */
			reduce(88), /* *, reduce: Term */
			reduce(88), /* /, reduce: Term */
			reduce(88), /* %, reduce: Term */
			reduce(88), /* //, reduce: Term */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			reduce(88), /* ), reduce: Term */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S915
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(96), /* or, reduce: Power */
			reduce(96), /* and, reduce: Power */
			reduce(96), /* <, reduce: Power */
			reduce(96), /* <=, reduce: Power */
			reduce(96), /* >, reduce: Power */
			reduce(96), /* >=, reduce: Power */
			reduce(96), /* ==, reduce: Power */
			reduce(96), /* ~=, reduce: Power */
			reduce(96), /* |, reduce: Power */
			reduce(96), /* ~, reduce: Power */
			reduce(96), /* &, reduce: Power */
			reduce(96), /* .., reduce: Power */
			reduce(96), /* <<, reduce: Power */
			reduce(96), /* >>, reduce: Power */
			reduce(96), /* +, reduce: Power */
			reduce(96), /* -, reduce: Power */
			reduce(96), /* *, reduce: Power */
			reduce(96), /* /, reduce: Power */
			reduce(96), /* %, reduce: Power */
			reduce(96), /* //, reduce: Power */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			reduce(96), /* ), reduce: Power */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S916
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			reduce(99), /* ., reduce: Var */
			reduce(99), /* :, reduce: Var */
			reduce(99), /* or, reduce: Var */
			reduce(99), /* and, reduce: Var */
			reduce(99), /* <, reduce: Var */
			reduce(99), /* <=, reduce: Var */
			reduce(99), /* >, reduce: Var */
			reduce(99), /* >=, reduce: Var */
			reduce(99), /* ==, reduce: Var */
			reduce(99), /* ~=, reduce: Var */
			reduce(99), /* |, reduce: Var */
			reduce(99), /* ~, reduce: Var */
			reduce(99), /* &, reduce: Var */
			reduce(99), /* .., reduce: Var */
			reduce(99), /* <<, reduce: Var */
			reduce(99), /* >>, reduce: Var */
			reduce(99), /* +, reduce: Var */
			reduce(99), /* -, reduce: Var */
			reduce(99), /* *, reduce: Var */
			reduce(99), /* /, reduce: Var */
			reduce(99), /* %, reduce: Var */
			reduce(99), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(99), /* ^, reduce: Var */
			reduce(99), /* [, reduce: Var */
			nil,        /* ] */
			reduce(99), /* (, reduce: Var */
			reduce(99), /* ), reduce: Var */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(99), /* string, reduce: Var */
			reduce(99), /* {, reduce: Var */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S917
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(510), /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			shift(512), /* string */
			shift(514), /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S918
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			shift(851),  /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			shift(1293), /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S919
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(876),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(1294), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S920
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(115), /* ., reduce: Args */
			reduce(115), /* :, reduce: Args */
			reduce(115), /* or, reduce: Args */
			reduce(115), /* and, reduce: Args */
			reduce(115), /* <, reduce: Args */
			reduce(115), /* <=, reduce: Args */
			reduce(115), /* >, reduce: Args */
			reduce(115), /* >=, reduce: Args */
			reduce(115), /* ==, reduce: Args */
			reduce(115), /* ~=, reduce: Args */
			reduce(115), /* |, reduce: Args */
			reduce(115), /* ~, reduce: Args */
			reduce(115), /* &, reduce: Args */
			reduce(115), /* .., reduce: Args */
			reduce(115), /* <<, reduce: Args */
			reduce(115), /* >>, reduce: Args */
			reduce(115), /* +, reduce: Args */
			reduce(115), /* -, reduce: Args */
			reduce(115), /* *, reduce: Args */
			reduce(115), /* /, reduce: Args */
			reduce(115), /* %, reduce: Args */
			reduce(115), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(115), /* ^, reduce: Args */
			reduce(115), /* [, reduce: Args */
			nil,         /* ] */
			reduce(115), /* (, reduce: Args */
			reduce(115), /* ), reduce: Args */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(115), /* string, reduce: Args */
			reduce(115), /* {, reduce: Args */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S921
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			shift(569),  /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(570),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			shift(1295), /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S922
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(102), /* ., reduce: PrefixExp */
			reduce(102), /* :, reduce: PrefixExp */
			reduce(102), /* or, reduce: PrefixExp */
			reduce(102), /* and, reduce: PrefixExp */
			reduce(102), /* <, reduce: PrefixExp */
			reduce(102), /* <=, reduce: PrefixExp */
			reduce(102), /* >, reduce: PrefixExp */
			reduce(102), /* >=, reduce: PrefixExp */
			reduce(102), /* ==, reduce: PrefixExp */
			reduce(102), /* ~=, reduce: PrefixExp */
			reduce(102), /* |, reduce: PrefixExp */
			reduce(102), /* ~, reduce: PrefixExp */
			reduce(102), /* &, reduce: PrefixExp */
			reduce(102), /* .., reduce: PrefixExp */
			reduce(102), /* <<, reduce: PrefixExp */
			reduce(102), /* >>, reduce: PrefixExp */
			reduce(102), /* +, reduce: PrefixExp */
			reduce(102), /* -, reduce: PrefixExp */
			reduce(102), /* *, reduce: PrefixExp */
			reduce(102), /* /, reduce: PrefixExp */
			reduce(102), /* %, reduce: PrefixExp */
			reduce(102), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(102), /* ^, reduce: PrefixExp */
			reduce(102), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(102), /* (, reduce: PrefixExp */
			reduce(102), /* ), reduce: PrefixExp */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(102), /* string, reduce: PrefixExp */
			reduce(102), /* {, reduce: PrefixExp */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S923
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(125), /* or, reduce: TableConstructor */
			reduce(125), /* and, reduce: TableConstructor */
			reduce(125), /* <, reduce: TableConstructor */
			reduce(125), /* <=, reduce: TableConstructor */
			reduce(125), /* >, reduce: TableConstructor */
			reduce(125), /* >=, reduce: TableConstructor */
			reduce(125), /* ==, reduce: TableConstructor */
			reduce(125), /* ~=, reduce: TableConstructor */
			reduce(125), /* |, reduce: TableConstructor */
			reduce(125), /* ~, reduce: TableConstructor */
			reduce(125), /* &, reduce: TableConstructor */
			reduce(125), /* .., reduce: TableConstructor */
			reduce(125), /* <<, reduce: TableConstructor */
			reduce(125), /* >>, reduce: TableConstructor */
			reduce(125), /* +, reduce: TableConstructor */
			reduce(125), /* -, reduce: TableConstructor */
			reduce(125), /* *, reduce: TableConstructor */
			reduce(125), /* /, reduce: TableConstructor */
			reduce(125), /* %, reduce: TableConstructor */
			reduce(125), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(125), /* ^, reduce: TableConstructor */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(125), /* ), reduce: TableConstructor */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S924
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(238),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			shift(254),  /* [ */
			nil,         /* ] */
			shift(255),  /* ( */
			nil,         /* ) */
			shift(256),  /* nil */
			shift(257),  /* true */
			shift(258),  /* false */
			shift(259),  /* ... */
			shift(260),  /* numdec */
			shift(261),  /* numhex */
			shift(262),  /* string */
			shift(265),  /* { */
			shift(1297), /* } */
			shift(268),  /* ident */
		},
	},
	actionRow{ // S925
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			shift(1299), /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			shift(523),  /* ident */
		},
	},
	actionRow{ // S926
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S927
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(104), /* $, reduce: FunctionCall */
			nil,         /* return */
			reduce(104), /* ;, reduce: FunctionCall */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(104), /* ,, reduce: FunctionCall */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(104), /* ., reduce: FunctionCall */
			reduce(104), /* :, reduce: FunctionCall */
			reduce(104), /* or, reduce: FunctionCall */
			reduce(104), /* and, reduce: FunctionCall */
			reduce(104), /* <, reduce: FunctionCall */
			reduce(104), /* <=, reduce: FunctionCall */
			reduce(104), /* >, reduce: FunctionCall */
			reduce(104), /* >=, reduce: FunctionCall */
			reduce(104), /* ==, reduce: FunctionCall */
			reduce(104), /* ~=, reduce: FunctionCall */
			reduce(104), /* |, reduce: FunctionCall */
			reduce(104), /* ~, reduce: FunctionCall */
			reduce(104), /* &, reduce: FunctionCall */
			reduce(104), /* .., reduce: FunctionCall */
			reduce(104), /* <<, reduce: FunctionCall */
			reduce(104), /* >>, reduce: FunctionCall */
			reduce(104), /* +, reduce: FunctionCall */
			reduce(104), /* -, reduce: FunctionCall */
			reduce(104), /* *, reduce: FunctionCall */
			reduce(104), /* /, reduce: FunctionCall */
			reduce(104), /* %, reduce: FunctionCall */
			reduce(104), /* //, reduce: FunctionCall */
			nil,         /* not */
			nil,         /* # */
			reduce(104), /* ^, reduce: FunctionCall */
			reduce(104), /* [, reduce: FunctionCall */
			nil,         /* ] */
			reduce(104), /* (, reduce: FunctionCall */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(104), /* string, reduce: FunctionCall */
			reduce(104), /* {, reduce: FunctionCall */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S928
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(98), /* $, reduce: Var */
			nil,        /* return */
			reduce(98), /* ;, reduce: Var */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(98), /* ,, reduce: Var */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			reduce(98), /* ., reduce: Var */
			reduce(98), /* :, reduce: Var */
			reduce(98), /* or, reduce: Var */
			reduce(98), /* and, reduce: Var */
			reduce(98), /* <, reduce: Var */
			reduce(98), /* <=, reduce: Var */
			reduce(98), /* >, reduce: Var */
			reduce(98), /* >=, reduce: Var */
			reduce(98), /* ==, reduce: Var */
			reduce(98), /* ~=, reduce: Var */
			reduce(98), /* |, reduce: Var */
			reduce(98), /* ~, reduce: Var */
			reduce(98), /* &, reduce: Var */
			reduce(98), /* .., reduce: Var */
			reduce(98), /* <<, reduce: Var */
			reduce(98), /* >>, reduce: Var */
			reduce(98), /* +, reduce: Var */
			reduce(98), /* -, reduce: Var */
			reduce(98), /* *, reduce: Var */
			reduce(98), /* /, reduce: Var */
			reduce(98), /* %, reduce: Var */
			reduce(98), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(98), /* ^, reduce: Var */
			reduce(98), /* [, reduce: Var */
			nil,        /* ] */
			reduce(98), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(98), /* string, reduce: Var */
			reduce(98), /* {, reduce: Var */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S929
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(116), /* $, reduce: Args */
			nil,         /* return */
			reduce(116), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(116), /* ,, reduce: Args */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(116), /* ., reduce: Args */
			reduce(116), /* :, reduce: Args */
			reduce(116), /* or, reduce: Args */
			reduce(116), /* and, reduce: Args */
			reduce(116), /* <, reduce: Args */
			reduce(116), /* <=, reduce: Args */
			reduce(116), /* >, reduce: Args */
			reduce(116), /* >=, reduce: Args */
			reduce(116), /* ==, reduce: Args */
			reduce(116), /* ~=, reduce: Args */
			reduce(116), /* |, reduce: Args */
			reduce(116), /* ~, reduce: Args */
			reduce(116), /* &, reduce: Args */
			reduce(116), /* .., reduce: Args */
			reduce(116), /* <<, reduce: Args */
			reduce(116), /* >>, reduce: Args */
			reduce(116), /* +, reduce: Args */
			reduce(116), /* -, reduce: Args */
			reduce(116), /* *, reduce: Args */
			reduce(116), /* /, reduce: Args */
			reduce(116), /* %, reduce: Args */
			reduce(116), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(116), /* ^, reduce: Args */
			reduce(116), /* [, reduce: Args */
			nil,         /* ] */
			reduce(116), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(116), /* string, reduce: Args */
			reduce(116), /* {, reduce: Args */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S930
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(125), /* $, reduce: TableConstructor */
			nil,         /* return */
			reduce(125), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(125), /* ,, reduce: TableConstructor */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(125), /* ., reduce: TableConstructor */
			reduce(125), /* :, reduce: TableConstructor */
			reduce(125), /* or, reduce: TableConstructor */
			reduce(125), /* and, reduce: TableConstructor */
			reduce(125), /* <, reduce: TableConstructor */
			reduce(125), /* <=, reduce: TableConstructor */
			reduce(125), /* >, reduce: TableConstructor */
			reduce(125), /* >=, reduce: TableConstructor */
			reduce(125), /* ==, reduce: TableConstructor */
			reduce(125), /* ~=, reduce: TableConstructor */
			reduce(125), /* |, reduce: TableConstructor */
			reduce(125), /* ~, reduce: TableConstructor */
			reduce(125), /* &, reduce: TableConstructor */
			reduce(125), /* .., reduce: TableConstructor */
			reduce(125), /* <<, reduce: TableConstructor */
			reduce(125), /* >>, reduce: TableConstructor */
			reduce(125), /* +, reduce: TableConstructor */
			reduce(125), /* -, reduce: TableConstructor */
			reduce(125), /* *, reduce: TableConstructor */
			reduce(125), /* /, reduce: TableConstructor */
			reduce(125), /* %, reduce: TableConstructor */
			reduce(125), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(125), /* ^, reduce: TableConstructor */
			reduce(125), /* [, reduce: TableConstructor */
			nil,         /* ] */
			reduce(125), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(125), /* string, reduce: TableConstructor */
			reduce(125), /* {, reduce: TableConstructor */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S931
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(238),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			shift(254),  /* [ */
			nil,         /* ] */
			shift(255),  /* ( */
			nil,         /* ) */
			shift(256),  /* nil */
			shift(257),  /* true */
			shift(258),  /* false */
			shift(259),  /* ... */
			shift(260),  /* numdec */
			shift(261),  /* numhex */
			shift(262),  /* string */
			shift(265),  /* { */
			shift(1301), /* } */
			shift(268),  /* ident */
		},
	},
	actionRow{ // S932
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(132), /* ;, reduce: Field */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(132), /* ,, reduce: Field */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			shift(542),  /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			reduce(132), /* }, reduce: Field */
			nil,         /* ident */
		},
	},
	actionRow{ // S933
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(56), /* ;, reduce: Exp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(56), /* ,, reduce: Exp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(56), /* or, reduce: Exp */
			shift(545), /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			reduce(56), /* }, reduce: Exp */
			nil,        /* ident */
		},
	},
	actionRow{ // S934
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(1302), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S935
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(58), /* ;, reduce: AndExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(58), /* ,, reduce: AndExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(58), /* or, reduce: AndExp */
			reduce(58), /* and, reduce: AndExp */
			shift(203), /* < */
			shift(204), /* <= */
			shift(205), /* > */
			shift(206), /* >= */
			shift(207), /* == */
			shift(208), /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			reduce(58), /* }, reduce: AndExp */
			nil,        /* ident */
		},
	},
	actionRow{ // S936
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(66), /* ;, reduce: CompExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(66), /* ,, reduce: CompExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(66), /* or, reduce: CompExp */
			reduce(66), /* and, reduce: CompExp */
			reduce(66), /* <, reduce: CompExp */
			reduce(66), /* <=, reduce: CompExp */
			reduce(66), /* >, reduce: CompExp */
			reduce(66), /* >=, reduce: CompExp */
			reduce(66), /* ==, reduce: CompExp */
			reduce(66), /* ~=, reduce: CompExp */
			shift(547), /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			reduce(66), /* }, reduce: CompExp */
			nil,        /* ident */
		},
	},
	actionRow{ // S937
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(68), /* ;, reduce: BitOrExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(68), /* ,, reduce: BitOrExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(68), /* or, reduce: BitOrExp */
			reduce(68), /* and, reduce: BitOrExp */
			reduce(68), /* <, reduce: BitOrExp */
			reduce(68), /* <=, reduce: BitOrExp */
			reduce(68), /* >, reduce: BitOrExp */
			reduce(68), /* >=, reduce: BitOrExp */
			reduce(68), /* ==, reduce: BitOrExp */
			reduce(68), /* ~=, reduce: BitOrExp */
			reduce(68), /* |, reduce: BitOrExp */
			shift(548), /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			reduce(68), /* }, reduce: BitOrExp */
			nil,        /* ident */
		},
	},
	actionRow{ // S938
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(70), /* ;, reduce: BitXorExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(70), /* ,, reduce: BitXorExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(70), /* or, reduce: BitXorExp */
			reduce(70), /* and, reduce: BitXorExp */
			reduce(70), /* <, reduce: BitXorExp */
			reduce(70), /* <=, reduce: BitXorExp */
			reduce(70), /* >, reduce: BitXorExp */
			reduce(70), /* >=, reduce: BitXorExp */
			reduce(70), /* ==, reduce: BitXorExp */
			reduce(70), /* ~=, reduce: BitXorExp */
			reduce(70), /* |, reduce: BitXorExp */
			reduce(70), /* ~, reduce: BitXorExp */
			shift(549), /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			reduce(70), /* }, reduce: BitXorExp */
			nil,        /* ident */
		},
	},
	actionRow{ // S939
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(72), /* ;, reduce: BitAndExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(72), /* ,, reduce: BitAndExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(72), /* or, reduce: BitAndExp */
			reduce(72), /* and, reduce: BitAndExp */
			reduce(72), /* <, reduce: BitAndExp */
			reduce(72), /* <=, reduce: BitAndExp */
			reduce(72), /* >, reduce: BitAndExp */
			reduce(72), /* >=, reduce: BitAndExp */
			reduce(72), /* ==, reduce: BitAndExp */
			reduce(72), /* ~=, reduce: BitAndExp */
			reduce(72), /* |, reduce: BitAndExp */
			reduce(72), /* ~, reduce: BitAndExp */
			reduce(72), /* &, reduce: BitAndExp */
			shift(550), /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			reduce(72), /* }, reduce: BitAndExp */
			nil,        /* ident */
		},
	},
	actionRow{ // S940
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(74), /* ;, reduce: ConcatExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(74), /* ,, reduce: ConcatExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(74), /* or, reduce: ConcatExp */
			reduce(74), /* and, reduce: ConcatExp */
			reduce(74), /* <, reduce: ConcatExp */
			reduce(74), /* <=, reduce: ConcatExp */
			reduce(74), /* >, reduce: ConcatExp */
			reduce(74), /* >=, reduce: ConcatExp */
			reduce(74), /* ==, reduce: ConcatExp */
			reduce(74), /* ~=, reduce: ConcatExp */
			reduce(74), /* |, reduce: ConcatExp */
			reduce(74), /* ~, reduce: ConcatExp */
			reduce(74), /* &, reduce: ConcatExp */
			reduce(74), /* .., reduce: ConcatExp */
			shift(214), /* << */
			shift(215), /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			reduce(74), /* }, reduce: ConcatExp */
			nil,        /* ident */
		},
	},
	actionRow{ // S941
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(78), /* ;, reduce: ShiftExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(78), /* ,, reduce: ShiftExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(78), /* or, reduce: ShiftExp */
			reduce(78), /* and, reduce: ShiftExp */
			reduce(78), /* <, reduce: ShiftExp */
			reduce(78), /* <=, reduce: ShiftExp */
			reduce(78), /* >, reduce: ShiftExp */
			reduce(78), /* >=, reduce: ShiftExp */
			reduce(78), /* ==, reduce: ShiftExp */
			reduce(78), /* ~=, reduce: ShiftExp */
			reduce(78), /* |, reduce: ShiftExp */
			reduce(78), /* ~, reduce: ShiftExp */
			reduce(78), /* &, reduce: ShiftExp */
			reduce(78), /* .., reduce: ShiftExp */
			reduce(78), /* <<, reduce: ShiftExp */
			reduce(78), /* >>, reduce: ShiftExp */
			shift(217), /* + */
			shift(218), /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			reduce(78), /* }, reduce: ShiftExp */
			nil,        /* ident */
		},
	},
	actionRow{ // S942
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(82), /* ;, reduce: Sum */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(82), /* ,, reduce: Sum */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(82), /* or, reduce: Sum */
			reduce(82), /* and, reduce: Sum */
			reduce(82), /* <, reduce: Sum */
			reduce(82), /* <=, reduce: Sum */
			reduce(82), /* >, reduce: Sum */
			reduce(82), /* >=, reduce: Sum */
			reduce(82), /* ==, reduce: Sum */
			reduce(82), /* ~=, reduce: Sum */
			reduce(82), /* |, reduce: Sum */
			reduce(82), /* ~, reduce: Sum */
			reduce(82), /* &, reduce: Sum */
			reduce(82), /* .., reduce: Sum */
			reduce(82), /* <<, reduce: Sum */
			reduce(82), /* >>, reduce: Sum */
			reduce(82), /* +, reduce: Sum */
			reduce(82), /* -, reduce: Sum */
			shift(220), /* * */
			shift(221), /* / */
			shift(222), /* % */
			shift(223), /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			reduce(82), /* }, reduce: Sum */
			nil,        /* ident */
		},
	},
	actionRow{ // S943
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(88), /* ;, reduce: Term */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(88), /* ,, reduce: Term */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(88), /* or, reduce: Term */
			reduce(88), /* and, reduce: Term */
			reduce(88), /* <, reduce: Term */
			reduce(88), /* <=, reduce: Term */
			reduce(88), /* >, reduce: Term */
			reduce(88), /* >=, reduce: Term */
			reduce(88), /* ==, reduce: Term */
			reduce(88), /* ~=, reduce: Term */
			reduce(88), /* |, reduce: Term */
			reduce(88), /* ~, reduce: Term */
			reduce(88), /* &, reduce: Term */
			reduce(88), /* .., reduce: Term */
			reduce(88), /* <<, reduce: Term */
			reduce(88), /* >>, reduce: Term */
			reduce(88), /* +, reduce: Term */
			reduce(88), /* -, reduce: Term */
			reduce(88), /* *, reduce: Term */
			reduce(88), /* /, reduce: Term */
			reduce(88), /* %, reduce: Term */
			reduce(88), /* //, reduce: Term */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			reduce(88), /* }, reduce: Term */
			nil,        /* ident */
		},
	},
	actionRow{ // S944
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(96), /* ;, reduce: Power */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(96), /* ,, reduce: Power */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(96), /* or, reduce: Power */
			reduce(96), /* and, reduce: Power */
			reduce(96), /* <, reduce: Power */
			reduce(96), /* <=, reduce: Power */
			reduce(96), /* >, reduce: Power */
			reduce(96), /* >=, reduce: Power */
			reduce(96), /* ==, reduce: Power */
			reduce(96), /* ~=, reduce: Power */
			reduce(96), /* |, reduce: Power */
			reduce(96), /* ~, reduce: Power */
			reduce(96), /* &, reduce: Power */
			reduce(96), /* .., reduce: Power */
			reduce(96), /* <<, reduce: Power */
			reduce(96), /* >>, reduce: Power */
			reduce(96), /* +, reduce: Power */
			reduce(96), /* -, reduce: Power */
			reduce(96), /* *, reduce: Power */
			reduce(96), /* /, reduce: Power */
			reduce(96), /* %, reduce: Power */
			reduce(96), /* //, reduce: Power */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			reduce(96), /* }, reduce: Power */
			nil,        /* ident */
		},
	},
	actionRow{ // S945
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(99), /* ;, reduce: Var */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(99), /* ,, reduce: Var */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			reduce(99), /* ., reduce: Var */
			reduce(99), /* :, reduce: Var */
			reduce(99), /* or, reduce: Var */
			reduce(99), /* and, reduce: Var */
			reduce(99), /* <, reduce: Var */
			reduce(99), /* <=, reduce: Var */
			reduce(99), /* >, reduce: Var */
			reduce(99), /* >=, reduce: Var */
			reduce(99), /* ==, reduce: Var */
			reduce(99), /* ~=, reduce: Var */
			reduce(99), /* |, reduce: Var */
			reduce(99), /* ~, reduce: Var */
			reduce(99), /* &, reduce: Var */
			reduce(99), /* .., reduce: Var */
			reduce(99), /* <<, reduce: Var */
			reduce(99), /* >>, reduce: Var */
			reduce(99), /* +, reduce: Var */
			reduce(99), /* -, reduce: Var */
			reduce(99), /* *, reduce: Var */
			reduce(99), /* /, reduce: Var */
			reduce(99), /* %, reduce: Var */
			reduce(99), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(99), /* ^, reduce: Var */
			reduce(99), /* [, reduce: Var */
			nil,        /* ] */
			reduce(99), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(99), /* string, reduce: Var */
			reduce(99), /* {, reduce: Var */
			reduce(99), /* }, reduce: Var */
			nil,        /* ident */
		},
	},
	actionRow{ // S946
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(561), /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			shift(563), /* string */
			shift(565), /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S947
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			shift(851),  /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			shift(1304), /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S948
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(876),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(1305), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S949
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(115), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(115), /* ,, reduce: Args */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(115), /* ., reduce: Args */
			reduce(115), /* :, reduce: Args */
			reduce(115), /* or, reduce: Args */
			reduce(115), /* and, reduce: Args */
			reduce(115), /* <, reduce: Args */
			reduce(115), /* <=, reduce: Args */
			reduce(115), /* >, reduce: Args */
			reduce(115), /* >=, reduce: Args */
			reduce(115), /* ==, reduce: Args */
			reduce(115), /* ~=, reduce: Args */
			reduce(115), /* |, reduce: Args */
			reduce(115), /* ~, reduce: Args */
			reduce(115), /* &, reduce: Args */
			reduce(115), /* .., reduce: Args */
			reduce(115), /* <<, reduce: Args */
			reduce(115), /* >>, reduce: Args */
			reduce(115), /* +, reduce: Args */
			reduce(115), /* -, reduce: Args */
			reduce(115), /* *, reduce: Args */
			reduce(115), /* /, reduce: Args */
			reduce(115), /* %, reduce: Args */
			reduce(115), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(115), /* ^, reduce: Args */
			reduce(115), /* [, reduce: Args */
			nil,         /* ] */
			reduce(115), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(115), /* string, reduce: Args */
			reduce(115), /* {, reduce: Args */
			reduce(115), /* }, reduce: Args */
			nil,         /* ident */
		},
	},
	actionRow{ // S950
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			shift(569),  /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(570),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			shift(1306), /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S951
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			shift(1308), /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S952
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(102), /* ;, reduce: PrefixExp */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(102), /* ,, reduce: PrefixExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(102), /* ., reduce: PrefixExp */
			reduce(102), /* :, reduce: PrefixExp */
			reduce(102), /* or, reduce: PrefixExp */
			reduce(102), /* and, reduce: PrefixExp */
			reduce(102), /* <, reduce: PrefixExp */
			reduce(102), /* <=, reduce: PrefixExp */
			reduce(102), /* >, reduce: PrefixExp */
			reduce(102), /* >=, reduce: PrefixExp */
			reduce(102), /* ==, reduce: PrefixExp */
			reduce(102), /* ~=, reduce: PrefixExp */
			reduce(102), /* |, reduce: PrefixExp */
			reduce(102), /* ~, reduce: PrefixExp */
			reduce(102), /* &, reduce: PrefixExp */
			reduce(102), /* .., reduce: PrefixExp */
			reduce(102), /* <<, reduce: PrefixExp */
			reduce(102), /* >>, reduce: PrefixExp */
			reduce(102), /* +, reduce: PrefixExp */
			reduce(102), /* -, reduce: PrefixExp */
			reduce(102), /* *, reduce: PrefixExp */
			reduce(102), /* /, reduce: PrefixExp */
			reduce(102), /* %, reduce: PrefixExp */
			reduce(102), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(102), /* ^, reduce: PrefixExp */
			reduce(102), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(102), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(102), /* string, reduce: PrefixExp */
			reduce(102), /* {, reduce: PrefixExp */
			reduce(102), /* }, reduce: PrefixExp */
			nil,         /* ident */
		},
	},
	actionRow{ // S953
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(125), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(125), /* ,, reduce: TableConstructor */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(125), /* or, reduce: TableConstructor */
			reduce(125), /* and, reduce: TableConstructor */
			reduce(125), /* <, reduce: TableConstructor */
			reduce(125), /* <=, reduce: TableConstructor */
			reduce(125), /* >, reduce: TableConstructor */
			reduce(125), /* >=, reduce: TableConstructor */
			reduce(125), /* ==, reduce: TableConstructor */
			reduce(125), /* ~=, reduce: TableConstructor */
			reduce(125), /* |, reduce: TableConstructor */
			reduce(125), /* ~, reduce: TableConstructor */
			reduce(125), /* &, reduce: TableConstructor */
			reduce(125), /* .., reduce: TableConstructor */
			reduce(125), /* <<, reduce: TableConstructor */
			reduce(125), /* >>, reduce: TableConstructor */
			reduce(125), /* +, reduce: TableConstructor */
			reduce(125), /* -, reduce: TableConstructor */
			reduce(125), /* *, reduce: TableConstructor */
			reduce(125), /* /, reduce: TableConstructor */
			reduce(125), /* %, reduce: TableConstructor */
			reduce(125), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(125), /* ^, reduce: TableConstructor */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			reduce(125), /* }, reduce: TableConstructor */
			nil,         /* ident */
		},
	},
	actionRow{ // S954
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(238),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			shift(254),  /* [ */
			nil,         /* ] */
			shift(255),  /* ( */
			nil,         /* ) */
			shift(256),  /* nil */
			shift(257),  /* true */
			shift(258),  /* false */
			shift(259),  /* ... */
			shift(260),  /* numdec */
			shift(261),  /* numhex */
			shift(262),  /* string */
			shift(265),  /* { */
			shift(1309), /* } */
			shift(268),  /* ident */
		},
	},
	actionRow{ // S955
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(126), /* $, reduce: TableConstructor */
			nil,         /* return */
			reduce(126), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(126), /* ,, reduce: TableConstructor */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(126), /* or, reduce: TableConstructor */
			reduce(126), /* and, reduce: TableConstructor */
			reduce(126), /* <, reduce: TableConstructor */
			reduce(126), /* <=, reduce: TableConstructor */
			reduce(126), /* >, reduce: TableConstructor */
			reduce(126), /* >=, reduce: TableConstructor */
			reduce(126), /* ==, reduce: TableConstructor */
			reduce(126), /* ~=, reduce: TableConstructor */
			reduce(126), /* |, reduce: TableConstructor */
			reduce(126), /* ~, reduce: TableConstructor */
			reduce(126), /* &, reduce: TableConstructor */
			reduce(126), /* .., reduce: TableConstructor */
			reduce(126), /* <<, reduce: TableConstructor */
			reduce(126), /* >>, reduce: TableConstructor */
			reduce(126), /* +, reduce: TableConstructor */
			reduce(126), /* -, reduce: TableConstructor */
			reduce(126), /* *, reduce: TableConstructor */
			reduce(126), /* /, reduce: TableConstructor */
			reduce(126), /* %, reduce: TableConstructor */
			reduce(126), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(126), /* ^, reduce: TableConstructor */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S956
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(130), /* ;, reduce: FieldList */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(130), /* ,, reduce: FieldList */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			reduce(130), /* }, reduce: FieldList */
			nil,         /* ident */
		},
	},
	actionRow{ // S957
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(54), /* $, reduce: ExpList */
			reduce(54), /* return, reduce: ExpList */
			reduce(54), /* ;, reduce: ExpList */
			nil,        /* empty */
			nil,        /* = */
			reduce(54), /* break, reduce: ExpList */
			reduce(54), /* goto, reduce: ExpList */
			reduce(54), /* do, reduce: ExpList */
			nil,        /* end */
			reduce(54), /* while, reduce: ExpList */
			reduce(54), /* repeat, reduce: ExpList */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(54), /* if, reduce: ExpList */
			reduce(54), /* ,, reduce: ExpList */
			reduce(54), /* for, reduce: ExpList */
			nil,        /* in */
			reduce(54), /* function, reduce: ExpList */
			reduce(54), /* local, reduce: ExpList */
			reduce(54), /* ::, reduce: ExpList */
			nil,        /* . */
			nil,        /* : */
			shift(574), /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(54), /* (, reduce: ExpList */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(54), /* ident, reduce: ExpList */
		},
	},
	actionRow{ // S958
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(56), /* $, reduce: Exp */
			reduce(56), /* return, reduce: Exp */
			reduce(56), /* ;, reduce: Exp */
			nil,        /* empty */
			nil,        /* = */
			reduce(56), /* break, reduce: Exp */
			reduce(56), /* goto, reduce: Exp */
			reduce(56), /* do, reduce: Exp */
			nil,        /* end */
			reduce(56), /* while, reduce: Exp */
			reduce(56), /* repeat, reduce: Exp */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(56), /* if, reduce: Exp */
			reduce(56), /* ,, reduce: Exp */
			reduce(56), /* for, reduce: Exp */
			nil,        /* in */
			reduce(56), /* function, reduce: Exp */
			reduce(56), /* local, reduce: Exp */
			reduce(56), /* ::, reduce: Exp */
			nil,        /* . */
			nil,        /* : */
			reduce(56), /* or, reduce: Exp */
			shift(577), /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(56), /* (, reduce: Exp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(56), /* ident, reduce: Exp */
		},
	},
	actionRow{ // S959
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(1310), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S960
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(58), /* $, reduce: AndExp */
			reduce(58), /* return, reduce: AndExp */
			reduce(58), /* ;, reduce: AndExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(58), /* break, reduce: AndExp */
			reduce(58), /* goto, reduce: AndExp */
			reduce(58), /* do, reduce: AndExp */
			nil,        /* end */
			reduce(58), /* while, reduce: AndExp */
			reduce(58), /* repeat, reduce: AndExp */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(58), /* if, reduce: AndExp */
			reduce(58), /* ,, reduce: AndExp */
			reduce(58), /* for, reduce: AndExp */
			nil,        /* in */
			reduce(58), /* function, reduce: AndExp */
			reduce(58), /* local, reduce: AndExp */
			reduce(58), /* ::, reduce: AndExp */
			nil,        /* . */
			nil,        /* : */
			reduce(58), /* or, reduce: AndExp */
			reduce(58), /* and, reduce: AndExp */
			shift(203), /* < */
			shift(204), /* <= */
			shift(205), /* > */
			shift(206), /* >= */
			shift(207), /* == */
			shift(208), /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(58), /* (, reduce: AndExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(58), /* ident, reduce: AndExp */
		},
	},
	actionRow{ // S961
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(66), /* $, reduce: CompExp */
			reduce(66), /* return, reduce: CompExp */
			reduce(66), /* ;, reduce: CompExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(66), /* break, reduce: CompExp */
			reduce(66), /* goto, reduce: CompExp */
			reduce(66), /* do, reduce: CompExp */
			nil,        /* end */
			reduce(66), /* while, reduce: CompExp */
			reduce(66), /* repeat, reduce: CompExp */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(66), /* if, reduce: CompExp */
			reduce(66), /* ,, reduce: CompExp */
			reduce(66), /* for, reduce: CompExp */
			nil,        /* in */
			reduce(66), /* function, reduce: CompExp */
			reduce(66), /* local, reduce: CompExp */
			reduce(66), /* ::, reduce: CompExp */
			nil,        /* . */
			nil,        /* : */
			reduce(66), /* or, reduce: CompExp */
			reduce(66), /* and, reduce: CompExp */
			reduce(66), /* <, reduce: CompExp */
			reduce(66), /* <=, reduce: CompExp */
			reduce(66), /* >, reduce: CompExp */
			reduce(66), /* >=, reduce: CompExp */
			reduce(66), /* ==, reduce: CompExp */
			reduce(66), /* ~=, reduce: CompExp */
			shift(579), /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(66), /* (, reduce: CompExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(66), /* ident, reduce: CompExp */
		},
	},
	actionRow{ // S962
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(68), /* $, reduce: BitOrExp */
			reduce(68), /* return, reduce: BitOrExp */
			reduce(68), /* ;, reduce: BitOrExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(68), /* break, reduce: BitOrExp */
			reduce(68), /* goto, reduce: BitOrExp */
			reduce(68), /* do, reduce: BitOrExp */
			nil,        /* end */
			reduce(68), /* while, reduce: BitOrExp */
			reduce(68), /* repeat, reduce: BitOrExp */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(68), /* if, reduce: BitOrExp */
			reduce(68), /* ,, reduce: BitOrExp */
			reduce(68), /* for, reduce: BitOrExp */
			nil,        /* in */
			reduce(68), /* function, reduce: BitOrExp */
			reduce(68), /* local, reduce: BitOrExp */
			reduce(68), /* ::, reduce: BitOrExp */
			nil,        /* . */
			nil,        /* : */
			reduce(68), /* or, reduce: BitOrExp */
			reduce(68), /* and, reduce: BitOrExp */
			reduce(68), /* <, reduce: BitOrExp */
			reduce(68), /* <=, reduce: BitOrExp */
			reduce(68), /* >, reduce: BitOrExp */
			reduce(68), /* >=, reduce: BitOrExp */
			reduce(68), /* ==, reduce: BitOrExp */
			reduce(68), /* ~=, reduce: BitOrExp */
			reduce(68), /* |, reduce: BitOrExp */
			shift(580), /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(68), /* (, reduce: BitOrExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(68), /* ident, reduce: BitOrExp */
		},
	},
	actionRow{ // S963
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(70), /* $, reduce: BitXorExp */
			reduce(70), /* return, reduce: BitXorExp */
			reduce(70), /* ;, reduce: BitXorExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(70), /* break, reduce: BitXorExp */
			reduce(70), /* goto, reduce: BitXorExp */
			reduce(70), /* do, reduce: BitXorExp */
			nil,        /* end */
			reduce(70), /* while, reduce: BitXorExp */
			reduce(70), /* repeat, reduce: BitXorExp */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(70), /* if, reduce: BitXorExp */
			reduce(70), /* ,, reduce: BitXorExp */
			reduce(70), /* for, reduce: BitXorExp */
			nil,        /* in */
			reduce(70), /* function, reduce: BitXorExp */
			reduce(70), /* local, reduce: BitXorExp */
			reduce(70), /* ::, reduce: BitXorExp */
			nil,        /* . */
			nil,        /* : */
			reduce(70), /* or, reduce: BitXorExp */
			reduce(70), /* and, reduce: BitXorExp */
			reduce(70), /* <, reduce: BitXorExp */
			reduce(70), /* <=, reduce: BitXorExp */
			reduce(70), /* >, reduce: BitXorExp */
			reduce(70), /* >=, reduce: BitXorExp */
			reduce(70), /* ==, reduce: BitXorExp */
			reduce(70), /* ~=, reduce: BitXorExp */
			reduce(70), /* |, reduce: BitXorExp */
			reduce(70), /* ~, reduce: BitXorExp */
			shift(581), /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(70), /* (, reduce: BitXorExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(70), /* ident, reduce: BitXorExp */
		},
	},
	actionRow{ // S964
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(72), /* $, reduce: BitAndExp */
			reduce(72), /* return, reduce: BitAndExp */
			reduce(72), /* ;, reduce: BitAndExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(72), /* break, reduce: BitAndExp */
			reduce(72), /* goto, reduce: BitAndExp */
			reduce(72), /* do, reduce: BitAndExp */
			nil,        /* end */
			reduce(72), /* while, reduce: BitAndExp */
			reduce(72), /* repeat, reduce: BitAndExp */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(72), /* if, reduce: BitAndExp */
			reduce(72), /* ,, reduce: BitAndExp */
			reduce(72), /* for, reduce: BitAndExp */
			nil,        /* in */
			reduce(72), /* function, reduce: BitAndExp */
			reduce(72), /* local, reduce: BitAndExp */
			reduce(72), /* ::, reduce: BitAndExp */
			nil,        /* . */
			nil,        /* : */
			reduce(72), /* or, reduce: BitAndExp */
			reduce(72), /* and, reduce: BitAndExp */
			reduce(72), /* <, reduce: BitAndExp */
			reduce(72), /* <=, reduce: BitAndExp */
			reduce(72), /* >, reduce: BitAndExp */
			reduce(72), /* >=, reduce: BitAndExp */
			reduce(72), /* ==, reduce: BitAndExp */
			reduce(72), /* ~=, reduce: BitAndExp */
			reduce(72), /* |, reduce: BitAndExp */
			reduce(72), /* ~, reduce: BitAndExp */
			reduce(72), /* &, reduce: BitAndExp */
			shift(582), /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(72), /* (, reduce: BitAndExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(72), /* ident, reduce: BitAndExp */
		},
	},
	actionRow{ // S965
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(74), /* $, reduce: ConcatExp */
			reduce(74), /* return, reduce: ConcatExp */
			reduce(74), /* ;, reduce: ConcatExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(74), /* break, reduce: ConcatExp */
			reduce(74), /* goto, reduce: ConcatExp */
			reduce(74), /* do, reduce: ConcatExp */
			nil,        /* end */
			reduce(74), /* while, reduce: ConcatExp */
			reduce(74), /* repeat, reduce: ConcatExp */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(74), /* if, reduce: ConcatExp */
			reduce(74), /* ,, reduce: ConcatExp */
			reduce(74), /* for, reduce: ConcatExp */
			nil,        /* in */
			reduce(74), /* function, reduce: ConcatExp */
			reduce(74), /* local, reduce: ConcatExp */
			reduce(74), /* ::, reduce: ConcatExp */
			nil,        /* . */
			nil,        /* : */
			reduce(74), /* or, reduce: ConcatExp */
			reduce(74), /* and, reduce: ConcatExp */
			reduce(74), /* <, reduce: ConcatExp */
			reduce(74), /* <=, reduce: ConcatExp */
			reduce(74), /* >, reduce: ConcatExp */
			reduce(74), /* >=, reduce: ConcatExp */
			reduce(74), /* ==, reduce: ConcatExp */
			reduce(74), /* ~=, reduce: ConcatExp */
			reduce(74), /* |, reduce: ConcatExp */
			reduce(74), /* ~, reduce: ConcatExp */
			reduce(74), /* &, reduce: ConcatExp */
			reduce(74), /* .., reduce: ConcatExp */
			shift(214), /* << */
			shift(215), /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(74), /* (, reduce: ConcatExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(74), /* ident, reduce: ConcatExp */
		},
	},
	actionRow{ // S966
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(78), /* $, reduce: ShiftExp */
			reduce(78), /* return, reduce: ShiftExp */
			reduce(78), /* ;, reduce: ShiftExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(78), /* break, reduce: ShiftExp */
			reduce(78), /* goto, reduce: ShiftExp */
			reduce(78), /* do, reduce: ShiftExp */
			nil,        /* end */
			reduce(78), /* while, reduce: ShiftExp */
			reduce(78), /* repeat, reduce: ShiftExp */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(78), /* if, reduce: ShiftExp */
			reduce(78), /* ,, reduce: ShiftExp */
			reduce(78), /* for, reduce: ShiftExp */
			nil,        /* in */
			reduce(78), /* function, reduce: ShiftExp */
			reduce(78), /* local, reduce: ShiftExp */
			reduce(78), /* ::, reduce: ShiftExp */
			nil,        /* . */
			nil,        /* : */
			reduce(78), /* or, reduce: ShiftExp */
			reduce(78), /* and, reduce: ShiftExp */
			reduce(78), /* <, reduce: ShiftExp */
			reduce(78), /* <=, reduce: ShiftExp */
			reduce(78), /* >, reduce: ShiftExp */
			reduce(78), /* >=, reduce: ShiftExp */
			reduce(78), /* ==, reduce: ShiftExp */
			reduce(78), /* ~=, reduce: ShiftExp */
			reduce(78), /* |, reduce: ShiftExp */
			reduce(78), /* ~, reduce: ShiftExp */
			reduce(78), /* &, reduce: ShiftExp */
			reduce(78), /* .., reduce: ShiftExp */
			reduce(78), /* <<, reduce: ShiftExp */
			reduce(78), /* >>, reduce: ShiftExp */
			shift(217), /* + */
			shift(218), /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(78), /* (, reduce: ShiftExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(78), /* ident, reduce: ShiftExp */
		},
	},
	actionRow{ // S967
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(82), /* $, reduce: Sum */
			reduce(82), /* return, reduce: Sum */
			reduce(82), /* ;, reduce: Sum */
			nil,        /* empty */
			nil,        /* = */
			reduce(82), /* break, reduce: Sum */
			reduce(82), /* goto, reduce: Sum */
			reduce(82), /* do, reduce: Sum */
			nil,        /* end */
			reduce(82), /* while, reduce: Sum */
			reduce(82), /* repeat, reduce: Sum */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(82), /* if, reduce: Sum */
			reduce(82), /* ,, reduce: Sum */
			reduce(82), /* for, reduce: Sum */
			nil,        /* in */
			reduce(82), /* function, reduce: Sum */
			reduce(82), /* local, reduce: Sum */
			reduce(82), /* ::, reduce: Sum */
			nil,        /* . */
			nil,        /* : */
			reduce(82), /* or, reduce: Sum */
			reduce(82), /* and, reduce: Sum */
			reduce(82), /* <, reduce: Sum */
			reduce(82), /* <=, reduce: Sum */
			reduce(82), /* >, reduce: Sum */
			reduce(82), /* >=, reduce: Sum */
			reduce(82), /* ==, reduce: Sum */
			reduce(82), /* ~=, reduce: Sum */
			reduce(82), /* |, reduce: Sum */
			reduce(82), /* ~, reduce: Sum */
			reduce(82), /* &, reduce: Sum */
			reduce(82), /* .., reduce: Sum */
			reduce(82), /* <<, reduce: Sum */
			reduce(82), /* >>, reduce: Sum */
			reduce(82), /* +, reduce: Sum */
			reduce(82), /* -, reduce: Sum */
			shift(220), /* * */
			shift(221), /* / */
			shift(222), /* % */
			shift(223), /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(82), /* (, reduce: Sum */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(82), /* ident, reduce: Sum */
		},
	},
	actionRow{ // S968
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(88), /* $, reduce: Term */
			reduce(88), /* return, reduce: Term */
			reduce(88), /* ;, reduce: Term */
			nil,        /* empty */
			nil,        /* = */
			reduce(88), /* break, reduce: Term */
			reduce(88), /* goto, reduce: Term */
			reduce(88), /* do, reduce: Term */
			nil,        /* end */
			reduce(88), /* while, reduce: Term */
			reduce(88), /* repeat, reduce: Term */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(88), /* if, reduce: Term */
			reduce(88), /* ,, reduce: Term */
			reduce(88), /* for, reduce: Term */
			nil,        /* in */
			reduce(88), /* function, reduce: Term */
			reduce(88), /* local, reduce: Term */
			reduce(88), /* ::, reduce: Term */
			nil,        /* . */
			nil,        /* : */
			reduce(88), /* or, reduce: Term */
			reduce(88), /* and, reduce: Term */
			reduce(88), /* <, reduce: Term */
			reduce(88), /* <=, reduce: Term */
			reduce(88), /* >, reduce: Term */
			reduce(88), /* >=, reduce: Term */
			reduce(88), /* ==, reduce: Term */
			reduce(88), /* ~=, reduce: Term */
			reduce(88), /* |, reduce: Term */
			reduce(88), /* ~, reduce: Term */
			reduce(88), /* &, reduce: Term */
			reduce(88), /* .., reduce: Term */
			reduce(88), /* <<, reduce: Term */
			reduce(88), /* >>, reduce: Term */
			reduce(88), /* +, reduce: Term */
			reduce(88), /* -, reduce: Term */
			reduce(88), /* *, reduce: Term */
			reduce(88), /* /, reduce: Term */
			reduce(88), /* %, reduce: Term */
			reduce(88), /* //, reduce: Term */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(88), /* (, reduce: Term */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(88), /* ident, reduce: Term */
		},
	},
	actionRow{ // S969
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(96), /* $, reduce: Power */
			reduce(96), /* return, reduce: Power */
			reduce(96), /* ;, reduce: Power */
			nil,        /* empty */
			nil,        /* = */
			reduce(96), /* break, reduce: Power */
			reduce(96), /* goto, reduce: Power */
			reduce(96), /* do, reduce: Power */
			nil,        /* end */
			reduce(96), /* while, reduce: Power */
			reduce(96), /* repeat, reduce: Power */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(96), /* if, reduce: Power */
			reduce(96), /* ,, reduce: Power */
			reduce(96), /* for, reduce: Power */
			nil,        /* in */
			reduce(96), /* function, reduce: Power */
			reduce(96), /* local, reduce: Power */
			reduce(96), /* ::, reduce: Power */
			nil,        /* . */
			nil,        /* : */
			reduce(96), /* or, reduce: Power */
			reduce(96), /* and, reduce: Power */
			reduce(96), /* <, reduce: Power */
			reduce(96), /* <=, reduce: Power */
			reduce(96), /* >, reduce: Power */
			reduce(96), /* >=, reduce: Power */
			reduce(96), /* ==, reduce: Power */
			reduce(96), /* ~=, reduce: Power */
			reduce(96), /* |, reduce: Power */
			reduce(96), /* ~, reduce: Power */
			reduce(96), /* &, reduce: Power */
			reduce(96), /* .., reduce: Power */
			reduce(96), /* <<, reduce: Power */
			reduce(96), /* >>, reduce: Power */
			reduce(96), /* +, reduce: Power */
			reduce(96), /* -, reduce: Power */
			reduce(96), /* *, reduce: Power */
			reduce(96), /* /, reduce: Power */
			reduce(96), /* %, reduce: Power */
			reduce(96), /* //, reduce: Power */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(96), /* (, reduce: Power */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(96), /* ident, reduce: Power */
		},
	},
	actionRow{ // S970
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(99), /* $, reduce: Var */
			reduce(99), /* return, reduce: Var */
			reduce(99), /* ;, reduce: Var */
			nil,        /* empty */
			nil,        /* = */
			reduce(99), /* break, reduce: Var */
			reduce(99), /* goto, reduce: Var */
			reduce(99), /* do, reduce: Var */
			nil,        /* end */
			reduce(99), /* while, reduce: Var */
			reduce(99), /* repeat, reduce: Var */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(99), /* if, reduce: Var */
			reduce(99), /* ,, reduce: Var */
			reduce(99), /* for, reduce: Var */
			nil,        /* in */
			reduce(99), /* function, reduce: Var */
			reduce(99), /* local, reduce: Var */
			reduce(99), /* ::, reduce: Var */
			reduce(99), /* ., reduce: Var */
			reduce(99), /* :, reduce: Var */
			reduce(99), /* or, reduce: Var */
			reduce(99), /* and, reduce: Var */
			reduce(99), /* <, reduce: Var */
			reduce(99), /* <=, reduce: Var */
			reduce(99), /* >, reduce: Var */
			reduce(99), /* >=, reduce: Var */
			reduce(99), /* ==, reduce: Var */
			reduce(99), /* ~=, reduce: Var */
			reduce(99), /* |, reduce: Var */
			reduce(99), /* ~, reduce: Var */
			reduce(99), /* &, reduce: Var */
			reduce(99), /* .., reduce: Var */
			reduce(99), /* <<, reduce: Var */
			reduce(99), /* >>, reduce: Var */
			reduce(99), /* +, reduce: Var */
			reduce(99), /* -, reduce: Var */
			reduce(99), /* *, reduce: Var */
			reduce(99), /* /, reduce: Var */
			reduce(99), /* %, reduce: Var */
			reduce(99), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(99), /* ^, reduce: Var */
			reduce(99), /* [, reduce: Var */
			nil,        /* ] */
			reduce(99), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(99), /* string, reduce: Var */
			reduce(99), /* {, reduce: Var */
			nil,        /* } */
			reduce(99), /* ident, reduce: Var */
		},
	},
	actionRow{ // S971
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(591), /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			shift(593), /* string */
			shift(595), /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S972
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			shift(851),  /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			shift(1312), /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S973
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(876),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(1313), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S974
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(115), /* $, reduce: Args */
			reduce(115), /* return, reduce: Args */
			reduce(115), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			reduce(115), /* break, reduce: Args */
			reduce(115), /* goto, reduce: Args */
			reduce(115), /* do, reduce: Args */
			nil,         /* end */
			reduce(115), /* while, reduce: Args */
			reduce(115), /* repeat, reduce: Args */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(115), /* if, reduce: Args */
			reduce(115), /* ,, reduce: Args */
			reduce(115), /* for, reduce: Args */
			nil,         /* in */
			reduce(115), /* function, reduce: Args */
			reduce(115), /* local, reduce: Args */
			reduce(115), /* ::, reduce: Args */
			reduce(115), /* ., reduce: Args */
			reduce(115), /* :, reduce: Args */
			reduce(115), /* or, reduce: Args */
			reduce(115), /* and, reduce: Args */
			reduce(115), /* <, reduce: Args */
			reduce(115), /* <=, reduce: Args */
			reduce(115), /* >, reduce: Args */
			reduce(115), /* >=, reduce: Args */
			reduce(115), /* ==, reduce: Args */
			reduce(115), /* ~=, reduce: Args */
			reduce(115), /* |, reduce: Args */
			reduce(115), /* ~, reduce: Args */
			reduce(115), /* &, reduce: Args */
			reduce(115), /* .., reduce: Args */
			reduce(115), /* <<, reduce: Args */
			reduce(115), /* >>, reduce: Args */
			reduce(115), /* +, reduce: Args */
			reduce(115), /* -, reduce: Args */
			reduce(115), /* *, reduce: Args */
			reduce(115), /* /, reduce: Args */
			reduce(115), /* %, reduce: Args */
			reduce(115), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(115), /* ^, reduce: Args */
			reduce(115), /* [, reduce: Args */
			nil,         /* ] */
			reduce(115), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(115), /* string, reduce: Args */
			reduce(115), /* {, reduce: Args */
			nil,         /* } */
			reduce(115), /* ident, reduce: Args */
		},
	},
	actionRow{ // S975
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			shift(569),  /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(570),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			shift(1314), /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S976
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(102), /* $, reduce: PrefixExp */
			reduce(102), /* return, reduce: PrefixExp */
			reduce(102), /* ;, reduce: PrefixExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(102), /* break, reduce: PrefixExp */
			reduce(102), /* goto, reduce: PrefixExp */
			reduce(102), /* do, reduce: PrefixExp */
			nil,         /* end */
			reduce(102), /* while, reduce: PrefixExp */
			reduce(102), /* repeat, reduce: PrefixExp */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(102), /* if, reduce: PrefixExp */
			reduce(102), /* ,, reduce: PrefixExp */
			reduce(102), /* for, reduce: PrefixExp */
			nil,         /* in */
			reduce(102), /* function, reduce: PrefixExp */
			reduce(102), /* local, reduce: PrefixExp */
			reduce(102), /* ::, reduce: PrefixExp */
			reduce(102), /* ., reduce: PrefixExp */
			reduce(102), /* :, reduce: PrefixExp */
			reduce(102), /* or, reduce: PrefixExp */
			reduce(102), /* and, reduce: PrefixExp */
			reduce(102), /* <, reduce: PrefixExp */
			reduce(102), /* <=, reduce: PrefixExp */
			reduce(102), /* >, reduce: PrefixExp */
			reduce(102), /* >=, reduce: PrefixExp */
			reduce(102), /* ==, reduce: PrefixExp */
			reduce(102), /* ~=, reduce: PrefixExp */
			reduce(102), /* |, reduce: PrefixExp */
			reduce(102), /* ~, reduce: PrefixExp */
			reduce(102), /* &, reduce: PrefixExp */
			reduce(102), /* .., reduce: PrefixExp */
			reduce(102), /* <<, reduce: PrefixExp */
			reduce(102), /* >>, reduce: PrefixExp */
			reduce(102), /* +, reduce: PrefixExp */
			reduce(102), /* -, reduce: PrefixExp */
			reduce(102), /* *, reduce: PrefixExp */
			reduce(102), /* /, reduce: PrefixExp */
			reduce(102), /* %, reduce: PrefixExp */
			reduce(102), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(102), /* ^, reduce: PrefixExp */
			reduce(102), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(102), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(102), /* string, reduce: PrefixExp */
			reduce(102), /* {, reduce: PrefixExp */
			nil,         /* } */
			reduce(102), /* ident, reduce: PrefixExp */
		},
	},
	actionRow{ // S977
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(125), /* $, reduce: TableConstructor */
			reduce(125), /* return, reduce: TableConstructor */
			reduce(125), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			reduce(125), /* break, reduce: TableConstructor */
			reduce(125), /* goto, reduce: TableConstructor */
			reduce(125), /* do, reduce: TableConstructor */
			nil,         /* end */
			reduce(125), /* while, reduce: TableConstructor */
			reduce(125), /* repeat, reduce: TableConstructor */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(125), /* if, reduce: TableConstructor */
			reduce(125), /* ,, reduce: TableConstructor */
			reduce(125), /* for, reduce: TableConstructor */
			nil,         /* in */
			reduce(125), /* function, reduce: TableConstructor */
			reduce(125), /* local, reduce: TableConstructor */
			reduce(125), /* ::, reduce: TableConstructor */
			nil,         /* . */
			nil,         /* : */
			reduce(125), /* or, reduce: TableConstructor */
			reduce(125), /* and, reduce: TableConstructor */
			reduce(125), /* <, reduce: TableConstructor */
			reduce(125), /* <=, reduce: TableConstructor */
			reduce(125), /* >, reduce: TableConstructor */
			reduce(125), /* >=, reduce: TableConstructor */
			reduce(125), /* ==, reduce: TableConstructor */
			reduce(125), /* ~=, reduce: TableConstructor */
			reduce(125), /* |, reduce: TableConstructor */
			reduce(125), /* ~, reduce: TableConstructor */
			reduce(125), /* &, reduce: TableConstructor */
			reduce(125), /* .., reduce: TableConstructor */
			reduce(125), /* <<, reduce: TableConstructor */
			reduce(125), /* >>, reduce: TableConstructor */
			reduce(125), /* +, reduce: TableConstructor */
			reduce(125), /* -, reduce: TableConstructor */
			reduce(125), /* *, reduce: TableConstructor */
			reduce(125), /* /, reduce: TableConstructor */
			reduce(125), /* %, reduce: TableConstructor */
			reduce(125), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(125), /* ^, reduce: TableConstructor */
			nil,         /* [ */
			nil,         /* ] */
			reduce(125), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(125), /* ident, reduce: TableConstructor */
		},
	},
	actionRow{ // S978
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(238),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			shift(254),  /* [ */
			nil,         /* ] */
			shift(255),  /* ( */
			nil,         /* ) */
			shift(256),  /* nil */
			shift(257),  /* true */
			shift(258),  /* false */
			shift(259),  /* ... */
			shift(260),  /* numdec */
			shift(261),  /* numhex */
			shift(262),  /* string */
			shift(265),  /* { */
			shift(1316), /* } */
			shift(268),  /* ident */
		},
	},
	actionRow{ // S979
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(599), /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			shift(601), /* string */
			shift(603), /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S980
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(876),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(1318), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S981
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(115), /* ., reduce: Args */
			reduce(115), /* :, reduce: Args */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			reduce(115), /* [, reduce: Args */
			nil,         /* ] */
			reduce(115), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(115), /* string, reduce: Args */
			reduce(115), /* {, reduce: Args */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S982
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			shift(569),  /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(570),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			shift(1319), /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S983
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* return */
			nil,       /* ; */
			nil,       /* empty */
			nil,       /* = */
			nil,       /* break */
			nil,       /* goto */
			nil,       /* do */
			reduce(1), /* end, reduce: Chunk */
			nil,       /* while */
			nil,       /* repeat */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			nil,       /* if */
			nil,       /* , */
			nil,       /* for */
			nil,       /* in */
			nil,       /* function */
			nil,       /* local */
			nil,       /* :: */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			nil,       /* ( */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			nil,       /* ident */
		},
	},
	actionRow{ // S984
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(609), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(625), /* ( */
			nil,        /* ) */
			shift(626), /* nil */
			shift(627), /* true */
			shift(628), /* false */
			shift(629), /* ... */
			shift(630), /* numdec */
			shift(631), /* numhex */
			shift(632), /* string */
			shift(635), /* { */
			nil,        /* } */
			shift(636), /* ident */
		},
	},
	actionRow{ // S985
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(609), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(625), /* ( */
			nil,        /* ) */
			shift(626), /* nil */
			shift(627), /* true */
			shift(628), /* false */
			shift(629), /* ... */
			shift(630), /* numdec */
			shift(631), /* numhex */
			shift(632), /* string */
			shift(635), /* { */
			nil,        /* } */
			shift(636), /* ident */
		},
	},
	actionRow{ // S986
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(119), /* ;, reduce: FunctionDef */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(119), /* end, reduce: FunctionDef */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(119), /* ,, reduce: FunctionDef */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(119), /* or, reduce: FunctionDef */
			reduce(119), /* and, reduce: FunctionDef */
			reduce(119), /* <, reduce: FunctionDef */
			reduce(119), /* <=, reduce: FunctionDef */
			reduce(119), /* >, reduce: FunctionDef */
			reduce(119), /* >=, reduce: FunctionDef */
			reduce(119), /* ==, reduce: FunctionDef */
			reduce(119), /* ~=, reduce: FunctionDef */
			reduce(119), /* |, reduce: FunctionDef */
			reduce(119), /* ~, reduce: FunctionDef */
			reduce(119), /* &, reduce: FunctionDef */
			reduce(119), /* .., reduce: FunctionDef */
			reduce(119), /* <<, reduce: FunctionDef */
			reduce(119), /* >>, reduce: FunctionDef */
			reduce(119), /* +, reduce: FunctionDef */
			reduce(119), /* -, reduce: FunctionDef */
			reduce(119), /* *, reduce: FunctionDef */
			reduce(119), /* /, reduce: FunctionDef */
			reduce(119), /* %, reduce: FunctionDef */
			reduce(119), /* //, reduce: FunctionDef */
			nil,         /* not */
			nil,         /* # */
			reduce(119), /* ^, reduce: FunctionDef */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S987
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(123), /* ), reduce: ParList */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			shift(521),  /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			shift(523),  /* ident */
		},
	},
	actionRow{ // S988
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(609), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(625), /* ( */
			nil,        /* ) */
			shift(626), /* nil */
			shift(627), /* true */
			shift(628), /* false */
			shift(629), /* ... */
			shift(630), /* numdec */
			shift(631), /* numhex */
			shift(632), /* string */
			shift(635), /* { */
			nil,        /* } */
			shift(636), /* ident */
		},
	},
	actionRow{ // S989
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(609), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(625), /* ( */
			nil,        /* ) */
			shift(626), /* nil */
			shift(627), /* true */
			shift(628), /* false */
			shift(629), /* ... */
			shift(630), /* numdec */
			shift(631), /* numhex */
			shift(632), /* string */
			shift(635), /* { */
			nil,        /* } */
			shift(636), /* ident */
		},
	},
	actionRow{ // S990
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(609), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(625), /* ( */
			nil,        /* ) */
			shift(626), /* nil */
			shift(627), /* true */
			shift(628), /* false */
			shift(629), /* ... */
			shift(630), /* numdec */
			shift(631), /* numhex */
			shift(632), /* string */
			shift(635), /* { */
			nil,        /* } */
			shift(636), /* ident */
		},
	},
	actionRow{ // S991
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(609), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(625), /* ( */
			nil,        /* ) */
			shift(626), /* nil */
			shift(627), /* true */
			shift(628), /* false */
			shift(629), /* ... */
			shift(630), /* numdec */
			shift(631), /* numhex */
			shift(632), /* string */
			shift(635), /* { */
			nil,        /* } */
			shift(636), /* ident */
		},
	},
	actionRow{ // S992
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(609), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(625), /* ( */
			nil,        /* ) */
			shift(626), /* nil */
			shift(627), /* true */
			shift(628), /* false */
			shift(629), /* ... */
			shift(630), /* numdec */
			shift(631), /* numhex */
			shift(632), /* string */
			shift(635), /* { */
			nil,        /* } */
			shift(636), /* ident */
		},
	},
	actionRow{ // S993
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(609), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(625), /* ( */
			nil,        /* ) */
			shift(626), /* nil */
			shift(627), /* true */
			shift(628), /* false */
			shift(629), /* ... */
			shift(630), /* numdec */
			shift(631), /* numhex */
			shift(632), /* string */
			shift(635), /* { */
			nil,        /* } */
			shift(636), /* ident */
		},
	},
	actionRow{ // S994
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(609), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(625), /* ( */
			nil,        /* ) */
			shift(626), /* nil */
			shift(627), /* true */
			shift(628), /* false */
			shift(629), /* ... */
			shift(630), /* numdec */
			shift(631), /* numhex */
			shift(632), /* string */
			shift(635), /* { */
			nil,        /* } */
			shift(636), /* ident */
		},
	},
	actionRow{ // S995
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(609), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(625), /* ( */
			nil,        /* ) */
			shift(626), /* nil */
			shift(627), /* true */
			shift(628), /* false */
			shift(629), /* ... */
			shift(630), /* numdec */
			shift(631), /* numhex */
			shift(632), /* string */
			shift(635), /* { */
			nil,        /* } */
			shift(636), /* ident */
		},
	},
	actionRow{ // S996
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(609), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(625), /* ( */
			nil,        /* ) */
			shift(626), /* nil */
			shift(627), /* true */
			shift(628), /* false */
			shift(629), /* ... */
			shift(630), /* numdec */
			shift(631), /* numhex */
			shift(632), /* string */
			shift(635), /* { */
			nil,        /* } */
			shift(636), /* ident */
		},
	},
	actionRow{ // S997
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(93), /* ;, reduce: Factor */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			reduce(93), /* end, reduce: Factor */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(93), /* ,, reduce: Factor */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(93), /* or, reduce: Factor */
			reduce(93), /* and, reduce: Factor */
			reduce(93), /* <, reduce: Factor */
			reduce(93), /* <=, reduce: Factor */
			reduce(93), /* >, reduce: Factor */
			reduce(93), /* >=, reduce: Factor */
			reduce(93), /* ==, reduce: Factor */
			reduce(93), /* ~=, reduce: Factor */
			reduce(93), /* |, reduce: Factor */
			reduce(93), /* ~, reduce: Factor */
			reduce(93), /* &, reduce: Factor */
			reduce(93), /* .., reduce: Factor */
			reduce(93), /* <<, reduce: Factor */
			reduce(93), /* >>, reduce: Factor */
			reduce(93), /* +, reduce: Factor */
			reduce(93), /* -, reduce: Factor */
			reduce(93), /* *, reduce: Factor */
			reduce(93), /* /, reduce: Factor */
			reduce(93), /* %, reduce: Factor */
			reduce(93), /* //, reduce: Factor */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S998
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(609), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(625), /* ( */
			nil,        /* ) */
			shift(626), /* nil */
			shift(627), /* true */
			shift(628), /* false */
			shift(629), /* ... */
			shift(630), /* numdec */
			shift(631), /* numhex */
			shift(632), /* string */
			shift(635), /* { */
			nil,        /* } */
			shift(636), /* ident */
		},
	},
	actionRow{ // S999
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(636), /* ident */
		},
	},
	actionRow{ // S1000
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(426), /* ident */
		},
	},
	actionRow{ // S1001
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(430), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(446), /* ( */
			nil,        /* ) */
			shift(447), /* nil */
			shift(448), /* true */
			shift(449), /* false */
			shift(450), /* ... */
			shift(451), /* numdec */
			shift(452), /* numhex */
			shift(453), /* string */
			shift(456), /* { */
			nil,        /* } */
			shift(457), /* ident */
		},
	},
	actionRow{ // S1002
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(462),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(478),  /* ( */
			shift(1338), /* ) */
			shift(480),  /* nil */
			shift(481),  /* true */
			shift(482),  /* false */
			shift(483),  /* ... */
			shift(484),  /* numdec */
			shift(485),  /* numhex */
			shift(486),  /* string */
			shift(489),  /* { */
			nil,         /* } */
			shift(490),  /* ident */
		},
	},
	actionRow{ // S1003
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(103), /* ;, reduce: FunctionCall */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(103), /* end, reduce: FunctionCall */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(103), /* ,, reduce: FunctionCall */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(103), /* ., reduce: FunctionCall */
			reduce(103), /* :, reduce: FunctionCall */
			reduce(103), /* or, reduce: FunctionCall */
			reduce(103), /* and, reduce: FunctionCall */
			reduce(103), /* <, reduce: FunctionCall */
			reduce(103), /* <=, reduce: FunctionCall */
			reduce(103), /* >, reduce: FunctionCall */
			reduce(103), /* >=, reduce: FunctionCall */
			reduce(103), /* ==, reduce: FunctionCall */
			reduce(103), /* ~=, reduce: FunctionCall */
			reduce(103), /* |, reduce: FunctionCall */
			reduce(103), /* ~, reduce: FunctionCall */
			reduce(103), /* &, reduce: FunctionCall */
			reduce(103), /* .., reduce: FunctionCall */
			reduce(103), /* <<, reduce: FunctionCall */
			reduce(103), /* >>, reduce: FunctionCall */
			reduce(103), /* +, reduce: FunctionCall */
			reduce(103), /* -, reduce: FunctionCall */
			reduce(103), /* *, reduce: FunctionCall */
			reduce(103), /* /, reduce: FunctionCall */
			reduce(103), /* %, reduce: FunctionCall */
			reduce(103), /* //, reduce: FunctionCall */
			nil,         /* not */
			nil,         /* # */
			reduce(103), /* ^, reduce: FunctionCall */
			reduce(103), /* [, reduce: FunctionCall */
			nil,         /* ] */
			reduce(103), /* (, reduce: FunctionCall */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(103), /* string, reduce: FunctionCall */
			reduce(103), /* {, reduce: FunctionCall */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1004
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(118), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(118), /* end, reduce: Args */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(118), /* ,, reduce: Args */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(118), /* ., reduce: Args */
			reduce(118), /* :, reduce: Args */
			reduce(118), /* or, reduce: Args */
			reduce(118), /* and, reduce: Args */
			reduce(118), /* <, reduce: Args */
			reduce(118), /* <=, reduce: Args */
			reduce(118), /* >, reduce: Args */
			reduce(118), /* >=, reduce: Args */
			reduce(118), /* ==, reduce: Args */
			reduce(118), /* ~=, reduce: Args */
			reduce(118), /* |, reduce: Args */
			reduce(118), /* ~, reduce: Args */
			reduce(118), /* &, reduce: Args */
			reduce(118), /* .., reduce: Args */
			reduce(118), /* <<, reduce: Args */
			reduce(118), /* >>, reduce: Args */
			reduce(118), /* +, reduce: Args */
			reduce(118), /* -, reduce: Args */
			reduce(118), /* *, reduce: Args */
			reduce(118), /* /, reduce: Args */
			reduce(118), /* %, reduce: Args */
			reduce(118), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(118), /* ^, reduce: Args */
			reduce(118), /* [, reduce: Args */
			nil,         /* ] */
			reduce(118), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(118), /* string, reduce: Args */
			reduce(118), /* {, reduce: Args */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1005
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(117), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(117), /* end, reduce: Args */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(117), /* ,, reduce: Args */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(117), /* ., reduce: Args */
			reduce(117), /* :, reduce: Args */
			reduce(117), /* or, reduce: Args */
			reduce(117), /* and, reduce: Args */
			reduce(117), /* <, reduce: Args */
			reduce(117), /* <=, reduce: Args */
			reduce(117), /* >, reduce: Args */
			reduce(117), /* >=, reduce: Args */
			reduce(117), /* ==, reduce: Args */
			reduce(117), /* ~=, reduce: Args */
			reduce(117), /* |, reduce: Args */
			reduce(117), /* ~, reduce: Args */
			reduce(117), /* &, reduce: Args */
			reduce(117), /* .., reduce: Args */
			reduce(117), /* <<, reduce: Args */
			reduce(117), /* >>, reduce: Args */
			reduce(117), /* +, reduce: Args */
			reduce(117), /* -, reduce: Args */
			reduce(117), /* *, reduce: Args */
			reduce(117), /* /, reduce: Args */
			reduce(117), /* %, reduce: Args */
			reduce(117), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(117), /* ^, reduce: Args */
			reduce(117), /* [, reduce: Args */
			nil,         /* ] */
			reduce(117), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(117), /* string, reduce: Args */
			reduce(117), /* {, reduce: Args */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1006
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			shift(254), /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(268), /* ident */
		},
	},
	actionRow{ // S1007
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			shift(492),  /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(1340), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1008
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			shift(569),  /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(570),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			shift(1341), /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1009
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(23),  /* return, reduce: AssignStat */
			reduce(23),  /* ;, reduce: AssignStat */
			nil,         /* empty */
			nil,         /* = */
			reduce(23),  /* break, reduce: AssignStat */
			reduce(23),  /* goto, reduce: AssignStat */
			reduce(23),  /* do, reduce: AssignStat */
			reduce(23),  /* end, reduce: AssignStat */
			reduce(23),  /* while, reduce: AssignStat */
			reduce(23),  /* repeat, reduce: AssignStat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(23),  /* if, reduce: AssignStat */
			shift(1343), /* , */
			reduce(23),  /* for, reduce: AssignStat */
			nil,         /* in */
			reduce(23),  /* function, reduce: AssignStat */
			reduce(23),  /* local, reduce: AssignStat */
			reduce(23),  /* ::, reduce: AssignStat */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(23),  /* (, reduce: AssignStat */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(23),  /* ident, reduce: AssignStat */
		},
	},
	actionRow{ // S1010
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(101), /* return, reduce: PrefixExp */
			reduce(101), /* ;, reduce: PrefixExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(101), /* break, reduce: PrefixExp */
			reduce(101), /* goto, reduce: PrefixExp */
			reduce(101), /* do, reduce: PrefixExp */
			reduce(101), /* end, reduce: PrefixExp */
			reduce(101), /* while, reduce: PrefixExp */
			reduce(101), /* repeat, reduce: PrefixExp */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(101), /* if, reduce: PrefixExp */
			reduce(101), /* ,, reduce: PrefixExp */
			reduce(101), /* for, reduce: PrefixExp */
			nil,         /* in */
			reduce(101), /* function, reduce: PrefixExp */
			reduce(101), /* local, reduce: PrefixExp */
			reduce(101), /* ::, reduce: PrefixExp */
			reduce(101), /* ., reduce: PrefixExp */
			reduce(101), /* :, reduce: PrefixExp */
			reduce(101), /* or, reduce: PrefixExp */
			reduce(101), /* and, reduce: PrefixExp */
			reduce(101), /* <, reduce: PrefixExp */
			reduce(101), /* <=, reduce: PrefixExp */
			reduce(101), /* >, reduce: PrefixExp */
			reduce(101), /* >=, reduce: PrefixExp */
			reduce(101), /* ==, reduce: PrefixExp */
			reduce(101), /* ~=, reduce: PrefixExp */
			reduce(101), /* |, reduce: PrefixExp */
			reduce(101), /* ~, reduce: PrefixExp */
			reduce(101), /* &, reduce: PrefixExp */
			reduce(101), /* .., reduce: PrefixExp */
			reduce(101), /* <<, reduce: PrefixExp */
			reduce(101), /* >>, reduce: PrefixExp */
			reduce(101), /* +, reduce: PrefixExp */
			reduce(101), /* -, reduce: PrefixExp */
			reduce(101), /* *, reduce: PrefixExp */
			reduce(101), /* /, reduce: PrefixExp */
			reduce(101), /* %, reduce: PrefixExp */
			reduce(101), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(101), /* ^, reduce: PrefixExp */
			reduce(101), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(101), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(101), /* string, reduce: PrefixExp */
			reduce(101), /* {, reduce: PrefixExp */
			nil,         /* } */
			reduce(101), /* ident, reduce: PrefixExp */
		},
	},
	actionRow{ // S1011
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(97), /* return, reduce: Var */
			reduce(97), /* ;, reduce: Var */
			nil,        /* empty */
			nil,        /* = */
			reduce(97), /* break, reduce: Var */
			reduce(97), /* goto, reduce: Var */
			reduce(97), /* do, reduce: Var */
			reduce(97), /* end, reduce: Var */
			reduce(97), /* while, reduce: Var */
			reduce(97), /* repeat, reduce: Var */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(97), /* if, reduce: Var */
			reduce(97), /* ,, reduce: Var */
			reduce(97), /* for, reduce: Var */
			nil,        /* in */
			reduce(97), /* function, reduce: Var */
			reduce(97), /* local, reduce: Var */
			reduce(97), /* ::, reduce: Var */
			reduce(97), /* ., reduce: Var */
			reduce(97), /* :, reduce: Var */
			reduce(97), /* or, reduce: Var */
			reduce(97), /* and, reduce: Var */
			reduce(97), /* <, reduce: Var */
			reduce(97), /* <=, reduce: Var */
			reduce(97), /* >, reduce: Var */
			reduce(97), /* >=, reduce: Var */
			reduce(97), /* ==, reduce: Var */
			reduce(97), /* ~=, reduce: Var */
			reduce(97), /* |, reduce: Var */
			reduce(97), /* ~, reduce: Var */
			reduce(97), /* &, reduce: Var */
			reduce(97), /* .., reduce: Var */
			reduce(97), /* <<, reduce: Var */
			reduce(97), /* >>, reduce: Var */
			reduce(97), /* +, reduce: Var */
			reduce(97), /* -, reduce: Var */
			reduce(97), /* *, reduce: Var */
			reduce(97), /* /, reduce: Var */
			reduce(97), /* %, reduce: Var */
			reduce(97), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(97), /* ^, reduce: Var */
			reduce(97), /* [, reduce: Var */
			nil,        /* ] */
			reduce(97), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(97), /* string, reduce: Var */
			reduce(97), /* {, reduce: Var */
			nil,        /* } */
			reduce(97), /* ident, reduce: Var */
		},
	},
	actionRow{ // S1012
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(53),  /* return, reduce: ExpList */
			reduce(53),  /* ;, reduce: ExpList */
			nil,         /* empty */
			nil,         /* = */
			reduce(53),  /* break, reduce: ExpList */
			reduce(53),  /* goto, reduce: ExpList */
			reduce(53),  /* do, reduce: ExpList */
			reduce(53),  /* end, reduce: ExpList */
			reduce(53),  /* while, reduce: ExpList */
			reduce(53),  /* repeat, reduce: ExpList */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(53),  /* if, reduce: ExpList */
			reduce(53),  /* ,, reduce: ExpList */
			reduce(53),  /* for, reduce: ExpList */
			nil,         /* in */
			reduce(53),  /* function, reduce: ExpList */
			reduce(53),  /* local, reduce: ExpList */
			reduce(53),  /* ::, reduce: ExpList */
			nil,         /* . */
			nil,         /* : */
			shift(1344), /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(53),  /* (, reduce: ExpList */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(53),  /* ident, reduce: ExpList */
		},
	},
	actionRow{ // S1013
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1346), /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1014
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(100), /* return, reduce: PrefixExp */
			reduce(100), /* ;, reduce: PrefixExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(100), /* break, reduce: PrefixExp */
			reduce(100), /* goto, reduce: PrefixExp */
			reduce(100), /* do, reduce: PrefixExp */
			reduce(100), /* end, reduce: PrefixExp */
			reduce(100), /* while, reduce: PrefixExp */
			reduce(100), /* repeat, reduce: PrefixExp */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(100), /* if, reduce: PrefixExp */
			reduce(100), /* ,, reduce: PrefixExp */
			reduce(100), /* for, reduce: PrefixExp */
			nil,         /* in */
			reduce(100), /* function, reduce: PrefixExp */
			reduce(100), /* local, reduce: PrefixExp */
			reduce(100), /* ::, reduce: PrefixExp */
			reduce(100), /* ., reduce: PrefixExp */
			reduce(100), /* :, reduce: PrefixExp */
			reduce(100), /* or, reduce: PrefixExp */
			reduce(100), /* and, reduce: PrefixExp */
			reduce(100), /* <, reduce: PrefixExp */
			reduce(100), /* <=, reduce: PrefixExp */
			reduce(100), /* >, reduce: PrefixExp */
			reduce(100), /* >=, reduce: PrefixExp */
			reduce(100), /* ==, reduce: PrefixExp */
			reduce(100), /* ~=, reduce: PrefixExp */
			reduce(100), /* |, reduce: PrefixExp */
			reduce(100), /* ~, reduce: PrefixExp */
			reduce(100), /* &, reduce: PrefixExp */
			reduce(100), /* .., reduce: PrefixExp */
			reduce(100), /* <<, reduce: PrefixExp */
			reduce(100), /* >>, reduce: PrefixExp */
			reduce(100), /* +, reduce: PrefixExp */
			reduce(100), /* -, reduce: PrefixExp */
			reduce(100), /* *, reduce: PrefixExp */
			reduce(100), /* /, reduce: PrefixExp */
			reduce(100), /* %, reduce: PrefixExp */
			reduce(100), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(100), /* ^, reduce: PrefixExp */
			reduce(100), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(100), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(100), /* string, reduce: PrefixExp */
			reduce(100), /* {, reduce: PrefixExp */
			nil,         /* } */
			reduce(100), /* ident, reduce: PrefixExp */
		},
	},
	actionRow{ // S1015
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(55),  /* return, reduce: Exp */
			reduce(55),  /* ;, reduce: Exp */
			nil,         /* empty */
			nil,         /* = */
			reduce(55),  /* break, reduce: Exp */
			reduce(55),  /* goto, reduce: Exp */
			reduce(55),  /* do, reduce: Exp */
			reduce(55),  /* end, reduce: Exp */
			reduce(55),  /* while, reduce: Exp */
			reduce(55),  /* repeat, reduce: Exp */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(55),  /* if, reduce: Exp */
			reduce(55),  /* ,, reduce: Exp */
			reduce(55),  /* for, reduce: Exp */
			nil,         /* in */
			reduce(55),  /* function, reduce: Exp */
			reduce(55),  /* local, reduce: Exp */
			reduce(55),  /* ::, reduce: Exp */
			nil,         /* . */
			nil,         /* : */
			reduce(55),  /* or, reduce: Exp */
			shift(1347), /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(55),  /* (, reduce: Exp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(55),  /* ident, reduce: Exp */
		},
	},
	actionRow{ // S1016
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(57), /* return, reduce: AndExp */
			reduce(57), /* ;, reduce: AndExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(57), /* break, reduce: AndExp */
			reduce(57), /* goto, reduce: AndExp */
			reduce(57), /* do, reduce: AndExp */
			reduce(57), /* end, reduce: AndExp */
			reduce(57), /* while, reduce: AndExp */
			reduce(57), /* repeat, reduce: AndExp */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(57), /* if, reduce: AndExp */
			reduce(57), /* ,, reduce: AndExp */
			reduce(57), /* for, reduce: AndExp */
			nil,        /* in */
			reduce(57), /* function, reduce: AndExp */
			reduce(57), /* local, reduce: AndExp */
			reduce(57), /* ::, reduce: AndExp */
			nil,        /* . */
			nil,        /* : */
			reduce(57), /* or, reduce: AndExp */
			reduce(57), /* and, reduce: AndExp */
			shift(203), /* < */
			shift(204), /* <= */
			shift(205), /* > */
			shift(206), /* >= */
			shift(207), /* == */
			shift(208), /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(57), /* (, reduce: AndExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(57), /* ident, reduce: AndExp */
		},
	},
	actionRow{ // S1017
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(65),  /* return, reduce: CompExp */
			reduce(65),  /* ;, reduce: CompExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(65),  /* break, reduce: CompExp */
			reduce(65),  /* goto, reduce: CompExp */
			reduce(65),  /* do, reduce: CompExp */
			reduce(65),  /* end, reduce: CompExp */
			reduce(65),  /* while, reduce: CompExp */
			reduce(65),  /* repeat, reduce: CompExp */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(65),  /* if, reduce: CompExp */
			reduce(65),  /* ,, reduce: CompExp */
			reduce(65),  /* for, reduce: CompExp */
			nil,         /* in */
			reduce(65),  /* function, reduce: CompExp */
			reduce(65),  /* local, reduce: CompExp */
			reduce(65),  /* ::, reduce: CompExp */
			nil,         /* . */
			nil,         /* : */
			reduce(65),  /* or, reduce: CompExp */
			reduce(65),  /* and, reduce: CompExp */
			reduce(65),  /* <, reduce: CompExp */
			reduce(65),  /* <=, reduce: CompExp */
			reduce(65),  /* >, reduce: CompExp */
			reduce(65),  /* >=, reduce: CompExp */
			reduce(65),  /* ==, reduce: CompExp */
			reduce(65),  /* ~=, reduce: CompExp */
			shift(1349), /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(65),  /* (, reduce: CompExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(65),  /* ident, reduce: CompExp */
		},
	},
	actionRow{ // S1018
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(67),  /* return, reduce: BitOrExp */
			reduce(67),  /* ;, reduce: BitOrExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(67),  /* break, reduce: BitOrExp */
			reduce(67),  /* goto, reduce: BitOrExp */
			reduce(67),  /* do, reduce: BitOrExp */
			reduce(67),  /* end, reduce: BitOrExp */
			reduce(67),  /* while, reduce: BitOrExp */
			reduce(67),  /* repeat, reduce: BitOrExp */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(67),  /* if, reduce: BitOrExp */
			reduce(67),  /* ,, reduce: BitOrExp */
			reduce(67),  /* for, reduce: BitOrExp */
			nil,         /* in */
			reduce(67),  /* function, reduce: BitOrExp */
			reduce(67),  /* local, reduce: BitOrExp */
			reduce(67),  /* ::, reduce: BitOrExp */
			nil,         /* . */
			nil,         /* : */
			reduce(67),  /* or, reduce: BitOrExp */
			reduce(67),  /* and, reduce: BitOrExp */
			reduce(67),  /* <, reduce: BitOrExp */
			reduce(67),  /* <=, reduce: BitOrExp */
			reduce(67),  /* >, reduce: BitOrExp */
			reduce(67),  /* >=, reduce: BitOrExp */
			reduce(67),  /* ==, reduce: BitOrExp */
			reduce(67),  /* ~=, reduce: BitOrExp */
			reduce(67),  /* |, reduce: BitOrExp */
			shift(1350), /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(67),  /* (, reduce: BitOrExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(67),  /* ident, reduce: BitOrExp */
		},
	},
	actionRow{ // S1019
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(69),  /* return, reduce: BitXorExp */
			reduce(69),  /* ;, reduce: BitXorExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(69),  /* break, reduce: BitXorExp */
			reduce(69),  /* goto, reduce: BitXorExp */
			reduce(69),  /* do, reduce: BitXorExp */
			reduce(69),  /* end, reduce: BitXorExp */
			reduce(69),  /* while, reduce: BitXorExp */
			reduce(69),  /* repeat, reduce: BitXorExp */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(69),  /* if, reduce: BitXorExp */
			reduce(69),  /* ,, reduce: BitXorExp */
			reduce(69),  /* for, reduce: BitXorExp */
			nil,         /* in */
			reduce(69),  /* function, reduce: BitXorExp */
			reduce(69),  /* local, reduce: BitXorExp */
			reduce(69),  /* ::, reduce: BitXorExp */
			nil,         /* . */
			nil,         /* : */
			reduce(69),  /* or, reduce: BitXorExp */
			reduce(69),  /* and, reduce: BitXorExp */
			reduce(69),  /* <, reduce: BitXorExp */
			reduce(69),  /* <=, reduce: BitXorExp */
			reduce(69),  /* >, reduce: BitXorExp */
			reduce(69),  /* >=, reduce: BitXorExp */
			reduce(69),  /* ==, reduce: BitXorExp */
			reduce(69),  /* ~=, reduce: BitXorExp */
			reduce(69),  /* |, reduce: BitXorExp */
			reduce(69),  /* ~, reduce: BitXorExp */
			shift(1351), /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(69),  /* (, reduce: BitXorExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(69),  /* ident, reduce: BitXorExp */
		},
	},
	actionRow{ // S1020
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(71),  /* return, reduce: BitAndExp */
			reduce(71),  /* ;, reduce: BitAndExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(71),  /* break, reduce: BitAndExp */
			reduce(71),  /* goto, reduce: BitAndExp */
			reduce(71),  /* do, reduce: BitAndExp */
			reduce(71),  /* end, reduce: BitAndExp */
			reduce(71),  /* while, reduce: BitAndExp */
			reduce(71),  /* repeat, reduce: BitAndExp */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(71),  /* if, reduce: BitAndExp */
			reduce(71),  /* ,, reduce: BitAndExp */
			reduce(71),  /* for, reduce: BitAndExp */
			nil,         /* in */
			reduce(71),  /* function, reduce: BitAndExp */
			reduce(71),  /* local, reduce: BitAndExp */
			reduce(71),  /* ::, reduce: BitAndExp */
			nil,         /* . */
			nil,         /* : */
			reduce(71),  /* or, reduce: BitAndExp */
			reduce(71),  /* and, reduce: BitAndExp */
			reduce(71),  /* <, reduce: BitAndExp */
			reduce(71),  /* <=, reduce: BitAndExp */
			reduce(71),  /* >, reduce: BitAndExp */
			reduce(71),  /* >=, reduce: BitAndExp */
			reduce(71),  /* ==, reduce: BitAndExp */
			reduce(71),  /* ~=, reduce: BitAndExp */
			reduce(71),  /* |, reduce: BitAndExp */
			reduce(71),  /* ~, reduce: BitAndExp */
			reduce(71),  /* &, reduce: BitAndExp */
			shift(1352), /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(71),  /* (, reduce: BitAndExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(71),  /* ident, reduce: BitAndExp */
		},
	},
	actionRow{ // S1021
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(73), /* return, reduce: ConcatExp */
			reduce(73), /* ;, reduce: ConcatExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(73), /* break, reduce: ConcatExp */
			reduce(73), /* goto, reduce: ConcatExp */
			reduce(73), /* do, reduce: ConcatExp */
			reduce(73), /* end, reduce: ConcatExp */
			reduce(73), /* while, reduce: ConcatExp */
			reduce(73), /* repeat, reduce: ConcatExp */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(73), /* if, reduce: ConcatExp */
			reduce(73), /* ,, reduce: ConcatExp */
			reduce(73), /* for, reduce: ConcatExp */
			nil,        /* in */
			reduce(73), /* function, reduce: ConcatExp */
			reduce(73), /* local, reduce: ConcatExp */
			reduce(73), /* ::, reduce: ConcatExp */
			nil,        /* . */
			nil,        /* : */
			reduce(73), /* or, reduce: ConcatExp */
			reduce(73), /* and, reduce: ConcatExp */
			reduce(73), /* <, reduce: ConcatExp */
			reduce(73), /* <=, reduce: ConcatExp */
			reduce(73), /* >, reduce: ConcatExp */
			reduce(73), /* >=, reduce: ConcatExp */
			reduce(73), /* ==, reduce: ConcatExp */
			reduce(73), /* ~=, reduce: ConcatExp */
			reduce(73), /* |, reduce: ConcatExp */
			reduce(73), /* ~, reduce: ConcatExp */
			reduce(73), /* &, reduce: ConcatExp */
			reduce(73), /* .., reduce: ConcatExp */
			shift(214), /* << */
			shift(215), /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(73), /* (, reduce: ConcatExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(73), /* ident, reduce: ConcatExp */
		},
	},
	actionRow{ // S1022
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(77), /* return, reduce: ShiftExp */
			reduce(77), /* ;, reduce: ShiftExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(77), /* break, reduce: ShiftExp */
			reduce(77), /* goto, reduce: ShiftExp */
			reduce(77), /* do, reduce: ShiftExp */
			reduce(77), /* end, reduce: ShiftExp */
			reduce(77), /* while, reduce: ShiftExp */
			reduce(77), /* repeat, reduce: ShiftExp */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(77), /* if, reduce: ShiftExp */
			reduce(77), /* ,, reduce: ShiftExp */
			reduce(77), /* for, reduce: ShiftExp */
			nil,        /* in */
			reduce(77), /* function, reduce: ShiftExp */
			reduce(77), /* local, reduce: ShiftExp */
			reduce(77), /* ::, reduce: ShiftExp */
			nil,        /* . */
			nil,        /* : */
			reduce(77), /* or, reduce: ShiftExp */
			reduce(77), /* and, reduce: ShiftExp */
			reduce(77), /* <, reduce: ShiftExp */
			reduce(77), /* <=, reduce: ShiftExp */
			reduce(77), /* >, reduce: ShiftExp */
			reduce(77), /* >=, reduce: ShiftExp */
			reduce(77), /* ==, reduce: ShiftExp */
			reduce(77), /* ~=, reduce: ShiftExp */
			reduce(77), /* |, reduce: ShiftExp */
			reduce(77), /* ~, reduce: ShiftExp */
			reduce(77), /* &, reduce: ShiftExp */
			reduce(77), /* .., reduce: ShiftExp */
			reduce(77), /* <<, reduce: ShiftExp */
			reduce(77), /* >>, reduce: ShiftExp */
			shift(217), /* + */
			shift(218), /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(77), /* (, reduce: ShiftExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(77), /* ident, reduce: ShiftExp */
		},
	},
	actionRow{ // S1023
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(81), /* return, reduce: Sum */
			reduce(81), /* ;, reduce: Sum */
			nil,        /* empty */
			nil,        /* = */
			reduce(81), /* break, reduce: Sum */
			reduce(81), /* goto, reduce: Sum */
			reduce(81), /* do, reduce: Sum */
			reduce(81), /* end, reduce: Sum */
			reduce(81), /* while, reduce: Sum */
			reduce(81), /* repeat, reduce: Sum */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(81), /* if, reduce: Sum */
			reduce(81), /* ,, reduce: Sum */
			reduce(81), /* for, reduce: Sum */
			nil,        /* in */
			reduce(81), /* function, reduce: Sum */
			reduce(81), /* local, reduce: Sum */
			reduce(81), /* ::, reduce: Sum */
			nil,        /* . */
			nil,        /* : */
			reduce(81), /* or, reduce: Sum */
			reduce(81), /* and, reduce: Sum */
			reduce(81), /* <, reduce: Sum */
			reduce(81), /* <=, reduce: Sum */
			reduce(81), /* >, reduce: Sum */
			reduce(81), /* >=, reduce: Sum */
			reduce(81), /* ==, reduce: Sum */
			reduce(81), /* ~=, reduce: Sum */
			reduce(81), /* |, reduce: Sum */
			reduce(81), /* ~, reduce: Sum */
			reduce(81), /* &, reduce: Sum */
			reduce(81), /* .., reduce: Sum */
			reduce(81), /* <<, reduce: Sum */
			reduce(81), /* >>, reduce: Sum */
			reduce(81), /* +, reduce: Sum */
			reduce(81), /* -, reduce: Sum */
			shift(220), /* * */
			shift(221), /* / */
			shift(222), /* % */
			shift(223), /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(81), /* (, reduce: Sum */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(81), /* ident, reduce: Sum */
		},
	},
	actionRow{ // S1024
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(87), /* return, reduce: Term */
			reduce(87), /* ;, reduce: Term */
			nil,        /* empty */
			nil,        /* = */
			reduce(87), /* break, reduce: Term */
			reduce(87), /* goto, reduce: Term */
			reduce(87), /* do, reduce: Term */
			reduce(87), /* end, reduce: Term */
			reduce(87), /* while, reduce: Term */
			reduce(87), /* repeat, reduce: Term */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(87), /* if, reduce: Term */
			reduce(87), /* ,, reduce: Term */
			reduce(87), /* for, reduce: Term */
			nil,        /* in */
			reduce(87), /* function, reduce: Term */
			reduce(87), /* local, reduce: Term */
			reduce(87), /* ::, reduce: Term */
			nil,        /* . */
			nil,        /* : */
			reduce(87), /* or, reduce: Term */
			reduce(87), /* and, reduce: Term */
			reduce(87), /* <, reduce: Term */
			reduce(87), /* <=, reduce: Term */
			reduce(87), /* >, reduce: Term */
			reduce(87), /* >=, reduce: Term */
			reduce(87), /* ==, reduce: Term */
			reduce(87), /* ~=, reduce: Term */
			reduce(87), /* |, reduce: Term */
			reduce(87), /* ~, reduce: Term */
			reduce(87), /* &, reduce: Term */
			reduce(87), /* .., reduce: Term */
			reduce(87), /* <<, reduce: Term */
			reduce(87), /* >>, reduce: Term */
			reduce(87), /* +, reduce: Term */
			reduce(87), /* -, reduce: Term */
			reduce(87), /* *, reduce: Term */
			reduce(87), /* /, reduce: Term */
			reduce(87), /* %, reduce: Term */
			reduce(87), /* //, reduce: Term */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(87), /* (, reduce: Term */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(87), /* ident, reduce: Term */
		},
	},
	actionRow{ // S1025
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1013), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1029), /* ( */
			nil,         /* ) */
			shift(1030), /* nil */
			shift(1031), /* true */
			shift(1032), /* false */
			shift(1033), /* ... */
			shift(1034), /* numdec */
			shift(1035), /* numhex */
			shift(1036), /* string */
			shift(1039), /* { */
			nil,         /* } */
			shift(1040), /* ident */
		},
	},
	actionRow{ // S1026
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(94), /* return, reduce: Factor */
			reduce(94), /* ;, reduce: Factor */
			nil,        /* empty */
			nil,        /* = */
			reduce(94), /* break, reduce: Factor */
			reduce(94), /* goto, reduce: Factor */
			reduce(94), /* do, reduce: Factor */
			reduce(94), /* end, reduce: Factor */
			reduce(94), /* while, reduce: Factor */
			reduce(94), /* repeat, reduce: Factor */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(94), /* if, reduce: Factor */
			reduce(94), /* ,, reduce: Factor */
			reduce(94), /* for, reduce: Factor */
			nil,        /* in */
			reduce(94), /* function, reduce: Factor */
			reduce(94), /* local, reduce: Factor */
			reduce(94), /* ::, reduce: Factor */
			nil,        /* . */
			nil,        /* : */
			reduce(94), /* or, reduce: Factor */
			reduce(94), /* and, reduce: Factor */
			reduce(94), /* <, reduce: Factor */
			reduce(94), /* <=, reduce: Factor */
			reduce(94), /* >, reduce: Factor */
			reduce(94), /* >=, reduce: Factor */
			reduce(94), /* ==, reduce: Factor */
			reduce(94), /* ~=, reduce: Factor */
			reduce(94), /* |, reduce: Factor */
			reduce(94), /* ~, reduce: Factor */
			reduce(94), /* &, reduce: Factor */
			reduce(94), /* .., reduce: Factor */
			reduce(94), /* <<, reduce: Factor */
			reduce(94), /* >>, reduce: Factor */
			reduce(94), /* +, reduce: Factor */
			reduce(94), /* -, reduce: Factor */
			reduce(94), /* *, reduce: Factor */
			reduce(94), /* /, reduce: Factor */
			reduce(94), /* %, reduce: Factor */
			reduce(94), /* //, reduce: Factor */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(94), /* (, reduce: Factor */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(94), /* ident, reduce: Factor */
		},
	},
	actionRow{ // S1027
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(95),  /* return, reduce: Power */
			reduce(95),  /* ;, reduce: Power */
			nil,         /* empty */
			nil,         /* = */
			reduce(95),  /* break, reduce: Power */
			reduce(95),  /* goto, reduce: Power */
			reduce(95),  /* do, reduce: Power */
			reduce(95),  /* end, reduce: Power */
			reduce(95),  /* while, reduce: Power */
			reduce(95),  /* repeat, reduce: Power */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(95),  /* if, reduce: Power */
			reduce(95),  /* ,, reduce: Power */
			reduce(95),  /* for, reduce: Power */
			nil,         /* in */
			reduce(95),  /* function, reduce: Power */
			reduce(95),  /* local, reduce: Power */
			reduce(95),  /* ::, reduce: Power */
			nil,         /* . */
			nil,         /* : */
			reduce(95),  /* or, reduce: Power */
			reduce(95),  /* and, reduce: Power */
			reduce(95),  /* <, reduce: Power */
			reduce(95),  /* <=, reduce: Power */
			reduce(95),  /* >, reduce: Power */
			reduce(95),  /* >=, reduce: Power */
			reduce(95),  /* ==, reduce: Power */
			reduce(95),  /* ~=, reduce: Power */
			reduce(95),  /* |, reduce: Power */
			reduce(95),  /* ~, reduce: Power */
			reduce(95),  /* &, reduce: Power */
			reduce(95),  /* .., reduce: Power */
			reduce(95),  /* <<, reduce: Power */
			reduce(95),  /* >>, reduce: Power */
			reduce(95),  /* +, reduce: Power */
			reduce(95),  /* -, reduce: Power */
			reduce(95),  /* *, reduce: Power */
			reduce(95),  /* /, reduce: Power */
			reduce(95),  /* %, reduce: Power */
			reduce(95),  /* //, reduce: Power */
			nil,         /* not */
			nil,         /* # */
			shift(1357), /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(95),  /* (, reduce: Power */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(95),  /* ident, reduce: Power */
		},
	},
	actionRow{ // S1028
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(114), /* return, reduce: Atom */
			reduce(114), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(114), /* break, reduce: Atom */
			reduce(114), /* goto, reduce: Atom */
			reduce(114), /* do, reduce: Atom */
			reduce(114), /* end, reduce: Atom */
			reduce(114), /* while, reduce: Atom */
			reduce(114), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(114), /* if, reduce: Atom */
			reduce(114), /* ,, reduce: Atom */
			reduce(114), /* for, reduce: Atom */
			nil,         /* in */
			reduce(114), /* function, reduce: Atom */
			reduce(114), /* local, reduce: Atom */
			reduce(114), /* ::, reduce: Atom */
			shift(1358), /* . */
			shift(1359), /* : */
			reduce(114), /* or, reduce: Atom */
			reduce(114), /* and, reduce: Atom */
			reduce(114), /* <, reduce: Atom */
			reduce(114), /* <=, reduce: Atom */
			reduce(114), /* >, reduce: Atom */
			reduce(114), /* >=, reduce: Atom */
			reduce(114), /* ==, reduce: Atom */
			reduce(114), /* ~=, reduce: Atom */
			reduce(114), /* |, reduce: Atom */
			reduce(114), /* ~, reduce: Atom */
			reduce(114), /* &, reduce: Atom */
			reduce(114), /* .., reduce: Atom */
			reduce(114), /* <<, reduce: Atom */
			reduce(114), /* >>, reduce: Atom */
			reduce(114), /* +, reduce: Atom */
			reduce(114), /* -, reduce: Atom */
			reduce(114), /* *, reduce: Atom */
			reduce(114), /* /, reduce: Atom */
			reduce(114), /* %, reduce: Atom */
			reduce(114), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(114), /* ^, reduce: Atom */
			shift(1360), /* [ */
			nil,         /* ] */
			shift(1361), /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			shift(1363), /* string */
			shift(1365), /* { */
			nil,         /* } */
			reduce(114), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S1029
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(168), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(184), /* ( */
			nil,        /* ) */
			shift(185), /* nil */
			shift(186), /* true */
			shift(187), /* false */
			shift(188), /* ... */
			shift(189), /* numdec */
			shift(190), /* numhex */
			shift(191), /* string */
			shift(194), /* { */
			nil,        /* } */
			shift(195), /* ident */
		},
	},
	actionRow{ // S1030
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(105), /* return, reduce: Atom */
			reduce(105), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(105), /* break, reduce: Atom */
			reduce(105), /* goto, reduce: Atom */
			reduce(105), /* do, reduce: Atom */
			reduce(105), /* end, reduce: Atom */
			reduce(105), /* while, reduce: Atom */
			reduce(105), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(105), /* if, reduce: Atom */
			reduce(105), /* ,, reduce: Atom */
			reduce(105), /* for, reduce: Atom */
			nil,         /* in */
			reduce(105), /* function, reduce: Atom */
			reduce(105), /* local, reduce: Atom */
			reduce(105), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(105), /* or, reduce: Atom */
			reduce(105), /* and, reduce: Atom */
			reduce(105), /* <, reduce: Atom */
			reduce(105), /* <=, reduce: Atom */
			reduce(105), /* >, reduce: Atom */
			reduce(105), /* >=, reduce: Atom */
			reduce(105), /* ==, reduce: Atom */
			reduce(105), /* ~=, reduce: Atom */
			reduce(105), /* |, reduce: Atom */
			reduce(105), /* ~, reduce: Atom */
			reduce(105), /* &, reduce: Atom */
			reduce(105), /* .., reduce: Atom */
			reduce(105), /* <<, reduce: Atom */
			reduce(105), /* >>, reduce: Atom */
			reduce(105), /* +, reduce: Atom */
			reduce(105), /* -, reduce: Atom */
			reduce(105), /* *, reduce: Atom */
			reduce(105), /* /, reduce: Atom */
			reduce(105), /* %, reduce: Atom */
			reduce(105), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(105), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(105), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(105), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S1031
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(106), /* return, reduce: Atom */
			reduce(106), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(106), /* break, reduce: Atom */
			reduce(106), /* goto, reduce: Atom */
			reduce(106), /* do, reduce: Atom */
			reduce(106), /* end, reduce: Atom */
			reduce(106), /* while, reduce: Atom */
			reduce(106), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(106), /* if, reduce: Atom */
			reduce(106), /* ,, reduce: Atom */
			reduce(106), /* for, reduce: Atom */
			nil,         /* in */
			reduce(106), /* function, reduce: Atom */
			reduce(106), /* local, reduce: Atom */
			reduce(106), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(106), /* or, reduce: Atom */
			reduce(106), /* and, reduce: Atom */
			reduce(106), /* <, reduce: Atom */
			reduce(106), /* <=, reduce: Atom */
			reduce(106), /* >, reduce: Atom */
			reduce(106), /* >=, reduce: Atom */
			reduce(106), /* ==, reduce: Atom */
			reduce(106), /* ~=, reduce: Atom */
			reduce(106), /* |, reduce: Atom */
			reduce(106), /* ~, reduce: Atom */
			reduce(106), /* &, reduce: Atom */
			reduce(106), /* .., reduce: Atom */
			reduce(106), /* <<, reduce: Atom */
			reduce(106), /* >>, reduce: Atom */
			reduce(106), /* +, reduce: Atom */
			reduce(106), /* -, reduce: Atom */
			reduce(106), /* *, reduce: Atom */
			reduce(106), /* /, reduce: Atom */
			reduce(106), /* %, reduce: Atom */
			reduce(106), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(106), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(106), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(106), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S1032
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(107), /* return, reduce: Atom */
			reduce(107), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(107), /* break, reduce: Atom */
			reduce(107), /* goto, reduce: Atom */
			reduce(107), /* do, reduce: Atom */
			reduce(107), /* end, reduce: Atom */
			reduce(107), /* while, reduce: Atom */
			reduce(107), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(107), /* if, reduce: Atom */
			reduce(107), /* ,, reduce: Atom */
			reduce(107), /* for, reduce: Atom */
			nil,         /* in */
			reduce(107), /* function, reduce: Atom */
			reduce(107), /* local, reduce: Atom */
			reduce(107), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(107), /* or, reduce: Atom */
			reduce(107), /* and, reduce: Atom */
			reduce(107), /* <, reduce: Atom */
			reduce(107), /* <=, reduce: Atom */
			reduce(107), /* >, reduce: Atom */
			reduce(107), /* >=, reduce: Atom */
			reduce(107), /* ==, reduce: Atom */
			reduce(107), /* ~=, reduce: Atom */
			reduce(107), /* |, reduce: Atom */
			reduce(107), /* ~, reduce: Atom */
			reduce(107), /* &, reduce: Atom */
			reduce(107), /* .., reduce: Atom */
			reduce(107), /* <<, reduce: Atom */
			reduce(107), /* >>, reduce: Atom */
			reduce(107), /* +, reduce: Atom */
			reduce(107), /* -, reduce: Atom */
			reduce(107), /* *, reduce: Atom */
			reduce(107), /* /, reduce: Atom */
			reduce(107), /* %, reduce: Atom */
			reduce(107), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(107), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(107), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(107), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S1033
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(108), /* return, reduce: Atom */
			reduce(108), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(108), /* break, reduce: Atom */
			reduce(108), /* goto, reduce: Atom */
			reduce(108), /* do, reduce: Atom */
			reduce(108), /* end, reduce: Atom */
			reduce(108), /* while, reduce: Atom */
			reduce(108), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(108), /* if, reduce: Atom */
			reduce(108), /* ,, reduce: Atom */
			reduce(108), /* for, reduce: Atom */
			nil,         /* in */
			reduce(108), /* function, reduce: Atom */
			reduce(108), /* local, reduce: Atom */
			reduce(108), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(108), /* or, reduce: Atom */
			reduce(108), /* and, reduce: Atom */
			reduce(108), /* <, reduce: Atom */
			reduce(108), /* <=, reduce: Atom */
			reduce(108), /* >, reduce: Atom */
			reduce(108), /* >=, reduce: Atom */
			reduce(108), /* ==, reduce: Atom */
			reduce(108), /* ~=, reduce: Atom */
			reduce(108), /* |, reduce: Atom */
			reduce(108), /* ~, reduce: Atom */
			reduce(108), /* &, reduce: Atom */
			reduce(108), /* .., reduce: Atom */
			reduce(108), /* <<, reduce: Atom */
			reduce(108), /* >>, reduce: Atom */
			reduce(108), /* +, reduce: Atom */
			reduce(108), /* -, reduce: Atom */
			reduce(108), /* *, reduce: Atom */
			reduce(108), /* /, reduce: Atom */
			reduce(108), /* %, reduce: Atom */
			reduce(108), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(108), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(108), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(108), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S1034
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(109), /* return, reduce: Atom */
			reduce(109), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(109), /* break, reduce: Atom */
			reduce(109), /* goto, reduce: Atom */
			reduce(109), /* do, reduce: Atom */
			reduce(109), /* end, reduce: Atom */
			reduce(109), /* while, reduce: Atom */
			reduce(109), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(109), /* if, reduce: Atom */
			reduce(109), /* ,, reduce: Atom */
			reduce(109), /* for, reduce: Atom */
			nil,         /* in */
			reduce(109), /* function, reduce: Atom */
			reduce(109), /* local, reduce: Atom */
			reduce(109), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(109), /* or, reduce: Atom */
			reduce(109), /* and, reduce: Atom */
			reduce(109), /* <, reduce: Atom */
			reduce(109), /* <=, reduce: Atom */
			reduce(109), /* >, reduce: Atom */
			reduce(109), /* >=, reduce: Atom */
			reduce(109), /* ==, reduce: Atom */
			reduce(109), /* ~=, reduce: Atom */
			reduce(109), /* |, reduce: Atom */
			reduce(109), /* ~, reduce: Atom */
			reduce(109), /* &, reduce: Atom */
			reduce(109), /* .., reduce: Atom */
			reduce(109), /* <<, reduce: Atom */
			reduce(109), /* >>, reduce: Atom */
			reduce(109), /* +, reduce: Atom */
			reduce(109), /* -, reduce: Atom */
			reduce(109), /* *, reduce: Atom */
			reduce(109), /* /, reduce: Atom */
			reduce(109), /* %, reduce: Atom */
			reduce(109), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(109), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(109), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(109), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S1035
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(110), /* return, reduce: Atom */
			reduce(110), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(110), /* break, reduce: Atom */
			reduce(110), /* goto, reduce: Atom */
			reduce(110), /* do, reduce: Atom */
			reduce(110), /* end, reduce: Atom */
			reduce(110), /* while, reduce: Atom */
			reduce(110), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(110), /* if, reduce: Atom */
			reduce(110), /* ,, reduce: Atom */
			reduce(110), /* for, reduce: Atom */
			nil,         /* in */
			reduce(110), /* function, reduce: Atom */
			reduce(110), /* local, reduce: Atom */
			reduce(110), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(110), /* or, reduce: Atom */
			reduce(110), /* and, reduce: Atom */
			reduce(110), /* <, reduce: Atom */
			reduce(110), /* <=, reduce: Atom */
			reduce(110), /* >, reduce: Atom */
			reduce(110), /* >=, reduce: Atom */
			reduce(110), /* ==, reduce: Atom */
			reduce(110), /* ~=, reduce: Atom */
			reduce(110), /* |, reduce: Atom */
			reduce(110), /* ~, reduce: Atom */
			reduce(110), /* &, reduce: Atom */
			reduce(110), /* .., reduce: Atom */
			reduce(110), /* <<, reduce: Atom */
			reduce(110), /* >>, reduce: Atom */
			reduce(110), /* +, reduce: Atom */
			reduce(110), /* -, reduce: Atom */
			reduce(110), /* *, reduce: Atom */
			reduce(110), /* /, reduce: Atom */
			reduce(110), /* %, reduce: Atom */
			reduce(110), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(110), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(110), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(110), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S1036
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(111), /* return, reduce: Atom */
			reduce(111), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(111), /* break, reduce: Atom */
			reduce(111), /* goto, reduce: Atom */
			reduce(111), /* do, reduce: Atom */
			reduce(111), /* end, reduce: Atom */
			reduce(111), /* while, reduce: Atom */
			reduce(111), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(111), /* if, reduce: Atom */
			reduce(111), /* ,, reduce: Atom */
			reduce(111), /* for, reduce: Atom */
			nil,         /* in */
			reduce(111), /* function, reduce: Atom */
			reduce(111), /* local, reduce: Atom */
			reduce(111), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(111), /* or, reduce: Atom */
			reduce(111), /* and, reduce: Atom */
			reduce(111), /* <, reduce: Atom */
			reduce(111), /* <=, reduce: Atom */
			reduce(111), /* >, reduce: Atom */
			reduce(111), /* >=, reduce: Atom */
			reduce(111), /* ==, reduce: Atom */
			reduce(111), /* ~=, reduce: Atom */
			reduce(111), /* |, reduce: Atom */
			reduce(111), /* ~, reduce: Atom */
			reduce(111), /* &, reduce: Atom */
			reduce(111), /* .., reduce: Atom */
			reduce(111), /* <<, reduce: Atom */
			reduce(111), /* >>, reduce: Atom */
			reduce(111), /* +, reduce: Atom */
			reduce(111), /* -, reduce: Atom */
			reduce(111), /* *, reduce: Atom */
			reduce(111), /* /, reduce: Atom */
			reduce(111), /* %, reduce: Atom */
			reduce(111), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(111), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(111), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(111), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S1037
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(112), /* return, reduce: Atom */
			reduce(112), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(112), /* break, reduce: Atom */
			reduce(112), /* goto, reduce: Atom */
			reduce(112), /* do, reduce: Atom */
			reduce(112), /* end, reduce: Atom */
			reduce(112), /* while, reduce: Atom */
			reduce(112), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(112), /* if, reduce: Atom */
			reduce(112), /* ,, reduce: Atom */
			reduce(112), /* for, reduce: Atom */
			nil,         /* in */
			reduce(112), /* function, reduce: Atom */
			reduce(112), /* local, reduce: Atom */
			reduce(112), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(112), /* or, reduce: Atom */
			reduce(112), /* and, reduce: Atom */
			reduce(112), /* <, reduce: Atom */
			reduce(112), /* <=, reduce: Atom */
			reduce(112), /* >, reduce: Atom */
			reduce(112), /* >=, reduce: Atom */
			reduce(112), /* ==, reduce: Atom */
			reduce(112), /* ~=, reduce: Atom */
			reduce(112), /* |, reduce: Atom */
			reduce(112), /* ~, reduce: Atom */
			reduce(112), /* &, reduce: Atom */
			reduce(112), /* .., reduce: Atom */
			reduce(112), /* <<, reduce: Atom */
			reduce(112), /* >>, reduce: Atom */
			reduce(112), /* +, reduce: Atom */
			reduce(112), /* -, reduce: Atom */
			reduce(112), /* *, reduce: Atom */
			reduce(112), /* /, reduce: Atom */
			reduce(112), /* %, reduce: Atom */
			reduce(112), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(112), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(112), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(112), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S1038
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(113), /* return, reduce: Atom */
			reduce(113), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(113), /* break, reduce: Atom */
			reduce(113), /* goto, reduce: Atom */
			reduce(113), /* do, reduce: Atom */
			reduce(113), /* end, reduce: Atom */
			reduce(113), /* while, reduce: Atom */
			reduce(113), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(113), /* if, reduce: Atom */
			reduce(113), /* ,, reduce: Atom */
			reduce(113), /* for, reduce: Atom */
			nil,         /* in */
			reduce(113), /* function, reduce: Atom */
			reduce(113), /* local, reduce: Atom */
			reduce(113), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(113), /* or, reduce: Atom */
			reduce(113), /* and, reduce: Atom */
			reduce(113), /* <, reduce: Atom */
			reduce(113), /* <=, reduce: Atom */
			reduce(113), /* >, reduce: Atom */
			reduce(113), /* >=, reduce: Atom */
			reduce(113), /* ==, reduce: Atom */
			reduce(113), /* ~=, reduce: Atom */
			reduce(113), /* |, reduce: Atom */
			reduce(113), /* ~, reduce: Atom */
			reduce(113), /* &, reduce: Atom */
			reduce(113), /* .., reduce: Atom */
			reduce(113), /* <<, reduce: Atom */
			reduce(113), /* >>, reduce: Atom */
			reduce(113), /* +, reduce: Atom */
			reduce(113), /* -, reduce: Atom */
			reduce(113), /* *, reduce: Atom */
			reduce(113), /* /, reduce: Atom */
			reduce(113), /* %, reduce: Atom */
			reduce(113), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(113), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(113), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(113), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S1039
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			shift(254), /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(268), /* ident */
		},
	},
	actionRow{ // S1040
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(134), /* return, reduce: Name */
			reduce(134), /* ;, reduce: Name */
			nil,         /* empty */
			nil,         /* = */
			reduce(134), /* break, reduce: Name */
			reduce(134), /* goto, reduce: Name */
			reduce(134), /* do, reduce: Name */
			reduce(134), /* end, reduce: Name */
			reduce(134), /* while, reduce: Name */
			reduce(134), /* repeat, reduce: Name */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(134), /* if, reduce: Name */
			reduce(134), /* ,, reduce: Name */
			reduce(134), /* for, reduce: Name */
			nil,         /* in */
			reduce(134), /* function, reduce: Name */
			reduce(134), /* local, reduce: Name */
			reduce(134), /* ::, reduce: Name */
			reduce(134), /* ., reduce: Name */
			reduce(134), /* :, reduce: Name */
			reduce(134), /* or, reduce: Name */
			reduce(134), /* and, reduce: Name */
			reduce(134), /* <, reduce: Name */
			reduce(134), /* <=, reduce: Name */
			reduce(134), /* >, reduce: Name */
			reduce(134), /* >=, reduce: Name */
			reduce(134), /* ==, reduce: Name */
			reduce(134), /* ~=, reduce: Name */
			reduce(134), /* |, reduce: Name */
			reduce(134), /* ~, reduce: Name */
			reduce(134), /* &, reduce: Name */
			reduce(134), /* .., reduce: Name */
			reduce(134), /* <<, reduce: Name */
			reduce(134), /* >>, reduce: Name */
			reduce(134), /* +, reduce: Name */
			reduce(134), /* -, reduce: Name */
			reduce(134), /* *, reduce: Name */
			reduce(134), /* /, reduce: Name */
			reduce(134), /* %, reduce: Name */
			reduce(134), /* //, reduce: Name */
			nil,         /* not */
			nil,         /* # */
			reduce(134), /* ^, reduce: Name */
			reduce(134), /* [, reduce: Name */
			nil,         /* ] */
			reduce(134), /* (, reduce: Name */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(134), /* string, reduce: Name */
			reduce(134), /* {, reduce: Name */
			nil,         /* } */
			reduce(134), /* ident, reduce: Name */
		},
	},
	actionRow{ // S1041
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(26), /* return, reduce: BlockStat */
			reduce(26), /* ;, reduce: BlockStat */
			nil,        /* empty */
			nil,        /* = */
			reduce(26), /* break, reduce: BlockStat */
			reduce(26), /* goto, reduce: BlockStat */
			reduce(26), /* do, reduce: BlockStat */
			reduce(26), /* end, reduce: BlockStat */
			reduce(26), /* while, reduce: BlockStat */
			reduce(26), /* repeat, reduce: BlockStat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(26), /* if, reduce: BlockStat */
			nil,        /* , */
			reduce(26), /* for, reduce: BlockStat */
			nil,        /* in */
			reduce(26), /* function, reduce: BlockStat */
			reduce(26), /* local, reduce: BlockStat */
			reduce(26), /* ::, reduce: BlockStat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(26), /* (, reduce: BlockStat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(26), /* ident, reduce: BlockStat */
		},
	},
	actionRow{ // S1042
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S1043
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1372), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1388), /* ( */
			nil,         /* ) */
			shift(1389), /* nil */
			shift(1390), /* true */
			shift(1391), /* false */
			shift(1392), /* ... */
			shift(1393), /* numdec */
			shift(1394), /* numhex */
			shift(1395), /* string */
			shift(1398), /* { */
			nil,         /* } */
			shift(1399), /* ident */
		},
	},
	actionRow{ // S1044
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			reduce(6), /* elseif, reduce: StatList */
			reduce(6), /* else, reduce: StatList */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S1045
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(782), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(798), /* ( */
			nil,        /* ) */
			shift(799), /* nil */
			shift(800), /* true */
			shift(801), /* false */
			shift(802), /* ... */
			shift(803), /* numdec */
			shift(804), /* numhex */
			shift(805), /* string */
			shift(808), /* { */
			nil,        /* } */
			shift(809), /* ident */
		},
	},
	actionRow{ // S1046
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(816), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(832), /* ( */
			nil,        /* ) */
			shift(833), /* nil */
			shift(834), /* true */
			shift(835), /* false */
			shift(836), /* ... */
			shift(837), /* numdec */
			shift(838), /* numhex */
			shift(839), /* string */
			shift(842), /* { */
			nil,        /* } */
			shift(843), /* ident */
		},
	},
	actionRow{ // S1047
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(40), /* return, reduce: FunctionStat */
			reduce(40), /* ;, reduce: FunctionStat */
			nil,        /* empty */
			nil,        /* = */
			reduce(40), /* break, reduce: FunctionStat */
			reduce(40), /* goto, reduce: FunctionStat */
			reduce(40), /* do, reduce: FunctionStat */
			reduce(40), /* end, reduce: FunctionStat */
			reduce(40), /* while, reduce: FunctionStat */
			reduce(40), /* repeat, reduce: FunctionStat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(40), /* if, reduce: FunctionStat */
			nil,        /* , */
			reduce(40), /* for, reduce: FunctionStat */
			nil,        /* in */
			reduce(40), /* function, reduce: FunctionStat */
			reduce(40), /* local, reduce: FunctionStat */
			reduce(40), /* ::, reduce: FunctionStat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(40), /* (, reduce: FunctionStat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(40), /* ident, reduce: FunctionStat */
		},
	},
	actionRow{ // S1048
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(123), /* ), reduce: ParList */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			shift(521),  /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			shift(523),  /* ident */
		},
	},
	actionRow{ // S1049
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1013), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1029), /* ( */
			nil,         /* ) */
			shift(1030), /* nil */
			shift(1031), /* true */
			shift(1032), /* false */
			shift(1033), /* ... */
			shift(1034), /* numdec */
			shift(1035), /* numhex */
			shift(1036), /* string */
			shift(1039), /* { */
			nil,         /* } */
			shift(1040), /* ident */
		},
	},
	actionRow{ // S1050
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(651), /* ident */
		},
	},
	actionRow{ // S1051
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1048), /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1052
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(44), /* return, reduce: Label */
			reduce(44), /* ;, reduce: Label */
			nil,        /* empty */
			nil,        /* = */
			reduce(44), /* break, reduce: Label */
			reduce(44), /* goto, reduce: Label */
			reduce(44), /* do, reduce: Label */
			reduce(44), /* end, reduce: Label */
			reduce(44), /* while, reduce: Label */
			reduce(44), /* repeat, reduce: Label */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(44), /* if, reduce: Label */
			nil,        /* , */
			reduce(44), /* for, reduce: Label */
			nil,        /* in */
			reduce(44), /* function, reduce: Label */
			reduce(44), /* local, reduce: Label */
			reduce(44), /* ::, reduce: Label */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(44), /* (, reduce: Label */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(44), /* ident, reduce: Label */
		},
	},
	actionRow{ // S1053
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(27), /* $, reduce: WhileStat */
			reduce(27), /* return, reduce: WhileStat */
			reduce(27), /* ;, reduce: WhileStat */
			nil,        /* empty */
			nil,        /* = */
			reduce(27), /* break, reduce: WhileStat */
			reduce(27), /* goto, reduce: WhileStat */
			reduce(27), /* do, reduce: WhileStat */
			nil,        /* end */
			reduce(27), /* while, reduce: WhileStat */
			reduce(27), /* repeat, reduce: WhileStat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(27), /* if, reduce: WhileStat */
			nil,        /* , */
			reduce(27), /* for, reduce: WhileStat */
			nil,        /* in */
			reduce(27), /* function, reduce: WhileStat */
			reduce(27), /* local, reduce: WhileStat */
			reduce(27), /* ::, reduce: WhileStat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(27), /* (, reduce: WhileStat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(27), /* ident, reduce: WhileStat */
		},
	},
	actionRow{ // S1054
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S1055
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(104), /* do, reduce: FunctionCall */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(104), /* ., reduce: FunctionCall */
			reduce(104), /* :, reduce: FunctionCall */
			reduce(104), /* or, reduce: FunctionCall */
			reduce(104), /* and, reduce: FunctionCall */
			reduce(104), /* <, reduce: FunctionCall */
			reduce(104), /* <=, reduce: FunctionCall */
			reduce(104), /* >, reduce: FunctionCall */
			reduce(104), /* >=, reduce: FunctionCall */
			reduce(104), /* ==, reduce: FunctionCall */
			reduce(104), /* ~=, reduce: FunctionCall */
			reduce(104), /* |, reduce: FunctionCall */
			reduce(104), /* ~, reduce: FunctionCall */
			reduce(104), /* &, reduce: FunctionCall */
			reduce(104), /* .., reduce: FunctionCall */
			reduce(104), /* <<, reduce: FunctionCall */
			reduce(104), /* >>, reduce: FunctionCall */
			reduce(104), /* +, reduce: FunctionCall */
			reduce(104), /* -, reduce: FunctionCall */
			reduce(104), /* *, reduce: FunctionCall */
			reduce(104), /* /, reduce: FunctionCall */
			reduce(104), /* %, reduce: FunctionCall */
			reduce(104), /* //, reduce: FunctionCall */
			nil,         /* not */
			nil,         /* # */
			reduce(104), /* ^, reduce: FunctionCall */
			reduce(104), /* [, reduce: FunctionCall */
			nil,         /* ] */
			reduce(104), /* (, reduce: FunctionCall */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(104), /* string, reduce: FunctionCall */
			reduce(104), /* {, reduce: FunctionCall */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1056
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			reduce(98), /* do, reduce: Var */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			reduce(98), /* ., reduce: Var */
			reduce(98), /* :, reduce: Var */
			reduce(98), /* or, reduce: Var */
			reduce(98), /* and, reduce: Var */
			reduce(98), /* <, reduce: Var */
			reduce(98), /* <=, reduce: Var */
			reduce(98), /* >, reduce: Var */
			reduce(98), /* >=, reduce: Var */
			reduce(98), /* ==, reduce: Var */
			reduce(98), /* ~=, reduce: Var */
			reduce(98), /* |, reduce: Var */
			reduce(98), /* ~, reduce: Var */
			reduce(98), /* &, reduce: Var */
			reduce(98), /* .., reduce: Var */
			reduce(98), /* <<, reduce: Var */
			reduce(98), /* >>, reduce: Var */
			reduce(98), /* +, reduce: Var */
			reduce(98), /* -, reduce: Var */
			reduce(98), /* *, reduce: Var */
			reduce(98), /* /, reduce: Var */
			reduce(98), /* %, reduce: Var */
			reduce(98), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(98), /* ^, reduce: Var */
			reduce(98), /* [, reduce: Var */
			nil,        /* ] */
			reduce(98), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(98), /* string, reduce: Var */
			reduce(98), /* {, reduce: Var */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1057
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(116), /* do, reduce: Args */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(116), /* ., reduce: Args */
			reduce(116), /* :, reduce: Args */
			reduce(116), /* or, reduce: Args */
			reduce(116), /* and, reduce: Args */
			reduce(116), /* <, reduce: Args */
			reduce(116), /* <=, reduce: Args */
			reduce(116), /* >, reduce: Args */
			reduce(116), /* >=, reduce: Args */
			reduce(116), /* ==, reduce: Args */
			reduce(116), /* ~=, reduce: Args */
			reduce(116), /* |, reduce: Args */
			reduce(116), /* ~, reduce: Args */
			reduce(116), /* &, reduce: Args */
			reduce(116), /* .., reduce: Args */
			reduce(116), /* <<, reduce: Args */
			reduce(116), /* >>, reduce: Args */
			reduce(116), /* +, reduce: Args */
			reduce(116), /* -, reduce: Args */
			reduce(116), /* *, reduce: Args */
			reduce(116), /* /, reduce: Args */
			reduce(116), /* %, reduce: Args */
			reduce(116), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(116), /* ^, reduce: Args */
			reduce(116), /* [, reduce: Args */
			nil,         /* ] */
			reduce(116), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(116), /* string, reduce: Args */
			reduce(116), /* {, reduce: Args */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1058
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(125), /* do, reduce: TableConstructor */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(125), /* ., reduce: TableConstructor */
			reduce(125), /* :, reduce: TableConstructor */
			reduce(125), /* or, reduce: TableConstructor */
			reduce(125), /* and, reduce: TableConstructor */
			reduce(125), /* <, reduce: TableConstructor */
			reduce(125), /* <=, reduce: TableConstructor */
			reduce(125), /* >, reduce: TableConstructor */
			reduce(125), /* >=, reduce: TableConstructor */
			reduce(125), /* ==, reduce: TableConstructor */
			reduce(125), /* ~=, reduce: TableConstructor */
			reduce(125), /* |, reduce: TableConstructor */
			reduce(125), /* ~, reduce: TableConstructor */
			reduce(125), /* &, reduce: TableConstructor */
			reduce(125), /* .., reduce: TableConstructor */
			reduce(125), /* <<, reduce: TableConstructor */
			reduce(125), /* >>, reduce: TableConstructor */
			reduce(125), /* +, reduce: TableConstructor */
			reduce(125), /* -, reduce: TableConstructor */
			reduce(125), /* *, reduce: TableConstructor */
			reduce(125), /* /, reduce: TableConstructor */
			reduce(125), /* %, reduce: TableConstructor */
			reduce(125), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(125), /* ^, reduce: TableConstructor */
			reduce(125), /* [, reduce: TableConstructor */
			nil,         /* ] */
			reduce(125), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(125), /* string, reduce: TableConstructor */
			reduce(125), /* {, reduce: TableConstructor */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1059
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(238),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			shift(254),  /* [ */
			nil,         /* ] */
			shift(255),  /* ( */
			nil,         /* ) */
			shift(256),  /* nil */
			shift(257),  /* true */
			shift(258),  /* false */
			shift(259),  /* ... */
			shift(260),  /* numdec */
			shift(261),  /* numhex */
			shift(262),  /* string */
			shift(265),  /* { */
			shift(1408), /* } */
			shift(268),  /* ident */
		},
	},
	actionRow{ // S1060
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(126), /* do, reduce: TableConstructor */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(126), /* or, reduce: TableConstructor */
			reduce(126), /* and, reduce: TableConstructor */
			reduce(126), /* <, reduce: TableConstructor */
			reduce(126), /* <=, reduce: TableConstructor */
			reduce(126), /* >, reduce: TableConstructor */
			reduce(126), /* >=, reduce: TableConstructor */
			reduce(126), /* ==, reduce: TableConstructor */
			reduce(126), /* ~=, reduce: TableConstructor */
			reduce(126), /* |, reduce: TableConstructor */
			reduce(126), /* ~, reduce: TableConstructor */
			reduce(126), /* &, reduce: TableConstructor */
			reduce(126), /* .., reduce: TableConstructor */
			reduce(126), /* <<, reduce: TableConstructor */
			reduce(126), /* >>, reduce: TableConstructor */
			reduce(126), /* +, reduce: TableConstructor */
			reduce(126), /* -, reduce: TableConstructor */
			reduce(126), /* *, reduce: TableConstructor */
			reduce(126), /* /, reduce: TableConstructor */
			reduce(126), /* %, reduce: TableConstructor */
			reduce(126), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(126), /* ^, reduce: TableConstructor */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1061
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(678), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(694), /* ( */
			nil,        /* ) */
			shift(695), /* nil */
			shift(696), /* true */
			shift(697), /* false */
			shift(698), /* ... */
			shift(699), /* numdec */
			shift(700), /* numhex */
			shift(701), /* string */
			shift(704), /* { */
			nil,        /* } */
			shift(705), /* ident */
		},
	},
	actionRow{ // S1062
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(119), /* $, reduce: FunctionDef */
			reduce(119), /* return, reduce: FunctionDef */
			reduce(119), /* ;, reduce: FunctionDef */
			nil,         /* empty */
			nil,         /* = */
			reduce(119), /* break, reduce: FunctionDef */
			reduce(119), /* goto, reduce: FunctionDef */
			reduce(119), /* do, reduce: FunctionDef */
			nil,         /* end */
			reduce(119), /* while, reduce: FunctionDef */
			reduce(119), /* repeat, reduce: FunctionDef */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(119), /* if, reduce: FunctionDef */
			nil,         /* , */
			reduce(119), /* for, reduce: FunctionDef */
			nil,         /* in */
			reduce(119), /* function, reduce: FunctionDef */
			reduce(119), /* local, reduce: FunctionDef */
			reduce(119), /* ::, reduce: FunctionDef */
			nil,         /* . */
			nil,         /* : */
			reduce(119), /* or, reduce: FunctionDef */
			reduce(119), /* and, reduce: FunctionDef */
			reduce(119), /* <, reduce: FunctionDef */
			reduce(119), /* <=, reduce: FunctionDef */
			reduce(119), /* >, reduce: FunctionDef */
			reduce(119), /* >=, reduce: FunctionDef */
			reduce(119), /* ==, reduce: FunctionDef */
			reduce(119), /* ~=, reduce: FunctionDef */
			reduce(119), /* |, reduce: FunctionDef */
			reduce(119), /* ~, reduce: FunctionDef */
			reduce(119), /* &, reduce: FunctionDef */
			reduce(119), /* .., reduce: FunctionDef */
			reduce(119), /* <<, reduce: FunctionDef */
			reduce(119), /* >>, reduce: FunctionDef */
			reduce(119), /* +, reduce: FunctionDef */
			reduce(119), /* -, reduce: FunctionDef */
			reduce(119), /* *, reduce: FunctionDef */
			reduce(119), /* /, reduce: FunctionDef */
			reduce(119), /* %, reduce: FunctionDef */
			reduce(119), /* //, reduce: FunctionDef */
			nil,         /* not */
			nil,         /* # */
			reduce(119), /* ^, reduce: FunctionDef */
			nil,         /* [ */
			nil,         /* ] */
			reduce(119), /* (, reduce: FunctionDef */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(119), /* ident, reduce: FunctionDef */
		},
	},
	actionRow{ // S1063
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(123), /* ), reduce: ParList */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			shift(521),  /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			shift(523),  /* ident */
		},
	},
	actionRow{ // S1064
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(678), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(694), /* ( */
			nil,        /* ) */
			shift(695), /* nil */
			shift(696), /* true */
			shift(697), /* false */
			shift(698), /* ... */
			shift(699), /* numdec */
			shift(700), /* numhex */
			shift(701), /* string */
			shift(704), /* { */
			nil,        /* } */
			shift(705), /* ident */
		},
	},
	actionRow{ // S1065
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(678), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(694), /* ( */
			nil,        /* ) */
			shift(695), /* nil */
			shift(696), /* true */
			shift(697), /* false */
			shift(698), /* ... */
			shift(699), /* numdec */
			shift(700), /* numhex */
			shift(701), /* string */
			shift(704), /* { */
			nil,        /* } */
			shift(705), /* ident */
		},
	},
	actionRow{ // S1066
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(678), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(694), /* ( */
			nil,        /* ) */
			shift(695), /* nil */
			shift(696), /* true */
			shift(697), /* false */
			shift(698), /* ... */
			shift(699), /* numdec */
			shift(700), /* numhex */
			shift(701), /* string */
			shift(704), /* { */
			nil,        /* } */
			shift(705), /* ident */
		},
	},
	actionRow{ // S1067
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(678), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(694), /* ( */
			nil,        /* ) */
			shift(695), /* nil */
			shift(696), /* true */
			shift(697), /* false */
			shift(698), /* ... */
			shift(699), /* numdec */
			shift(700), /* numhex */
			shift(701), /* string */
			shift(704), /* { */
			nil,        /* } */
			shift(705), /* ident */
		},
	},
	actionRow{ // S1068
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(678), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(694), /* ( */
			nil,        /* ) */
			shift(695), /* nil */
			shift(696), /* true */
			shift(697), /* false */
			shift(698), /* ... */
			shift(699), /* numdec */
			shift(700), /* numhex */
			shift(701), /* string */
			shift(704), /* { */
			nil,        /* } */
			shift(705), /* ident */
		},
	},
	actionRow{ // S1069
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(678), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(694), /* ( */
			nil,        /* ) */
			shift(695), /* nil */
			shift(696), /* true */
			shift(697), /* false */
			shift(698), /* ... */
			shift(699), /* numdec */
			shift(700), /* numhex */
			shift(701), /* string */
			shift(704), /* { */
			nil,        /* } */
			shift(705), /* ident */
		},
	},
	actionRow{ // S1070
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(678), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(694), /* ( */
			nil,        /* ) */
			shift(695), /* nil */
			shift(696), /* true */
			shift(697), /* false */
			shift(698), /* ... */
			shift(699), /* numdec */
			shift(700), /* numhex */
			shift(701), /* string */
			shift(704), /* { */
			nil,        /* } */
			shift(705), /* ident */
		},
	},
	actionRow{ // S1071
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(678), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(694), /* ( */
			nil,        /* ) */
			shift(695), /* nil */
			shift(696), /* true */
			shift(697), /* false */
			shift(698), /* ... */
			shift(699), /* numdec */
			shift(700), /* numhex */
			shift(701), /* string */
			shift(704), /* { */
			nil,        /* } */
			shift(705), /* ident */
		},
	},
	actionRow{ // S1072
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(678), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(694), /* ( */
			nil,        /* ) */
			shift(695), /* nil */
			shift(696), /* true */
			shift(697), /* false */
			shift(698), /* ... */
			shift(699), /* numdec */
			shift(700), /* numhex */
			shift(701), /* string */
			shift(704), /* { */
			nil,        /* } */
			shift(705), /* ident */
		},
	},
	actionRow{ // S1073
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(93), /* $, reduce: Factor */
			reduce(93), /* return, reduce: Factor */
			reduce(93), /* ;, reduce: Factor */
			nil,        /* empty */
			nil,        /* = */
			reduce(93), /* break, reduce: Factor */
			reduce(93), /* goto, reduce: Factor */
			reduce(93), /* do, reduce: Factor */
			nil,        /* end */
			reduce(93), /* while, reduce: Factor */
			reduce(93), /* repeat, reduce: Factor */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(93), /* if, reduce: Factor */
			nil,        /* , */
			reduce(93), /* for, reduce: Factor */
			nil,        /* in */
			reduce(93), /* function, reduce: Factor */
			reduce(93), /* local, reduce: Factor */
			reduce(93), /* ::, reduce: Factor */
			nil,        /* . */
			nil,        /* : */
			reduce(93), /* or, reduce: Factor */
			reduce(93), /* and, reduce: Factor */
			reduce(93), /* <, reduce: Factor */
			reduce(93), /* <=, reduce: Factor */
			reduce(93), /* >, reduce: Factor */
			reduce(93), /* >=, reduce: Factor */
			reduce(93), /* ==, reduce: Factor */
			reduce(93), /* ~=, reduce: Factor */
			reduce(93), /* |, reduce: Factor */
			reduce(93), /* ~, reduce: Factor */
			reduce(93), /* &, reduce: Factor */
			reduce(93), /* .., reduce: Factor */
			reduce(93), /* <<, reduce: Factor */
			reduce(93), /* >>, reduce: Factor */
			reduce(93), /* +, reduce: Factor */
			reduce(93), /* -, reduce: Factor */
			reduce(93), /* *, reduce: Factor */
			reduce(93), /* /, reduce: Factor */
			reduce(93), /* %, reduce: Factor */
			reduce(93), /* //, reduce: Factor */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(93), /* (, reduce: Factor */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(93), /* ident, reduce: Factor */
		},
	},
	actionRow{ // S1074
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(678), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(694), /* ( */
			nil,        /* ) */
			shift(695), /* nil */
			shift(696), /* true */
			shift(697), /* false */
			shift(698), /* ... */
			shift(699), /* numdec */
			shift(700), /* numhex */
			shift(701), /* string */
			shift(704), /* { */
			nil,        /* } */
			shift(705), /* ident */
		},
	},
	actionRow{ // S1075
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(705), /* ident */
		},
	},
	actionRow{ // S1076
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(426), /* ident */
		},
	},
	actionRow{ // S1077
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(430), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(446), /* ( */
			nil,        /* ) */
			shift(447), /* nil */
			shift(448), /* true */
			shift(449), /* false */
			shift(450), /* ... */
			shift(451), /* numdec */
			shift(452), /* numhex */
			shift(453), /* string */
			shift(456), /* { */
			nil,        /* } */
			shift(457), /* ident */
		},
	},
	actionRow{ // S1078
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(462),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(478),  /* ( */
			shift(1425), /* ) */
			shift(480),  /* nil */
			shift(481),  /* true */
			shift(482),  /* false */
			shift(483),  /* ... */
			shift(484),  /* numdec */
			shift(485),  /* numhex */
			shift(486),  /* string */
			shift(489),  /* { */
			nil,         /* } */
			shift(490),  /* ident */
		},
	},
	actionRow{ // S1079
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(103), /* $, reduce: FunctionCall */
			reduce(103), /* return, reduce: FunctionCall */
			reduce(103), /* ;, reduce: FunctionCall */
			nil,         /* empty */
			nil,         /* = */
			reduce(103), /* break, reduce: FunctionCall */
			reduce(103), /* goto, reduce: FunctionCall */
			reduce(103), /* do, reduce: FunctionCall */
			nil,         /* end */
			reduce(103), /* while, reduce: FunctionCall */
			reduce(103), /* repeat, reduce: FunctionCall */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(103), /* if, reduce: FunctionCall */
			nil,         /* , */
			reduce(103), /* for, reduce: FunctionCall */
			nil,         /* in */
			reduce(103), /* function, reduce: FunctionCall */
			reduce(103), /* local, reduce: FunctionCall */
			reduce(103), /* ::, reduce: FunctionCall */
			reduce(103), /* ., reduce: FunctionCall */
			reduce(103), /* :, reduce: FunctionCall */
			reduce(103), /* or, reduce: FunctionCall */
			reduce(103), /* and, reduce: FunctionCall */
			reduce(103), /* <, reduce: FunctionCall */
			reduce(103), /* <=, reduce: FunctionCall */
			reduce(103), /* >, reduce: FunctionCall */
			reduce(103), /* >=, reduce: FunctionCall */
			reduce(103), /* ==, reduce: FunctionCall */
			reduce(103), /* ~=, reduce: FunctionCall */
			reduce(103), /* |, reduce: FunctionCall */
			reduce(103), /* ~, reduce: FunctionCall */
			reduce(103), /* &, reduce: FunctionCall */
			reduce(103), /* .., reduce: FunctionCall */
			reduce(103), /* <<, reduce: FunctionCall */
			reduce(103), /* >>, reduce: FunctionCall */
			reduce(103), /* +, reduce: FunctionCall */
			reduce(103), /* -, reduce: FunctionCall */
			reduce(103), /* *, reduce: FunctionCall */
			reduce(103), /* /, reduce: FunctionCall */
			reduce(103), /* %, reduce: FunctionCall */
			reduce(103), /* //, reduce: FunctionCall */
			nil,         /* not */
			nil,         /* # */
			reduce(103), /* ^, reduce: FunctionCall */
			reduce(103), /* [, reduce: FunctionCall */
			nil,         /* ] */
			reduce(103), /* (, reduce: FunctionCall */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(103), /* string, reduce: FunctionCall */
			reduce(103), /* {, reduce: FunctionCall */
			nil,         /* } */
			reduce(103), /* ident, reduce: FunctionCall */
		},
	},
	actionRow{ // S1080
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(118), /* $, reduce: Args */
			reduce(118), /* return, reduce: Args */
			reduce(118), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			reduce(118), /* break, reduce: Args */
			reduce(118), /* goto, reduce: Args */
			reduce(118), /* do, reduce: Args */
			nil,         /* end */
			reduce(118), /* while, reduce: Args */
			reduce(118), /* repeat, reduce: Args */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(118), /* if, reduce: Args */
			nil,         /* , */
			reduce(118), /* for, reduce: Args */
			nil,         /* in */
			reduce(118), /* function, reduce: Args */
			reduce(118), /* local, reduce: Args */
			reduce(118), /* ::, reduce: Args */
			reduce(118), /* ., reduce: Args */
			reduce(118), /* :, reduce: Args */
			reduce(118), /* or, reduce: Args */
			reduce(118), /* and, reduce: Args */
			reduce(118), /* <, reduce: Args */
			reduce(118), /* <=, reduce: Args */
			reduce(118), /* >, reduce: Args */
			reduce(118), /* >=, reduce: Args */
			reduce(118), /* ==, reduce: Args */
			reduce(118), /* ~=, reduce: Args */
			reduce(118), /* |, reduce: Args */
			reduce(118), /* ~, reduce: Args */
			reduce(118), /* &, reduce: Args */
			reduce(118), /* .., reduce: Args */
			reduce(118), /* <<, reduce: Args */
			reduce(118), /* >>, reduce: Args */
			reduce(118), /* +, reduce: Args */
			reduce(118), /* -, reduce: Args */
			reduce(118), /* *, reduce: Args */
			reduce(118), /* /, reduce: Args */
			reduce(118), /* %, reduce: Args */
			reduce(118), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(118), /* ^, reduce: Args */
			reduce(118), /* [, reduce: Args */
			nil,         /* ] */
			reduce(118), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(118), /* string, reduce: Args */
			reduce(118), /* {, reduce: Args */
			nil,         /* } */
			reduce(118), /* ident, reduce: Args */
		},
	},
	actionRow{ // S1081
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(117), /* $, reduce: Args */
			reduce(117), /* return, reduce: Args */
			reduce(117), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			reduce(117), /* break, reduce: Args */
			reduce(117), /* goto, reduce: Args */
			reduce(117), /* do, reduce: Args */
			nil,         /* end */
			reduce(117), /* while, reduce: Args */
			reduce(117), /* repeat, reduce: Args */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(117), /* if, reduce: Args */
			nil,         /* , */
			reduce(117), /* for, reduce: Args */
			nil,         /* in */
			reduce(117), /* function, reduce: Args */
			reduce(117), /* local, reduce: Args */
			reduce(117), /* ::, reduce: Args */
			reduce(117), /* ., reduce: Args */
			reduce(117), /* :, reduce: Args */
			reduce(117), /* or, reduce: Args */
			reduce(117), /* and, reduce: Args */
			reduce(117), /* <, reduce: Args */
			reduce(117), /* <=, reduce: Args */
			reduce(117), /* >, reduce: Args */
			reduce(117), /* >=, reduce: Args */
			reduce(117), /* ==, reduce: Args */
			reduce(117), /* ~=, reduce: Args */
			reduce(117), /* |, reduce: Args */
			reduce(117), /* ~, reduce: Args */
			reduce(117), /* &, reduce: Args */
			reduce(117), /* .., reduce: Args */
			reduce(117), /* <<, reduce: Args */
			reduce(117), /* >>, reduce: Args */
			reduce(117), /* +, reduce: Args */
			reduce(117), /* -, reduce: Args */
			reduce(117), /* *, reduce: Args */
			reduce(117), /* /, reduce: Args */
			reduce(117), /* %, reduce: Args */
			reduce(117), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(117), /* ^, reduce: Args */
			reduce(117), /* [, reduce: Args */
			nil,         /* ] */
			reduce(117), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(117), /* string, reduce: Args */
			reduce(117), /* {, reduce: Args */
			nil,         /* } */
			reduce(117), /* ident, reduce: Args */
		},
	},
	actionRow{ // S1082
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			shift(254), /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(268), /* ident */
		},
	},
	actionRow{ // S1083
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			shift(492),  /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(1427), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1084
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			shift(569),  /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(570),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			shift(1428), /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1085
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* return */
			nil,       /* ; */
			nil,       /* empty */
			nil,       /* = */
			nil,       /* break */
			nil,       /* goto */
			nil,       /* do */
			nil,       /* end */
			nil,       /* while */
			nil,       /* repeat */
			reduce(1), /* until, reduce: Chunk */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			nil,       /* if */
			nil,       /* , */
			nil,       /* for */
			nil,       /* in */
			nil,       /* function */
			nil,       /* local */
			nil,       /* :: */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			nil,       /* ( */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			nil,       /* ident */
		},
	},
	actionRow{ // S1086
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(711), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(727), /* ( */
			nil,        /* ) */
			shift(728), /* nil */
			shift(729), /* true */
			shift(730), /* false */
			shift(731), /* ... */
			shift(732), /* numdec */
			shift(733), /* numhex */
			shift(734), /* string */
			shift(737), /* { */
			nil,        /* } */
			shift(738), /* ident */
		},
	},
	actionRow{ // S1087
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(711), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(727), /* ( */
			nil,        /* ) */
			shift(728), /* nil */
			shift(729), /* true */
			shift(730), /* false */
			shift(731), /* ... */
			shift(732), /* numdec */
			shift(733), /* numhex */
			shift(734), /* string */
			shift(737), /* { */
			nil,        /* } */
			shift(738), /* ident */
		},
	},
	actionRow{ // S1088
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(119), /* ;, reduce: FunctionDef */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			reduce(119), /* until, reduce: FunctionDef */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(119), /* ,, reduce: FunctionDef */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(119), /* or, reduce: FunctionDef */
			reduce(119), /* and, reduce: FunctionDef */
			reduce(119), /* <, reduce: FunctionDef */
			reduce(119), /* <=, reduce: FunctionDef */
			reduce(119), /* >, reduce: FunctionDef */
			reduce(119), /* >=, reduce: FunctionDef */
			reduce(119), /* ==, reduce: FunctionDef */
			reduce(119), /* ~=, reduce: FunctionDef */
			reduce(119), /* |, reduce: FunctionDef */
			reduce(119), /* ~, reduce: FunctionDef */
			reduce(119), /* &, reduce: FunctionDef */
			reduce(119), /* .., reduce: FunctionDef */
			reduce(119), /* <<, reduce: FunctionDef */
			reduce(119), /* >>, reduce: FunctionDef */
			reduce(119), /* +, reduce: FunctionDef */
			reduce(119), /* -, reduce: FunctionDef */
			reduce(119), /* *, reduce: FunctionDef */
			reduce(119), /* /, reduce: FunctionDef */
			reduce(119), /* %, reduce: FunctionDef */
			reduce(119), /* //, reduce: FunctionDef */
			nil,         /* not */
			nil,         /* # */
			reduce(119), /* ^, reduce: FunctionDef */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1089
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(123), /* ), reduce: ParList */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			shift(521),  /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			shift(523),  /* ident */
		},
	},
	actionRow{ // S1090
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(711), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(727), /* ( */
			nil,        /* ) */
			shift(728), /* nil */
			shift(729), /* true */
			shift(730), /* false */
			shift(731), /* ... */
			shift(732), /* numdec */
			shift(733), /* numhex */
			shift(734), /* string */
			shift(737), /* { */
			nil,        /* } */
			shift(738), /* ident */
		},
	},
	actionRow{ // S1091
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(711), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(727), /* ( */
			nil,        /* ) */
			shift(728), /* nil */
			shift(729), /* true */
			shift(730), /* false */
			shift(731), /* ... */
			shift(732), /* numdec */
			shift(733), /* numhex */
			shift(734), /* string */
			shift(737), /* { */
			nil,        /* } */
			shift(738), /* ident */
		},
	},
	actionRow{ // S1092
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(711), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(727), /* ( */
			nil,        /* ) */
			shift(728), /* nil */
			shift(729), /* true */
			shift(730), /* false */
			shift(731), /* ... */
			shift(732), /* numdec */
			shift(733), /* numhex */
			shift(734), /* string */
			shift(737), /* { */
			nil,        /* } */
			shift(738), /* ident */
		},
	},
	actionRow{ // S1093
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(711), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(727), /* ( */
			nil,        /* ) */
			shift(728), /* nil */
			shift(729), /* true */
			shift(730), /* false */
			shift(731), /* ... */
			shift(732), /* numdec */
			shift(733), /* numhex */
			shift(734), /* string */
			shift(737), /* { */
			nil,        /* } */
			shift(738), /* ident */
		},
	},
	actionRow{ // S1094
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(711), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(727), /* ( */
			nil,        /* ) */
			shift(728), /* nil */
			shift(729), /* true */
			shift(730), /* false */
			shift(731), /* ... */
			shift(732), /* numdec */
			shift(733), /* numhex */
			shift(734), /* string */
			shift(737), /* { */
			nil,        /* } */
			shift(738), /* ident */
		},
	},
	actionRow{ // S1095
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(711), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(727), /* ( */
			nil,        /* ) */
			shift(728), /* nil */
			shift(729), /* true */
			shift(730), /* false */
			shift(731), /* ... */
			shift(732), /* numdec */
			shift(733), /* numhex */
			shift(734), /* string */
			shift(737), /* { */
			nil,        /* } */
			shift(738), /* ident */
		},
	},
	actionRow{ // S1096
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(711), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(727), /* ( */
			nil,        /* ) */
			shift(728), /* nil */
			shift(729), /* true */
			shift(730), /* false */
			shift(731), /* ... */
			shift(732), /* numdec */
			shift(733), /* numhex */
			shift(734), /* string */
			shift(737), /* { */
			nil,        /* } */
			shift(738), /* ident */
		},
	},
	actionRow{ // S1097
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(711), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(727), /* ( */
			nil,        /* ) */
			shift(728), /* nil */
			shift(729), /* true */
			shift(730), /* false */
			shift(731), /* ... */
			shift(732), /* numdec */
			shift(733), /* numhex */
			shift(734), /* string */
			shift(737), /* { */
			nil,        /* } */
			shift(738), /* ident */
		},
	},
	actionRow{ // S1098
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(711), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(727), /* ( */
			nil,        /* ) */
			shift(728), /* nil */
			shift(729), /* true */
			shift(730), /* false */
			shift(731), /* ... */
			shift(732), /* numdec */
			shift(733), /* numhex */
			shift(734), /* string */
			shift(737), /* { */
			nil,        /* } */
			shift(738), /* ident */
		},
	},
	actionRow{ // S1099
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(93), /* ;, reduce: Factor */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			reduce(93), /* until, reduce: Factor */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(93), /* ,, reduce: Factor */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(93), /* or, reduce: Factor */
			reduce(93), /* and, reduce: Factor */
			reduce(93), /* <, reduce: Factor */
			reduce(93), /* <=, reduce: Factor */
			reduce(93), /* >, reduce: Factor */
			reduce(93), /* >=, reduce: Factor */
			reduce(93), /* ==, reduce: Factor */
			reduce(93), /* ~=, reduce: Factor */
			reduce(93), /* |, reduce: Factor */
			reduce(93), /* ~, reduce: Factor */
			reduce(93), /* &, reduce: Factor */
			reduce(93), /* .., reduce: Factor */
			reduce(93), /* <<, reduce: Factor */
			reduce(93), /* >>, reduce: Factor */
			reduce(93), /* +, reduce: Factor */
			reduce(93), /* -, reduce: Factor */
			reduce(93), /* *, reduce: Factor */
			reduce(93), /* /, reduce: Factor */
			reduce(93), /* %, reduce: Factor */
			reduce(93), /* //, reduce: Factor */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1100
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(711), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(727), /* ( */
			nil,        /* ) */
			shift(728), /* nil */
			shift(729), /* true */
			shift(730), /* false */
			shift(731), /* ... */
			shift(732), /* numdec */
			shift(733), /* numhex */
			shift(734), /* string */
			shift(737), /* { */
			nil,        /* } */
			shift(738), /* ident */
		},
	},
	actionRow{ // S1101
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(738), /* ident */
		},
	},
	actionRow{ // S1102
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(426), /* ident */
		},
	},
	actionRow{ // S1103
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(430), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(446), /* ( */
			nil,        /* ) */
			shift(447), /* nil */
			shift(448), /* true */
			shift(449), /* false */
			shift(450), /* ... */
			shift(451), /* numdec */
			shift(452), /* numhex */
			shift(453), /* string */
			shift(456), /* { */
			nil,        /* } */
			shift(457), /* ident */
		},
	},
	actionRow{ // S1104
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(462),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(478),  /* ( */
			shift(1447), /* ) */
			shift(480),  /* nil */
			shift(481),  /* true */
			shift(482),  /* false */
			shift(483),  /* ... */
			shift(484),  /* numdec */
			shift(485),  /* numhex */
			shift(486),  /* string */
			shift(489),  /* { */
			nil,         /* } */
			shift(490),  /* ident */
		},
	},
	actionRow{ // S1105
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(103), /* ;, reduce: FunctionCall */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			reduce(103), /* until, reduce: FunctionCall */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(103), /* ,, reduce: FunctionCall */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(103), /* ., reduce: FunctionCall */
			reduce(103), /* :, reduce: FunctionCall */
			reduce(103), /* or, reduce: FunctionCall */
			reduce(103), /* and, reduce: FunctionCall */
			reduce(103), /* <, reduce: FunctionCall */
			reduce(103), /* <=, reduce: FunctionCall */
			reduce(103), /* >, reduce: FunctionCall */
			reduce(103), /* >=, reduce: FunctionCall */
			reduce(103), /* ==, reduce: FunctionCall */
			reduce(103), /* ~=, reduce: FunctionCall */
			reduce(103), /* |, reduce: FunctionCall */
			reduce(103), /* ~, reduce: FunctionCall */
			reduce(103), /* &, reduce: FunctionCall */
			reduce(103), /* .., reduce: FunctionCall */
			reduce(103), /* <<, reduce: FunctionCall */
			reduce(103), /* >>, reduce: FunctionCall */
			reduce(103), /* +, reduce: FunctionCall */
			reduce(103), /* -, reduce: FunctionCall */
			reduce(103), /* *, reduce: FunctionCall */
			reduce(103), /* /, reduce: FunctionCall */
			reduce(103), /* %, reduce: FunctionCall */
			reduce(103), /* //, reduce: FunctionCall */
			nil,         /* not */
			nil,         /* # */
			reduce(103), /* ^, reduce: FunctionCall */
			reduce(103), /* [, reduce: FunctionCall */
			nil,         /* ] */
			reduce(103), /* (, reduce: FunctionCall */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(103), /* string, reduce: FunctionCall */
			reduce(103), /* {, reduce: FunctionCall */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1106
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(118), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			reduce(118), /* until, reduce: Args */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(118), /* ,, reduce: Args */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(118), /* ., reduce: Args */
			reduce(118), /* :, reduce: Args */
			reduce(118), /* or, reduce: Args */
			reduce(118), /* and, reduce: Args */
			reduce(118), /* <, reduce: Args */
			reduce(118), /* <=, reduce: Args */
			reduce(118), /* >, reduce: Args */
			reduce(118), /* >=, reduce: Args */
			reduce(118), /* ==, reduce: Args */
			reduce(118), /* ~=, reduce: Args */
			reduce(118), /* |, reduce: Args */
			reduce(118), /* ~, reduce: Args */
			reduce(118), /* &, reduce: Args */
			reduce(118), /* .., reduce: Args */
			reduce(118), /* <<, reduce: Args */
			reduce(118), /* >>, reduce: Args */
			reduce(118), /* +, reduce: Args */
			reduce(118), /* -, reduce: Args */
			reduce(118), /* *, reduce: Args */
			reduce(118), /* /, reduce: Args */
			reduce(118), /* %, reduce: Args */
			reduce(118), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(118), /* ^, reduce: Args */
			reduce(118), /* [, reduce: Args */
			nil,         /* ] */
			reduce(118), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(118), /* string, reduce: Args */
			reduce(118), /* {, reduce: Args */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1107
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(117), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			reduce(117), /* until, reduce: Args */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(117), /* ,, reduce: Args */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(117), /* ., reduce: Args */
			reduce(117), /* :, reduce: Args */
			reduce(117), /* or, reduce: Args */
			reduce(117), /* and, reduce: Args */
			reduce(117), /* <, reduce: Args */
			reduce(117), /* <=, reduce: Args */
			reduce(117), /* >, reduce: Args */
			reduce(117), /* >=, reduce: Args */
			reduce(117), /* ==, reduce: Args */
			reduce(117), /* ~=, reduce: Args */
			reduce(117), /* |, reduce: Args */
			reduce(117), /* ~, reduce: Args */
			reduce(117), /* &, reduce: Args */
			reduce(117), /* .., reduce: Args */
			reduce(117), /* <<, reduce: Args */
			reduce(117), /* >>, reduce: Args */
			reduce(117), /* +, reduce: Args */
			reduce(117), /* -, reduce: Args */
			reduce(117), /* *, reduce: Args */
			reduce(117), /* /, reduce: Args */
			reduce(117), /* %, reduce: Args */
			reduce(117), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(117), /* ^, reduce: Args */
			reduce(117), /* [, reduce: Args */
			nil,         /* ] */
			reduce(117), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(117), /* string, reduce: Args */
			reduce(117), /* {, reduce: Args */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1108
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			shift(254), /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(268), /* ident */
		},
	},
	actionRow{ // S1109
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			shift(492),  /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(1449), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1110
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			shift(569),  /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(570),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			shift(1450), /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1111
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(23),  /* return, reduce: AssignStat */
			reduce(23),  /* ;, reduce: AssignStat */
			nil,         /* empty */
			nil,         /* = */
			reduce(23),  /* break, reduce: AssignStat */
			reduce(23),  /* goto, reduce: AssignStat */
			reduce(23),  /* do, reduce: AssignStat */
			nil,         /* end */
			reduce(23),  /* while, reduce: AssignStat */
			reduce(23),  /* repeat, reduce: AssignStat */
			reduce(23),  /* until, reduce: AssignStat */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(23),  /* if, reduce: AssignStat */
			shift(1452), /* , */
			reduce(23),  /* for, reduce: AssignStat */
			nil,         /* in */
			reduce(23),  /* function, reduce: AssignStat */
			reduce(23),  /* local, reduce: AssignStat */
			reduce(23),  /* ::, reduce: AssignStat */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(23),  /* (, reduce: AssignStat */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(23),  /* ident, reduce: AssignStat */
		},
	},
	actionRow{ // S1112
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(101), /* return, reduce: PrefixExp */
			reduce(101), /* ;, reduce: PrefixExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(101), /* break, reduce: PrefixExp */
			reduce(101), /* goto, reduce: PrefixExp */
			reduce(101), /* do, reduce: PrefixExp */
			nil,         /* end */
			reduce(101), /* while, reduce: PrefixExp */
			reduce(101), /* repeat, reduce: PrefixExp */
			reduce(101), /* until, reduce: PrefixExp */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(101), /* if, reduce: PrefixExp */
			reduce(101), /* ,, reduce: PrefixExp */
			reduce(101), /* for, reduce: PrefixExp */
			nil,         /* in */
			reduce(101), /* function, reduce: PrefixExp */
			reduce(101), /* local, reduce: PrefixExp */
			reduce(101), /* ::, reduce: PrefixExp */
			reduce(101), /* ., reduce: PrefixExp */
			reduce(101), /* :, reduce: PrefixExp */
			reduce(101), /* or, reduce: PrefixExp */
			reduce(101), /* and, reduce: PrefixExp */
			reduce(101), /* <, reduce: PrefixExp */
			reduce(101), /* <=, reduce: PrefixExp */
			reduce(101), /* >, reduce: PrefixExp */
			reduce(101), /* >=, reduce: PrefixExp */
			reduce(101), /* ==, reduce: PrefixExp */
			reduce(101), /* ~=, reduce: PrefixExp */
			reduce(101), /* |, reduce: PrefixExp */
			reduce(101), /* ~, reduce: PrefixExp */
			reduce(101), /* &, reduce: PrefixExp */
			reduce(101), /* .., reduce: PrefixExp */
			reduce(101), /* <<, reduce: PrefixExp */
			reduce(101), /* >>, reduce: PrefixExp */
			reduce(101), /* +, reduce: PrefixExp */
			reduce(101), /* -, reduce: PrefixExp */
			reduce(101), /* *, reduce: PrefixExp */
			reduce(101), /* /, reduce: PrefixExp */
			reduce(101), /* %, reduce: PrefixExp */
			reduce(101), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(101), /* ^, reduce: PrefixExp */
			reduce(101), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(101), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(101), /* string, reduce: PrefixExp */
			reduce(101), /* {, reduce: PrefixExp */
			nil,         /* } */
			reduce(101), /* ident, reduce: PrefixExp */
		},
	},
	actionRow{ // S1113
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(97), /* return, reduce: Var */
			reduce(97), /* ;, reduce: Var */
			nil,        /* empty */
			nil,        /* = */
			reduce(97), /* break, reduce: Var */
			reduce(97), /* goto, reduce: Var */
			reduce(97), /* do, reduce: Var */
			nil,        /* end */
			reduce(97), /* while, reduce: Var */
			reduce(97), /* repeat, reduce: Var */
			reduce(97), /* until, reduce: Var */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(97), /* if, reduce: Var */
			reduce(97), /* ,, reduce: Var */
			reduce(97), /* for, reduce: Var */
			nil,        /* in */
			reduce(97), /* function, reduce: Var */
			reduce(97), /* local, reduce: Var */
			reduce(97), /* ::, reduce: Var */
			reduce(97), /* ., reduce: Var */
			reduce(97), /* :, reduce: Var */
			reduce(97), /* or, reduce: Var */
			reduce(97), /* and, reduce: Var */
			reduce(97), /* <, reduce: Var */
			reduce(97), /* <=, reduce: Var */
			reduce(97), /* >, reduce: Var */
			reduce(97), /* >=, reduce: Var */
			reduce(97), /* ==, reduce: Var */
			reduce(97), /* ~=, reduce: Var */
			reduce(97), /* |, reduce: Var */
			reduce(97), /* ~, reduce: Var */
			reduce(97), /* &, reduce: Var */
			reduce(97), /* .., reduce: Var */
			reduce(97), /* <<, reduce: Var */
			reduce(97), /* >>, reduce: Var */
			reduce(97), /* +, reduce: Var */
			reduce(97), /* -, reduce: Var */
			reduce(97), /* *, reduce: Var */
			reduce(97), /* /, reduce: Var */
			reduce(97), /* %, reduce: Var */
			reduce(97), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(97), /* ^, reduce: Var */
			reduce(97), /* [, reduce: Var */
			nil,        /* ] */
			reduce(97), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(97), /* string, reduce: Var */
			reduce(97), /* {, reduce: Var */
			nil,        /* } */
			reduce(97), /* ident, reduce: Var */
		},
	},
	actionRow{ // S1114
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(53),  /* return, reduce: ExpList */
			reduce(53),  /* ;, reduce: ExpList */
			nil,         /* empty */
			nil,         /* = */
			reduce(53),  /* break, reduce: ExpList */
			reduce(53),  /* goto, reduce: ExpList */
			reduce(53),  /* do, reduce: ExpList */
			nil,         /* end */
			reduce(53),  /* while, reduce: ExpList */
			reduce(53),  /* repeat, reduce: ExpList */
			reduce(53),  /* until, reduce: ExpList */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(53),  /* if, reduce: ExpList */
			reduce(53),  /* ,, reduce: ExpList */
			reduce(53),  /* for, reduce: ExpList */
			nil,         /* in */
			reduce(53),  /* function, reduce: ExpList */
			reduce(53),  /* local, reduce: ExpList */
			reduce(53),  /* ::, reduce: ExpList */
			nil,         /* . */
			nil,         /* : */
			shift(1453), /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(53),  /* (, reduce: ExpList */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(53),  /* ident, reduce: ExpList */
		},
	},
	actionRow{ // S1115
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1455), /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1116
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(100), /* return, reduce: PrefixExp */
			reduce(100), /* ;, reduce: PrefixExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(100), /* break, reduce: PrefixExp */
			reduce(100), /* goto, reduce: PrefixExp */
			reduce(100), /* do, reduce: PrefixExp */
			nil,         /* end */
			reduce(100), /* while, reduce: PrefixExp */
			reduce(100), /* repeat, reduce: PrefixExp */
			reduce(100), /* until, reduce: PrefixExp */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(100), /* if, reduce: PrefixExp */
			reduce(100), /* ,, reduce: PrefixExp */
			reduce(100), /* for, reduce: PrefixExp */
			nil,         /* in */
			reduce(100), /* function, reduce: PrefixExp */
			reduce(100), /* local, reduce: PrefixExp */
			reduce(100), /* ::, reduce: PrefixExp */
			reduce(100), /* ., reduce: PrefixExp */
			reduce(100), /* :, reduce: PrefixExp */
			reduce(100), /* or, reduce: PrefixExp */
			reduce(100), /* and, reduce: PrefixExp */
			reduce(100), /* <, reduce: PrefixExp */
			reduce(100), /* <=, reduce: PrefixExp */
			reduce(100), /* >, reduce: PrefixExp */
			reduce(100), /* >=, reduce: PrefixExp */
			reduce(100), /* ==, reduce: PrefixExp */
			reduce(100), /* ~=, reduce: PrefixExp */
			reduce(100), /* |, reduce: PrefixExp */
			reduce(100), /* ~, reduce: PrefixExp */
			reduce(100), /* &, reduce: PrefixExp */
			reduce(100), /* .., reduce: PrefixExp */
			reduce(100), /* <<, reduce: PrefixExp */
			reduce(100), /* >>, reduce: PrefixExp */
			reduce(100), /* +, reduce: PrefixExp */
			reduce(100), /* -, reduce: PrefixExp */
			reduce(100), /* *, reduce: PrefixExp */
			reduce(100), /* /, reduce: PrefixExp */
			reduce(100), /* %, reduce: PrefixExp */
			reduce(100), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(100), /* ^, reduce: PrefixExp */
			reduce(100), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(100), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(100), /* string, reduce: PrefixExp */
			reduce(100), /* {, reduce: PrefixExp */
			nil,         /* } */
			reduce(100), /* ident, reduce: PrefixExp */
		},
	},
	actionRow{ // S1117
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(55),  /* return, reduce: Exp */
			reduce(55),  /* ;, reduce: Exp */
			nil,         /* empty */
			nil,         /* = */
			reduce(55),  /* break, reduce: Exp */
			reduce(55),  /* goto, reduce: Exp */
			reduce(55),  /* do, reduce: Exp */
			nil,         /* end */
			reduce(55),  /* while, reduce: Exp */
			reduce(55),  /* repeat, reduce: Exp */
			reduce(55),  /* until, reduce: Exp */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(55),  /* if, reduce: Exp */
			reduce(55),  /* ,, reduce: Exp */
			reduce(55),  /* for, reduce: Exp */
			nil,         /* in */
			reduce(55),  /* function, reduce: Exp */
			reduce(55),  /* local, reduce: Exp */
			reduce(55),  /* ::, reduce: Exp */
			nil,         /* . */
			nil,         /* : */
			reduce(55),  /* or, reduce: Exp */
			shift(1456), /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(55),  /* (, reduce: Exp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(55),  /* ident, reduce: Exp */
		},
	},
	actionRow{ // S1118
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(57), /* return, reduce: AndExp */
			reduce(57), /* ;, reduce: AndExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(57), /* break, reduce: AndExp */
			reduce(57), /* goto, reduce: AndExp */
			reduce(57), /* do, reduce: AndExp */
			nil,        /* end */
			reduce(57), /* while, reduce: AndExp */
			reduce(57), /* repeat, reduce: AndExp */
			reduce(57), /* until, reduce: AndExp */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(57), /* if, reduce: AndExp */
			reduce(57), /* ,, reduce: AndExp */
			reduce(57), /* for, reduce: AndExp */
			nil,        /* in */
			reduce(57), /* function, reduce: AndExp */
			reduce(57), /* local, reduce: AndExp */
			reduce(57), /* ::, reduce: AndExp */
			nil,        /* . */
			nil,        /* : */
			reduce(57), /* or, reduce: AndExp */
			reduce(57), /* and, reduce: AndExp */
			shift(203), /* < */
			shift(204), /* <= */
			shift(205), /* > */
			shift(206), /* >= */
			shift(207), /* == */
			shift(208), /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(57), /* (, reduce: AndExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(57), /* ident, reduce: AndExp */
		},
	},
	actionRow{ // S1119
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(65),  /* return, reduce: CompExp */
			reduce(65),  /* ;, reduce: CompExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(65),  /* break, reduce: CompExp */
			reduce(65),  /* goto, reduce: CompExp */
			reduce(65),  /* do, reduce: CompExp */
			nil,         /* end */
			reduce(65),  /* while, reduce: CompExp */
			reduce(65),  /* repeat, reduce: CompExp */
			reduce(65),  /* until, reduce: CompExp */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(65),  /* if, reduce: CompExp */
			reduce(65),  /* ,, reduce: CompExp */
			reduce(65),  /* for, reduce: CompExp */
			nil,         /* in */
			reduce(65),  /* function, reduce: CompExp */
			reduce(65),  /* local, reduce: CompExp */
			reduce(65),  /* ::, reduce: CompExp */
			nil,         /* . */
			nil,         /* : */
			reduce(65),  /* or, reduce: CompExp */
			reduce(65),  /* and, reduce: CompExp */
			reduce(65),  /* <, reduce: CompExp */
			reduce(65),  /* <=, reduce: CompExp */
			reduce(65),  /* >, reduce: CompExp */
			reduce(65),  /* >=, reduce: CompExp */
			reduce(65),  /* ==, reduce: CompExp */
			reduce(65),  /* ~=, reduce: CompExp */
			shift(1458), /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(65),  /* (, reduce: CompExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(65),  /* ident, reduce: CompExp */
		},
	},
	actionRow{ // S1120
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(67),  /* return, reduce: BitOrExp */
			reduce(67),  /* ;, reduce: BitOrExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(67),  /* break, reduce: BitOrExp */
			reduce(67),  /* goto, reduce: BitOrExp */
			reduce(67),  /* do, reduce: BitOrExp */
			nil,         /* end */
			reduce(67),  /* while, reduce: BitOrExp */
			reduce(67),  /* repeat, reduce: BitOrExp */
			reduce(67),  /* until, reduce: BitOrExp */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(67),  /* if, reduce: BitOrExp */
			reduce(67),  /* ,, reduce: BitOrExp */
			reduce(67),  /* for, reduce: BitOrExp */
			nil,         /* in */
			reduce(67),  /* function, reduce: BitOrExp */
			reduce(67),  /* local, reduce: BitOrExp */
			reduce(67),  /* ::, reduce: BitOrExp */
			nil,         /* . */
			nil,         /* : */
			reduce(67),  /* or, reduce: BitOrExp */
			reduce(67),  /* and, reduce: BitOrExp */
			reduce(67),  /* <, reduce: BitOrExp */
			reduce(67),  /* <=, reduce: BitOrExp */
			reduce(67),  /* >, reduce: BitOrExp */
			reduce(67),  /* >=, reduce: BitOrExp */
			reduce(67),  /* ==, reduce: BitOrExp */
			reduce(67),  /* ~=, reduce: BitOrExp */
			reduce(67),  /* |, reduce: BitOrExp */
			shift(1459), /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(67),  /* (, reduce: BitOrExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(67),  /* ident, reduce: BitOrExp */
		},
	},
	actionRow{ // S1121
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(69),  /* return, reduce: BitXorExp */
			reduce(69),  /* ;, reduce: BitXorExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(69),  /* break, reduce: BitXorExp */
			reduce(69),  /* goto, reduce: BitXorExp */
			reduce(69),  /* do, reduce: BitXorExp */
			nil,         /* end */
			reduce(69),  /* while, reduce: BitXorExp */
			reduce(69),  /* repeat, reduce: BitXorExp */
			reduce(69),  /* until, reduce: BitXorExp */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(69),  /* if, reduce: BitXorExp */
			reduce(69),  /* ,, reduce: BitXorExp */
			reduce(69),  /* for, reduce: BitXorExp */
			nil,         /* in */
			reduce(69),  /* function, reduce: BitXorExp */
			reduce(69),  /* local, reduce: BitXorExp */
			reduce(69),  /* ::, reduce: BitXorExp */
			nil,         /* . */
			nil,         /* : */
			reduce(69),  /* or, reduce: BitXorExp */
			reduce(69),  /* and, reduce: BitXorExp */
			reduce(69),  /* <, reduce: BitXorExp */
			reduce(69),  /* <=, reduce: BitXorExp */
			reduce(69),  /* >, reduce: BitXorExp */
			reduce(69),  /* >=, reduce: BitXorExp */
			reduce(69),  /* ==, reduce: BitXorExp */
			reduce(69),  /* ~=, reduce: BitXorExp */
			reduce(69),  /* |, reduce: BitXorExp */
			reduce(69),  /* ~, reduce: BitXorExp */
			shift(1460), /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(69),  /* (, reduce: BitXorExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(69),  /* ident, reduce: BitXorExp */
		},
	},
	actionRow{ // S1122
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(71),  /* return, reduce: BitAndExp */
			reduce(71),  /* ;, reduce: BitAndExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(71),  /* break, reduce: BitAndExp */
			reduce(71),  /* goto, reduce: BitAndExp */
			reduce(71),  /* do, reduce: BitAndExp */
			nil,         /* end */
			reduce(71),  /* while, reduce: BitAndExp */
			reduce(71),  /* repeat, reduce: BitAndExp */
			reduce(71),  /* until, reduce: BitAndExp */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(71),  /* if, reduce: BitAndExp */
			reduce(71),  /* ,, reduce: BitAndExp */
			reduce(71),  /* for, reduce: BitAndExp */
			nil,         /* in */
			reduce(71),  /* function, reduce: BitAndExp */
			reduce(71),  /* local, reduce: BitAndExp */
			reduce(71),  /* ::, reduce: BitAndExp */
			nil,         /* . */
			nil,         /* : */
			reduce(71),  /* or, reduce: BitAndExp */
			reduce(71),  /* and, reduce: BitAndExp */
			reduce(71),  /* <, reduce: BitAndExp */
			reduce(71),  /* <=, reduce: BitAndExp */
			reduce(71),  /* >, reduce: BitAndExp */
			reduce(71),  /* >=, reduce: BitAndExp */
			reduce(71),  /* ==, reduce: BitAndExp */
			reduce(71),  /* ~=, reduce: BitAndExp */
			reduce(71),  /* |, reduce: BitAndExp */
			reduce(71),  /* ~, reduce: BitAndExp */
			reduce(71),  /* &, reduce: BitAndExp */
			shift(1461), /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(71),  /* (, reduce: BitAndExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(71),  /* ident, reduce: BitAndExp */
		},
	},
	actionRow{ // S1123
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(73), /* return, reduce: ConcatExp */
			reduce(73), /* ;, reduce: ConcatExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(73), /* break, reduce: ConcatExp */
			reduce(73), /* goto, reduce: ConcatExp */
			reduce(73), /* do, reduce: ConcatExp */
			nil,        /* end */
			reduce(73), /* while, reduce: ConcatExp */
			reduce(73), /* repeat, reduce: ConcatExp */
			reduce(73), /* until, reduce: ConcatExp */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(73), /* if, reduce: ConcatExp */
			reduce(73), /* ,, reduce: ConcatExp */
			reduce(73), /* for, reduce: ConcatExp */
			nil,        /* in */
			reduce(73), /* function, reduce: ConcatExp */
			reduce(73), /* local, reduce: ConcatExp */
			reduce(73), /* ::, reduce: ConcatExp */
			nil,        /* . */
			nil,        /* : */
			reduce(73), /* or, reduce: ConcatExp */
			reduce(73), /* and, reduce: ConcatExp */
			reduce(73), /* <, reduce: ConcatExp */
			reduce(73), /* <=, reduce: ConcatExp */
			reduce(73), /* >, reduce: ConcatExp */
			reduce(73), /* >=, reduce: ConcatExp */
			reduce(73), /* ==, reduce: ConcatExp */
			reduce(73), /* ~=, reduce: ConcatExp */
			reduce(73), /* |, reduce: ConcatExp */
			reduce(73), /* ~, reduce: ConcatExp */
			reduce(73), /* &, reduce: ConcatExp */
			reduce(73), /* .., reduce: ConcatExp */
			shift(214), /* << */
			shift(215), /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(73), /* (, reduce: ConcatExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(73), /* ident, reduce: ConcatExp */
		},
	},
	actionRow{ // S1124
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(77), /* return, reduce: ShiftExp */
			reduce(77), /* ;, reduce: ShiftExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(77), /* break, reduce: ShiftExp */
			reduce(77), /* goto, reduce: ShiftExp */
			reduce(77), /* do, reduce: ShiftExp */
			nil,        /* end */
			reduce(77), /* while, reduce: ShiftExp */
			reduce(77), /* repeat, reduce: ShiftExp */
			reduce(77), /* until, reduce: ShiftExp */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(77), /* if, reduce: ShiftExp */
			reduce(77), /* ,, reduce: ShiftExp */
			reduce(77), /* for, reduce: ShiftExp */
			nil,        /* in */
			reduce(77), /* function, reduce: ShiftExp */
			reduce(77), /* local, reduce: ShiftExp */
			reduce(77), /* ::, reduce: ShiftExp */
			nil,        /* . */
			nil,        /* : */
			reduce(77), /* or, reduce: ShiftExp */
			reduce(77), /* and, reduce: ShiftExp */
			reduce(77), /* <, reduce: ShiftExp */
			reduce(77), /* <=, reduce: ShiftExp */
			reduce(77), /* >, reduce: ShiftExp */
			reduce(77), /* >=, reduce: ShiftExp */
			reduce(77), /* ==, reduce: ShiftExp */
			reduce(77), /* ~=, reduce: ShiftExp */
			reduce(77), /* |, reduce: ShiftExp */
			reduce(77), /* ~, reduce: ShiftExp */
			reduce(77), /* &, reduce: ShiftExp */
			reduce(77), /* .., reduce: ShiftExp */
			reduce(77), /* <<, reduce: ShiftExp */
			reduce(77), /* >>, reduce: ShiftExp */
			shift(217), /* + */
			shift(218), /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(77), /* (, reduce: ShiftExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(77), /* ident, reduce: ShiftExp */
		},
	},
	actionRow{ // S1125
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(81), /* return, reduce: Sum */
			reduce(81), /* ;, reduce: Sum */
			nil,        /* empty */
			nil,        /* = */
			reduce(81), /* break, reduce: Sum */
			reduce(81), /* goto, reduce: Sum */
			reduce(81), /* do, reduce: Sum */
			nil,        /* end */
			reduce(81), /* while, reduce: Sum */
			reduce(81), /* repeat, reduce: Sum */
			reduce(81), /* until, reduce: Sum */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(81), /* if, reduce: Sum */
			reduce(81), /* ,, reduce: Sum */
			reduce(81), /* for, reduce: Sum */
			nil,        /* in */
			reduce(81), /* function, reduce: Sum */
			reduce(81), /* local, reduce: Sum */
			reduce(81), /* ::, reduce: Sum */
			nil,        /* . */
			nil,        /* : */
			reduce(81), /* or, reduce: Sum */
			reduce(81), /* and, reduce: Sum */
			reduce(81), /* <, reduce: Sum */
			reduce(81), /* <=, reduce: Sum */
			reduce(81), /* >, reduce: Sum */
			reduce(81), /* >=, reduce: Sum */
			reduce(81), /* ==, reduce: Sum */
			reduce(81), /* ~=, reduce: Sum */
			reduce(81), /* |, reduce: Sum */
			reduce(81), /* ~, reduce: Sum */
			reduce(81), /* &, reduce: Sum */
			reduce(81), /* .., reduce: Sum */
			reduce(81), /* <<, reduce: Sum */
			reduce(81), /* >>, reduce: Sum */
			reduce(81), /* +, reduce: Sum */
			reduce(81), /* -, reduce: Sum */
			shift(220), /* * */
			shift(221), /* / */
			shift(222), /* % */
			shift(223), /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(81), /* (, reduce: Sum */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(81), /* ident, reduce: Sum */
		},
	},
	actionRow{ // S1126
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(87), /* return, reduce: Term */
			reduce(87), /* ;, reduce: Term */
			nil,        /* empty */
			nil,        /* = */
			reduce(87), /* break, reduce: Term */
			reduce(87), /* goto, reduce: Term */
			reduce(87), /* do, reduce: Term */
			nil,        /* end */
			reduce(87), /* while, reduce: Term */
			reduce(87), /* repeat, reduce: Term */
			reduce(87), /* until, reduce: Term */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(87), /* if, reduce: Term */
			reduce(87), /* ,, reduce: Term */
			reduce(87), /* for, reduce: Term */
			nil,        /* in */
			reduce(87), /* function, reduce: Term */
			reduce(87), /* local, reduce: Term */
			reduce(87), /* ::, reduce: Term */
			nil,        /* . */
			nil,        /* : */
			reduce(87), /* or, reduce: Term */
			reduce(87), /* and, reduce: Term */
			reduce(87), /* <, reduce: Term */
			reduce(87), /* <=, reduce: Term */
			reduce(87), /* >, reduce: Term */
			reduce(87), /* >=, reduce: Term */
			reduce(87), /* ==, reduce: Term */
			reduce(87), /* ~=, reduce: Term */
			reduce(87), /* |, reduce: Term */
			reduce(87), /* ~, reduce: Term */
			reduce(87), /* &, reduce: Term */
			reduce(87), /* .., reduce: Term */
			reduce(87), /* <<, reduce: Term */
			reduce(87), /* >>, reduce: Term */
			reduce(87), /* +, reduce: Term */
			reduce(87), /* -, reduce: Term */
			reduce(87), /* *, reduce: Term */
			reduce(87), /* /, reduce: Term */
			reduce(87), /* %, reduce: Term */
			reduce(87), /* //, reduce: Term */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(87), /* (, reduce: Term */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(87), /* ident, reduce: Term */
		},
	},
	actionRow{ // S1127
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1115), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1131), /* ( */
			nil,         /* ) */
			shift(1132), /* nil */
			shift(1133), /* true */
			shift(1134), /* false */
			shift(1135), /* ... */
			shift(1136), /* numdec */
			shift(1137), /* numhex */
			shift(1138), /* string */
			shift(1141), /* { */
			nil,         /* } */
			shift(1142), /* ident */
		},
	},
	actionRow{ // S1128
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(94), /* return, reduce: Factor */
			reduce(94), /* ;, reduce: Factor */
			nil,        /* empty */
			nil,        /* = */
			reduce(94), /* break, reduce: Factor */
			reduce(94), /* goto, reduce: Factor */
			reduce(94), /* do, reduce: Factor */
			nil,        /* end */
			reduce(94), /* while, reduce: Factor */
			reduce(94), /* repeat, reduce: Factor */
			reduce(94), /* until, reduce: Factor */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(94), /* if, reduce: Factor */
			reduce(94), /* ,, reduce: Factor */
			reduce(94), /* for, reduce: Factor */
			nil,        /* in */
			reduce(94), /* function, reduce: Factor */
			reduce(94), /* local, reduce: Factor */
			reduce(94), /* ::, reduce: Factor */
			nil,        /* . */
			nil,        /* : */
			reduce(94), /* or, reduce: Factor */
			reduce(94), /* and, reduce: Factor */
			reduce(94), /* <, reduce: Factor */
			reduce(94), /* <=, reduce: Factor */
			reduce(94), /* >, reduce: Factor */
			reduce(94), /* >=, reduce: Factor */
			reduce(94), /* ==, reduce: Factor */
			reduce(94), /* ~=, reduce: Factor */
			reduce(94), /* |, reduce: Factor */
			reduce(94), /* ~, reduce: Factor */
			reduce(94), /* &, reduce: Factor */
			reduce(94), /* .., reduce: Factor */
			reduce(94), /* <<, reduce: Factor */
			reduce(94), /* >>, reduce: Factor */
			reduce(94), /* +, reduce: Factor */
			reduce(94), /* -, reduce: Factor */
			reduce(94), /* *, reduce: Factor */
			reduce(94), /* /, reduce: Factor */
			reduce(94), /* %, reduce: Factor */
			reduce(94), /* //, reduce: Factor */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(94), /* (, reduce: Factor */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(94), /* ident, reduce: Factor */
		},
	},
	actionRow{ // S1129
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(95),  /* return, reduce: Power */
			reduce(95),  /* ;, reduce: Power */
			nil,         /* empty */
			nil,         /* = */
			reduce(95),  /* break, reduce: Power */
			reduce(95),  /* goto, reduce: Power */
			reduce(95),  /* do, reduce: Power */
			nil,         /* end */
			reduce(95),  /* while, reduce: Power */
			reduce(95),  /* repeat, reduce: Power */
			reduce(95),  /* until, reduce: Power */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(95),  /* if, reduce: Power */
			reduce(95),  /* ,, reduce: Power */
			reduce(95),  /* for, reduce: Power */
			nil,         /* in */
			reduce(95),  /* function, reduce: Power */
			reduce(95),  /* local, reduce: Power */
			reduce(95),  /* ::, reduce: Power */
			nil,         /* . */
			nil,         /* : */
			reduce(95),  /* or, reduce: Power */
			reduce(95),  /* and, reduce: Power */
			reduce(95),  /* <, reduce: Power */
			reduce(95),  /* <=, reduce: Power */
			reduce(95),  /* >, reduce: Power */
			reduce(95),  /* >=, reduce: Power */
			reduce(95),  /* ==, reduce: Power */
			reduce(95),  /* ~=, reduce: Power */
			reduce(95),  /* |, reduce: Power */
			reduce(95),  /* ~, reduce: Power */
			reduce(95),  /* &, reduce: Power */
			reduce(95),  /* .., reduce: Power */
			reduce(95),  /* <<, reduce: Power */
			reduce(95),  /* >>, reduce: Power */
			reduce(95),  /* +, reduce: Power */
			reduce(95),  /* -, reduce: Power */
			reduce(95),  /* *, reduce: Power */
			reduce(95),  /* /, reduce: Power */
			reduce(95),  /* %, reduce: Power */
			reduce(95),  /* //, reduce: Power */
			nil,         /* not */
			nil,         /* # */
			shift(1466), /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(95),  /* (, reduce: Power */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(95),  /* ident, reduce: Power */
		},
	},
	actionRow{ // S1130
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(114), /* return, reduce: Atom */
			reduce(114), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(114), /* break, reduce: Atom */
			reduce(114), /* goto, reduce: Atom */
			reduce(114), /* do, reduce: Atom */
			nil,         /* end */
			reduce(114), /* while, reduce: Atom */
			reduce(114), /* repeat, reduce: Atom */
			reduce(114), /* until, reduce: Atom */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(114), /* if, reduce: Atom */
			reduce(114), /* ,, reduce: Atom */
			reduce(114), /* for, reduce: Atom */
			nil,         /* in */
			reduce(114), /* function, reduce: Atom */
			reduce(114), /* local, reduce: Atom */
			reduce(114), /* ::, reduce: Atom */
			shift(1467), /* . */
			shift(1468), /* : */
			reduce(114), /* or, reduce: Atom */
			reduce(114), /* and, reduce: Atom */
			reduce(114), /* <, reduce: Atom */
			reduce(114), /* <=, reduce: Atom */
			reduce(114), /* >, reduce: Atom */
			reduce(114), /* >=, reduce: Atom */
			reduce(114), /* ==, reduce: Atom */
			reduce(114), /* ~=, reduce: Atom */
			reduce(114), /* |, reduce: Atom */
			reduce(114), /* ~, reduce: Atom */
			reduce(114), /* &, reduce: Atom */
			reduce(114), /* .., reduce: Atom */
			reduce(114), /* <<, reduce: Atom */
			reduce(114), /* >>, reduce: Atom */
			reduce(114), /* +, reduce: Atom */
			reduce(114), /* -, reduce: Atom */
			reduce(114), /* *, reduce: Atom */
			reduce(114), /* /, reduce: Atom */
			reduce(114), /* %, reduce: Atom */
			reduce(114), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(114), /* ^, reduce: Atom */
			shift(1469), /* [ */
			nil,         /* ] */
			shift(1470), /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			shift(1472), /* string */
			shift(1474), /* { */
			nil,         /* } */
			reduce(114), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S1131
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(168), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(184), /* ( */
			nil,        /* ) */
			shift(185), /* nil */
			shift(186), /* true */
			shift(187), /* false */
			shift(188), /* ... */
			shift(189), /* numdec */
			shift(190), /* numhex */
			shift(191), /* string */
			shift(194), /* { */
			nil,        /* } */
			shift(195), /* ident */
		},
	},
	actionRow{ // S1132
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(105), /* return, reduce: Atom */
			reduce(105), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(105), /* break, reduce: Atom */
			reduce(105), /* goto, reduce: Atom */
			reduce(105), /* do, reduce: Atom */
			nil,         /* end */
			reduce(105), /* while, reduce: Atom */
			reduce(105), /* repeat, reduce: Atom */
			reduce(105), /* until, reduce: Atom */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(105), /* if, reduce: Atom */
			reduce(105), /* ,, reduce: Atom */
			reduce(105), /* for, reduce: Atom */
			nil,         /* in */
			reduce(105), /* function, reduce: Atom */
			reduce(105), /* local, reduce: Atom */
			reduce(105), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(105), /* or, reduce: Atom */
			reduce(105), /* and, reduce: Atom */
			reduce(105), /* <, reduce: Atom */
			reduce(105), /* <=, reduce: Atom */
			reduce(105), /* >, reduce: Atom */
			reduce(105), /* >=, reduce: Atom */
			reduce(105), /* ==, reduce: Atom */
			reduce(105), /* ~=, reduce: Atom */
			reduce(105), /* |, reduce: Atom */
			reduce(105), /* ~, reduce: Atom */
			reduce(105), /* &, reduce: Atom */
			reduce(105), /* .., reduce: Atom */
			reduce(105), /* <<, reduce: Atom */
			reduce(105), /* >>, reduce: Atom */
			reduce(105), /* +, reduce: Atom */
			reduce(105), /* -, reduce: Atom */
			reduce(105), /* *, reduce: Atom */
			reduce(105), /* /, reduce: Atom */
			reduce(105), /* %, reduce: Atom */
			reduce(105), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(105), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(105), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(105), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S1133
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(106), /* return, reduce: Atom */
			reduce(106), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(106), /* break, reduce: Atom */
			reduce(106), /* goto, reduce: Atom */
			reduce(106), /* do, reduce: Atom */
			nil,         /* end */
			reduce(106), /* while, reduce: Atom */
			reduce(106), /* repeat, reduce: Atom */
			reduce(106), /* until, reduce: Atom */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(106), /* if, reduce: Atom */
			reduce(106), /* ,, reduce: Atom */
			reduce(106), /* for, reduce: Atom */
			nil,         /* in */
			reduce(106), /* function, reduce: Atom */
			reduce(106), /* local, reduce: Atom */
			reduce(106), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(106), /* or, reduce: Atom */
			reduce(106), /* and, reduce: Atom */
			reduce(106), /* <, reduce: Atom */
			reduce(106), /* <=, reduce: Atom */
			reduce(106), /* >, reduce: Atom */
			reduce(106), /* >=, reduce: Atom */
			reduce(106), /* ==, reduce: Atom */
			reduce(106), /* ~=, reduce: Atom */
			reduce(106), /* |, reduce: Atom */
			reduce(106), /* ~, reduce: Atom */
			reduce(106), /* &, reduce: Atom */
			reduce(106), /* .., reduce: Atom */
			reduce(106), /* <<, reduce: Atom */
			reduce(106), /* >>, reduce: Atom */
			reduce(106), /* +, reduce: Atom */
			reduce(106), /* -, reduce: Atom */
			reduce(106), /* *, reduce: Atom */
			reduce(106), /* /, reduce: Atom */
			reduce(106), /* %, reduce: Atom */
			reduce(106), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(106), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(106), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(106), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S1134
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(107), /* return, reduce: Atom */
			reduce(107), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(107), /* break, reduce: Atom */
			reduce(107), /* goto, reduce: Atom */
			reduce(107), /* do, reduce: Atom */
			nil,         /* end */
			reduce(107), /* while, reduce: Atom */
			reduce(107), /* repeat, reduce: Atom */
			reduce(107), /* until, reduce: Atom */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(107), /* if, reduce: Atom */
			reduce(107), /* ,, reduce: Atom */
			reduce(107), /* for, reduce: Atom */
			nil,         /* in */
			reduce(107), /* function, reduce: Atom */
			reduce(107), /* local, reduce: Atom */
			reduce(107), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(107), /* or, reduce: Atom */
			reduce(107), /* and, reduce: Atom */
			reduce(107), /* <, reduce: Atom */
			reduce(107), /* <=, reduce: Atom */
			reduce(107), /* >, reduce: Atom */
			reduce(107), /* >=, reduce: Atom */
			reduce(107), /* ==, reduce: Atom */
			reduce(107), /* ~=, reduce: Atom */
			reduce(107), /* |, reduce: Atom */
			reduce(107), /* ~, reduce: Atom */
			reduce(107), /* &, reduce: Atom */
			reduce(107), /* .., reduce: Atom */
			reduce(107), /* <<, reduce: Atom */
			reduce(107), /* >>, reduce: Atom */
			reduce(107), /* +, reduce: Atom */
			reduce(107), /* -, reduce: Atom */
			reduce(107), /* *, reduce: Atom */
			reduce(107), /* /, reduce: Atom */
			reduce(107), /* %, reduce: Atom */
			reduce(107), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(107), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(107), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(107), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S1135
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(108), /* return, reduce: Atom */
			reduce(108), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(108), /* break, reduce: Atom */
			reduce(108), /* goto, reduce: Atom */
			reduce(108), /* do, reduce: Atom */
			nil,         /* end */
			reduce(108), /* while, reduce: Atom */
			reduce(108), /* repeat, reduce: Atom */
			reduce(108), /* until, reduce: Atom */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(108), /* if, reduce: Atom */
			reduce(108), /* ,, reduce: Atom */
			reduce(108), /* for, reduce: Atom */
			nil,         /* in */
			reduce(108), /* function, reduce: Atom */
			reduce(108), /* local, reduce: Atom */
			reduce(108), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(108), /* or, reduce: Atom */
			reduce(108), /* and, reduce: Atom */
			reduce(108), /* <, reduce: Atom */
			reduce(108), /* <=, reduce: Atom */
			reduce(108), /* >, reduce: Atom */
			reduce(108), /* >=, reduce: Atom */
			reduce(108), /* ==, reduce: Atom */
			reduce(108), /* ~=, reduce: Atom */
			reduce(108), /* |, reduce: Atom */
			reduce(108), /* ~, reduce: Atom */
			reduce(108), /* &, reduce: Atom */
			reduce(108), /* .., reduce: Atom */
			reduce(108), /* <<, reduce: Atom */
			reduce(108), /* >>, reduce: Atom */
			reduce(108), /* +, reduce: Atom */
			reduce(108), /* -, reduce: Atom */
			reduce(108), /* *, reduce: Atom */
			reduce(108), /* /, reduce: Atom */
			reduce(108), /* %, reduce: Atom */
			reduce(108), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(108), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(108), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(108), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S1136
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(109), /* return, reduce: Atom */
			reduce(109), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(109), /* break, reduce: Atom */
			reduce(109), /* goto, reduce: Atom */
			reduce(109), /* do, reduce: Atom */
			nil,         /* end */
			reduce(109), /* while, reduce: Atom */
			reduce(109), /* repeat, reduce: Atom */
			reduce(109), /* until, reduce: Atom */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(109), /* if, reduce: Atom */
			reduce(109), /* ,, reduce: Atom */
			reduce(109), /* for, reduce: Atom */
			nil,         /* in */
			reduce(109), /* function, reduce: Atom */
			reduce(109), /* local, reduce: Atom */
			reduce(109), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(109), /* or, reduce: Atom */
			reduce(109), /* and, reduce: Atom */
			reduce(109), /* <, reduce: Atom */
			reduce(109), /* <=, reduce: Atom */
			reduce(109), /* >, reduce: Atom */
			reduce(109), /* >=, reduce: Atom */
			reduce(109), /* ==, reduce: Atom */
			reduce(109), /* ~=, reduce: Atom */
			reduce(109), /* |, reduce: Atom */
			reduce(109), /* ~, reduce: Atom */
			reduce(109), /* &, reduce: Atom */
			reduce(109), /* .., reduce: Atom */
			reduce(109), /* <<, reduce: Atom */
			reduce(109), /* >>, reduce: Atom */
			reduce(109), /* +, reduce: Atom */
			reduce(109), /* -, reduce: Atom */
			reduce(109), /* *, reduce: Atom */
			reduce(109), /* /, reduce: Atom */
			reduce(109), /* %, reduce: Atom */
			reduce(109), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(109), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(109), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(109), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S1137
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(110), /* return, reduce: Atom */
			reduce(110), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(110), /* break, reduce: Atom */
			reduce(110), /* goto, reduce: Atom */
			reduce(110), /* do, reduce: Atom */
			nil,         /* end */
			reduce(110), /* while, reduce: Atom */
			reduce(110), /* repeat, reduce: Atom */
			reduce(110), /* until, reduce: Atom */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(110), /* if, reduce: Atom */
			reduce(110), /* ,, reduce: Atom */
			reduce(110), /* for, reduce: Atom */
			nil,         /* in */
			reduce(110), /* function, reduce: Atom */
			reduce(110), /* local, reduce: Atom */
			reduce(110), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(110), /* or, reduce: Atom */
			reduce(110), /* and, reduce: Atom */
			reduce(110), /* <, reduce: Atom */
			reduce(110), /* <=, reduce: Atom */
			reduce(110), /* >, reduce: Atom */
			reduce(110), /* >=, reduce: Atom */
			reduce(110), /* ==, reduce: Atom */
			reduce(110), /* ~=, reduce: Atom */
			reduce(110), /* |, reduce: Atom */
			reduce(110), /* ~, reduce: Atom */
			reduce(110), /* &, reduce: Atom */
			reduce(110), /* .., reduce: Atom */
			reduce(110), /* <<, reduce: Atom */
			reduce(110), /* >>, reduce: Atom */
			reduce(110), /* +, reduce: Atom */
			reduce(110), /* -, reduce: Atom */
			reduce(110), /* *, reduce: Atom */
			reduce(110), /* /, reduce: Atom */
			reduce(110), /* %, reduce: Atom */
			reduce(110), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(110), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(110), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(110), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S1138
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(111), /* return, reduce: Atom */
			reduce(111), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(111), /* break, reduce: Atom */
			reduce(111), /* goto, reduce: Atom */
			reduce(111), /* do, reduce: Atom */
			nil,         /* end */
			reduce(111), /* while, reduce: Atom */
			reduce(111), /* repeat, reduce: Atom */
			reduce(111), /* until, reduce: Atom */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(111), /* if, reduce: Atom */
			reduce(111), /* ,, reduce: Atom */
			reduce(111), /* for, reduce: Atom */
			nil,         /* in */
			reduce(111), /* function, reduce: Atom */
			reduce(111), /* local, reduce: Atom */
			reduce(111), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(111), /* or, reduce: Atom */
			reduce(111), /* and, reduce: Atom */
			reduce(111), /* <, reduce: Atom */
			reduce(111), /* <=, reduce: Atom */
			reduce(111), /* >, reduce: Atom */
			reduce(111), /* >=, reduce: Atom */
			reduce(111), /* ==, reduce: Atom */
			reduce(111), /* ~=, reduce: Atom */
			reduce(111), /* |, reduce: Atom */
			reduce(111), /* ~, reduce: Atom */
			reduce(111), /* &, reduce: Atom */
			reduce(111), /* .., reduce: Atom */
			reduce(111), /* <<, reduce: Atom */
			reduce(111), /* >>, reduce: Atom */
			reduce(111), /* +, reduce: Atom */
			reduce(111), /* -, reduce: Atom */
			reduce(111), /* *, reduce: Atom */
			reduce(111), /* /, reduce: Atom */
			reduce(111), /* %, reduce: Atom */
			reduce(111), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(111), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(111), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(111), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S1139
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(112), /* return, reduce: Atom */
			reduce(112), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(112), /* break, reduce: Atom */
			reduce(112), /* goto, reduce: Atom */
			reduce(112), /* do, reduce: Atom */
			nil,         /* end */
			reduce(112), /* while, reduce: Atom */
			reduce(112), /* repeat, reduce: Atom */
			reduce(112), /* until, reduce: Atom */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(112), /* if, reduce: Atom */
			reduce(112), /* ,, reduce: Atom */
			reduce(112), /* for, reduce: Atom */
			nil,         /* in */
			reduce(112), /* function, reduce: Atom */
			reduce(112), /* local, reduce: Atom */
			reduce(112), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(112), /* or, reduce: Atom */
			reduce(112), /* and, reduce: Atom */
			reduce(112), /* <, reduce: Atom */
			reduce(112), /* <=, reduce: Atom */
			reduce(112), /* >, reduce: Atom */
			reduce(112), /* >=, reduce: Atom */
			reduce(112), /* ==, reduce: Atom */
			reduce(112), /* ~=, reduce: Atom */
			reduce(112), /* |, reduce: Atom */
			reduce(112), /* ~, reduce: Atom */
			reduce(112), /* &, reduce: Atom */
			reduce(112), /* .., reduce: Atom */
			reduce(112), /* <<, reduce: Atom */
			reduce(112), /* >>, reduce: Atom */
			reduce(112), /* +, reduce: Atom */
			reduce(112), /* -, reduce: Atom */
			reduce(112), /* *, reduce: Atom */
			reduce(112), /* /, reduce: Atom */
			reduce(112), /* %, reduce: Atom */
			reduce(112), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(112), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(112), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(112), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S1140
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(113), /* return, reduce: Atom */
			reduce(113), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(113), /* break, reduce: Atom */
			reduce(113), /* goto, reduce: Atom */
			reduce(113), /* do, reduce: Atom */
			nil,         /* end */
			reduce(113), /* while, reduce: Atom */
			reduce(113), /* repeat, reduce: Atom */
			reduce(113), /* until, reduce: Atom */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(113), /* if, reduce: Atom */
			reduce(113), /* ,, reduce: Atom */
			reduce(113), /* for, reduce: Atom */
			nil,         /* in */
			reduce(113), /* function, reduce: Atom */
			reduce(113), /* local, reduce: Atom */
			reduce(113), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(113), /* or, reduce: Atom */
			reduce(113), /* and, reduce: Atom */
			reduce(113), /* <, reduce: Atom */
			reduce(113), /* <=, reduce: Atom */
			reduce(113), /* >, reduce: Atom */
			reduce(113), /* >=, reduce: Atom */
			reduce(113), /* ==, reduce: Atom */
			reduce(113), /* ~=, reduce: Atom */
			reduce(113), /* |, reduce: Atom */
			reduce(113), /* ~, reduce: Atom */
			reduce(113), /* &, reduce: Atom */
			reduce(113), /* .., reduce: Atom */
			reduce(113), /* <<, reduce: Atom */
			reduce(113), /* >>, reduce: Atom */
			reduce(113), /* +, reduce: Atom */
			reduce(113), /* -, reduce: Atom */
			reduce(113), /* *, reduce: Atom */
			reduce(113), /* /, reduce: Atom */
			reduce(113), /* %, reduce: Atom */
			reduce(113), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(113), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(113), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(113), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S1141
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			shift(254), /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(268), /* ident */
		},
	},
	actionRow{ // S1142
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(134), /* return, reduce: Name */
			reduce(134), /* ;, reduce: Name */
			nil,         /* empty */
			nil,         /* = */
			reduce(134), /* break, reduce: Name */
			reduce(134), /* goto, reduce: Name */
			reduce(134), /* do, reduce: Name */
			nil,         /* end */
			reduce(134), /* while, reduce: Name */
			reduce(134), /* repeat, reduce: Name */
			reduce(134), /* until, reduce: Name */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(134), /* if, reduce: Name */
			reduce(134), /* ,, reduce: Name */
			reduce(134), /* for, reduce: Name */
			nil,         /* in */
			reduce(134), /* function, reduce: Name */
			reduce(134), /* local, reduce: Name */
			reduce(134), /* ::, reduce: Name */
			reduce(134), /* ., reduce: Name */
			reduce(134), /* :, reduce: Name */
			reduce(134), /* or, reduce: Name */
			reduce(134), /* and, reduce: Name */
			reduce(134), /* <, reduce: Name */
			reduce(134), /* <=, reduce: Name */
			reduce(134), /* >, reduce: Name */
			reduce(134), /* >=, reduce: Name */
			reduce(134), /* ==, reduce: Name */
			reduce(134), /* ~=, reduce: Name */
			reduce(134), /* |, reduce: Name */
			reduce(134), /* ~, reduce: Name */
			reduce(134), /* &, reduce: Name */
			reduce(134), /* .., reduce: Name */
			reduce(134), /* <<, reduce: Name */
			reduce(134), /* >>, reduce: Name */
			reduce(134), /* +, reduce: Name */
			reduce(134), /* -, reduce: Name */
			reduce(134), /* *, reduce: Name */
			reduce(134), /* /, reduce: Name */
			reduce(134), /* %, reduce: Name */
			reduce(134), /* //, reduce: Name */
			nil,         /* not */
			nil,         /* # */
			reduce(134), /* ^, reduce: Name */
			reduce(134), /* [, reduce: Name */
			nil,         /* ] */
			reduce(134), /* (, reduce: Name */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(134), /* string, reduce: Name */
			reduce(134), /* {, reduce: Name */
			nil,         /* } */
			reduce(134), /* ident, reduce: Name */
		},
	},
	actionRow{ // S1143
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(26), /* return, reduce: BlockStat */
			reduce(26), /* ;, reduce: BlockStat */
			nil,        /* empty */
			nil,        /* = */
			reduce(26), /* break, reduce: BlockStat */
			reduce(26), /* goto, reduce: BlockStat */
			reduce(26), /* do, reduce: BlockStat */
			nil,        /* end */
			reduce(26), /* while, reduce: BlockStat */
			reduce(26), /* repeat, reduce: BlockStat */
			reduce(26), /* until, reduce: BlockStat */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(26), /* if, reduce: BlockStat */
			nil,        /* , */
			reduce(26), /* for, reduce: BlockStat */
			nil,        /* in */
			reduce(26), /* function, reduce: BlockStat */
			reduce(26), /* local, reduce: BlockStat */
			reduce(26), /* ::, reduce: BlockStat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(26), /* (, reduce: BlockStat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(26), /* ident, reduce: BlockStat */
		},
	},
	actionRow{ // S1144
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S1145
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1481), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1497), /* ( */
			nil,         /* ) */
			shift(1498), /* nil */
			shift(1499), /* true */
			shift(1500), /* false */
			shift(1501), /* ... */
			shift(1502), /* numdec */
			shift(1503), /* numhex */
			shift(1504), /* string */
			shift(1507), /* { */
			nil,         /* } */
			shift(1508), /* ident */
		},
	},
	actionRow{ // S1146
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			reduce(6), /* elseif, reduce: StatList */
			reduce(6), /* else, reduce: StatList */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S1147
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(782), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(798), /* ( */
			nil,        /* ) */
			shift(799), /* nil */
			shift(800), /* true */
			shift(801), /* false */
			shift(802), /* ... */
			shift(803), /* numdec */
			shift(804), /* numhex */
			shift(805), /* string */
			shift(808), /* { */
			nil,        /* } */
			shift(809), /* ident */
		},
	},
	actionRow{ // S1148
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(816), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(832), /* ( */
			nil,        /* ) */
			shift(833), /* nil */
			shift(834), /* true */
			shift(835), /* false */
			shift(836), /* ... */
			shift(837), /* numdec */
			shift(838), /* numhex */
			shift(839), /* string */
			shift(842), /* { */
			nil,        /* } */
			shift(843), /* ident */
		},
	},
	actionRow{ // S1149
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(40), /* return, reduce: FunctionStat */
			reduce(40), /* ;, reduce: FunctionStat */
			nil,        /* empty */
			nil,        /* = */
			reduce(40), /* break, reduce: FunctionStat */
			reduce(40), /* goto, reduce: FunctionStat */
			reduce(40), /* do, reduce: FunctionStat */
			nil,        /* end */
			reduce(40), /* while, reduce: FunctionStat */
			reduce(40), /* repeat, reduce: FunctionStat */
			reduce(40), /* until, reduce: FunctionStat */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(40), /* if, reduce: FunctionStat */
			nil,        /* , */
			reduce(40), /* for, reduce: FunctionStat */
			nil,        /* in */
			reduce(40), /* function, reduce: FunctionStat */
			reduce(40), /* local, reduce: FunctionStat */
			reduce(40), /* ::, reduce: FunctionStat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(40), /* (, reduce: FunctionStat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(40), /* ident, reduce: FunctionStat */
		},
	},
	actionRow{ // S1150
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(123), /* ), reduce: ParList */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			shift(521),  /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			shift(523),  /* ident */
		},
	},
	actionRow{ // S1151
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1115), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1131), /* ( */
			nil,         /* ) */
			shift(1132), /* nil */
			shift(1133), /* true */
			shift(1134), /* false */
			shift(1135), /* ... */
			shift(1136), /* numdec */
			shift(1137), /* numhex */
			shift(1138), /* string */
			shift(1141), /* { */
			nil,         /* } */
			shift(1142), /* ident */
		},
	},
	actionRow{ // S1152
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(753), /* ident */
		},
	},
	actionRow{ // S1153
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1150), /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1154
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(44), /* return, reduce: Label */
			reduce(44), /* ;, reduce: Label */
			nil,        /* empty */
			nil,        /* = */
			reduce(44), /* break, reduce: Label */
			reduce(44), /* goto, reduce: Label */
			reduce(44), /* do, reduce: Label */
			nil,        /* end */
			reduce(44), /* while, reduce: Label */
			reduce(44), /* repeat, reduce: Label */
			reduce(44), /* until, reduce: Label */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(44), /* if, reduce: Label */
			nil,        /* , */
			reduce(44), /* for, reduce: Label */
			nil,        /* in */
			reduce(44), /* function, reduce: Label */
			reduce(44), /* local, reduce: Label */
			reduce(44), /* ::, reduce: Label */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(44), /* (, reduce: Label */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(44), /* ident, reduce: Label */
		},
	},
	actionRow{ // S1155
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(34), /* $, reduce: Else */
			reduce(34), /* return, reduce: Else */
			reduce(34), /* ;, reduce: Else */
			nil,        /* empty */
			nil,        /* = */
			reduce(34), /* break, reduce: Else */
			reduce(34), /* goto, reduce: Else */
			reduce(34), /* do, reduce: Else */
			nil,        /* end */
			reduce(34), /* while, reduce: Else */
			reduce(34), /* repeat, reduce: Else */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(34), /* if, reduce: Else */
			nil,        /* , */
			reduce(34), /* for, reduce: Else */
			nil,        /* in */
			reduce(34), /* function, reduce: Else */
			reduce(34), /* local, reduce: Else */
			reduce(34), /* ::, reduce: Else */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(34), /* (, reduce: Else */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(34), /* ident, reduce: Else */
		},
	},
	actionRow{ // S1156
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(116), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(132), /* ( */
			nil,        /* ) */
			shift(133), /* nil */
			shift(134), /* true */
			shift(135), /* false */
			shift(136), /* ... */
			shift(137), /* numdec */
			shift(138), /* numhex */
			shift(139), /* string */
			shift(142), /* { */
			nil,        /* } */
			shift(143), /* ident */
		},
	},
	actionRow{ // S1157
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(35), /* $, reduce: IfStat */
			reduce(35), /* return, reduce: IfStat */
			reduce(35), /* ;, reduce: IfStat */
			nil,        /* empty */
			nil,        /* = */
			reduce(35), /* break, reduce: IfStat */
			reduce(35), /* goto, reduce: IfStat */
			reduce(35), /* do, reduce: IfStat */
			nil,        /* end */
			reduce(35), /* while, reduce: IfStat */
			reduce(35), /* repeat, reduce: IfStat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(35), /* if, reduce: IfStat */
			nil,        /* , */
			reduce(35), /* for, reduce: IfStat */
			nil,        /* in */
			reduce(35), /* function, reduce: IfStat */
			reduce(35), /* local, reduce: IfStat */
			reduce(35), /* ::, reduce: IfStat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(35), /* (, reduce: IfStat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(35), /* ident, reduce: IfStat */
		},
	},
	actionRow{ // S1158
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S1159
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			shift(1520), /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(4),   /* end, reduce: Chunk */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			reduce(4),   /* elseif, reduce: Chunk */
			reduce(4),   /* else, reduce: Chunk */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1524), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1540), /* ( */
			nil,         /* ) */
			shift(1541), /* nil */
			shift(1542), /* true */
			shift(1543), /* false */
			shift(1544), /* ... */
			shift(1545), /* numdec */
			shift(1546), /* numhex */
			shift(1547), /* string */
			shift(1550), /* { */
			nil,         /* } */
			shift(1551), /* ident */
		},
	},
	actionRow{ // S1160
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(8), /* return, reduce: Stat */
			reduce(8), /* ;, reduce: Stat */
			nil,       /* empty */
			nil,       /* = */
			reduce(8), /* break, reduce: Stat */
			reduce(8), /* goto, reduce: Stat */
			reduce(8), /* do, reduce: Stat */
			reduce(8), /* end, reduce: Stat */
			reduce(8), /* while, reduce: Stat */
			reduce(8), /* repeat, reduce: Stat */
			nil,       /* until */
			nil,       /* then */
			reduce(8), /* elseif, reduce: Stat */
			reduce(8), /* else, reduce: Stat */
			reduce(8), /* if, reduce: Stat */
			nil,       /* , */
			reduce(8), /* for, reduce: Stat */
			nil,       /* in */
			reduce(8), /* function, reduce: Stat */
			reduce(8), /* local, reduce: Stat */
			reduce(8), /* ::, reduce: Stat */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(8), /* (, reduce: Stat */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(8), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S1161
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(7), /* return, reduce: StatList */
			reduce(7), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(7), /* break, reduce: StatList */
			reduce(7), /* goto, reduce: StatList */
			reduce(7), /* do, reduce: StatList */
			reduce(7), /* end, reduce: StatList */
			reduce(7), /* while, reduce: StatList */
			reduce(7), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			reduce(7), /* elseif, reduce: StatList */
			reduce(7), /* else, reduce: StatList */
			reduce(7), /* if, reduce: StatList */
			nil,       /* , */
			reduce(7), /* for, reduce: StatList */
			nil,       /* in */
			reduce(7), /* function, reduce: StatList */
			reduce(7), /* local, reduce: StatList */
			reduce(7), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(7), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(7), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S1162
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(9), /* return, reduce: Stat */
			reduce(9), /* ;, reduce: Stat */
			nil,       /* empty */
			nil,       /* = */
			reduce(9), /* break, reduce: Stat */
			reduce(9), /* goto, reduce: Stat */
			reduce(9), /* do, reduce: Stat */
			reduce(9), /* end, reduce: Stat */
			reduce(9), /* while, reduce: Stat */
			reduce(9), /* repeat, reduce: Stat */
			nil,       /* until */
			nil,       /* then */
			reduce(9), /* elseif, reduce: Stat */
			reduce(9), /* else, reduce: Stat */
			reduce(9), /* if, reduce: Stat */
			nil,       /* , */
			reduce(9), /* for, reduce: Stat */
			nil,       /* in */
			reduce(9), /* function, reduce: Stat */
			reduce(9), /* local, reduce: Stat */
			reduce(9), /* ::, reduce: Stat */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(9), /* (, reduce: Stat */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(9), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S1163
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			shift(1552), /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(101), /* ., reduce: PrefixExp */
			reduce(101), /* :, reduce: PrefixExp */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			reduce(101), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(101), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(101), /* string, reduce: PrefixExp */
			reduce(101), /* {, reduce: PrefixExp */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1164
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(11), /* return, reduce: Stat */
			reduce(11), /* ;, reduce: Stat */
			nil,        /* empty */
			nil,        /* = */
			reduce(11), /* break, reduce: Stat */
			reduce(11), /* goto, reduce: Stat */
			reduce(11), /* do, reduce: Stat */
			reduce(11), /* end, reduce: Stat */
			reduce(11), /* while, reduce: Stat */
			reduce(11), /* repeat, reduce: Stat */
			nil,        /* until */
			nil,        /* then */
			reduce(11), /* elseif, reduce: Stat */
			reduce(11), /* else, reduce: Stat */
			reduce(11), /* if, reduce: Stat */
			nil,        /* , */
			reduce(11), /* for, reduce: Stat */
			nil,        /* in */
			reduce(11), /* function, reduce: Stat */
			reduce(11), /* local, reduce: Stat */
			reduce(11), /* ::, reduce: Stat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(11), /* (, reduce: Stat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(11), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S1165
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(12), /* return, reduce: Stat */
			reduce(12), /* ;, reduce: Stat */
			nil,        /* empty */
			nil,        /* = */
			reduce(12), /* break, reduce: Stat */
			reduce(12), /* goto, reduce: Stat */
			reduce(12), /* do, reduce: Stat */
			reduce(12), /* end, reduce: Stat */
			reduce(12), /* while, reduce: Stat */
			reduce(12), /* repeat, reduce: Stat */
			nil,        /* until */
			nil,        /* then */
			reduce(12), /* elseif, reduce: Stat */
			reduce(12), /* else, reduce: Stat */
			reduce(12), /* if, reduce: Stat */
			nil,        /* , */
			reduce(12), /* for, reduce: Stat */
			nil,        /* in */
			reduce(12), /* function, reduce: Stat */
			reduce(12), /* local, reduce: Stat */
			reduce(12), /* ::, reduce: Stat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(12), /* (, reduce: Stat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(12), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S1166
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(13), /* return, reduce: Stat */
			reduce(13), /* ;, reduce: Stat */
			nil,        /* empty */
			nil,        /* = */
			reduce(13), /* break, reduce: Stat */
			reduce(13), /* goto, reduce: Stat */
			reduce(13), /* do, reduce: Stat */
			reduce(13), /* end, reduce: Stat */
			reduce(13), /* while, reduce: Stat */
			reduce(13), /* repeat, reduce: Stat */
			nil,        /* until */
			nil,        /* then */
			reduce(13), /* elseif, reduce: Stat */
			reduce(13), /* else, reduce: Stat */
			reduce(13), /* if, reduce: Stat */
			nil,        /* , */
			reduce(13), /* for, reduce: Stat */
			nil,        /* in */
			reduce(13), /* function, reduce: Stat */
			reduce(13), /* local, reduce: Stat */
			reduce(13), /* ::, reduce: Stat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(13), /* (, reduce: Stat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(13), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S1167
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(14), /* return, reduce: Stat */
			reduce(14), /* ;, reduce: Stat */
			nil,        /* empty */
			nil,        /* = */
			reduce(14), /* break, reduce: Stat */
			reduce(14), /* goto, reduce: Stat */
			reduce(14), /* do, reduce: Stat */
			reduce(14), /* end, reduce: Stat */
			reduce(14), /* while, reduce: Stat */
			reduce(14), /* repeat, reduce: Stat */
			nil,        /* until */
			nil,        /* then */
			reduce(14), /* elseif, reduce: Stat */
			reduce(14), /* else, reduce: Stat */
			reduce(14), /* if, reduce: Stat */
			nil,        /* , */
			reduce(14), /* for, reduce: Stat */
			nil,        /* in */
			reduce(14), /* function, reduce: Stat */
			reduce(14), /* local, reduce: Stat */
			reduce(14), /* ::, reduce: Stat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(14), /* (, reduce: Stat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(14), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S1168
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(15), /* return, reduce: Stat */
			reduce(15), /* ;, reduce: Stat */
			nil,        /* empty */
			nil,        /* = */
			reduce(15), /* break, reduce: Stat */
			reduce(15), /* goto, reduce: Stat */
			reduce(15), /* do, reduce: Stat */
			reduce(15), /* end, reduce: Stat */
			reduce(15), /* while, reduce: Stat */
			reduce(15), /* repeat, reduce: Stat */
			nil,        /* until */
			nil,        /* then */
			reduce(15), /* elseif, reduce: Stat */
			reduce(15), /* else, reduce: Stat */
			reduce(15), /* if, reduce: Stat */
			nil,        /* , */
			reduce(15), /* for, reduce: Stat */
			nil,        /* in */
			reduce(15), /* function, reduce: Stat */
			reduce(15), /* local, reduce: Stat */
			reduce(15), /* ::, reduce: Stat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(15), /* (, reduce: Stat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(15), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S1169
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(16), /* return, reduce: Stat */
			reduce(16), /* ;, reduce: Stat */
			nil,        /* empty */
			nil,        /* = */
			reduce(16), /* break, reduce: Stat */
			reduce(16), /* goto, reduce: Stat */
			reduce(16), /* do, reduce: Stat */
			reduce(16), /* end, reduce: Stat */
			reduce(16), /* while, reduce: Stat */
			reduce(16), /* repeat, reduce: Stat */
			nil,        /* until */
			nil,        /* then */
			reduce(16), /* elseif, reduce: Stat */
			reduce(16), /* else, reduce: Stat */
			reduce(16), /* if, reduce: Stat */
			nil,        /* , */
			reduce(16), /* for, reduce: Stat */
			nil,        /* in */
			reduce(16), /* function, reduce: Stat */
			reduce(16), /* local, reduce: Stat */
			reduce(16), /* ::, reduce: Stat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(16), /* (, reduce: Stat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(16), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S1170
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(17), /* return, reduce: Stat */
			reduce(17), /* ;, reduce: Stat */
			nil,        /* empty */
			nil,        /* = */
			reduce(17), /* break, reduce: Stat */
			reduce(17), /* goto, reduce: Stat */
			reduce(17), /* do, reduce: Stat */
			reduce(17), /* end, reduce: Stat */
			reduce(17), /* while, reduce: Stat */
			reduce(17), /* repeat, reduce: Stat */
			nil,        /* until */
			nil,        /* then */
			reduce(17), /* elseif, reduce: Stat */
			reduce(17), /* else, reduce: Stat */
			reduce(17), /* if, reduce: Stat */
			nil,        /* , */
			reduce(17), /* for, reduce: Stat */
			nil,        /* in */
			reduce(17), /* function, reduce: Stat */
			reduce(17), /* local, reduce: Stat */
			reduce(17), /* ::, reduce: Stat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(17), /* (, reduce: Stat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(17), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S1171
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(18), /* return, reduce: Stat */
			reduce(18), /* ;, reduce: Stat */
			nil,        /* empty */
			nil,        /* = */
			reduce(18), /* break, reduce: Stat */
			reduce(18), /* goto, reduce: Stat */
			reduce(18), /* do, reduce: Stat */
			reduce(18), /* end, reduce: Stat */
			reduce(18), /* while, reduce: Stat */
			reduce(18), /* repeat, reduce: Stat */
			nil,        /* until */
			nil,        /* then */
			reduce(18), /* elseif, reduce: Stat */
			reduce(18), /* else, reduce: Stat */
			reduce(18), /* if, reduce: Stat */
			nil,        /* , */
			reduce(18), /* for, reduce: Stat */
			nil,        /* in */
			reduce(18), /* function, reduce: Stat */
			reduce(18), /* local, reduce: Stat */
			reduce(18), /* ::, reduce: Stat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(18), /* (, reduce: Stat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(18), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S1172
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(19), /* return, reduce: Stat */
			reduce(19), /* ;, reduce: Stat */
			nil,        /* empty */
			nil,        /* = */
			reduce(19), /* break, reduce: Stat */
			reduce(19), /* goto, reduce: Stat */
			reduce(19), /* do, reduce: Stat */
			reduce(19), /* end, reduce: Stat */
			reduce(19), /* while, reduce: Stat */
			reduce(19), /* repeat, reduce: Stat */
			nil,        /* until */
			nil,        /* then */
			reduce(19), /* elseif, reduce: Stat */
			reduce(19), /* else, reduce: Stat */
			reduce(19), /* if, reduce: Stat */
			nil,        /* , */
			reduce(19), /* for, reduce: Stat */
			nil,        /* in */
			reduce(19), /* function, reduce: Stat */
			reduce(19), /* local, reduce: Stat */
			reduce(19), /* ::, reduce: Stat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(19), /* (, reduce: Stat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(19), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S1173
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(20), /* return, reduce: Stat */
			reduce(20), /* ;, reduce: Stat */
			nil,        /* empty */
			nil,        /* = */
			reduce(20), /* break, reduce: Stat */
			reduce(20), /* goto, reduce: Stat */
			reduce(20), /* do, reduce: Stat */
			reduce(20), /* end, reduce: Stat */
			reduce(20), /* while, reduce: Stat */
			reduce(20), /* repeat, reduce: Stat */
			nil,        /* until */
			nil,        /* then */
			reduce(20), /* elseif, reduce: Stat */
			reduce(20), /* else, reduce: Stat */
			reduce(20), /* if, reduce: Stat */
			nil,        /* , */
			reduce(20), /* for, reduce: Stat */
			nil,        /* in */
			reduce(20), /* function, reduce: Stat */
			reduce(20), /* local, reduce: Stat */
			reduce(20), /* ::, reduce: Stat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(20), /* (, reduce: Stat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(20), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S1174
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(21), /* return, reduce: Stat */
			reduce(21), /* ;, reduce: Stat */
			nil,        /* empty */
			nil,        /* = */
			reduce(21), /* break, reduce: Stat */
			reduce(21), /* goto, reduce: Stat */
			reduce(21), /* do, reduce: Stat */
			reduce(21), /* end, reduce: Stat */
			reduce(21), /* while, reduce: Stat */
			reduce(21), /* repeat, reduce: Stat */
			nil,        /* until */
			nil,        /* then */
			reduce(21), /* elseif, reduce: Stat */
			reduce(21), /* else, reduce: Stat */
			reduce(21), /* if, reduce: Stat */
			nil,        /* , */
			reduce(21), /* for, reduce: Stat */
			nil,        /* in */
			reduce(21), /* function, reduce: Stat */
			reduce(21), /* local, reduce: Stat */
			reduce(21), /* ::, reduce: Stat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(21), /* (, reduce: Stat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(21), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S1175
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(22), /* return, reduce: Stat */
			reduce(22), /* ;, reduce: Stat */
			nil,        /* empty */
			nil,        /* = */
			reduce(22), /* break, reduce: Stat */
			reduce(22), /* goto, reduce: Stat */
			reduce(22), /* do, reduce: Stat */
			reduce(22), /* end, reduce: Stat */
			reduce(22), /* while, reduce: Stat */
			reduce(22), /* repeat, reduce: Stat */
			nil,        /* until */
			nil,        /* then */
			reduce(22), /* elseif, reduce: Stat */
			reduce(22), /* else, reduce: Stat */
			reduce(22), /* if, reduce: Stat */
			nil,        /* , */
			reduce(22), /* for, reduce: Stat */
			nil,        /* in */
			reduce(22), /* function, reduce: Stat */
			reduce(22), /* local, reduce: Stat */
			reduce(22), /* ::, reduce: Stat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(22), /* (, reduce: Stat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(22), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S1176
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			shift(1553), /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(75),   /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1177
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(24), /* return, reduce: BreakStat */
			reduce(24), /* ;, reduce: BreakStat */
			nil,        /* empty */
			nil,        /* = */
			reduce(24), /* break, reduce: BreakStat */
			reduce(24), /* goto, reduce: BreakStat */
			reduce(24), /* do, reduce: BreakStat */
			reduce(24), /* end, reduce: BreakStat */
			reduce(24), /* while, reduce: BreakStat */
			reduce(24), /* repeat, reduce: BreakStat */
			nil,        /* until */
			nil,        /* then */
			reduce(24), /* elseif, reduce: BreakStat */
			reduce(24), /* else, reduce: BreakStat */
			reduce(24), /* if, reduce: BreakStat */
			nil,        /* , */
			reduce(24), /* for, reduce: BreakStat */
			nil,        /* in */
			reduce(24), /* function, reduce: BreakStat */
			reduce(24), /* local, reduce: BreakStat */
			reduce(24), /* ::, reduce: BreakStat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(24), /* (, reduce: BreakStat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(24), /* ident, reduce: BreakStat */
		},
	},
	actionRow{ // S1178
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			shift(1555), /* ident */
		},
	},
	actionRow{ // S1179
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S1180
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(83),  /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(99),  /* ( */
			nil,        /* ) */
			shift(100), /* nil */
			shift(101), /* true */
			shift(102), /* false */
			shift(103), /* ... */
			shift(104), /* numdec */
			shift(105), /* numhex */
			shift(106), /* string */
			shift(109), /* { */
			nil,        /* } */
			shift(110), /* ident */
		},
	},
	actionRow{ // S1181
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			nil,       /* end */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			reduce(6), /* until, reduce: StatList */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S1182
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(116), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(132), /* ( */
			nil,        /* ) */
			shift(133), /* nil */
			shift(134), /* true */
			shift(135), /* false */
			shift(136), /* ... */
			shift(137), /* numdec */
			shift(138), /* numhex */
			shift(139), /* string */
			shift(142), /* { */
			nil,        /* } */
			shift(143), /* ident */
		},
	},
	actionRow{ // S1183
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(146), /* ident */
		},
	},
	actionRow{ // S1184
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(150), /* ident */
		},
	},
	actionRow{ // S1185
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1565), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			shift(1566), /* ident */
		},
	},
	actionRow{ // S1186
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(156), /* ident */
		},
	},
	actionRow{ // S1187
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S1188
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			reduce(104), /* then, reduce: FunctionCall */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(104), /* ., reduce: FunctionCall */
			reduce(104), /* :, reduce: FunctionCall */
			reduce(104), /* or, reduce: FunctionCall */
			reduce(104), /* and, reduce: FunctionCall */
			reduce(104), /* <, reduce: FunctionCall */
			reduce(104), /* <=, reduce: FunctionCall */
			reduce(104), /* >, reduce: FunctionCall */
			reduce(104), /* >=, reduce: FunctionCall */
			reduce(104), /* ==, reduce: FunctionCall */
			reduce(104), /* ~=, reduce: FunctionCall */
			reduce(104), /* |, reduce: FunctionCall */
			reduce(104), /* ~, reduce: FunctionCall */
			reduce(104), /* &, reduce: FunctionCall */
			reduce(104), /* .., reduce: FunctionCall */
			reduce(104), /* <<, reduce: FunctionCall */
			reduce(104), /* >>, reduce: FunctionCall */
			reduce(104), /* +, reduce: FunctionCall */
			reduce(104), /* -, reduce: FunctionCall */
			reduce(104), /* *, reduce: FunctionCall */
			reduce(104), /* /, reduce: FunctionCall */
			reduce(104), /* %, reduce: FunctionCall */
			reduce(104), /* //, reduce: FunctionCall */
			nil,         /* not */
			nil,         /* # */
			reduce(104), /* ^, reduce: FunctionCall */
			reduce(104), /* [, reduce: FunctionCall */
			nil,         /* ] */
			reduce(104), /* (, reduce: FunctionCall */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(104), /* string, reduce: FunctionCall */
			reduce(104), /* {, reduce: FunctionCall */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1189
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			reduce(98), /* then, reduce: Var */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			reduce(98), /* ., reduce: Var */
			reduce(98), /* :, reduce: Var */
			reduce(98), /* or, reduce: Var */
			reduce(98), /* and, reduce: Var */
			reduce(98), /* <, reduce: Var */
			reduce(98), /* <=, reduce: Var */
			reduce(98), /* >, reduce: Var */
			reduce(98), /* >=, reduce: Var */
			reduce(98), /* ==, reduce: Var */
			reduce(98), /* ~=, reduce: Var */
			reduce(98), /* |, reduce: Var */
			reduce(98), /* ~, reduce: Var */
			reduce(98), /* &, reduce: Var */
			reduce(98), /* .., reduce: Var */
			reduce(98), /* <<, reduce: Var */
			reduce(98), /* >>, reduce: Var */
			reduce(98), /* +, reduce: Var */
			reduce(98), /* -, reduce: Var */
			reduce(98), /* *, reduce: Var */
			reduce(98), /* /, reduce: Var */
			reduce(98), /* %, reduce: Var */
			reduce(98), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(98), /* ^, reduce: Var */
			reduce(98), /* [, reduce: Var */
			nil,        /* ] */
			reduce(98), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(98), /* string, reduce: Var */
			reduce(98), /* {, reduce: Var */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1190
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			reduce(116), /* then, reduce: Args */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(116), /* ., reduce: Args */
			reduce(116), /* :, reduce: Args */
			reduce(116), /* or, reduce: Args */
			reduce(116), /* and, reduce: Args */
			reduce(116), /* <, reduce: Args */
			reduce(116), /* <=, reduce: Args */
			reduce(116), /* >, reduce: Args */
			reduce(116), /* >=, reduce: Args */
			reduce(116), /* ==, reduce: Args */
			reduce(116), /* ~=, reduce: Args */
			reduce(116), /* |, reduce: Args */
			reduce(116), /* ~, reduce: Args */
			reduce(116), /* &, reduce: Args */
			reduce(116), /* .., reduce: Args */
			reduce(116), /* <<, reduce: Args */
			reduce(116), /* >>, reduce: Args */
			reduce(116), /* +, reduce: Args */
			reduce(116), /* -, reduce: Args */
			reduce(116), /* *, reduce: Args */
			reduce(116), /* /, reduce: Args */
			reduce(116), /* %, reduce: Args */
			reduce(116), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(116), /* ^, reduce: Args */
			reduce(116), /* [, reduce: Args */
			nil,         /* ] */
			reduce(116), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(116), /* string, reduce: Args */
			reduce(116), /* {, reduce: Args */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1191
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			reduce(125), /* then, reduce: TableConstructor */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(125), /* ., reduce: TableConstructor */
			reduce(125), /* :, reduce: TableConstructor */
			reduce(125), /* or, reduce: TableConstructor */
			reduce(125), /* and, reduce: TableConstructor */
			reduce(125), /* <, reduce: TableConstructor */
			reduce(125), /* <=, reduce: TableConstructor */
			reduce(125), /* >, reduce: TableConstructor */
			reduce(125), /* >=, reduce: TableConstructor */
			reduce(125), /* ==, reduce: TableConstructor */
			reduce(125), /* ~=, reduce: TableConstructor */
			reduce(125), /* |, reduce: TableConstructor */
			reduce(125), /* ~, reduce: TableConstructor */
			reduce(125), /* &, reduce: TableConstructor */
			reduce(125), /* .., reduce: TableConstructor */
			reduce(125), /* <<, reduce: TableConstructor */
			reduce(125), /* >>, reduce: TableConstructor */
			reduce(125), /* +, reduce: TableConstructor */
			reduce(125), /* -, reduce: TableConstructor */
			reduce(125), /* *, reduce: TableConstructor */
			reduce(125), /* /, reduce: TableConstructor */
			reduce(125), /* %, reduce: TableConstructor */
			reduce(125), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(125), /* ^, reduce: TableConstructor */
			reduce(125), /* [, reduce: TableConstructor */
			nil,         /* ] */
			reduce(125), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(125), /* string, reduce: TableConstructor */
			reduce(125), /* {, reduce: TableConstructor */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1192
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(238),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			shift(254),  /* [ */
			nil,         /* ] */
			shift(255),  /* ( */
			nil,         /* ) */
			shift(256),  /* nil */
			shift(257),  /* true */
			shift(258),  /* false */
			shift(259),  /* ... */
			shift(260),  /* numdec */
			shift(261),  /* numhex */
			shift(262),  /* string */
			shift(265),  /* { */
			shift(1569), /* } */
			shift(268),  /* ident */
		},
	},
	actionRow{ // S1193
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			reduce(126), /* then, reduce: TableConstructor */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(126), /* or, reduce: TableConstructor */
			reduce(126), /* and, reduce: TableConstructor */
			reduce(126), /* <, reduce: TableConstructor */
			reduce(126), /* <=, reduce: TableConstructor */
			reduce(126), /* >, reduce: TableConstructor */
			reduce(126), /* >=, reduce: TableConstructor */
			reduce(126), /* ==, reduce: TableConstructor */
			reduce(126), /* ~=, reduce: TableConstructor */
			reduce(126), /* |, reduce: TableConstructor */
			reduce(126), /* ~, reduce: TableConstructor */
			reduce(126), /* &, reduce: TableConstructor */
			reduce(126), /* .., reduce: TableConstructor */
			reduce(126), /* <<, reduce: TableConstructor */
			reduce(126), /* >>, reduce: TableConstructor */
			reduce(126), /* +, reduce: TableConstructor */
			reduce(126), /* -, reduce: TableConstructor */
			reduce(126), /* *, reduce: TableConstructor */
			reduce(126), /* /, reduce: TableConstructor */
			reduce(126), /* %, reduce: TableConstructor */
			reduce(126), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(126), /* ^, reduce: TableConstructor */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1194
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(816), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(832), /* ( */
			nil,        /* ) */
			shift(833), /* nil */
			shift(834), /* true */
			shift(835), /* false */
			shift(836), /* ... */
			shift(837), /* numdec */
			shift(838), /* numhex */
			shift(839), /* string */
			shift(842), /* { */
			nil,        /* } */
			shift(843), /* ident */
		},
	},
	actionRow{ // S1195
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(782), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(798), /* ( */
			nil,        /* ) */
			shift(799), /* nil */
			shift(800), /* true */
			shift(801), /* false */
			shift(802), /* ... */
			shift(803), /* numdec */
			shift(804), /* numhex */
			shift(805), /* string */
			shift(808), /* { */
			nil,        /* } */
			shift(809), /* ident */
		},
	},
	actionRow{ // S1196
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S1197
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(119), /* ,, reduce: FunctionDef */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(119), /* or, reduce: FunctionDef */
			reduce(119), /* and, reduce: FunctionDef */
			reduce(119), /* <, reduce: FunctionDef */
			reduce(119), /* <=, reduce: FunctionDef */
			reduce(119), /* >, reduce: FunctionDef */
			reduce(119), /* >=, reduce: FunctionDef */
			reduce(119), /* ==, reduce: FunctionDef */
			reduce(119), /* ~=, reduce: FunctionDef */
			reduce(119), /* |, reduce: FunctionDef */
			reduce(119), /* ~, reduce: FunctionDef */
			reduce(119), /* &, reduce: FunctionDef */
			reduce(119), /* .., reduce: FunctionDef */
			reduce(119), /* <<, reduce: FunctionDef */
			reduce(119), /* >>, reduce: FunctionDef */
			reduce(119), /* +, reduce: FunctionDef */
			reduce(119), /* -, reduce: FunctionDef */
			reduce(119), /* *, reduce: FunctionDef */
			reduce(119), /* /, reduce: FunctionDef */
			reduce(119), /* %, reduce: FunctionDef */
			reduce(119), /* //, reduce: FunctionDef */
			nil,         /* not */
			nil,         /* # */
			reduce(119), /* ^, reduce: FunctionDef */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1198
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(123), /* ), reduce: ParList */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			shift(521),  /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			shift(523),  /* ident */
		},
	},
	actionRow{ // S1199
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(782), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(798), /* ( */
			nil,        /* ) */
			shift(799), /* nil */
			shift(800), /* true */
			shift(801), /* false */
			shift(802), /* ... */
			shift(803), /* numdec */
			shift(804), /* numhex */
			shift(805), /* string */
			shift(808), /* { */
			nil,        /* } */
			shift(809), /* ident */
		},
	},
	actionRow{ // S1200
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(782), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(798), /* ( */
			nil,        /* ) */
			shift(799), /* nil */
			shift(800), /* true */
			shift(801), /* false */
			shift(802), /* ... */
			shift(803), /* numdec */
			shift(804), /* numhex */
			shift(805), /* string */
			shift(808), /* { */
			nil,        /* } */
			shift(809), /* ident */
		},
	},
	actionRow{ // S1201
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(782), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(798), /* ( */
			nil,        /* ) */
			shift(799), /* nil */
			shift(800), /* true */
			shift(801), /* false */
			shift(802), /* ... */
			shift(803), /* numdec */
			shift(804), /* numhex */
			shift(805), /* string */
			shift(808), /* { */
			nil,        /* } */
			shift(809), /* ident */
		},
	},
	actionRow{ // S1202
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(782), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(798), /* ( */
			nil,        /* ) */
			shift(799), /* nil */
			shift(800), /* true */
			shift(801), /* false */
			shift(802), /* ... */
			shift(803), /* numdec */
			shift(804), /* numhex */
			shift(805), /* string */
			shift(808), /* { */
			nil,        /* } */
			shift(809), /* ident */
		},
	},
	actionRow{ // S1203
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(782), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(798), /* ( */
			nil,        /* ) */
			shift(799), /* nil */
			shift(800), /* true */
			shift(801), /* false */
			shift(802), /* ... */
			shift(803), /* numdec */
			shift(804), /* numhex */
			shift(805), /* string */
			shift(808), /* { */
			nil,        /* } */
			shift(809), /* ident */
		},
	},
	actionRow{ // S1204
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(782), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(798), /* ( */
			nil,        /* ) */
			shift(799), /* nil */
			shift(800), /* true */
			shift(801), /* false */
			shift(802), /* ... */
			shift(803), /* numdec */
			shift(804), /* numhex */
			shift(805), /* string */
			shift(808), /* { */
			nil,        /* } */
			shift(809), /* ident */
		},
	},
	actionRow{ // S1205
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(782), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(798), /* ( */
			nil,        /* ) */
			shift(799), /* nil */
			shift(800), /* true */
			shift(801), /* false */
			shift(802), /* ... */
			shift(803), /* numdec */
			shift(804), /* numhex */
			shift(805), /* string */
			shift(808), /* { */
			nil,        /* } */
			shift(809), /* ident */
		},
	},
	actionRow{ // S1206
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(782), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(798), /* ( */
			nil,        /* ) */
			shift(799), /* nil */
			shift(800), /* true */
			shift(801), /* false */
			shift(802), /* ... */
			shift(803), /* numdec */
			shift(804), /* numhex */
			shift(805), /* string */
			shift(808), /* { */
			nil,        /* } */
			shift(809), /* ident */
		},
	},
	actionRow{ // S1207
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(782), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(798), /* ( */
			nil,        /* ) */
			shift(799), /* nil */
			shift(800), /* true */
			shift(801), /* false */
			shift(802), /* ... */
			shift(803), /* numdec */
			shift(804), /* numhex */
			shift(805), /* string */
			shift(808), /* { */
			nil,        /* } */
			shift(809), /* ident */
		},
	},
	actionRow{ // S1208
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(93), /* ,, reduce: Factor */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(93), /* or, reduce: Factor */
			reduce(93), /* and, reduce: Factor */
			reduce(93), /* <, reduce: Factor */
			reduce(93), /* <=, reduce: Factor */
			reduce(93), /* >, reduce: Factor */
			reduce(93), /* >=, reduce: Factor */
			reduce(93), /* ==, reduce: Factor */
			reduce(93), /* ~=, reduce: Factor */
			reduce(93), /* |, reduce: Factor */
			reduce(93), /* ~, reduce: Factor */
			reduce(93), /* &, reduce: Factor */
			reduce(93), /* .., reduce: Factor */
			reduce(93), /* <<, reduce: Factor */
			reduce(93), /* >>, reduce: Factor */
			reduce(93), /* +, reduce: Factor */
			reduce(93), /* -, reduce: Factor */
			reduce(93), /* *, reduce: Factor */
			reduce(93), /* /, reduce: Factor */
			reduce(93), /* %, reduce: Factor */
			reduce(93), /* //, reduce: Factor */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1209
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(782), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(798), /* ( */
			nil,        /* ) */
			shift(799), /* nil */
			shift(800), /* true */
			shift(801), /* false */
			shift(802), /* ... */
			shift(803), /* numdec */
			shift(804), /* numhex */
			shift(805), /* string */
			shift(808), /* { */
			nil,        /* } */
			shift(809), /* ident */
		},
	},
	actionRow{ // S1210
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(809), /* ident */
		},
	},
	actionRow{ // S1211
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(426), /* ident */
		},
	},
	actionRow{ // S1212
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(430), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(446), /* ( */
			nil,        /* ) */
			shift(447), /* nil */
			shift(448), /* true */
			shift(449), /* false */
			shift(450), /* ... */
			shift(451), /* numdec */
			shift(452), /* numhex */
			shift(453), /* string */
			shift(456), /* { */
			nil,        /* } */
			shift(457), /* ident */
		},
	},
	actionRow{ // S1213
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(462),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(478),  /* ( */
			shift(1588), /* ) */
			shift(480),  /* nil */
			shift(481),  /* true */
			shift(482),  /* false */
			shift(483),  /* ... */
			shift(484),  /* numdec */
			shift(485),  /* numhex */
			shift(486),  /* string */
			shift(489),  /* { */
			nil,         /* } */
			shift(490),  /* ident */
		},
	},
	actionRow{ // S1214
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(103), /* ,, reduce: FunctionCall */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(103), /* ., reduce: FunctionCall */
			reduce(103), /* :, reduce: FunctionCall */
			reduce(103), /* or, reduce: FunctionCall */
			reduce(103), /* and, reduce: FunctionCall */
			reduce(103), /* <, reduce: FunctionCall */
			reduce(103), /* <=, reduce: FunctionCall */
			reduce(103), /* >, reduce: FunctionCall */
			reduce(103), /* >=, reduce: FunctionCall */
			reduce(103), /* ==, reduce: FunctionCall */
			reduce(103), /* ~=, reduce: FunctionCall */
			reduce(103), /* |, reduce: FunctionCall */
			reduce(103), /* ~, reduce: FunctionCall */
			reduce(103), /* &, reduce: FunctionCall */
			reduce(103), /* .., reduce: FunctionCall */
			reduce(103), /* <<, reduce: FunctionCall */
			reduce(103), /* >>, reduce: FunctionCall */
			reduce(103), /* +, reduce: FunctionCall */
			reduce(103), /* -, reduce: FunctionCall */
			reduce(103), /* *, reduce: FunctionCall */
			reduce(103), /* /, reduce: FunctionCall */
			reduce(103), /* %, reduce: FunctionCall */
			reduce(103), /* //, reduce: FunctionCall */
			nil,         /* not */
			nil,         /* # */
			reduce(103), /* ^, reduce: FunctionCall */
			reduce(103), /* [, reduce: FunctionCall */
			nil,         /* ] */
			reduce(103), /* (, reduce: FunctionCall */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(103), /* string, reduce: FunctionCall */
			reduce(103), /* {, reduce: FunctionCall */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1215
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(118), /* ,, reduce: Args */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(118), /* ., reduce: Args */
			reduce(118), /* :, reduce: Args */
			reduce(118), /* or, reduce: Args */
			reduce(118), /* and, reduce: Args */
			reduce(118), /* <, reduce: Args */
			reduce(118), /* <=, reduce: Args */
			reduce(118), /* >, reduce: Args */
			reduce(118), /* >=, reduce: Args */
			reduce(118), /* ==, reduce: Args */
			reduce(118), /* ~=, reduce: Args */
			reduce(118), /* |, reduce: Args */
			reduce(118), /* ~, reduce: Args */
			reduce(118), /* &, reduce: Args */
			reduce(118), /* .., reduce: Args */
			reduce(118), /* <<, reduce: Args */
			reduce(118), /* >>, reduce: Args */
			reduce(118), /* +, reduce: Args */
			reduce(118), /* -, reduce: Args */
			reduce(118), /* *, reduce: Args */
			reduce(118), /* /, reduce: Args */
			reduce(118), /* %, reduce: Args */
			reduce(118), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(118), /* ^, reduce: Args */
			reduce(118), /* [, reduce: Args */
			nil,         /* ] */
			reduce(118), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(118), /* string, reduce: Args */
			reduce(118), /* {, reduce: Args */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1216
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(117), /* ,, reduce: Args */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(117), /* ., reduce: Args */
			reduce(117), /* :, reduce: Args */
			reduce(117), /* or, reduce: Args */
			reduce(117), /* and, reduce: Args */
			reduce(117), /* <, reduce: Args */
			reduce(117), /* <=, reduce: Args */
			reduce(117), /* >, reduce: Args */
			reduce(117), /* >=, reduce: Args */
			reduce(117), /* ==, reduce: Args */
			reduce(117), /* ~=, reduce: Args */
			reduce(117), /* |, reduce: Args */
			reduce(117), /* ~, reduce: Args */
			reduce(117), /* &, reduce: Args */
			reduce(117), /* .., reduce: Args */
			reduce(117), /* <<, reduce: Args */
			reduce(117), /* >>, reduce: Args */
			reduce(117), /* +, reduce: Args */
			reduce(117), /* -, reduce: Args */
			reduce(117), /* *, reduce: Args */
			reduce(117), /* /, reduce: Args */
			reduce(117), /* %, reduce: Args */
			reduce(117), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(117), /* ^, reduce: Args */
			reduce(117), /* [, reduce: Args */
			nil,         /* ] */
			reduce(117), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(117), /* string, reduce: Args */
			reduce(117), /* {, reduce: Args */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1217
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			shift(254), /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(268), /* ident */
		},
	},
	actionRow{ // S1218
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			shift(492),  /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(1590), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1219
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			shift(569),  /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(570),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			shift(1591), /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1220
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S1221
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(816), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(832), /* ( */
			nil,        /* ) */
			shift(833), /* nil */
			shift(834), /* true */
			shift(835), /* false */
			shift(836), /* ... */
			shift(837), /* numdec */
			shift(838), /* numhex */
			shift(839), /* string */
			shift(842), /* { */
			nil,        /* } */
			shift(843), /* ident */
		},
	},
	actionRow{ // S1222
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(816), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(832), /* ( */
			nil,        /* ) */
			shift(833), /* nil */
			shift(834), /* true */
			shift(835), /* false */
			shift(836), /* ... */
			shift(837), /* numdec */
			shift(838), /* numhex */
			shift(839), /* string */
			shift(842), /* { */
			nil,        /* } */
			shift(843), /* ident */
		},
	},
	actionRow{ // S1223
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(119), /* do, reduce: FunctionDef */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(119), /* ,, reduce: FunctionDef */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(119), /* or, reduce: FunctionDef */
			reduce(119), /* and, reduce: FunctionDef */
			reduce(119), /* <, reduce: FunctionDef */
			reduce(119), /* <=, reduce: FunctionDef */
			reduce(119), /* >, reduce: FunctionDef */
			reduce(119), /* >=, reduce: FunctionDef */
			reduce(119), /* ==, reduce: FunctionDef */
			reduce(119), /* ~=, reduce: FunctionDef */
			reduce(119), /* |, reduce: FunctionDef */
			reduce(119), /* ~, reduce: FunctionDef */
			reduce(119), /* &, reduce: FunctionDef */
			reduce(119), /* .., reduce: FunctionDef */
			reduce(119), /* <<, reduce: FunctionDef */
			reduce(119), /* >>, reduce: FunctionDef */
			reduce(119), /* +, reduce: FunctionDef */
			reduce(119), /* -, reduce: FunctionDef */
			reduce(119), /* *, reduce: FunctionDef */
			reduce(119), /* /, reduce: FunctionDef */
			reduce(119), /* %, reduce: FunctionDef */
			reduce(119), /* //, reduce: FunctionDef */
			nil,         /* not */
			nil,         /* # */
			reduce(119), /* ^, reduce: FunctionDef */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1224
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(123), /* ), reduce: ParList */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			shift(521),  /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			shift(523),  /* ident */
		},
	},
	actionRow{ // S1225
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(816), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(832), /* ( */
			nil,        /* ) */
			shift(833), /* nil */
			shift(834), /* true */
			shift(835), /* false */
			shift(836), /* ... */
			shift(837), /* numdec */
			shift(838), /* numhex */
			shift(839), /* string */
			shift(842), /* { */
			nil,        /* } */
			shift(843), /* ident */
		},
	},
	actionRow{ // S1226
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(816), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(832), /* ( */
			nil,        /* ) */
			shift(833), /* nil */
			shift(834), /* true */
			shift(835), /* false */
			shift(836), /* ... */
			shift(837), /* numdec */
			shift(838), /* numhex */
			shift(839), /* string */
			shift(842), /* { */
			nil,        /* } */
			shift(843), /* ident */
		},
	},
	actionRow{ // S1227
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(816), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(832), /* ( */
			nil,        /* ) */
			shift(833), /* nil */
			shift(834), /* true */
			shift(835), /* false */
			shift(836), /* ... */
			shift(837), /* numdec */
			shift(838), /* numhex */
			shift(839), /* string */
			shift(842), /* { */
			nil,        /* } */
			shift(843), /* ident */
		},
	},
	actionRow{ // S1228
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(816), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(832), /* ( */
			nil,        /* ) */
			shift(833), /* nil */
			shift(834), /* true */
			shift(835), /* false */
			shift(836), /* ... */
			shift(837), /* numdec */
			shift(838), /* numhex */
			shift(839), /* string */
			shift(842), /* { */
			nil,        /* } */
			shift(843), /* ident */
		},
	},
	actionRow{ // S1229
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(816), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(832), /* ( */
			nil,        /* ) */
			shift(833), /* nil */
			shift(834), /* true */
			shift(835), /* false */
			shift(836), /* ... */
			shift(837), /* numdec */
			shift(838), /* numhex */
			shift(839), /* string */
			shift(842), /* { */
			nil,        /* } */
			shift(843), /* ident */
		},
	},
	actionRow{ // S1230
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(816), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(832), /* ( */
			nil,        /* ) */
			shift(833), /* nil */
			shift(834), /* true */
			shift(835), /* false */
			shift(836), /* ... */
			shift(837), /* numdec */
			shift(838), /* numhex */
			shift(839), /* string */
			shift(842), /* { */
			nil,        /* } */
			shift(843), /* ident */
		},
	},
	actionRow{ // S1231
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(816), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(832), /* ( */
			nil,        /* ) */
			shift(833), /* nil */
			shift(834), /* true */
			shift(835), /* false */
			shift(836), /* ... */
			shift(837), /* numdec */
			shift(838), /* numhex */
			shift(839), /* string */
			shift(842), /* { */
			nil,        /* } */
			shift(843), /* ident */
		},
	},
	actionRow{ // S1232
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(816), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(832), /* ( */
			nil,        /* ) */
			shift(833), /* nil */
			shift(834), /* true */
			shift(835), /* false */
			shift(836), /* ... */
			shift(837), /* numdec */
			shift(838), /* numhex */
			shift(839), /* string */
			shift(842), /* { */
			nil,        /* } */
			shift(843), /* ident */
		},
	},
	actionRow{ // S1233
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(816), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(832), /* ( */
			nil,        /* ) */
			shift(833), /* nil */
			shift(834), /* true */
			shift(835), /* false */
			shift(836), /* ... */
			shift(837), /* numdec */
			shift(838), /* numhex */
			shift(839), /* string */
			shift(842), /* { */
			nil,        /* } */
			shift(843), /* ident */
		},
	},
	actionRow{ // S1234
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			reduce(93), /* do, reduce: Factor */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(93), /* ,, reduce: Factor */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(93), /* or, reduce: Factor */
			reduce(93), /* and, reduce: Factor */
			reduce(93), /* <, reduce: Factor */
			reduce(93), /* <=, reduce: Factor */
			reduce(93), /* >, reduce: Factor */
			reduce(93), /* >=, reduce: Factor */
			reduce(93), /* ==, reduce: Factor */
			reduce(93), /* ~=, reduce: Factor */
			reduce(93), /* |, reduce: Factor */
			reduce(93), /* ~, reduce: Factor */
			reduce(93), /* &, reduce: Factor */
			reduce(93), /* .., reduce: Factor */
			reduce(93), /* <<, reduce: Factor */
			reduce(93), /* >>, reduce: Factor */
			reduce(93), /* +, reduce: Factor */
			reduce(93), /* -, reduce: Factor */
			reduce(93), /* *, reduce: Factor */
			reduce(93), /* /, reduce: Factor */
			reduce(93), /* %, reduce: Factor */
			reduce(93), /* //, reduce: Factor */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1235
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(816), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(832), /* ( */
			nil,        /* ) */
			shift(833), /* nil */
			shift(834), /* true */
			shift(835), /* false */
			shift(836), /* ... */
			shift(837), /* numdec */
			shift(838), /* numhex */
			shift(839), /* string */
			shift(842), /* { */
			nil,        /* } */
			shift(843), /* ident */
		},
	},
	actionRow{ // S1236
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(843), /* ident */
		},
	},
	actionRow{ // S1237
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(426), /* ident */
		},
	},
	actionRow{ // S1238
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(430), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(446), /* ( */
			nil,        /* ) */
			shift(447), /* nil */
			shift(448), /* true */
			shift(449), /* false */
			shift(450), /* ... */
			shift(451), /* numdec */
			shift(452), /* numhex */
			shift(453), /* string */
			shift(456), /* { */
			nil,        /* } */
			shift(457), /* ident */
		},
	},
	actionRow{ // S1239
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(462),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(478),  /* ( */
			shift(1611), /* ) */
			shift(480),  /* nil */
			shift(481),  /* true */
			shift(482),  /* false */
			shift(483),  /* ... */
			shift(484),  /* numdec */
			shift(485),  /* numhex */
			shift(486),  /* string */
			shift(489),  /* { */
			nil,         /* } */
			shift(490),  /* ident */
		},
	},
	actionRow{ // S1240
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(103), /* do, reduce: FunctionCall */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(103), /* ,, reduce: FunctionCall */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(103), /* ., reduce: FunctionCall */
			reduce(103), /* :, reduce: FunctionCall */
			reduce(103), /* or, reduce: FunctionCall */
			reduce(103), /* and, reduce: FunctionCall */
			reduce(103), /* <, reduce: FunctionCall */
			reduce(103), /* <=, reduce: FunctionCall */
			reduce(103), /* >, reduce: FunctionCall */
			reduce(103), /* >=, reduce: FunctionCall */
			reduce(103), /* ==, reduce: FunctionCall */
			reduce(103), /* ~=, reduce: FunctionCall */
			reduce(103), /* |, reduce: FunctionCall */
			reduce(103), /* ~, reduce: FunctionCall */
			reduce(103), /* &, reduce: FunctionCall */
			reduce(103), /* .., reduce: FunctionCall */
			reduce(103), /* <<, reduce: FunctionCall */
			reduce(103), /* >>, reduce: FunctionCall */
			reduce(103), /* +, reduce: FunctionCall */
			reduce(103), /* -, reduce: FunctionCall */
			reduce(103), /* *, reduce: FunctionCall */
			reduce(103), /* /, reduce: FunctionCall */
			reduce(103), /* %, reduce: FunctionCall */
			reduce(103), /* //, reduce: FunctionCall */
			nil,         /* not */
			nil,         /* # */
			reduce(103), /* ^, reduce: FunctionCall */
			reduce(103), /* [, reduce: FunctionCall */
			nil,         /* ] */
			reduce(103), /* (, reduce: FunctionCall */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(103), /* string, reduce: FunctionCall */
			reduce(103), /* {, reduce: FunctionCall */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1241
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(118), /* do, reduce: Args */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(118), /* ,, reduce: Args */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(118), /* ., reduce: Args */
			reduce(118), /* :, reduce: Args */
			reduce(118), /* or, reduce: Args */
			reduce(118), /* and, reduce: Args */
			reduce(118), /* <, reduce: Args */
			reduce(118), /* <=, reduce: Args */
			reduce(118), /* >, reduce: Args */
			reduce(118), /* >=, reduce: Args */
			reduce(118), /* ==, reduce: Args */
			reduce(118), /* ~=, reduce: Args */
			reduce(118), /* |, reduce: Args */
			reduce(118), /* ~, reduce: Args */
			reduce(118), /* &, reduce: Args */
			reduce(118), /* .., reduce: Args */
			reduce(118), /* <<, reduce: Args */
			reduce(118), /* >>, reduce: Args */
			reduce(118), /* +, reduce: Args */
			reduce(118), /* -, reduce: Args */
			reduce(118), /* *, reduce: Args */
			reduce(118), /* /, reduce: Args */
			reduce(118), /* %, reduce: Args */
			reduce(118), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(118), /* ^, reduce: Args */
			reduce(118), /* [, reduce: Args */
			nil,         /* ] */
			reduce(118), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(118), /* string, reduce: Args */
			reduce(118), /* {, reduce: Args */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1242
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(117), /* do, reduce: Args */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(117), /* ,, reduce: Args */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(117), /* ., reduce: Args */
			reduce(117), /* :, reduce: Args */
			reduce(117), /* or, reduce: Args */
			reduce(117), /* and, reduce: Args */
			reduce(117), /* <, reduce: Args */
			reduce(117), /* <=, reduce: Args */
			reduce(117), /* >, reduce: Args */
			reduce(117), /* >=, reduce: Args */
			reduce(117), /* ==, reduce: Args */
			reduce(117), /* ~=, reduce: Args */
			reduce(117), /* |, reduce: Args */
			reduce(117), /* ~, reduce: Args */
			reduce(117), /* &, reduce: Args */
			reduce(117), /* .., reduce: Args */
			reduce(117), /* <<, reduce: Args */
			reduce(117), /* >>, reduce: Args */
			reduce(117), /* +, reduce: Args */
			reduce(117), /* -, reduce: Args */
			reduce(117), /* *, reduce: Args */
			reduce(117), /* /, reduce: Args */
			reduce(117), /* %, reduce: Args */
			reduce(117), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(117), /* ^, reduce: Args */
			reduce(117), /* [, reduce: Args */
			nil,         /* ] */
			reduce(117), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(117), /* string, reduce: Args */
			reduce(117), /* {, reduce: Args */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1243
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			shift(254), /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(268), /* ident */
		},
	},
	actionRow{ // S1244
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			shift(492),  /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(1613), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1245
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			shift(569),  /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(570),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			shift(1614), /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1246
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S1247
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(56), /* or, reduce: Exp */
			shift(855), /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			reduce(56), /* ], reduce: Exp */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1248
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(1617), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1249
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(58), /* or, reduce: AndExp */
			reduce(58), /* and, reduce: AndExp */
			shift(203), /* < */
			shift(204), /* <= */
			shift(205), /* > */
			shift(206), /* >= */
			shift(207), /* == */
			shift(208), /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			reduce(58), /* ], reduce: AndExp */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1250
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(66), /* or, reduce: CompExp */
			reduce(66), /* and, reduce: CompExp */
			reduce(66), /* <, reduce: CompExp */
			reduce(66), /* <=, reduce: CompExp */
			reduce(66), /* >, reduce: CompExp */
			reduce(66), /* >=, reduce: CompExp */
			reduce(66), /* ==, reduce: CompExp */
			reduce(66), /* ~=, reduce: CompExp */
			shift(857), /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			reduce(66), /* ], reduce: CompExp */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1251
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(68), /* or, reduce: BitOrExp */
			reduce(68), /* and, reduce: BitOrExp */
			reduce(68), /* <, reduce: BitOrExp */
			reduce(68), /* <=, reduce: BitOrExp */
			reduce(68), /* >, reduce: BitOrExp */
			reduce(68), /* >=, reduce: BitOrExp */
			reduce(68), /* ==, reduce: BitOrExp */
			reduce(68), /* ~=, reduce: BitOrExp */
			reduce(68), /* |, reduce: BitOrExp */
			shift(858), /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			reduce(68), /* ], reduce: BitOrExp */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1252
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(70), /* or, reduce: BitXorExp */
			reduce(70), /* and, reduce: BitXorExp */
			reduce(70), /* <, reduce: BitXorExp */
			reduce(70), /* <=, reduce: BitXorExp */
			reduce(70), /* >, reduce: BitXorExp */
			reduce(70), /* >=, reduce: BitXorExp */
			reduce(70), /* ==, reduce: BitXorExp */
			reduce(70), /* ~=, reduce: BitXorExp */
			reduce(70), /* |, reduce: BitXorExp */
			reduce(70), /* ~, reduce: BitXorExp */
			shift(859), /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			reduce(70), /* ], reduce: BitXorExp */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1253
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(72), /* or, reduce: BitAndExp */
			reduce(72), /* and, reduce: BitAndExp */
			reduce(72), /* <, reduce: BitAndExp */
			reduce(72), /* <=, reduce: BitAndExp */
			reduce(72), /* >, reduce: BitAndExp */
			reduce(72), /* >=, reduce: BitAndExp */
			reduce(72), /* ==, reduce: BitAndExp */
			reduce(72), /* ~=, reduce: BitAndExp */
			reduce(72), /* |, reduce: BitAndExp */
			reduce(72), /* ~, reduce: BitAndExp */
			reduce(72), /* &, reduce: BitAndExp */
			shift(860), /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			reduce(72), /* ], reduce: BitAndExp */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1254
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(74), /* or, reduce: ConcatExp */
			reduce(74), /* and, reduce: ConcatExp */
			reduce(74), /* <, reduce: ConcatExp */
			reduce(74), /* <=, reduce: ConcatExp */
			reduce(74), /* >, reduce: ConcatExp */
			reduce(74), /* >=, reduce: ConcatExp */
			reduce(74), /* ==, reduce: ConcatExp */
			reduce(74), /* ~=, reduce: ConcatExp */
			reduce(74), /* |, reduce: ConcatExp */
			reduce(74), /* ~, reduce: ConcatExp */
			reduce(74), /* &, reduce: ConcatExp */
			reduce(74), /* .., reduce: ConcatExp */
			shift(214), /* << */
			shift(215), /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			reduce(74), /* ], reduce: ConcatExp */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1255
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(78), /* or, reduce: ShiftExp */
			reduce(78), /* and, reduce: ShiftExp */
			reduce(78), /* <, reduce: ShiftExp */
			reduce(78), /* <=, reduce: ShiftExp */
			reduce(78), /* >, reduce: ShiftExp */
			reduce(78), /* >=, reduce: ShiftExp */
			reduce(78), /* ==, reduce: ShiftExp */
			reduce(78), /* ~=, reduce: ShiftExp */
			reduce(78), /* |, reduce: ShiftExp */
			reduce(78), /* ~, reduce: ShiftExp */
			reduce(78), /* &, reduce: ShiftExp */
			reduce(78), /* .., reduce: ShiftExp */
			reduce(78), /* <<, reduce: ShiftExp */
			reduce(78), /* >>, reduce: ShiftExp */
			shift(217), /* + */
			shift(218), /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			reduce(78), /* ], reduce: ShiftExp */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1256
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(82), /* or, reduce: Sum */
			reduce(82), /* and, reduce: Sum */
			reduce(82), /* <, reduce: Sum */
			reduce(82), /* <=, reduce: Sum */
			reduce(82), /* >, reduce: Sum */
			reduce(82), /* >=, reduce: Sum */
			reduce(82), /* ==, reduce: Sum */
			reduce(82), /* ~=, reduce: Sum */
			reduce(82), /* |, reduce: Sum */
			reduce(82), /* ~, reduce: Sum */
			reduce(82), /* &, reduce: Sum */
			reduce(82), /* .., reduce: Sum */
			reduce(82), /* <<, reduce: Sum */
			reduce(82), /* >>, reduce: Sum */
			reduce(82), /* +, reduce: Sum */
			reduce(82), /* -, reduce: Sum */
			shift(220), /* * */
			shift(221), /* / */
			shift(222), /* % */
			shift(223), /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			reduce(82), /* ], reduce: Sum */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1257
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(88), /* or, reduce: Term */
			reduce(88), /* and, reduce: Term */
			reduce(88), /* <, reduce: Term */
			reduce(88), /* <=, reduce: Term */
			reduce(88), /* >, reduce: Term */
			reduce(88), /* >=, reduce: Term */
			reduce(88), /* ==, reduce: Term */
			reduce(88), /* ~=, reduce: Term */
			reduce(88), /* |, reduce: Term */
			reduce(88), /* ~, reduce: Term */
			reduce(88), /* &, reduce: Term */
			reduce(88), /* .., reduce: Term */
			reduce(88), /* <<, reduce: Term */
			reduce(88), /* >>, reduce: Term */
			reduce(88), /* +, reduce: Term */
			reduce(88), /* -, reduce: Term */
			reduce(88), /* *, reduce: Term */
			reduce(88), /* /, reduce: Term */
			reduce(88), /* %, reduce: Term */
			reduce(88), /* //, reduce: Term */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			reduce(88), /* ], reduce: Term */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1258
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(96), /* or, reduce: Power */
			reduce(96), /* and, reduce: Power */
			reduce(96), /* <, reduce: Power */
			reduce(96), /* <=, reduce: Power */
			reduce(96), /* >, reduce: Power */
			reduce(96), /* >=, reduce: Power */
			reduce(96), /* ==, reduce: Power */
			reduce(96), /* ~=, reduce: Power */
			reduce(96), /* |, reduce: Power */
			reduce(96), /* ~, reduce: Power */
			reduce(96), /* &, reduce: Power */
			reduce(96), /* .., reduce: Power */
			reduce(96), /* <<, reduce: Power */
			reduce(96), /* >>, reduce: Power */
			reduce(96), /* +, reduce: Power */
			reduce(96), /* -, reduce: Power */
			reduce(96), /* *, reduce: Power */
			reduce(96), /* /, reduce: Power */
			reduce(96), /* %, reduce: Power */
			reduce(96), /* //, reduce: Power */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			reduce(96), /* ], reduce: Power */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1259
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			reduce(99), /* ., reduce: Var */
			reduce(99), /* :, reduce: Var */
			reduce(99), /* or, reduce: Var */
			reduce(99), /* and, reduce: Var */
			reduce(99), /* <, reduce: Var */
			reduce(99), /* <=, reduce: Var */
			reduce(99), /* >, reduce: Var */
			reduce(99), /* >=, reduce: Var */
			reduce(99), /* ==, reduce: Var */
			reduce(99), /* ~=, reduce: Var */
			reduce(99), /* |, reduce: Var */
			reduce(99), /* ~, reduce: Var */
			reduce(99), /* &, reduce: Var */
			reduce(99), /* .., reduce: Var */
			reduce(99), /* <<, reduce: Var */
			reduce(99), /* >>, reduce: Var */
			reduce(99), /* +, reduce: Var */
			reduce(99), /* -, reduce: Var */
			reduce(99), /* *, reduce: Var */
			reduce(99), /* /, reduce: Var */
			reduce(99), /* %, reduce: Var */
			reduce(99), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(99), /* ^, reduce: Var */
			reduce(99), /* [, reduce: Var */
			reduce(99), /* ], reduce: Var */
			reduce(99), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(99), /* string, reduce: Var */
			reduce(99), /* {, reduce: Var */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1260
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(869), /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			shift(871), /* string */
			shift(873), /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1261
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			shift(851),  /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			shift(1619), /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1262
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(876),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(1620), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1263
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(115), /* ., reduce: Args */
			reduce(115), /* :, reduce: Args */
			reduce(115), /* or, reduce: Args */
			reduce(115), /* and, reduce: Args */
			reduce(115), /* <, reduce: Args */
			reduce(115), /* <=, reduce: Args */
			reduce(115), /* >, reduce: Args */
			reduce(115), /* >=, reduce: Args */
			reduce(115), /* ==, reduce: Args */
			reduce(115), /* ~=, reduce: Args */
			reduce(115), /* |, reduce: Args */
			reduce(115), /* ~, reduce: Args */
			reduce(115), /* &, reduce: Args */
			reduce(115), /* .., reduce: Args */
			reduce(115), /* <<, reduce: Args */
			reduce(115), /* >>, reduce: Args */
			reduce(115), /* +, reduce: Args */
			reduce(115), /* -, reduce: Args */
			reduce(115), /* *, reduce: Args */
			reduce(115), /* /, reduce: Args */
			reduce(115), /* %, reduce: Args */
			reduce(115), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(115), /* ^, reduce: Args */
			reduce(115), /* [, reduce: Args */
			reduce(115), /* ], reduce: Args */
			reduce(115), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(115), /* string, reduce: Args */
			reduce(115), /* {, reduce: Args */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1264
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			shift(569),  /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(570),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			shift(1621), /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1265
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(102), /* ., reduce: PrefixExp */
			reduce(102), /* :, reduce: PrefixExp */
			reduce(102), /* or, reduce: PrefixExp */
			reduce(102), /* and, reduce: PrefixExp */
			reduce(102), /* <, reduce: PrefixExp */
			reduce(102), /* <=, reduce: PrefixExp */
			reduce(102), /* >, reduce: PrefixExp */
			reduce(102), /* >=, reduce: PrefixExp */
			reduce(102), /* ==, reduce: PrefixExp */
			reduce(102), /* ~=, reduce: PrefixExp */
			reduce(102), /* |, reduce: PrefixExp */
			reduce(102), /* ~, reduce: PrefixExp */
			reduce(102), /* &, reduce: PrefixExp */
			reduce(102), /* .., reduce: PrefixExp */
			reduce(102), /* <<, reduce: PrefixExp */
			reduce(102), /* >>, reduce: PrefixExp */
			reduce(102), /* +, reduce: PrefixExp */
			reduce(102), /* -, reduce: PrefixExp */
			reduce(102), /* *, reduce: PrefixExp */
			reduce(102), /* /, reduce: PrefixExp */
			reduce(102), /* %, reduce: PrefixExp */
			reduce(102), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(102), /* ^, reduce: PrefixExp */
			reduce(102), /* [, reduce: PrefixExp */
			reduce(102), /* ], reduce: PrefixExp */
			reduce(102), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(102), /* string, reduce: PrefixExp */
			reduce(102), /* {, reduce: PrefixExp */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1266
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(125), /* or, reduce: TableConstructor */
			reduce(125), /* and, reduce: TableConstructor */
			reduce(125), /* <, reduce: TableConstructor */
			reduce(125), /* <=, reduce: TableConstructor */
			reduce(125), /* >, reduce: TableConstructor */
			reduce(125), /* >=, reduce: TableConstructor */
			reduce(125), /* ==, reduce: TableConstructor */
			reduce(125), /* ~=, reduce: TableConstructor */
			reduce(125), /* |, reduce: TableConstructor */
			reduce(125), /* ~, reduce: TableConstructor */
			reduce(125), /* &, reduce: TableConstructor */
			reduce(125), /* .., reduce: TableConstructor */
			reduce(125), /* <<, reduce: TableConstructor */
			reduce(125), /* >>, reduce: TableConstructor */
			reduce(125), /* +, reduce: TableConstructor */
			reduce(125), /* -, reduce: TableConstructor */
			reduce(125), /* *, reduce: TableConstructor */
			reduce(125), /* /, reduce: TableConstructor */
			reduce(125), /* %, reduce: TableConstructor */
			reduce(125), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(125), /* ^, reduce: TableConstructor */
			nil,         /* [ */
			reduce(125), /* ], reduce: TableConstructor */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1267
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(238),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			shift(254),  /* [ */
			nil,         /* ] */
			shift(255),  /* ( */
			nil,         /* ) */
			shift(256),  /* nil */
			shift(257),  /* true */
			shift(258),  /* false */
			shift(259),  /* ... */
			shift(260),  /* numdec */
			shift(261),  /* numhex */
			shift(262),  /* string */
			shift(265),  /* { */
			shift(1623), /* } */
			shift(268),  /* ident */
		},
	},
	actionRow{ // S1268
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(54), /* ,, reduce: ExpList */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			shift(878), /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			reduce(54), /* ), reduce: ExpList */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1269
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(56), /* ,, reduce: Exp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(56), /* or, reduce: Exp */
			shift(881), /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			reduce(56), /* ), reduce: Exp */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1270
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(1624), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1271
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(58), /* ,, reduce: AndExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(58), /* or, reduce: AndExp */
			reduce(58), /* and, reduce: AndExp */
			shift(203), /* < */
			shift(204), /* <= */
			shift(205), /* > */
			shift(206), /* >= */
			shift(207), /* == */
			shift(208), /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			reduce(58), /* ), reduce: AndExp */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1272
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(66), /* ,, reduce: CompExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(66), /* or, reduce: CompExp */
			reduce(66), /* and, reduce: CompExp */
			reduce(66), /* <, reduce: CompExp */
			reduce(66), /* <=, reduce: CompExp */
			reduce(66), /* >, reduce: CompExp */
			reduce(66), /* >=, reduce: CompExp */
			reduce(66), /* ==, reduce: CompExp */
			reduce(66), /* ~=, reduce: CompExp */
			shift(883), /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			reduce(66), /* ), reduce: CompExp */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1273
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(68), /* ,, reduce: BitOrExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(68), /* or, reduce: BitOrExp */
			reduce(68), /* and, reduce: BitOrExp */
			reduce(68), /* <, reduce: BitOrExp */
			reduce(68), /* <=, reduce: BitOrExp */
			reduce(68), /* >, reduce: BitOrExp */
			reduce(68), /* >=, reduce: BitOrExp */
			reduce(68), /* ==, reduce: BitOrExp */
			reduce(68), /* ~=, reduce: BitOrExp */
			reduce(68), /* |, reduce: BitOrExp */
			shift(884), /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			reduce(68), /* ), reduce: BitOrExp */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1274
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(70), /* ,, reduce: BitXorExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(70), /* or, reduce: BitXorExp */
			reduce(70), /* and, reduce: BitXorExp */
			reduce(70), /* <, reduce: BitXorExp */
			reduce(70), /* <=, reduce: BitXorExp */
			reduce(70), /* >, reduce: BitXorExp */
			reduce(70), /* >=, reduce: BitXorExp */
			reduce(70), /* ==, reduce: BitXorExp */
			reduce(70), /* ~=, reduce: BitXorExp */
			reduce(70), /* |, reduce: BitXorExp */
			reduce(70), /* ~, reduce: BitXorExp */
			shift(885), /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			reduce(70), /* ), reduce: BitXorExp */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1275
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(72), /* ,, reduce: BitAndExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(72), /* or, reduce: BitAndExp */
			reduce(72), /* and, reduce: BitAndExp */
			reduce(72), /* <, reduce: BitAndExp */
			reduce(72), /* <=, reduce: BitAndExp */
			reduce(72), /* >, reduce: BitAndExp */
			reduce(72), /* >=, reduce: BitAndExp */
			reduce(72), /* ==, reduce: BitAndExp */
			reduce(72), /* ~=, reduce: BitAndExp */
			reduce(72), /* |, reduce: BitAndExp */
			reduce(72), /* ~, reduce: BitAndExp */
			reduce(72), /* &, reduce: BitAndExp */
			shift(886), /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			reduce(72), /* ), reduce: BitAndExp */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1276
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(74), /* ,, reduce: ConcatExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(74), /* or, reduce: ConcatExp */
			reduce(74), /* and, reduce: ConcatExp */
			reduce(74), /* <, reduce: ConcatExp */
			reduce(74), /* <=, reduce: ConcatExp */
			reduce(74), /* >, reduce: ConcatExp */
			reduce(74), /* >=, reduce: ConcatExp */
			reduce(74), /* ==, reduce: ConcatExp */
			reduce(74), /* ~=, reduce: ConcatExp */
			reduce(74), /* |, reduce: ConcatExp */
			reduce(74), /* ~, reduce: ConcatExp */
			reduce(74), /* &, reduce: ConcatExp */
			reduce(74), /* .., reduce: ConcatExp */
			shift(214), /* << */
			shift(215), /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			reduce(74), /* ), reduce: ConcatExp */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1277
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(78), /* ,, reduce: ShiftExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(78), /* or, reduce: ShiftExp */
			reduce(78), /* and, reduce: ShiftExp */
			reduce(78), /* <, reduce: ShiftExp */
			reduce(78), /* <=, reduce: ShiftExp */
			reduce(78), /* >, reduce: ShiftExp */
			reduce(78), /* >=, reduce: ShiftExp */
			reduce(78), /* ==, reduce: ShiftExp */
			reduce(78), /* ~=, reduce: ShiftExp */
			reduce(78), /* |, reduce: ShiftExp */
			reduce(78), /* ~, reduce: ShiftExp */
			reduce(78), /* &, reduce: ShiftExp */
			reduce(78), /* .., reduce: ShiftExp */
			reduce(78), /* <<, reduce: ShiftExp */
			reduce(78), /* >>, reduce: ShiftExp */
			shift(217), /* + */
			shift(218), /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			reduce(78), /* ), reduce: ShiftExp */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1278
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(82), /* ,, reduce: Sum */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(82), /* or, reduce: Sum */
			reduce(82), /* and, reduce: Sum */
			reduce(82), /* <, reduce: Sum */
			reduce(82), /* <=, reduce: Sum */
			reduce(82), /* >, reduce: Sum */
			reduce(82), /* >=, reduce: Sum */
			reduce(82), /* ==, reduce: Sum */
			reduce(82), /* ~=, reduce: Sum */
			reduce(82), /* |, reduce: Sum */
			reduce(82), /* ~, reduce: Sum */
			reduce(82), /* &, reduce: Sum */
			reduce(82), /* .., reduce: Sum */
			reduce(82), /* <<, reduce: Sum */
			reduce(82), /* >>, reduce: Sum */
			reduce(82), /* +, reduce: Sum */
			reduce(82), /* -, reduce: Sum */
			shift(220), /* * */
			shift(221), /* / */
			shift(222), /* % */
			shift(223), /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			reduce(82), /* ), reduce: Sum */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1279
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(88), /* ,, reduce: Term */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(88), /* or, reduce: Term */
			reduce(88), /* and, reduce: Term */
			reduce(88), /* <, reduce: Term */
			reduce(88), /* <=, reduce: Term */
			reduce(88), /* >, reduce: Term */
			reduce(88), /* >=, reduce: Term */
			reduce(88), /* ==, reduce: Term */
			reduce(88), /* ~=, reduce: Term */
			reduce(88), /* |, reduce: Term */
			reduce(88), /* ~, reduce: Term */
			reduce(88), /* &, reduce: Term */
			reduce(88), /* .., reduce: Term */
			reduce(88), /* <<, reduce: Term */
			reduce(88), /* >>, reduce: Term */
			reduce(88), /* +, reduce: Term */
			reduce(88), /* -, reduce: Term */
			reduce(88), /* *, reduce: Term */
			reduce(88), /* /, reduce: Term */
			reduce(88), /* %, reduce: Term */
			reduce(88), /* //, reduce: Term */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			reduce(88), /* ), reduce: Term */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1280
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(96), /* ,, reduce: Power */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(96), /* or, reduce: Power */
			reduce(96), /* and, reduce: Power */
			reduce(96), /* <, reduce: Power */
			reduce(96), /* <=, reduce: Power */
			reduce(96), /* >, reduce: Power */
			reduce(96), /* >=, reduce: Power */
			reduce(96), /* ==, reduce: Power */
			reduce(96), /* ~=, reduce: Power */
			reduce(96), /* |, reduce: Power */
			reduce(96), /* ~, reduce: Power */
			reduce(96), /* &, reduce: Power */
			reduce(96), /* .., reduce: Power */
			reduce(96), /* <<, reduce: Power */
			reduce(96), /* >>, reduce: Power */
			reduce(96), /* +, reduce: Power */
			reduce(96), /* -, reduce: Power */
			reduce(96), /* *, reduce: Power */
			reduce(96), /* /, reduce: Power */
			reduce(96), /* %, reduce: Power */
			reduce(96), /* //, reduce: Power */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			reduce(96), /* ), reduce: Power */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1281
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(99), /* ,, reduce: Var */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			reduce(99), /* ., reduce: Var */
			reduce(99), /* :, reduce: Var */
			reduce(99), /* or, reduce: Var */
			reduce(99), /* and, reduce: Var */
			reduce(99), /* <, reduce: Var */
			reduce(99), /* <=, reduce: Var */
			reduce(99), /* >, reduce: Var */
			reduce(99), /* >=, reduce: Var */
			reduce(99), /* ==, reduce: Var */
			reduce(99), /* ~=, reduce: Var */
			reduce(99), /* |, reduce: Var */
			reduce(99), /* ~, reduce: Var */
			reduce(99), /* &, reduce: Var */
			reduce(99), /* .., reduce: Var */
			reduce(99), /* <<, reduce: Var */
			reduce(99), /* >>, reduce: Var */
			reduce(99), /* +, reduce: Var */
			reduce(99), /* -, reduce: Var */
			reduce(99), /* *, reduce: Var */
			reduce(99), /* /, reduce: Var */
			reduce(99), /* %, reduce: Var */
			reduce(99), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(99), /* ^, reduce: Var */
			reduce(99), /* [, reduce: Var */
			nil,        /* ] */
			reduce(99), /* (, reduce: Var */
			reduce(99), /* ), reduce: Var */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(99), /* string, reduce: Var */
			reduce(99), /* {, reduce: Var */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1282
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(895), /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			shift(897), /* string */
			shift(899), /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1283
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			shift(851),  /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			shift(1626), /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1284
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(876),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(1627), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1285
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(115), /* ,, reduce: Args */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(115), /* ., reduce: Args */
			reduce(115), /* :, reduce: Args */
			reduce(115), /* or, reduce: Args */
			reduce(115), /* and, reduce: Args */
			reduce(115), /* <, reduce: Args */
			reduce(115), /* <=, reduce: Args */
			reduce(115), /* >, reduce: Args */
			reduce(115), /* >=, reduce: Args */
			reduce(115), /* ==, reduce: Args */
			reduce(115), /* ~=, reduce: Args */
			reduce(115), /* |, reduce: Args */
			reduce(115), /* ~, reduce: Args */
			reduce(115), /* &, reduce: Args */
			reduce(115), /* .., reduce: Args */
			reduce(115), /* <<, reduce: Args */
			reduce(115), /* >>, reduce: Args */
			reduce(115), /* +, reduce: Args */
			reduce(115), /* -, reduce: Args */
			reduce(115), /* *, reduce: Args */
			reduce(115), /* /, reduce: Args */
			reduce(115), /* %, reduce: Args */
			reduce(115), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(115), /* ^, reduce: Args */
			reduce(115), /* [, reduce: Args */
			nil,         /* ] */
			reduce(115), /* (, reduce: Args */
			reduce(115), /* ), reduce: Args */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(115), /* string, reduce: Args */
			reduce(115), /* {, reduce: Args */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1286
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			shift(569),  /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(570),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			shift(1628), /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1287
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(102), /* ,, reduce: PrefixExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(102), /* ., reduce: PrefixExp */
			reduce(102), /* :, reduce: PrefixExp */
			reduce(102), /* or, reduce: PrefixExp */
			reduce(102), /* and, reduce: PrefixExp */
			reduce(102), /* <, reduce: PrefixExp */
			reduce(102), /* <=, reduce: PrefixExp */
			reduce(102), /* >, reduce: PrefixExp */
			reduce(102), /* >=, reduce: PrefixExp */
			reduce(102), /* ==, reduce: PrefixExp */
			reduce(102), /* ~=, reduce: PrefixExp */
			reduce(102), /* |, reduce: PrefixExp */
			reduce(102), /* ~, reduce: PrefixExp */
			reduce(102), /* &, reduce: PrefixExp */
			reduce(102), /* .., reduce: PrefixExp */
			reduce(102), /* <<, reduce: PrefixExp */
			reduce(102), /* >>, reduce: PrefixExp */
			reduce(102), /* +, reduce: PrefixExp */
			reduce(102), /* -, reduce: PrefixExp */
			reduce(102), /* *, reduce: PrefixExp */
			reduce(102), /* /, reduce: PrefixExp */
			reduce(102), /* %, reduce: PrefixExp */
			reduce(102), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(102), /* ^, reduce: PrefixExp */
			reduce(102), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(102), /* (, reduce: PrefixExp */
			reduce(102), /* ), reduce: PrefixExp */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(102), /* string, reduce: PrefixExp */
			reduce(102), /* {, reduce: PrefixExp */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1288
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(125), /* ,, reduce: TableConstructor */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(125), /* or, reduce: TableConstructor */
			reduce(125), /* and, reduce: TableConstructor */
			reduce(125), /* <, reduce: TableConstructor */
			reduce(125), /* <=, reduce: TableConstructor */
			reduce(125), /* >, reduce: TableConstructor */
			reduce(125), /* >=, reduce: TableConstructor */
			reduce(125), /* ==, reduce: TableConstructor */
			reduce(125), /* ~=, reduce: TableConstructor */
			reduce(125), /* |, reduce: TableConstructor */
			reduce(125), /* ~, reduce: TableConstructor */
			reduce(125), /* &, reduce: TableConstructor */
			reduce(125), /* .., reduce: TableConstructor */
			reduce(125), /* <<, reduce: TableConstructor */
			reduce(125), /* >>, reduce: TableConstructor */
			reduce(125), /* +, reduce: TableConstructor */
			reduce(125), /* -, reduce: TableConstructor */
			reduce(125), /* *, reduce: TableConstructor */
			reduce(125), /* /, reduce: TableConstructor */
			reduce(125), /* %, reduce: TableConstructor */
			reduce(125), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(125), /* ^, reduce: TableConstructor */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(125), /* ), reduce: TableConstructor */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1289
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(238),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			shift(254),  /* [ */
			nil,         /* ] */
			shift(255),  /* ( */
			nil,         /* ) */
			shift(256),  /* nil */
			shift(257),  /* true */
			shift(258),  /* false */
			shift(259),  /* ... */
			shift(260),  /* numdec */
			shift(261),  /* numhex */
			shift(262),  /* string */
			shift(265),  /* { */
			shift(1630), /* } */
			shift(268),  /* ident */
		},
	},
	actionRow{ // S1290
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(126), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(126), /* ., reduce: TableConstructor */
			reduce(126), /* :, reduce: TableConstructor */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			reduce(126), /* [, reduce: TableConstructor */
			nil,         /* ] */
			reduce(126), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(126), /* string, reduce: TableConstructor */
			reduce(126), /* {, reduce: TableConstructor */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1291
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S1292
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(104), /* ., reduce: FunctionCall */
			reduce(104), /* :, reduce: FunctionCall */
			reduce(104), /* or, reduce: FunctionCall */
			reduce(104), /* and, reduce: FunctionCall */
			reduce(104), /* <, reduce: FunctionCall */
			reduce(104), /* <=, reduce: FunctionCall */
			reduce(104), /* >, reduce: FunctionCall */
			reduce(104), /* >=, reduce: FunctionCall */
			reduce(104), /* ==, reduce: FunctionCall */
			reduce(104), /* ~=, reduce: FunctionCall */
			reduce(104), /* |, reduce: FunctionCall */
			reduce(104), /* ~, reduce: FunctionCall */
			reduce(104), /* &, reduce: FunctionCall */
			reduce(104), /* .., reduce: FunctionCall */
			reduce(104), /* <<, reduce: FunctionCall */
			reduce(104), /* >>, reduce: FunctionCall */
			reduce(104), /* +, reduce: FunctionCall */
			reduce(104), /* -, reduce: FunctionCall */
			reduce(104), /* *, reduce: FunctionCall */
			reduce(104), /* /, reduce: FunctionCall */
			reduce(104), /* %, reduce: FunctionCall */
			reduce(104), /* //, reduce: FunctionCall */
			nil,         /* not */
			nil,         /* # */
			reduce(104), /* ^, reduce: FunctionCall */
			reduce(104), /* [, reduce: FunctionCall */
			nil,         /* ] */
			reduce(104), /* (, reduce: FunctionCall */
			reduce(104), /* ), reduce: FunctionCall */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(104), /* string, reduce: FunctionCall */
			reduce(104), /* {, reduce: FunctionCall */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1293
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			reduce(98), /* ., reduce: Var */
			reduce(98), /* :, reduce: Var */
			reduce(98), /* or, reduce: Var */
			reduce(98), /* and, reduce: Var */
			reduce(98), /* <, reduce: Var */
			reduce(98), /* <=, reduce: Var */
			reduce(98), /* >, reduce: Var */
			reduce(98), /* >=, reduce: Var */
			reduce(98), /* ==, reduce: Var */
			reduce(98), /* ~=, reduce: Var */
			reduce(98), /* |, reduce: Var */
			reduce(98), /* ~, reduce: Var */
			reduce(98), /* &, reduce: Var */
			reduce(98), /* .., reduce: Var */
			reduce(98), /* <<, reduce: Var */
			reduce(98), /* >>, reduce: Var */
			reduce(98), /* +, reduce: Var */
			reduce(98), /* -, reduce: Var */
			reduce(98), /* *, reduce: Var */
			reduce(98), /* /, reduce: Var */
			reduce(98), /* %, reduce: Var */
			reduce(98), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(98), /* ^, reduce: Var */
			reduce(98), /* [, reduce: Var */
			nil,        /* ] */
			reduce(98), /* (, reduce: Var */
			reduce(98), /* ), reduce: Var */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(98), /* string, reduce: Var */
			reduce(98), /* {, reduce: Var */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1294
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(116), /* ., reduce: Args */
			reduce(116), /* :, reduce: Args */
			reduce(116), /* or, reduce: Args */
			reduce(116), /* and, reduce: Args */
			reduce(116), /* <, reduce: Args */
			reduce(116), /* <=, reduce: Args */
			reduce(116), /* >, reduce: Args */
			reduce(116), /* >=, reduce: Args */
			reduce(116), /* ==, reduce: Args */
			reduce(116), /* ~=, reduce: Args */
			reduce(116), /* |, reduce: Args */
			reduce(116), /* ~, reduce: Args */
			reduce(116), /* &, reduce: Args */
			reduce(116), /* .., reduce: Args */
			reduce(116), /* <<, reduce: Args */
			reduce(116), /* >>, reduce: Args */
			reduce(116), /* +, reduce: Args */
			reduce(116), /* -, reduce: Args */
			reduce(116), /* *, reduce: Args */
			reduce(116), /* /, reduce: Args */
			reduce(116), /* %, reduce: Args */
			reduce(116), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(116), /* ^, reduce: Args */
			reduce(116), /* [, reduce: Args */
			nil,         /* ] */
			reduce(116), /* (, reduce: Args */
			reduce(116), /* ), reduce: Args */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(116), /* string, reduce: Args */
			reduce(116), /* {, reduce: Args */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1295
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(125), /* ., reduce: TableConstructor */
			reduce(125), /* :, reduce: TableConstructor */
			reduce(125), /* or, reduce: TableConstructor */
			reduce(125), /* and, reduce: TableConstructor */
			reduce(125), /* <, reduce: TableConstructor */
			reduce(125), /* <=, reduce: TableConstructor */
			reduce(125), /* >, reduce: TableConstructor */
			reduce(125), /* >=, reduce: TableConstructor */
			reduce(125), /* ==, reduce: TableConstructor */
			reduce(125), /* ~=, reduce: TableConstructor */
			reduce(125), /* |, reduce: TableConstructor */
			reduce(125), /* ~, reduce: TableConstructor */
			reduce(125), /* &, reduce: TableConstructor */
			reduce(125), /* .., reduce: TableConstructor */
			reduce(125), /* <<, reduce: TableConstructor */
			reduce(125), /* >>, reduce: TableConstructor */
			reduce(125), /* +, reduce: TableConstructor */
			reduce(125), /* -, reduce: TableConstructor */
			reduce(125), /* *, reduce: TableConstructor */
			reduce(125), /* /, reduce: TableConstructor */
			reduce(125), /* %, reduce: TableConstructor */
			reduce(125), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(125), /* ^, reduce: TableConstructor */
			reduce(125), /* [, reduce: TableConstructor */
			nil,         /* ] */
			reduce(125), /* (, reduce: TableConstructor */
			reduce(125), /* ), reduce: TableConstructor */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(125), /* string, reduce: TableConstructor */
			reduce(125), /* {, reduce: TableConstructor */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1296
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(238),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			shift(254),  /* [ */
			nil,         /* ] */
			shift(255),  /* ( */
			nil,         /* ) */
			shift(256),  /* nil */
			shift(257),  /* true */
			shift(258),  /* false */
			shift(259),  /* ... */
			shift(260),  /* numdec */
			shift(261),  /* numhex */
			shift(262),  /* string */
			shift(265),  /* { */
			shift(1632), /* } */
			shift(268),  /* ident */
		},
	},
	actionRow{ // S1297
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(126), /* or, reduce: TableConstructor */
			reduce(126), /* and, reduce: TableConstructor */
			reduce(126), /* <, reduce: TableConstructor */
			reduce(126), /* <=, reduce: TableConstructor */
			reduce(126), /* >, reduce: TableConstructor */
			reduce(126), /* >=, reduce: TableConstructor */
			reduce(126), /* ==, reduce: TableConstructor */
			reduce(126), /* ~=, reduce: TableConstructor */
			reduce(126), /* |, reduce: TableConstructor */
			reduce(126), /* ~, reduce: TableConstructor */
			reduce(126), /* &, reduce: TableConstructor */
			reduce(126), /* .., reduce: TableConstructor */
			reduce(126), /* <<, reduce: TableConstructor */
			reduce(126), /* >>, reduce: TableConstructor */
			reduce(126), /* +, reduce: TableConstructor */
			reduce(126), /* -, reduce: TableConstructor */
			reduce(126), /* *, reduce: TableConstructor */
			reduce(126), /* /, reduce: TableConstructor */
			reduce(126), /* %, reduce: TableConstructor */
			reduce(126), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(126), /* ^, reduce: TableConstructor */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(126), /* ), reduce: TableConstructor */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1298
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(52), /* ,, reduce: NameList */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			reduce(52), /* ), reduce: NameList */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1299
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(121), /* ), reduce: ParList */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1300
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(1633), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1301
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(126), /* $, reduce: TableConstructor */
			nil,         /* return */
			reduce(126), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(126), /* ,, reduce: TableConstructor */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(126), /* ., reduce: TableConstructor */
			reduce(126), /* :, reduce: TableConstructor */
			reduce(126), /* or, reduce: TableConstructor */
			reduce(126), /* and, reduce: TableConstructor */
			reduce(126), /* <, reduce: TableConstructor */
			reduce(126), /* <=, reduce: TableConstructor */
			reduce(126), /* >, reduce: TableConstructor */
			reduce(126), /* >=, reduce: TableConstructor */
			reduce(126), /* ==, reduce: TableConstructor */
			reduce(126), /* ~=, reduce: TableConstructor */
			reduce(126), /* |, reduce: TableConstructor */
			reduce(126), /* ~, reduce: TableConstructor */
			reduce(126), /* &, reduce: TableConstructor */
			reduce(126), /* .., reduce: TableConstructor */
			reduce(126), /* <<, reduce: TableConstructor */
			reduce(126), /* >>, reduce: TableConstructor */
			reduce(126), /* +, reduce: TableConstructor */
			reduce(126), /* -, reduce: TableConstructor */
			reduce(126), /* *, reduce: TableConstructor */
			reduce(126), /* /, reduce: TableConstructor */
			reduce(126), /* %, reduce: TableConstructor */
			reduce(126), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(126), /* ^, reduce: TableConstructor */
			reduce(126), /* [, reduce: TableConstructor */
			nil,         /* ] */
			reduce(126), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(126), /* string, reduce: TableConstructor */
			reduce(126), /* {, reduce: TableConstructor */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1302
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S1303
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(104), /* ;, reduce: FunctionCall */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(104), /* ,, reduce: FunctionCall */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(104), /* ., reduce: FunctionCall */
			reduce(104), /* :, reduce: FunctionCall */
			reduce(104), /* or, reduce: FunctionCall */
			reduce(104), /* and, reduce: FunctionCall */
			reduce(104), /* <, reduce: FunctionCall */
			reduce(104), /* <=, reduce: FunctionCall */
			reduce(104), /* >, reduce: FunctionCall */
			reduce(104), /* >=, reduce: FunctionCall */
			reduce(104), /* ==, reduce: FunctionCall */
			reduce(104), /* ~=, reduce: FunctionCall */
			reduce(104), /* |, reduce: FunctionCall */
			reduce(104), /* ~, reduce: FunctionCall */
			reduce(104), /* &, reduce: FunctionCall */
			reduce(104), /* .., reduce: FunctionCall */
			reduce(104), /* <<, reduce: FunctionCall */
			reduce(104), /* >>, reduce: FunctionCall */
			reduce(104), /* +, reduce: FunctionCall */
			reduce(104), /* -, reduce: FunctionCall */
			reduce(104), /* *, reduce: FunctionCall */
			reduce(104), /* /, reduce: FunctionCall */
			reduce(104), /* %, reduce: FunctionCall */
			reduce(104), /* //, reduce: FunctionCall */
			nil,         /* not */
			nil,         /* # */
			reduce(104), /* ^, reduce: FunctionCall */
			reduce(104), /* [, reduce: FunctionCall */
			nil,         /* ] */
			reduce(104), /* (, reduce: FunctionCall */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(104), /* string, reduce: FunctionCall */
			reduce(104), /* {, reduce: FunctionCall */
			reduce(104), /* }, reduce: FunctionCall */
			nil,         /* ident */
		},
	},
	actionRow{ // S1304
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(98), /* ;, reduce: Var */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(98), /* ,, reduce: Var */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			reduce(98), /* ., reduce: Var */
			reduce(98), /* :, reduce: Var */
			reduce(98), /* or, reduce: Var */
			reduce(98), /* and, reduce: Var */
			reduce(98), /* <, reduce: Var */
			reduce(98), /* <=, reduce: Var */
			reduce(98), /* >, reduce: Var */
			reduce(98), /* >=, reduce: Var */
			reduce(98), /* ==, reduce: Var */
			reduce(98), /* ~=, reduce: Var */
			reduce(98), /* |, reduce: Var */
			reduce(98), /* ~, reduce: Var */
			reduce(98), /* &, reduce: Var */
			reduce(98), /* .., reduce: Var */
			reduce(98), /* <<, reduce: Var */
			reduce(98), /* >>, reduce: Var */
			reduce(98), /* +, reduce: Var */
			reduce(98), /* -, reduce: Var */
			reduce(98), /* *, reduce: Var */
			reduce(98), /* /, reduce: Var */
			reduce(98), /* %, reduce: Var */
			reduce(98), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(98), /* ^, reduce: Var */
			reduce(98), /* [, reduce: Var */
			nil,        /* ] */
			reduce(98), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(98), /* string, reduce: Var */
			reduce(98), /* {, reduce: Var */
			reduce(98), /* }, reduce: Var */
			nil,        /* ident */
		},
	},
	actionRow{ // S1305
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(116), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(116), /* ,, reduce: Args */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(116), /* ., reduce: Args */
			reduce(116), /* :, reduce: Args */
			reduce(116), /* or, reduce: Args */
			reduce(116), /* and, reduce: Args */
			reduce(116), /* <, reduce: Args */
			reduce(116), /* <=, reduce: Args */
			reduce(116), /* >, reduce: Args */
			reduce(116), /* >=, reduce: Args */
			reduce(116), /* ==, reduce: Args */
			reduce(116), /* ~=, reduce: Args */
			reduce(116), /* |, reduce: Args */
			reduce(116), /* ~, reduce: Args */
			reduce(116), /* &, reduce: Args */
			reduce(116), /* .., reduce: Args */
			reduce(116), /* <<, reduce: Args */
			reduce(116), /* >>, reduce: Args */
			reduce(116), /* +, reduce: Args */
			reduce(116), /* -, reduce: Args */
			reduce(116), /* *, reduce: Args */
			reduce(116), /* /, reduce: Args */
			reduce(116), /* %, reduce: Args */
			reduce(116), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(116), /* ^, reduce: Args */
			reduce(116), /* [, reduce: Args */
			nil,         /* ] */
			reduce(116), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(116), /* string, reduce: Args */
			reduce(116), /* {, reduce: Args */
			reduce(116), /* }, reduce: Args */
			nil,         /* ident */
		},
	},
	actionRow{ // S1306
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(125), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(125), /* ,, reduce: TableConstructor */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(125), /* ., reduce: TableConstructor */
			reduce(125), /* :, reduce: TableConstructor */
			reduce(125), /* or, reduce: TableConstructor */
			reduce(125), /* and, reduce: TableConstructor */
			reduce(125), /* <, reduce: TableConstructor */
			reduce(125), /* <=, reduce: TableConstructor */
			reduce(125), /* >, reduce: TableConstructor */
			reduce(125), /* >=, reduce: TableConstructor */
			reduce(125), /* ==, reduce: TableConstructor */
			reduce(125), /* ~=, reduce: TableConstructor */
			reduce(125), /* |, reduce: TableConstructor */
			reduce(125), /* ~, reduce: TableConstructor */
			reduce(125), /* &, reduce: TableConstructor */
			reduce(125), /* .., reduce: TableConstructor */
			reduce(125), /* <<, reduce: TableConstructor */
			reduce(125), /* >>, reduce: TableConstructor */
			reduce(125), /* +, reduce: TableConstructor */
			reduce(125), /* -, reduce: TableConstructor */
			reduce(125), /* *, reduce: TableConstructor */
			reduce(125), /* /, reduce: TableConstructor */
			reduce(125), /* %, reduce: TableConstructor */
			reduce(125), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(125), /* ^, reduce: TableConstructor */
			reduce(125), /* [, reduce: TableConstructor */
			nil,         /* ] */
			reduce(125), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(125), /* string, reduce: TableConstructor */
			reduce(125), /* {, reduce: TableConstructor */
			reduce(125), /* }, reduce: TableConstructor */
			nil,         /* ident */
		},
	},
	actionRow{ // S1307
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(238),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			shift(254),  /* [ */
			nil,         /* ] */
			shift(255),  /* ( */
			nil,         /* ) */
			shift(256),  /* nil */
			shift(257),  /* true */
			shift(258),  /* false */
			shift(259),  /* ... */
			shift(260),  /* numdec */
			shift(261),  /* numhex */
			shift(262),  /* string */
			shift(265),  /* { */
			shift(1635), /* } */
			shift(268),  /* ident */
		},
	},
	actionRow{ // S1308
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(556), /* ident */
		},
	},
	actionRow{ // S1309
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(126), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(126), /* ,, reduce: TableConstructor */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(126), /* or, reduce: TableConstructor */
			reduce(126), /* and, reduce: TableConstructor */
			reduce(126), /* <, reduce: TableConstructor */
			reduce(126), /* <=, reduce: TableConstructor */
			reduce(126), /* >, reduce: TableConstructor */
			reduce(126), /* >=, reduce: TableConstructor */
			reduce(126), /* ==, reduce: TableConstructor */
			reduce(126), /* ~=, reduce: TableConstructor */
			reduce(126), /* |, reduce: TableConstructor */
			reduce(126), /* ~, reduce: TableConstructor */
			reduce(126), /* &, reduce: TableConstructor */
			reduce(126), /* .., reduce: TableConstructor */
			reduce(126), /* <<, reduce: TableConstructor */
			reduce(126), /* >>, reduce: TableConstructor */
			reduce(126), /* +, reduce: TableConstructor */
			reduce(126), /* -, reduce: TableConstructor */
			reduce(126), /* *, reduce: TableConstructor */
			reduce(126), /* /, reduce: TableConstructor */
			reduce(126), /* %, reduce: TableConstructor */
			reduce(126), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(126), /* ^, reduce: TableConstructor */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			reduce(126), /* }, reduce: TableConstructor */
			nil,         /* ident */
		},
	},
	actionRow{ // S1310
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S1311
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(104), /* $, reduce: FunctionCall */
			reduce(104), /* return, reduce: FunctionCall */
			reduce(104), /* ;, reduce: FunctionCall */
			nil,         /* empty */
			nil,         /* = */
			reduce(104), /* break, reduce: FunctionCall */
			reduce(104), /* goto, reduce: FunctionCall */
			reduce(104), /* do, reduce: FunctionCall */
			nil,         /* end */
			reduce(104), /* while, reduce: FunctionCall */
			reduce(104), /* repeat, reduce: FunctionCall */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(104), /* if, reduce: FunctionCall */
			reduce(104), /* ,, reduce: FunctionCall */
			reduce(104), /* for, reduce: FunctionCall */
			nil,         /* in */
			reduce(104), /* function, reduce: FunctionCall */
			reduce(104), /* local, reduce: FunctionCall */
			reduce(104), /* ::, reduce: FunctionCall */
			reduce(104), /* ., reduce: FunctionCall */
			reduce(104), /* :, reduce: FunctionCall */
			reduce(104), /* or, reduce: FunctionCall */
			reduce(104), /* and, reduce: FunctionCall */
			reduce(104), /* <, reduce: FunctionCall */
			reduce(104), /* <=, reduce: FunctionCall */
			reduce(104), /* >, reduce: FunctionCall */
			reduce(104), /* >=, reduce: FunctionCall */
			reduce(104), /* ==, reduce: FunctionCall */
			reduce(104), /* ~=, reduce: FunctionCall */
			reduce(104), /* |, reduce: FunctionCall */
			reduce(104), /* ~, reduce: FunctionCall */
			reduce(104), /* &, reduce: FunctionCall */
			reduce(104), /* .., reduce: FunctionCall */
			reduce(104), /* <<, reduce: FunctionCall */
			reduce(104), /* >>, reduce: FunctionCall */
			reduce(104), /* +, reduce: FunctionCall */
			reduce(104), /* -, reduce: FunctionCall */
			reduce(104), /* *, reduce: FunctionCall */
			reduce(104), /* /, reduce: FunctionCall */
			reduce(104), /* %, reduce: FunctionCall */
			reduce(104), /* //, reduce: FunctionCall */
			nil,         /* not */
			nil,         /* # */
			reduce(104), /* ^, reduce: FunctionCall */
			reduce(104), /* [, reduce: FunctionCall */
			nil,         /* ] */
			reduce(104), /* (, reduce: FunctionCall */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(104), /* string, reduce: FunctionCall */
			reduce(104), /* {, reduce: FunctionCall */
			nil,         /* } */
			reduce(104), /* ident, reduce: FunctionCall */
		},
	},
	actionRow{ // S1312
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(98), /* $, reduce: Var */
			reduce(98), /* return, reduce: Var */
			reduce(98), /* ;, reduce: Var */
			nil,        /* empty */
			nil,        /* = */
			reduce(98), /* break, reduce: Var */
			reduce(98), /* goto, reduce: Var */
			reduce(98), /* do, reduce: Var */
			nil,        /* end */
			reduce(98), /* while, reduce: Var */
			reduce(98), /* repeat, reduce: Var */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(98), /* if, reduce: Var */
			reduce(98), /* ,, reduce: Var */
			reduce(98), /* for, reduce: Var */
			nil,        /* in */
			reduce(98), /* function, reduce: Var */
			reduce(98), /* local, reduce: Var */
			reduce(98), /* ::, reduce: Var */
			reduce(98), /* ., reduce: Var */
			reduce(98), /* :, reduce: Var */
			reduce(98), /* or, reduce: Var */
			reduce(98), /* and, reduce: Var */
			reduce(98), /* <, reduce: Var */
			reduce(98), /* <=, reduce: Var */
			reduce(98), /* >, reduce: Var */
			reduce(98), /* >=, reduce: Var */
			reduce(98), /* ==, reduce: Var */
			reduce(98), /* ~=, reduce: Var */
			reduce(98), /* |, reduce: Var */
			reduce(98), /* ~, reduce: Var */
			reduce(98), /* &, reduce: Var */
			reduce(98), /* .., reduce: Var */
			reduce(98), /* <<, reduce: Var */
			reduce(98), /* >>, reduce: Var */
			reduce(98), /* +, reduce: Var */
			reduce(98), /* -, reduce: Var */
			reduce(98), /* *, reduce: Var */
			reduce(98), /* /, reduce: Var */
			reduce(98), /* %, reduce: Var */
			reduce(98), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(98), /* ^, reduce: Var */
			reduce(98), /* [, reduce: Var */
			nil,        /* ] */
			reduce(98), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(98), /* string, reduce: Var */
			reduce(98), /* {, reduce: Var */
			nil,        /* } */
			reduce(98), /* ident, reduce: Var */
		},
	},
	actionRow{ // S1313
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(116), /* $, reduce: Args */
			reduce(116), /* return, reduce: Args */
			reduce(116), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			reduce(116), /* break, reduce: Args */
			reduce(116), /* goto, reduce: Args */
			reduce(116), /* do, reduce: Args */
			nil,         /* end */
			reduce(116), /* while, reduce: Args */
			reduce(116), /* repeat, reduce: Args */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(116), /* if, reduce: Args */
			reduce(116), /* ,, reduce: Args */
			reduce(116), /* for, reduce: Args */
			nil,         /* in */
			reduce(116), /* function, reduce: Args */
			reduce(116), /* local, reduce: Args */
			reduce(116), /* ::, reduce: Args */
			reduce(116), /* ., reduce: Args */
			reduce(116), /* :, reduce: Args */
			reduce(116), /* or, reduce: Args */
			reduce(116), /* and, reduce: Args */
			reduce(116), /* <, reduce: Args */
			reduce(116), /* <=, reduce: Args */
			reduce(116), /* >, reduce: Args */
			reduce(116), /* >=, reduce: Args */
			reduce(116), /* ==, reduce: Args */
			reduce(116), /* ~=, reduce: Args */
			reduce(116), /* |, reduce: Args */
			reduce(116), /* ~, reduce: Args */
			reduce(116), /* &, reduce: Args */
			reduce(116), /* .., reduce: Args */
			reduce(116), /* <<, reduce: Args */
			reduce(116), /* >>, reduce: Args */
			reduce(116), /* +, reduce: Args */
			reduce(116), /* -, reduce: Args */
			reduce(116), /* *, reduce: Args */
			reduce(116), /* /, reduce: Args */
			reduce(116), /* %, reduce: Args */
			reduce(116), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(116), /* ^, reduce: Args */
			reduce(116), /* [, reduce: Args */
			nil,         /* ] */
			reduce(116), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(116), /* string, reduce: Args */
			reduce(116), /* {, reduce: Args */
			nil,         /* } */
			reduce(116), /* ident, reduce: Args */
		},
	},
	actionRow{ // S1314
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(125), /* $, reduce: TableConstructor */
			reduce(125), /* return, reduce: TableConstructor */
			reduce(125), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			reduce(125), /* break, reduce: TableConstructor */
			reduce(125), /* goto, reduce: TableConstructor */
			reduce(125), /* do, reduce: TableConstructor */
			nil,         /* end */
			reduce(125), /* while, reduce: TableConstructor */
			reduce(125), /* repeat, reduce: TableConstructor */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(125), /* if, reduce: TableConstructor */
			reduce(125), /* ,, reduce: TableConstructor */
			reduce(125), /* for, reduce: TableConstructor */
			nil,         /* in */
			reduce(125), /* function, reduce: TableConstructor */
			reduce(125), /* local, reduce: TableConstructor */
			reduce(125), /* ::, reduce: TableConstructor */
			reduce(125), /* ., reduce: TableConstructor */
			reduce(125), /* :, reduce: TableConstructor */
			reduce(125), /* or, reduce: TableConstructor */
			reduce(125), /* and, reduce: TableConstructor */
			reduce(125), /* <, reduce: TableConstructor */
			reduce(125), /* <=, reduce: TableConstructor */
			reduce(125), /* >, reduce: TableConstructor */
			reduce(125), /* >=, reduce: TableConstructor */
			reduce(125), /* ==, reduce: TableConstructor */
			reduce(125), /* ~=, reduce: TableConstructor */
			reduce(125), /* |, reduce: TableConstructor */
			reduce(125), /* ~, reduce: TableConstructor */
			reduce(125), /* &, reduce: TableConstructor */
			reduce(125), /* .., reduce: TableConstructor */
			reduce(125), /* <<, reduce: TableConstructor */
			reduce(125), /* >>, reduce: TableConstructor */
			reduce(125), /* +, reduce: TableConstructor */
			reduce(125), /* -, reduce: TableConstructor */
			reduce(125), /* *, reduce: TableConstructor */
			reduce(125), /* /, reduce: TableConstructor */
			reduce(125), /* %, reduce: TableConstructor */
			reduce(125), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(125), /* ^, reduce: TableConstructor */
			reduce(125), /* [, reduce: TableConstructor */
			nil,         /* ] */
			reduce(125), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(125), /* string, reduce: TableConstructor */
			reduce(125), /* {, reduce: TableConstructor */
			nil,         /* } */
			reduce(125), /* ident, reduce: TableConstructor */
		},
	},
	actionRow{ // S1315
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(238),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			shift(254),  /* [ */
			nil,         /* ] */
			shift(255),  /* ( */
			nil,         /* ) */
			shift(256),  /* nil */
			shift(257),  /* true */
			shift(258),  /* false */
			shift(259),  /* ... */
			shift(260),  /* numdec */
			shift(261),  /* numhex */
			shift(262),  /* string */
			shift(265),  /* { */
			shift(1638), /* } */
			shift(268),  /* ident */
		},
	},
	actionRow{ // S1316
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(126), /* $, reduce: TableConstructor */
			reduce(126), /* return, reduce: TableConstructor */
			reduce(126), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			reduce(126), /* break, reduce: TableConstructor */
			reduce(126), /* goto, reduce: TableConstructor */
			reduce(126), /* do, reduce: TableConstructor */
			nil,         /* end */
			reduce(126), /* while, reduce: TableConstructor */
			reduce(126), /* repeat, reduce: TableConstructor */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(126), /* if, reduce: TableConstructor */
			reduce(126), /* ,, reduce: TableConstructor */
			reduce(126), /* for, reduce: TableConstructor */
			nil,         /* in */
			reduce(126), /* function, reduce: TableConstructor */
			reduce(126), /* local, reduce: TableConstructor */
			reduce(126), /* ::, reduce: TableConstructor */
			nil,         /* . */
			nil,         /* : */
			reduce(126), /* or, reduce: TableConstructor */
			reduce(126), /* and, reduce: TableConstructor */
			reduce(126), /* <, reduce: TableConstructor */
			reduce(126), /* <=, reduce: TableConstructor */
			reduce(126), /* >, reduce: TableConstructor */
			reduce(126), /* >=, reduce: TableConstructor */
			reduce(126), /* ==, reduce: TableConstructor */
			reduce(126), /* ~=, reduce: TableConstructor */
			reduce(126), /* |, reduce: TableConstructor */
			reduce(126), /* ~, reduce: TableConstructor */
			reduce(126), /* &, reduce: TableConstructor */
			reduce(126), /* .., reduce: TableConstructor */
			reduce(126), /* <<, reduce: TableConstructor */
			reduce(126), /* >>, reduce: TableConstructor */
			reduce(126), /* +, reduce: TableConstructor */
			reduce(126), /* -, reduce: TableConstructor */
			reduce(126), /* *, reduce: TableConstructor */
			reduce(126), /* /, reduce: TableConstructor */
			reduce(126), /* %, reduce: TableConstructor */
			reduce(126), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(126), /* ^, reduce: TableConstructor */
			nil,         /* [ */
			nil,         /* ] */
			reduce(126), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(126), /* ident, reduce: TableConstructor */
		},
	},
	actionRow{ // S1317
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(104), /* ., reduce: FunctionCall */
			reduce(104), /* :, reduce: FunctionCall */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			reduce(104), /* [, reduce: FunctionCall */
			nil,         /* ] */
			reduce(104), /* (, reduce: FunctionCall */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(104), /* string, reduce: FunctionCall */
			reduce(104), /* {, reduce: FunctionCall */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1318
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(116), /* ., reduce: Args */
			reduce(116), /* :, reduce: Args */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			reduce(116), /* [, reduce: Args */
			nil,         /* ] */
			reduce(116), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(116), /* string, reduce: Args */
			reduce(116), /* {, reduce: Args */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1319
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(125), /* ., reduce: TableConstructor */
			reduce(125), /* :, reduce: TableConstructor */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			reduce(125), /* [, reduce: TableConstructor */
			nil,         /* ] */
			reduce(125), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(125), /* string, reduce: TableConstructor */
			reduce(125), /* {, reduce: TableConstructor */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1320
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(238),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			shift(254),  /* [ */
			nil,         /* ] */
			shift(255),  /* ( */
			nil,         /* ) */
			shift(256),  /* nil */
			shift(257),  /* true */
			shift(258),  /* false */
			shift(259),  /* ... */
			shift(260),  /* numdec */
			shift(261),  /* numhex */
			shift(262),  /* string */
			shift(265),  /* { */
			shift(1639), /* } */
			shift(268),  /* ident */
		},
	},
	actionRow{ // S1321
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(54), /* ;, reduce: ExpList */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			reduce(54), /* end, reduce: ExpList */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(54), /* ,, reduce: ExpList */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			shift(985), /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1322
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(56), /* ;, reduce: Exp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			reduce(56), /* end, reduce: Exp */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(56), /* ,, reduce: Exp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(56), /* or, reduce: Exp */
			shift(988), /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1323
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(1640), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1324
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(58), /* ;, reduce: AndExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			reduce(58), /* end, reduce: AndExp */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(58), /* ,, reduce: AndExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(58), /* or, reduce: AndExp */
			reduce(58), /* and, reduce: AndExp */
			shift(203), /* < */
			shift(204), /* <= */
			shift(205), /* > */
			shift(206), /* >= */
			shift(207), /* == */
			shift(208), /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1325
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(66), /* ;, reduce: CompExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			reduce(66), /* end, reduce: CompExp */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(66), /* ,, reduce: CompExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(66), /* or, reduce: CompExp */
			reduce(66), /* and, reduce: CompExp */
			reduce(66), /* <, reduce: CompExp */
			reduce(66), /* <=, reduce: CompExp */
			reduce(66), /* >, reduce: CompExp */
			reduce(66), /* >=, reduce: CompExp */
			reduce(66), /* ==, reduce: CompExp */
			reduce(66), /* ~=, reduce: CompExp */
			shift(990), /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1326
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(68), /* ;, reduce: BitOrExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			reduce(68), /* end, reduce: BitOrExp */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(68), /* ,, reduce: BitOrExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(68), /* or, reduce: BitOrExp */
			reduce(68), /* and, reduce: BitOrExp */
			reduce(68), /* <, reduce: BitOrExp */
			reduce(68), /* <=, reduce: BitOrExp */
			reduce(68), /* >, reduce: BitOrExp */
			reduce(68), /* >=, reduce: BitOrExp */
			reduce(68), /* ==, reduce: BitOrExp */
			reduce(68), /* ~=, reduce: BitOrExp */
			reduce(68), /* |, reduce: BitOrExp */
			shift(991), /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1327
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(70), /* ;, reduce: BitXorExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			reduce(70), /* end, reduce: BitXorExp */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(70), /* ,, reduce: BitXorExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(70), /* or, reduce: BitXorExp */
			reduce(70), /* and, reduce: BitXorExp */
			reduce(70), /* <, reduce: BitXorExp */
			reduce(70), /* <=, reduce: BitXorExp */
			reduce(70), /* >, reduce: BitXorExp */
			reduce(70), /* >=, reduce: BitXorExp */
			reduce(70), /* ==, reduce: BitXorExp */
			reduce(70), /* ~=, reduce: BitXorExp */
			reduce(70), /* |, reduce: BitXorExp */
			reduce(70), /* ~, reduce: BitXorExp */
			shift(992), /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1328
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(72), /* ;, reduce: BitAndExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			reduce(72), /* end, reduce: BitAndExp */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(72), /* ,, reduce: BitAndExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(72), /* or, reduce: BitAndExp */
			reduce(72), /* and, reduce: BitAndExp */
			reduce(72), /* <, reduce: BitAndExp */
			reduce(72), /* <=, reduce: BitAndExp */
			reduce(72), /* >, reduce: BitAndExp */
			reduce(72), /* >=, reduce: BitAndExp */
			reduce(72), /* ==, reduce: BitAndExp */
			reduce(72), /* ~=, reduce: BitAndExp */
			reduce(72), /* |, reduce: BitAndExp */
			reduce(72), /* ~, reduce: BitAndExp */
			reduce(72), /* &, reduce: BitAndExp */
			shift(993), /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1329
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(74), /* ;, reduce: ConcatExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			reduce(74), /* end, reduce: ConcatExp */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(74), /* ,, reduce: ConcatExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(74), /* or, reduce: ConcatExp */
			reduce(74), /* and, reduce: ConcatExp */
			reduce(74), /* <, reduce: ConcatExp */
			reduce(74), /* <=, reduce: ConcatExp */
			reduce(74), /* >, reduce: ConcatExp */
			reduce(74), /* >=, reduce: ConcatExp */
			reduce(74), /* ==, reduce: ConcatExp */
			reduce(74), /* ~=, reduce: ConcatExp */
			reduce(74), /* |, reduce: ConcatExp */
			reduce(74), /* ~, reduce: ConcatExp */
			reduce(74), /* &, reduce: ConcatExp */
			reduce(74), /* .., reduce: ConcatExp */
			shift(214), /* << */
			shift(215), /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1330
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(78), /* ;, reduce: ShiftExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			reduce(78), /* end, reduce: ShiftExp */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(78), /* ,, reduce: ShiftExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(78), /* or, reduce: ShiftExp */
			reduce(78), /* and, reduce: ShiftExp */
			reduce(78), /* <, reduce: ShiftExp */
			reduce(78), /* <=, reduce: ShiftExp */
			reduce(78), /* >, reduce: ShiftExp */
			reduce(78), /* >=, reduce: ShiftExp */
			reduce(78), /* ==, reduce: ShiftExp */
			reduce(78), /* ~=, reduce: ShiftExp */
			reduce(78), /* |, reduce: ShiftExp */
			reduce(78), /* ~, reduce: ShiftExp */
			reduce(78), /* &, reduce: ShiftExp */
			reduce(78), /* .., reduce: ShiftExp */
			reduce(78), /* <<, reduce: ShiftExp */
			reduce(78), /* >>, reduce: ShiftExp */
			shift(217), /* + */
			shift(218), /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1331
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(82), /* ;, reduce: Sum */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			reduce(82), /* end, reduce: Sum */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(82), /* ,, reduce: Sum */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(82), /* or, reduce: Sum */
			reduce(82), /* and, reduce: Sum */
			reduce(82), /* <, reduce: Sum */
			reduce(82), /* <=, reduce: Sum */
			reduce(82), /* >, reduce: Sum */
			reduce(82), /* >=, reduce: Sum */
			reduce(82), /* ==, reduce: Sum */
			reduce(82), /* ~=, reduce: Sum */
			reduce(82), /* |, reduce: Sum */
			reduce(82), /* ~, reduce: Sum */
			reduce(82), /* &, reduce: Sum */
			reduce(82), /* .., reduce: Sum */
			reduce(82), /* <<, reduce: Sum */
			reduce(82), /* >>, reduce: Sum */
			reduce(82), /* +, reduce: Sum */
			reduce(82), /* -, reduce: Sum */
			shift(220), /* * */
			shift(221), /* / */
			shift(222), /* % */
			shift(223), /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1332
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(88), /* ;, reduce: Term */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			reduce(88), /* end, reduce: Term */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(88), /* ,, reduce: Term */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(88), /* or, reduce: Term */
			reduce(88), /* and, reduce: Term */
			reduce(88), /* <, reduce: Term */
			reduce(88), /* <=, reduce: Term */
			reduce(88), /* >, reduce: Term */
			reduce(88), /* >=, reduce: Term */
			reduce(88), /* ==, reduce: Term */
			reduce(88), /* ~=, reduce: Term */
			reduce(88), /* |, reduce: Term */
			reduce(88), /* ~, reduce: Term */
			reduce(88), /* &, reduce: Term */
			reduce(88), /* .., reduce: Term */
			reduce(88), /* <<, reduce: Term */
			reduce(88), /* >>, reduce: Term */
			reduce(88), /* +, reduce: Term */
			reduce(88), /* -, reduce: Term */
			reduce(88), /* *, reduce: Term */
			reduce(88), /* /, reduce: Term */
			reduce(88), /* %, reduce: Term */
			reduce(88), /* //, reduce: Term */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1333
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(96), /* ;, reduce: Power */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			reduce(96), /* end, reduce: Power */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(96), /* ,, reduce: Power */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(96), /* or, reduce: Power */
			reduce(96), /* and, reduce: Power */
			reduce(96), /* <, reduce: Power */
			reduce(96), /* <=, reduce: Power */
			reduce(96), /* >, reduce: Power */
			reduce(96), /* >=, reduce: Power */
			reduce(96), /* ==, reduce: Power */
			reduce(96), /* ~=, reduce: Power */
			reduce(96), /* |, reduce: Power */
			reduce(96), /* ~, reduce: Power */
			reduce(96), /* &, reduce: Power */
			reduce(96), /* .., reduce: Power */
			reduce(96), /* <<, reduce: Power */
			reduce(96), /* >>, reduce: Power */
			reduce(96), /* +, reduce: Power */
			reduce(96), /* -, reduce: Power */
			reduce(96), /* *, reduce: Power */
			reduce(96), /* /, reduce: Power */
			reduce(96), /* %, reduce: Power */
			reduce(96), /* //, reduce: Power */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1334
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(99), /* ;, reduce: Var */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			reduce(99), /* end, reduce: Var */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(99), /* ,, reduce: Var */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			reduce(99), /* ., reduce: Var */
			reduce(99), /* :, reduce: Var */
			reduce(99), /* or, reduce: Var */
			reduce(99), /* and, reduce: Var */
			reduce(99), /* <, reduce: Var */
			reduce(99), /* <=, reduce: Var */
			reduce(99), /* >, reduce: Var */
			reduce(99), /* >=, reduce: Var */
			reduce(99), /* ==, reduce: Var */
			reduce(99), /* ~=, reduce: Var */
			reduce(99), /* |, reduce: Var */
			reduce(99), /* ~, reduce: Var */
			reduce(99), /* &, reduce: Var */
			reduce(99), /* .., reduce: Var */
			reduce(99), /* <<, reduce: Var */
			reduce(99), /* >>, reduce: Var */
			reduce(99), /* +, reduce: Var */
			reduce(99), /* -, reduce: Var */
			reduce(99), /* *, reduce: Var */
			reduce(99), /* /, reduce: Var */
			reduce(99), /* %, reduce: Var */
			reduce(99), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(99), /* ^, reduce: Var */
			reduce(99), /* [, reduce: Var */
			nil,        /* ] */
			reduce(99), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(99), /* string, reduce: Var */
			reduce(99), /* {, reduce: Var */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1335
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1002), /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			shift(1004), /* string */
			shift(1006), /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1336
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			shift(851),  /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			shift(1642), /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1337
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(876),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(1643), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1338
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(115), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(115), /* end, reduce: Args */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(115), /* ,, reduce: Args */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(115), /* ., reduce: Args */
			reduce(115), /* :, reduce: Args */
			reduce(115), /* or, reduce: Args */
			reduce(115), /* and, reduce: Args */
			reduce(115), /* <, reduce: Args */
			reduce(115), /* <=, reduce: Args */
			reduce(115), /* >, reduce: Args */
			reduce(115), /* >=, reduce: Args */
			reduce(115), /* ==, reduce: Args */
			reduce(115), /* ~=, reduce: Args */
			reduce(115), /* |, reduce: Args */
			reduce(115), /* ~, reduce: Args */
			reduce(115), /* &, reduce: Args */
			reduce(115), /* .., reduce: Args */
			reduce(115), /* <<, reduce: Args */
			reduce(115), /* >>, reduce: Args */
			reduce(115), /* +, reduce: Args */
			reduce(115), /* -, reduce: Args */
			reduce(115), /* *, reduce: Args */
			reduce(115), /* /, reduce: Args */
			reduce(115), /* %, reduce: Args */
			reduce(115), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(115), /* ^, reduce: Args */
			reduce(115), /* [, reduce: Args */
			nil,         /* ] */
			reduce(115), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(115), /* string, reduce: Args */
			reduce(115), /* {, reduce: Args */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1339
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			shift(569),  /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(570),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			shift(1644), /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1340
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(102), /* ;, reduce: PrefixExp */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(102), /* end, reduce: PrefixExp */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(102), /* ,, reduce: PrefixExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(102), /* ., reduce: PrefixExp */
			reduce(102), /* :, reduce: PrefixExp */
			reduce(102), /* or, reduce: PrefixExp */
			reduce(102), /* and, reduce: PrefixExp */
			reduce(102), /* <, reduce: PrefixExp */
			reduce(102), /* <=, reduce: PrefixExp */
			reduce(102), /* >, reduce: PrefixExp */
			reduce(102), /* >=, reduce: PrefixExp */
			reduce(102), /* ==, reduce: PrefixExp */
			reduce(102), /* ~=, reduce: PrefixExp */
			reduce(102), /* |, reduce: PrefixExp */
			reduce(102), /* ~, reduce: PrefixExp */
			reduce(102), /* &, reduce: PrefixExp */
			reduce(102), /* .., reduce: PrefixExp */
			reduce(102), /* <<, reduce: PrefixExp */
			reduce(102), /* >>, reduce: PrefixExp */
			reduce(102), /* +, reduce: PrefixExp */
			reduce(102), /* -, reduce: PrefixExp */
			reduce(102), /* *, reduce: PrefixExp */
			reduce(102), /* /, reduce: PrefixExp */
			reduce(102), /* %, reduce: PrefixExp */
			reduce(102), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(102), /* ^, reduce: PrefixExp */
			reduce(102), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(102), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(102), /* string, reduce: PrefixExp */
			reduce(102), /* {, reduce: PrefixExp */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1341
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(125), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(125), /* end, reduce: TableConstructor */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(125), /* ,, reduce: TableConstructor */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(125), /* or, reduce: TableConstructor */
			reduce(125), /* and, reduce: TableConstructor */
			reduce(125), /* <, reduce: TableConstructor */
			reduce(125), /* <=, reduce: TableConstructor */
			reduce(125), /* >, reduce: TableConstructor */
			reduce(125), /* >=, reduce: TableConstructor */
			reduce(125), /* ==, reduce: TableConstructor */
			reduce(125), /* ~=, reduce: TableConstructor */
			reduce(125), /* |, reduce: TableConstructor */
			reduce(125), /* ~, reduce: TableConstructor */
			reduce(125), /* &, reduce: TableConstructor */
			reduce(125), /* .., reduce: TableConstructor */
			reduce(125), /* <<, reduce: TableConstructor */
			reduce(125), /* >>, reduce: TableConstructor */
			reduce(125), /* +, reduce: TableConstructor */
			reduce(125), /* -, reduce: TableConstructor */
			reduce(125), /* *, reduce: TableConstructor */
			reduce(125), /* /, reduce: TableConstructor */
			reduce(125), /* %, reduce: TableConstructor */
			reduce(125), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(125), /* ^, reduce: TableConstructor */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1342
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(238),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			shift(254),  /* [ */
			nil,         /* ] */
			shift(255),  /* ( */
			nil,         /* ) */
			shift(256),  /* nil */
			shift(257),  /* true */
			shift(258),  /* false */
			shift(259),  /* ... */
			shift(260),  /* numdec */
			shift(261),  /* numhex */
			shift(262),  /* string */
			shift(265),  /* { */
			shift(1646), /* } */
			shift(268),  /* ident */
		},
	},
	actionRow{ // S1343
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1013), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1029), /* ( */
			nil,         /* ) */
			shift(1030), /* nil */
			shift(1031), /* true */
			shift(1032), /* false */
			shift(1033), /* ... */
			shift(1034), /* numdec */
			shift(1035), /* numhex */
			shift(1036), /* string */
			shift(1039), /* { */
			nil,         /* } */
			shift(1040), /* ident */
		},
	},
	actionRow{ // S1344
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1013), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1029), /* ( */
			nil,         /* ) */
			shift(1030), /* nil */
			shift(1031), /* true */
			shift(1032), /* false */
			shift(1033), /* ... */
			shift(1034), /* numdec */
			shift(1035), /* numhex */
			shift(1036), /* string */
			shift(1039), /* { */
			nil,         /* } */
			shift(1040), /* ident */
		},
	},
	actionRow{ // S1345
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(119), /* return, reduce: FunctionDef */
			reduce(119), /* ;, reduce: FunctionDef */
			nil,         /* empty */
			nil,         /* = */
			reduce(119), /* break, reduce: FunctionDef */
			reduce(119), /* goto, reduce: FunctionDef */
			reduce(119), /* do, reduce: FunctionDef */
			reduce(119), /* end, reduce: FunctionDef */
			reduce(119), /* while, reduce: FunctionDef */
			reduce(119), /* repeat, reduce: FunctionDef */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(119), /* if, reduce: FunctionDef */
			reduce(119), /* ,, reduce: FunctionDef */
			reduce(119), /* for, reduce: FunctionDef */
			nil,         /* in */
			reduce(119), /* function, reduce: FunctionDef */
			reduce(119), /* local, reduce: FunctionDef */
			reduce(119), /* ::, reduce: FunctionDef */
			nil,         /* . */
			nil,         /* : */
			reduce(119), /* or, reduce: FunctionDef */
			reduce(119), /* and, reduce: FunctionDef */
			reduce(119), /* <, reduce: FunctionDef */
			reduce(119), /* <=, reduce: FunctionDef */
			reduce(119), /* >, reduce: FunctionDef */
			reduce(119), /* >=, reduce: FunctionDef */
			reduce(119), /* ==, reduce: FunctionDef */
			reduce(119), /* ~=, reduce: FunctionDef */
			reduce(119), /* |, reduce: FunctionDef */
			reduce(119), /* ~, reduce: FunctionDef */
			reduce(119), /* &, reduce: FunctionDef */
			reduce(119), /* .., reduce: FunctionDef */
			reduce(119), /* <<, reduce: FunctionDef */
			reduce(119), /* >>, reduce: FunctionDef */
			reduce(119), /* +, reduce: FunctionDef */
			reduce(119), /* -, reduce: FunctionDef */
			reduce(119), /* *, reduce: FunctionDef */
			reduce(119), /* /, reduce: FunctionDef */
			reduce(119), /* %, reduce: FunctionDef */
			reduce(119), /* //, reduce: FunctionDef */
			nil,         /* not */
			nil,         /* # */
			reduce(119), /* ^, reduce: FunctionDef */
			nil,         /* [ */
			nil,         /* ] */
			reduce(119), /* (, reduce: FunctionDef */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(119), /* ident, reduce: FunctionDef */
		},
	},
	actionRow{ // S1346
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(123), /* ), reduce: ParList */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			shift(521),  /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			shift(523),  /* ident */
		},
	},
	actionRow{ // S1347
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1013), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1029), /* ( */
			nil,         /* ) */
			shift(1030), /* nil */
			shift(1031), /* true */
			shift(1032), /* false */
			shift(1033), /* ... */
			shift(1034), /* numdec */
			shift(1035), /* numhex */
			shift(1036), /* string */
			shift(1039), /* { */
			nil,         /* } */
			shift(1040), /* ident */
		},
	},
	actionRow{ // S1348
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1013), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1029), /* ( */
			nil,         /* ) */
			shift(1030), /* nil */
			shift(1031), /* true */
			shift(1032), /* false */
			shift(1033), /* ... */
			shift(1034), /* numdec */
			shift(1035), /* numhex */
			shift(1036), /* string */
			shift(1039), /* { */
			nil,         /* } */
			shift(1040), /* ident */
		},
	},
	actionRow{ // S1349
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1013), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1029), /* ( */
			nil,         /* ) */
			shift(1030), /* nil */
			shift(1031), /* true */
			shift(1032), /* false */
			shift(1033), /* ... */
			shift(1034), /* numdec */
			shift(1035), /* numhex */
			shift(1036), /* string */
			shift(1039), /* { */
			nil,         /* } */
			shift(1040), /* ident */
		},
	},
	actionRow{ // S1350
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1013), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1029), /* ( */
			nil,         /* ) */
			shift(1030), /* nil */
			shift(1031), /* true */
			shift(1032), /* false */
			shift(1033), /* ... */
			shift(1034), /* numdec */
			shift(1035), /* numhex */
			shift(1036), /* string */
			shift(1039), /* { */
			nil,         /* } */
			shift(1040), /* ident */
		},
	},
	actionRow{ // S1351
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1013), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1029), /* ( */
			nil,         /* ) */
			shift(1030), /* nil */
			shift(1031), /* true */
			shift(1032), /* false */
			shift(1033), /* ... */
			shift(1034), /* numdec */
			shift(1035), /* numhex */
			shift(1036), /* string */
			shift(1039), /* { */
			nil,         /* } */
			shift(1040), /* ident */
		},
	},
	actionRow{ // S1352
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1013), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1029), /* ( */
			nil,         /* ) */
			shift(1030), /* nil */
			shift(1031), /* true */
			shift(1032), /* false */
			shift(1033), /* ... */
			shift(1034), /* numdec */
			shift(1035), /* numhex */
			shift(1036), /* string */
			shift(1039), /* { */
			nil,         /* } */
			shift(1040), /* ident */
		},
	},
	actionRow{ // S1353
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1013), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1029), /* ( */
			nil,         /* ) */
			shift(1030), /* nil */
			shift(1031), /* true */
			shift(1032), /* false */
			shift(1033), /* ... */
			shift(1034), /* numdec */
			shift(1035), /* numhex */
			shift(1036), /* string */
			shift(1039), /* { */
			nil,         /* } */
			shift(1040), /* ident */
		},
	},
	actionRow{ // S1354
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1013), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1029), /* ( */
			nil,         /* ) */
			shift(1030), /* nil */
			shift(1031), /* true */
			shift(1032), /* false */
			shift(1033), /* ... */
			shift(1034), /* numdec */
			shift(1035), /* numhex */
			shift(1036), /* string */
			shift(1039), /* { */
			nil,         /* } */
			shift(1040), /* ident */
		},
	},
	actionRow{ // S1355
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1013), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1029), /* ( */
			nil,         /* ) */
			shift(1030), /* nil */
			shift(1031), /* true */
			shift(1032), /* false */
			shift(1033), /* ... */
			shift(1034), /* numdec */
			shift(1035), /* numhex */
			shift(1036), /* string */
			shift(1039), /* { */
			nil,         /* } */
			shift(1040), /* ident */
		},
	},
	actionRow{ // S1356
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(93), /* return, reduce: Factor */
			reduce(93), /* ;, reduce: Factor */
			nil,        /* empty */
			nil,        /* = */
			reduce(93), /* break, reduce: Factor */
			reduce(93), /* goto, reduce: Factor */
			reduce(93), /* do, reduce: Factor */
			reduce(93), /* end, reduce: Factor */
			reduce(93), /* while, reduce: Factor */
			reduce(93), /* repeat, reduce: Factor */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(93), /* if, reduce: Factor */
			reduce(93), /* ,, reduce: Factor */
			reduce(93), /* for, reduce: Factor */
			nil,        /* in */
			reduce(93), /* function, reduce: Factor */
			reduce(93), /* local, reduce: Factor */
			reduce(93), /* ::, reduce: Factor */
			nil,        /* . */
			nil,        /* : */
			reduce(93), /* or, reduce: Factor */
			reduce(93), /* and, reduce: Factor */
			reduce(93), /* <, reduce: Factor */
			reduce(93), /* <=, reduce: Factor */
			reduce(93), /* >, reduce: Factor */
			reduce(93), /* >=, reduce: Factor */
			reduce(93), /* ==, reduce: Factor */
			reduce(93), /* ~=, reduce: Factor */
			reduce(93), /* |, reduce: Factor */
			reduce(93), /* ~, reduce: Factor */
			reduce(93), /* &, reduce: Factor */
			reduce(93), /* .., reduce: Factor */
			reduce(93), /* <<, reduce: Factor */
			reduce(93), /* >>, reduce: Factor */
			reduce(93), /* +, reduce: Factor */
			reduce(93), /* -, reduce: Factor */
			reduce(93), /* *, reduce: Factor */
			reduce(93), /* /, reduce: Factor */
			reduce(93), /* %, reduce: Factor */
			reduce(93), /* //, reduce: Factor */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(93), /* (, reduce: Factor */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(93), /* ident, reduce: Factor */
		},
	},
	actionRow{ // S1357
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1013), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1029), /* ( */
			nil,         /* ) */
			shift(1030), /* nil */
			shift(1031), /* true */
			shift(1032), /* false */
			shift(1033), /* ... */
			shift(1034), /* numdec */
			shift(1035), /* numhex */
			shift(1036), /* string */
			shift(1039), /* { */
			nil,         /* } */
			shift(1040), /* ident */
		},
	},
	actionRow{ // S1358
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			shift(1040), /* ident */
		},
	},
	actionRow{ // S1359
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(426), /* ident */
		},
	},
	actionRow{ // S1360
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(430), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(446), /* ( */
			nil,        /* ) */
			shift(447), /* nil */
			shift(448), /* true */
			shift(449), /* false */
			shift(450), /* ... */
			shift(451), /* numdec */
			shift(452), /* numhex */
			shift(453), /* string */
			shift(456), /* { */
			nil,        /* } */
			shift(457), /* ident */
		},
	},
	actionRow{ // S1361
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(462),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(478),  /* ( */
			shift(1664), /* ) */
			shift(480),  /* nil */
			shift(481),  /* true */
			shift(482),  /* false */
			shift(483),  /* ... */
			shift(484),  /* numdec */
			shift(485),  /* numhex */
			shift(486),  /* string */
			shift(489),  /* { */
			nil,         /* } */
			shift(490),  /* ident */
		},
	},
	actionRow{ // S1362
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(103), /* return, reduce: FunctionCall */
			reduce(103), /* ;, reduce: FunctionCall */
			nil,         /* empty */
			nil,         /* = */
			reduce(103), /* break, reduce: FunctionCall */
			reduce(103), /* goto, reduce: FunctionCall */
			reduce(103), /* do, reduce: FunctionCall */
			reduce(103), /* end, reduce: FunctionCall */
			reduce(103), /* while, reduce: FunctionCall */
			reduce(103), /* repeat, reduce: FunctionCall */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(103), /* if, reduce: FunctionCall */
			reduce(103), /* ,, reduce: FunctionCall */
			reduce(103), /* for, reduce: FunctionCall */
			nil,         /* in */
			reduce(103), /* function, reduce: FunctionCall */
			reduce(103), /* local, reduce: FunctionCall */
			reduce(103), /* ::, reduce: FunctionCall */
			reduce(103), /* ., reduce: FunctionCall */
			reduce(103), /* :, reduce: FunctionCall */
			reduce(103), /* or, reduce: FunctionCall */
			reduce(103), /* and, reduce: FunctionCall */
			reduce(103), /* <, reduce: FunctionCall */
			reduce(103), /* <=, reduce: FunctionCall */
			reduce(103), /* >, reduce: FunctionCall */
			reduce(103), /* >=, reduce: FunctionCall */
			reduce(103), /* ==, reduce: FunctionCall */
			reduce(103), /* ~=, reduce: FunctionCall */
			reduce(103), /* |, reduce: FunctionCall */
			reduce(103), /* ~, reduce: FunctionCall */
			reduce(103), /* &, reduce: FunctionCall */
			reduce(103), /* .., reduce: FunctionCall */
			reduce(103), /* <<, reduce: FunctionCall */
			reduce(103), /* >>, reduce: FunctionCall */
			reduce(103), /* +, reduce: FunctionCall */
			reduce(103), /* -, reduce: FunctionCall */
			reduce(103), /* *, reduce: FunctionCall */
			reduce(103), /* /, reduce: FunctionCall */
			reduce(103), /* %, reduce: FunctionCall */
			reduce(103), /* //, reduce: FunctionCall */
			nil,         /* not */
			nil,         /* # */
			reduce(103), /* ^, reduce: FunctionCall */
			reduce(103), /* [, reduce: FunctionCall */
			nil,         /* ] */
			reduce(103), /* (, reduce: FunctionCall */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(103), /* string, reduce: FunctionCall */
			reduce(103), /* {, reduce: FunctionCall */
			nil,         /* } */
			reduce(103), /* ident, reduce: FunctionCall */
		},
	},
	actionRow{ // S1363
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(118), /* return, reduce: Args */
			reduce(118), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			reduce(118), /* break, reduce: Args */
			reduce(118), /* goto, reduce: Args */
			reduce(118), /* do, reduce: Args */
			reduce(118), /* end, reduce: Args */
			reduce(118), /* while, reduce: Args */
			reduce(118), /* repeat, reduce: Args */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(118), /* if, reduce: Args */
			reduce(118), /* ,, reduce: Args */
			reduce(118), /* for, reduce: Args */
			nil,         /* in */
			reduce(118), /* function, reduce: Args */
			reduce(118), /* local, reduce: Args */
			reduce(118), /* ::, reduce: Args */
			reduce(118), /* ., reduce: Args */
			reduce(118), /* :, reduce: Args */
			reduce(118), /* or, reduce: Args */
			reduce(118), /* and, reduce: Args */
			reduce(118), /* <, reduce: Args */
			reduce(118), /* <=, reduce: Args */
			reduce(118), /* >, reduce: Args */
			reduce(118), /* >=, reduce: Args */
			reduce(118), /* ==, reduce: Args */
			reduce(118), /* ~=, reduce: Args */
			reduce(118), /* |, reduce: Args */
			reduce(118), /* ~, reduce: Args */
			reduce(118), /* &, reduce: Args */
			reduce(118), /* .., reduce: Args */
			reduce(118), /* <<, reduce: Args */
			reduce(118), /* >>, reduce: Args */
			reduce(118), /* +, reduce: Args */
			reduce(118), /* -, reduce: Args */
			reduce(118), /* *, reduce: Args */
			reduce(118), /* /, reduce: Args */
			reduce(118), /* %, reduce: Args */
			reduce(118), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(118), /* ^, reduce: Args */
			reduce(118), /* [, reduce: Args */
			nil,         /* ] */
			reduce(118), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(118), /* string, reduce: Args */
			reduce(118), /* {, reduce: Args */
			nil,         /* } */
			reduce(118), /* ident, reduce: Args */
		},
	},
	actionRow{ // S1364
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(117), /* return, reduce: Args */
			reduce(117), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			reduce(117), /* break, reduce: Args */
			reduce(117), /* goto, reduce: Args */
			reduce(117), /* do, reduce: Args */
			reduce(117), /* end, reduce: Args */
			reduce(117), /* while, reduce: Args */
			reduce(117), /* repeat, reduce: Args */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(117), /* if, reduce: Args */
			reduce(117), /* ,, reduce: Args */
			reduce(117), /* for, reduce: Args */
			nil,         /* in */
			reduce(117), /* function, reduce: Args */
			reduce(117), /* local, reduce: Args */
			reduce(117), /* ::, reduce: Args */
			reduce(117), /* ., reduce: Args */
			reduce(117), /* :, reduce: Args */
			reduce(117), /* or, reduce: Args */
			reduce(117), /* and, reduce: Args */
			reduce(117), /* <, reduce: Args */
			reduce(117), /* <=, reduce: Args */
			reduce(117), /* >, reduce: Args */
			reduce(117), /* >=, reduce: Args */
			reduce(117), /* ==, reduce: Args */
			reduce(117), /* ~=, reduce: Args */
			reduce(117), /* |, reduce: Args */
			reduce(117), /* ~, reduce: Args */
			reduce(117), /* &, reduce: Args */
			reduce(117), /* .., reduce: Args */
			reduce(117), /* <<, reduce: Args */
			reduce(117), /* >>, reduce: Args */
			reduce(117), /* +, reduce: Args */
			reduce(117), /* -, reduce: Args */
			reduce(117), /* *, reduce: Args */
			reduce(117), /* /, reduce: Args */
			reduce(117), /* %, reduce: Args */
			reduce(117), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(117), /* ^, reduce: Args */
			reduce(117), /* [, reduce: Args */
			nil,         /* ] */
			reduce(117), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(117), /* string, reduce: Args */
			reduce(117), /* {, reduce: Args */
			nil,         /* } */
			reduce(117), /* ident, reduce: Args */
		},
	},
	actionRow{ // S1365
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			shift(254), /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(268), /* ident */
		},
	},
	actionRow{ // S1366
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			shift(492),  /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(1666), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1367
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			shift(569),  /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(570),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			shift(1667), /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1368
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(1669), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1369
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(101), /* return, reduce: PrefixExp */
			reduce(101), /* ;, reduce: PrefixExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(101), /* break, reduce: PrefixExp */
			reduce(101), /* goto, reduce: PrefixExp */
			reduce(101), /* do, reduce: PrefixExp */
			reduce(101), /* end, reduce: PrefixExp */
			reduce(101), /* while, reduce: PrefixExp */
			reduce(101), /* repeat, reduce: PrefixExp */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(101), /* if, reduce: PrefixExp */
			nil,         /* , */
			reduce(101), /* for, reduce: PrefixExp */
			nil,         /* in */
			reduce(101), /* function, reduce: PrefixExp */
			reduce(101), /* local, reduce: PrefixExp */
			reduce(101), /* ::, reduce: PrefixExp */
			reduce(101), /* ., reduce: PrefixExp */
			reduce(101), /* :, reduce: PrefixExp */
			reduce(101), /* or, reduce: PrefixExp */
			reduce(101), /* and, reduce: PrefixExp */
			reduce(101), /* <, reduce: PrefixExp */
			reduce(101), /* <=, reduce: PrefixExp */
			reduce(101), /* >, reduce: PrefixExp */
			reduce(101), /* >=, reduce: PrefixExp */
			reduce(101), /* ==, reduce: PrefixExp */
			reduce(101), /* ~=, reduce: PrefixExp */
			reduce(101), /* |, reduce: PrefixExp */
			reduce(101), /* ~, reduce: PrefixExp */
			reduce(101), /* &, reduce: PrefixExp */
			reduce(101), /* .., reduce: PrefixExp */
			reduce(101), /* <<, reduce: PrefixExp */
			reduce(101), /* >>, reduce: PrefixExp */
			reduce(101), /* +, reduce: PrefixExp */
			reduce(101), /* -, reduce: PrefixExp */
			reduce(101), /* *, reduce: PrefixExp */
			reduce(101), /* /, reduce: PrefixExp */
			reduce(101), /* %, reduce: PrefixExp */
			reduce(101), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(101), /* ^, reduce: PrefixExp */
			reduce(101), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(101), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(101), /* string, reduce: PrefixExp */
			reduce(101), /* {, reduce: PrefixExp */
			nil,         /* } */
			reduce(101), /* ident, reduce: PrefixExp */
		},
	},
	actionRow{ // S1370
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(97), /* return, reduce: Var */
			reduce(97), /* ;, reduce: Var */
			nil,        /* empty */
			nil,        /* = */
			reduce(97), /* break, reduce: Var */
			reduce(97), /* goto, reduce: Var */
			reduce(97), /* do, reduce: Var */
			reduce(97), /* end, reduce: Var */
			reduce(97), /* while, reduce: Var */
			reduce(97), /* repeat, reduce: Var */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(97), /* if, reduce: Var */
			nil,        /* , */
			reduce(97), /* for, reduce: Var */
			nil,        /* in */
			reduce(97), /* function, reduce: Var */
			reduce(97), /* local, reduce: Var */
			reduce(97), /* ::, reduce: Var */
			reduce(97), /* ., reduce: Var */
			reduce(97), /* :, reduce: Var */
			reduce(97), /* or, reduce: Var */
			reduce(97), /* and, reduce: Var */
			reduce(97), /* <, reduce: Var */
			reduce(97), /* <=, reduce: Var */
			reduce(97), /* >, reduce: Var */
			reduce(97), /* >=, reduce: Var */
			reduce(97), /* ==, reduce: Var */
			reduce(97), /* ~=, reduce: Var */
			reduce(97), /* |, reduce: Var */
			reduce(97), /* ~, reduce: Var */
			reduce(97), /* &, reduce: Var */
			reduce(97), /* .., reduce: Var */
			reduce(97), /* <<, reduce: Var */
			reduce(97), /* >>, reduce: Var */
			reduce(97), /* +, reduce: Var */
			reduce(97), /* -, reduce: Var */
			reduce(97), /* *, reduce: Var */
			reduce(97), /* /, reduce: Var */
			reduce(97), /* %, reduce: Var */
			reduce(97), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(97), /* ^, reduce: Var */
			reduce(97), /* [, reduce: Var */
			nil,        /* ] */
			reduce(97), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(97), /* string, reduce: Var */
			reduce(97), /* {, reduce: Var */
			nil,        /* } */
			reduce(97), /* ident, reduce: Var */
		},
	},
	actionRow{ // S1371
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(28),  /* return, reduce: RepeatStat */
			reduce(28),  /* ;, reduce: RepeatStat */
			nil,         /* empty */
			nil,         /* = */
			reduce(28),  /* break, reduce: RepeatStat */
			reduce(28),  /* goto, reduce: RepeatStat */
			reduce(28),  /* do, reduce: RepeatStat */
			reduce(28),  /* end, reduce: RepeatStat */
			reduce(28),  /* while, reduce: RepeatStat */
			reduce(28),  /* repeat, reduce: RepeatStat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(28),  /* if, reduce: RepeatStat */
			nil,         /* , */
			reduce(28),  /* for, reduce: RepeatStat */
			nil,         /* in */
			reduce(28),  /* function, reduce: RepeatStat */
			reduce(28),  /* local, reduce: RepeatStat */
			reduce(28),  /* ::, reduce: RepeatStat */
			nil,         /* . */
			nil,         /* : */
			shift(1670), /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(28),  /* (, reduce: RepeatStat */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(28),  /* ident, reduce: RepeatStat */
		},
	},
	actionRow{ // S1372
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1672), /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1373
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(100), /* return, reduce: PrefixExp */
			reduce(100), /* ;, reduce: PrefixExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(100), /* break, reduce: PrefixExp */
			reduce(100), /* goto, reduce: PrefixExp */
			reduce(100), /* do, reduce: PrefixExp */
			reduce(100), /* end, reduce: PrefixExp */
			reduce(100), /* while, reduce: PrefixExp */
			reduce(100), /* repeat, reduce: PrefixExp */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(100), /* if, reduce: PrefixExp */
			nil,         /* , */
			reduce(100), /* for, reduce: PrefixExp */
			nil,         /* in */
			reduce(100), /* function, reduce: PrefixExp */
			reduce(100), /* local, reduce: PrefixExp */
			reduce(100), /* ::, reduce: PrefixExp */
			reduce(100), /* ., reduce: PrefixExp */
			reduce(100), /* :, reduce: PrefixExp */
			reduce(100), /* or, reduce: PrefixExp */
			reduce(100), /* and, reduce: PrefixExp */
			reduce(100), /* <, reduce: PrefixExp */
			reduce(100), /* <=, reduce: PrefixExp */
			reduce(100), /* >, reduce: PrefixExp */
			reduce(100), /* >=, reduce: PrefixExp */
			reduce(100), /* ==, reduce: PrefixExp */
			reduce(100), /* ~=, reduce: PrefixExp */
			reduce(100), /* |, reduce: PrefixExp */
			reduce(100), /* ~, reduce: PrefixExp */
			reduce(100), /* &, reduce: PrefixExp */
			reduce(100), /* .., reduce: PrefixExp */
			reduce(100), /* <<, reduce: PrefixExp */
			reduce(100), /* >>, reduce: PrefixExp */
			reduce(100), /* +, reduce: PrefixExp */
			reduce(100), /* -, reduce: PrefixExp */
			reduce(100), /* *, reduce: PrefixExp */
			reduce(100), /* /, reduce: PrefixExp */
			reduce(100), /* %, reduce: PrefixExp */
			reduce(100), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(100), /* ^, reduce: PrefixExp */
			reduce(100), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(100), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(100), /* string, reduce: PrefixExp */
			reduce(100), /* {, reduce: PrefixExp */
			nil,         /* } */
			reduce(100), /* ident, reduce: PrefixExp */
		},
	},
	actionRow{ // S1374
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(55),  /* return, reduce: Exp */
			reduce(55),  /* ;, reduce: Exp */
			nil,         /* empty */
			nil,         /* = */
			reduce(55),  /* break, reduce: Exp */
			reduce(55),  /* goto, reduce: Exp */
			reduce(55),  /* do, reduce: Exp */
			reduce(55),  /* end, reduce: Exp */
			reduce(55),  /* while, reduce: Exp */
			reduce(55),  /* repeat, reduce: Exp */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(55),  /* if, reduce: Exp */
			nil,         /* , */
			reduce(55),  /* for, reduce: Exp */
			nil,         /* in */
			reduce(55),  /* function, reduce: Exp */
			reduce(55),  /* local, reduce: Exp */
			reduce(55),  /* ::, reduce: Exp */
			nil,         /* . */
			nil,         /* : */
			reduce(55),  /* or, reduce: Exp */
			shift(1673), /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(55),  /* (, reduce: Exp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(55),  /* ident, reduce: Exp */
		},
	},
	actionRow{ // S1375
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(57), /* return, reduce: AndExp */
			reduce(57), /* ;, reduce: AndExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(57), /* break, reduce: AndExp */
			reduce(57), /* goto, reduce: AndExp */
			reduce(57), /* do, reduce: AndExp */
			reduce(57), /* end, reduce: AndExp */
			reduce(57), /* while, reduce: AndExp */
			reduce(57), /* repeat, reduce: AndExp */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(57), /* if, reduce: AndExp */
			nil,        /* , */
			reduce(57), /* for, reduce: AndExp */
			nil,        /* in */
			reduce(57), /* function, reduce: AndExp */
			reduce(57), /* local, reduce: AndExp */
			reduce(57), /* ::, reduce: AndExp */
			nil,        /* . */
			nil,        /* : */
			reduce(57), /* or, reduce: AndExp */
			reduce(57), /* and, reduce: AndExp */
			shift(203), /* < */
			shift(204), /* <= */
			shift(205), /* > */
			shift(206), /* >= */
			shift(207), /* == */
			shift(208), /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(57), /* (, reduce: AndExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(57), /* ident, reduce: AndExp */
		},
	},
	actionRow{ // S1376
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(65),  /* return, reduce: CompExp */
			reduce(65),  /* ;, reduce: CompExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(65),  /* break, reduce: CompExp */
			reduce(65),  /* goto, reduce: CompExp */
			reduce(65),  /* do, reduce: CompExp */
			reduce(65),  /* end, reduce: CompExp */
			reduce(65),  /* while, reduce: CompExp */
			reduce(65),  /* repeat, reduce: CompExp */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(65),  /* if, reduce: CompExp */
			nil,         /* , */
			reduce(65),  /* for, reduce: CompExp */
			nil,         /* in */
			reduce(65),  /* function, reduce: CompExp */
			reduce(65),  /* local, reduce: CompExp */
			reduce(65),  /* ::, reduce: CompExp */
			nil,         /* . */
			nil,         /* : */
			reduce(65),  /* or, reduce: CompExp */
			reduce(65),  /* and, reduce: CompExp */
			reduce(65),  /* <, reduce: CompExp */
			reduce(65),  /* <=, reduce: CompExp */
			reduce(65),  /* >, reduce: CompExp */
			reduce(65),  /* >=, reduce: CompExp */
			reduce(65),  /* ==, reduce: CompExp */
			reduce(65),  /* ~=, reduce: CompExp */
			shift(1675), /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(65),  /* (, reduce: CompExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(65),  /* ident, reduce: CompExp */
		},
	},
	actionRow{ // S1377
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(67),  /* return, reduce: BitOrExp */
			reduce(67),  /* ;, reduce: BitOrExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(67),  /* break, reduce: BitOrExp */
			reduce(67),  /* goto, reduce: BitOrExp */
			reduce(67),  /* do, reduce: BitOrExp */
			reduce(67),  /* end, reduce: BitOrExp */
			reduce(67),  /* while, reduce: BitOrExp */
			reduce(67),  /* repeat, reduce: BitOrExp */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(67),  /* if, reduce: BitOrExp */
			nil,         /* , */
			reduce(67),  /* for, reduce: BitOrExp */
			nil,         /* in */
			reduce(67),  /* function, reduce: BitOrExp */
			reduce(67),  /* local, reduce: BitOrExp */
			reduce(67),  /* ::, reduce: BitOrExp */
			nil,         /* . */
			nil,         /* : */
			reduce(67),  /* or, reduce: BitOrExp */
			reduce(67),  /* and, reduce: BitOrExp */
			reduce(67),  /* <, reduce: BitOrExp */
			reduce(67),  /* <=, reduce: BitOrExp */
			reduce(67),  /* >, reduce: BitOrExp */
			reduce(67),  /* >=, reduce: BitOrExp */
			reduce(67),  /* ==, reduce: BitOrExp */
			reduce(67),  /* ~=, reduce: BitOrExp */
			reduce(67),  /* |, reduce: BitOrExp */
			shift(1676), /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(67),  /* (, reduce: BitOrExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(67),  /* ident, reduce: BitOrExp */
		},
	},
	actionRow{ // S1378
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(69),  /* return, reduce: BitXorExp */
			reduce(69),  /* ;, reduce: BitXorExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(69),  /* break, reduce: BitXorExp */
			reduce(69),  /* goto, reduce: BitXorExp */
			reduce(69),  /* do, reduce: BitXorExp */
			reduce(69),  /* end, reduce: BitXorExp */
			reduce(69),  /* while, reduce: BitXorExp */
			reduce(69),  /* repeat, reduce: BitXorExp */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(69),  /* if, reduce: BitXorExp */
			nil,         /* , */
			reduce(69),  /* for, reduce: BitXorExp */
			nil,         /* in */
			reduce(69),  /* function, reduce: BitXorExp */
			reduce(69),  /* local, reduce: BitXorExp */
			reduce(69),  /* ::, reduce: BitXorExp */
			nil,         /* . */
			nil,         /* : */
			reduce(69),  /* or, reduce: BitXorExp */
			reduce(69),  /* and, reduce: BitXorExp */
			reduce(69),  /* <, reduce: BitXorExp */
			reduce(69),  /* <=, reduce: BitXorExp */
			reduce(69),  /* >, reduce: BitXorExp */
			reduce(69),  /* >=, reduce: BitXorExp */
			reduce(69),  /* ==, reduce: BitXorExp */
			reduce(69),  /* ~=, reduce: BitXorExp */
			reduce(69),  /* |, reduce: BitXorExp */
			reduce(69),  /* ~, reduce: BitXorExp */
			shift(1677), /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(69),  /* (, reduce: BitXorExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(69),  /* ident, reduce: BitXorExp */
		},
	},
	actionRow{ // S1379
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(71),  /* return, reduce: BitAndExp */
			reduce(71),  /* ;, reduce: BitAndExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(71),  /* break, reduce: BitAndExp */
			reduce(71),  /* goto, reduce: BitAndExp */
			reduce(71),  /* do, reduce: BitAndExp */
			reduce(71),  /* end, reduce: BitAndExp */
			reduce(71),  /* while, reduce: BitAndExp */
			reduce(71),  /* repeat, reduce: BitAndExp */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(71),  /* if, reduce: BitAndExp */
			nil,         /* , */
			reduce(71),  /* for, reduce: BitAndExp */
			nil,         /* in */
			reduce(71),  /* function, reduce: BitAndExp */
			reduce(71),  /* local, reduce: BitAndExp */
			reduce(71),  /* ::, reduce: BitAndExp */
			nil,         /* . */
			nil,         /* : */
			reduce(71),  /* or, reduce: BitAndExp */
			reduce(71),  /* and, reduce: BitAndExp */
			reduce(71),  /* <, reduce: BitAndExp */
			reduce(71),  /* <=, reduce: BitAndExp */
			reduce(71),  /* >, reduce: BitAndExp */
			reduce(71),  /* >=, reduce: BitAndExp */
			reduce(71),  /* ==, reduce: BitAndExp */
			reduce(71),  /* ~=, reduce: BitAndExp */
			reduce(71),  /* |, reduce: BitAndExp */
			reduce(71),  /* ~, reduce: BitAndExp */
			reduce(71),  /* &, reduce: BitAndExp */
			shift(1678), /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(71),  /* (, reduce: BitAndExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(71),  /* ident, reduce: BitAndExp */
		},
	},
	actionRow{ // S1380
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(73), /* return, reduce: ConcatExp */
			reduce(73), /* ;, reduce: ConcatExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(73), /* break, reduce: ConcatExp */
			reduce(73), /* goto, reduce: ConcatExp */
			reduce(73), /* do, reduce: ConcatExp */
			reduce(73), /* end, reduce: ConcatExp */
			reduce(73), /* while, reduce: ConcatExp */
			reduce(73), /* repeat, reduce: ConcatExp */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(73), /* if, reduce: ConcatExp */
			nil,        /* , */
			reduce(73), /* for, reduce: ConcatExp */
			nil,        /* in */
			reduce(73), /* function, reduce: ConcatExp */
			reduce(73), /* local, reduce: ConcatExp */
			reduce(73), /* ::, reduce: ConcatExp */
			nil,        /* . */
			nil,        /* : */
			reduce(73), /* or, reduce: ConcatExp */
			reduce(73), /* and, reduce: ConcatExp */
			reduce(73), /* <, reduce: ConcatExp */
			reduce(73), /* <=, reduce: ConcatExp */
			reduce(73), /* >, reduce: ConcatExp */
			reduce(73), /* >=, reduce: ConcatExp */
			reduce(73), /* ==, reduce: ConcatExp */
			reduce(73), /* ~=, reduce: ConcatExp */
			reduce(73), /* |, reduce: ConcatExp */
			reduce(73), /* ~, reduce: ConcatExp */
			reduce(73), /* &, reduce: ConcatExp */
			reduce(73), /* .., reduce: ConcatExp */
			shift(214), /* << */
			shift(215), /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(73), /* (, reduce: ConcatExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(73), /* ident, reduce: ConcatExp */
		},
	},
	actionRow{ // S1381
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(77), /* return, reduce: ShiftExp */
			reduce(77), /* ;, reduce: ShiftExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(77), /* break, reduce: ShiftExp */
			reduce(77), /* goto, reduce: ShiftExp */
			reduce(77), /* do, reduce: ShiftExp */
			reduce(77), /* end, reduce: ShiftExp */
			reduce(77), /* while, reduce: ShiftExp */
			reduce(77), /* repeat, reduce: ShiftExp */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(77), /* if, reduce: ShiftExp */
			nil,        /* , */
			reduce(77), /* for, reduce: ShiftExp */
			nil,        /* in */
			reduce(77), /* function, reduce: ShiftExp */
			reduce(77), /* local, reduce: ShiftExp */
			reduce(77), /* ::, reduce: ShiftExp */
			nil,        /* . */
			nil,        /* : */
			reduce(77), /* or, reduce: ShiftExp */
			reduce(77), /* and, reduce: ShiftExp */
			reduce(77), /* <, reduce: ShiftExp */
			reduce(77), /* <=, reduce: ShiftExp */
			reduce(77), /* >, reduce: ShiftExp */
			reduce(77), /* >=, reduce: ShiftExp */
			reduce(77), /* ==, reduce: ShiftExp */
			reduce(77), /* ~=, reduce: ShiftExp */
			reduce(77), /* |, reduce: ShiftExp */
			reduce(77), /* ~, reduce: ShiftExp */
			reduce(77), /* &, reduce: ShiftExp */
			reduce(77), /* .., reduce: ShiftExp */
			reduce(77), /* <<, reduce: ShiftExp */
			reduce(77), /* >>, reduce: ShiftExp */
			shift(217), /* + */
			shift(218), /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(77), /* (, reduce: ShiftExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(77), /* ident, reduce: ShiftExp */
		},
	},
	actionRow{ // S1382
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(81), /* return, reduce: Sum */
			reduce(81), /* ;, reduce: Sum */
			nil,        /* empty */
			nil,        /* = */
			reduce(81), /* break, reduce: Sum */
			reduce(81), /* goto, reduce: Sum */
			reduce(81), /* do, reduce: Sum */
			reduce(81), /* end, reduce: Sum */
			reduce(81), /* while, reduce: Sum */
			reduce(81), /* repeat, reduce: Sum */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(81), /* if, reduce: Sum */
			nil,        /* , */
			reduce(81), /* for, reduce: Sum */
			nil,        /* in */
			reduce(81), /* function, reduce: Sum */
			reduce(81), /* local, reduce: Sum */
			reduce(81), /* ::, reduce: Sum */
			nil,        /* . */
			nil,        /* : */
			reduce(81), /* or, reduce: Sum */
			reduce(81), /* and, reduce: Sum */
			reduce(81), /* <, reduce: Sum */
			reduce(81), /* <=, reduce: Sum */
			reduce(81), /* >, reduce: Sum */
			reduce(81), /* >=, reduce: Sum */
			reduce(81), /* ==, reduce: Sum */
			reduce(81), /* ~=, reduce: Sum */
			reduce(81), /* |, reduce: Sum */
			reduce(81), /* ~, reduce: Sum */
			reduce(81), /* &, reduce: Sum */
			reduce(81), /* .., reduce: Sum */
			reduce(81), /* <<, reduce: Sum */
			reduce(81), /* >>, reduce: Sum */
			reduce(81), /* +, reduce: Sum */
			reduce(81), /* -, reduce: Sum */
			shift(220), /* * */
			shift(221), /* / */
			shift(222), /* % */
			shift(223), /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(81), /* (, reduce: Sum */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(81), /* ident, reduce: Sum */
		},
	},
	actionRow{ // S1383
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(87), /* return, reduce: Term */
			reduce(87), /* ;, reduce: Term */
			nil,        /* empty */
			nil,        /* = */
			reduce(87), /* break, reduce: Term */
			reduce(87), /* goto, reduce: Term */
			reduce(87), /* do, reduce: Term */
			reduce(87), /* end, reduce: Term */
			reduce(87), /* while, reduce: Term */
			reduce(87), /* repeat, reduce: Term */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(87), /* if, reduce: Term */
			nil,        /* , */
			reduce(87), /* for, reduce: Term */
			nil,        /* in */
			reduce(87), /* function, reduce: Term */
			reduce(87), /* local, reduce: Term */
			reduce(87), /* ::, reduce: Term */
			nil,        /* . */
			nil,        /* : */
			reduce(87), /* or, reduce: Term */
			reduce(87), /* and, reduce: Term */
			reduce(87), /* <, reduce: Term */
			reduce(87), /* <=, reduce: Term */
			reduce(87), /* >, reduce: Term */
			reduce(87), /* >=, reduce: Term */
			reduce(87), /* ==, reduce: Term */
			reduce(87), /* ~=, reduce: Term */
			reduce(87), /* |, reduce: Term */
			reduce(87), /* ~, reduce: Term */
			reduce(87), /* &, reduce: Term */
			reduce(87), /* .., reduce: Term */
			reduce(87), /* <<, reduce: Term */
			reduce(87), /* >>, reduce: Term */
			reduce(87), /* +, reduce: Term */
			reduce(87), /* -, reduce: Term */
			reduce(87), /* *, reduce: Term */
			reduce(87), /* /, reduce: Term */
			reduce(87), /* %, reduce: Term */
			reduce(87), /* //, reduce: Term */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(87), /* (, reduce: Term */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(87), /* ident, reduce: Term */
		},
	},
	actionRow{ // S1384
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1372), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1388), /* ( */
			nil,         /* ) */
			shift(1389), /* nil */
			shift(1390), /* true */
			shift(1391), /* false */
			shift(1392), /* ... */
			shift(1393), /* numdec */
			shift(1394), /* numhex */
			shift(1395), /* string */
			shift(1398), /* { */
			nil,         /* } */
			shift(1399), /* ident */
		},
	},
	actionRow{ // S1385
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(94), /* return, reduce: Factor */
			reduce(94), /* ;, reduce: Factor */
			nil,        /* empty */
			nil,        /* = */
			reduce(94), /* break, reduce: Factor */
			reduce(94), /* goto, reduce: Factor */
			reduce(94), /* do, reduce: Factor */
			reduce(94), /* end, reduce: Factor */
			reduce(94), /* while, reduce: Factor */
			reduce(94), /* repeat, reduce: Factor */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(94), /* if, reduce: Factor */
			nil,        /* , */
			reduce(94), /* for, reduce: Factor */
			nil,        /* in */
			reduce(94), /* function, reduce: Factor */
			reduce(94), /* local, reduce: Factor */
			reduce(94), /* ::, reduce: Factor */
			nil,        /* . */
			nil,        /* : */
			reduce(94), /* or, reduce: Factor */
			reduce(94), /* and, reduce: Factor */
			reduce(94), /* <, reduce: Factor */
			reduce(94), /* <=, reduce: Factor */
			reduce(94), /* >, reduce: Factor */
			reduce(94), /* >=, reduce: Factor */
			reduce(94), /* ==, reduce: Factor */
			reduce(94), /* ~=, reduce: Factor */
			reduce(94), /* |, reduce: Factor */
			reduce(94), /* ~, reduce: Factor */
			reduce(94), /* &, reduce: Factor */
			reduce(94), /* .., reduce: Factor */
			reduce(94), /* <<, reduce: Factor */
			reduce(94), /* >>, reduce: Factor */
			reduce(94), /* +, reduce: Factor */
			reduce(94), /* -, reduce: Factor */
			reduce(94), /* *, reduce: Factor */
			reduce(94), /* /, reduce: Factor */
			reduce(94), /* %, reduce: Factor */
			reduce(94), /* //, reduce: Factor */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(94), /* (, reduce: Factor */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(94), /* ident, reduce: Factor */
		},
	},
	actionRow{ // S1386
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(95),  /* return, reduce: Power */
			reduce(95),  /* ;, reduce: Power */
			nil,         /* empty */
			nil,         /* = */
			reduce(95),  /* break, reduce: Power */
			reduce(95),  /* goto, reduce: Power */
			reduce(95),  /* do, reduce: Power */
			reduce(95),  /* end, reduce: Power */
			reduce(95),  /* while, reduce: Power */
			reduce(95),  /* repeat, reduce: Power */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(95),  /* if, reduce: Power */
			nil,         /* , */
			reduce(95),  /* for, reduce: Power */
			nil,         /* in */
			reduce(95),  /* function, reduce: Power */
			reduce(95),  /* local, reduce: Power */
			reduce(95),  /* ::, reduce: Power */
			nil,         /* . */
			nil,         /* : */
			reduce(95),  /* or, reduce: Power */
			reduce(95),  /* and, reduce: Power */
			reduce(95),  /* <, reduce: Power */
			reduce(95),  /* <=, reduce: Power */
			reduce(95),  /* >, reduce: Power */
			reduce(95),  /* >=, reduce: Power */
			reduce(95),  /* ==, reduce: Power */
			reduce(95),  /* ~=, reduce: Power */
			reduce(95),  /* |, reduce: Power */
			reduce(95),  /* ~, reduce: Power */
			reduce(95),  /* &, reduce: Power */
			reduce(95),  /* .., reduce: Power */
			reduce(95),  /* <<, reduce: Power */
			reduce(95),  /* >>, reduce: Power */
			reduce(95),  /* +, reduce: Power */
			reduce(95),  /* -, reduce: Power */
			reduce(95),  /* *, reduce: Power */
			reduce(95),  /* /, reduce: Power */
			reduce(95),  /* %, reduce: Power */
			reduce(95),  /* //, reduce: Power */
			nil,         /* not */
			nil,         /* # */
			shift(1683), /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(95),  /* (, reduce: Power */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(95),  /* ident, reduce: Power */
		},
	},
	actionRow{ // S1387
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(114), /* return, reduce: Atom */
			reduce(114), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(114), /* break, reduce: Atom */
			reduce(114), /* goto, reduce: Atom */
			reduce(114), /* do, reduce: Atom */
			reduce(114), /* end, reduce: Atom */
			reduce(114), /* while, reduce: Atom */
			reduce(114), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(114), /* if, reduce: Atom */
			nil,         /* , */
			reduce(114), /* for, reduce: Atom */
			nil,         /* in */
			reduce(114), /* function, reduce: Atom */
			reduce(114), /* local, reduce: Atom */
			reduce(114), /* ::, reduce: Atom */
			shift(1684), /* . */
			shift(1685), /* : */
			reduce(114), /* or, reduce: Atom */
			reduce(114), /* and, reduce: Atom */
			reduce(114), /* <, reduce: Atom */
			reduce(114), /* <=, reduce: Atom */
			reduce(114), /* >, reduce: Atom */
			reduce(114), /* >=, reduce: Atom */
			reduce(114), /* ==, reduce: Atom */
			reduce(114), /* ~=, reduce: Atom */
			reduce(114), /* |, reduce: Atom */
			reduce(114), /* ~, reduce: Atom */
			reduce(114), /* &, reduce: Atom */
			reduce(114), /* .., reduce: Atom */
			reduce(114), /* <<, reduce: Atom */
			reduce(114), /* >>, reduce: Atom */
			reduce(114), /* +, reduce: Atom */
			reduce(114), /* -, reduce: Atom */
			reduce(114), /* *, reduce: Atom */
			reduce(114), /* /, reduce: Atom */
			reduce(114), /* %, reduce: Atom */
			reduce(114), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(114), /* ^, reduce: Atom */
			shift(1686), /* [ */
			nil,         /* ] */
			shift(1687), /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			shift(1689), /* string */
			shift(1691), /* { */
			nil,         /* } */
			reduce(114), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S1388
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(168), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(184), /* ( */
			nil,        /* ) */
			shift(185), /* nil */
			shift(186), /* true */
			shift(187), /* false */
			shift(188), /* ... */
			shift(189), /* numdec */
			shift(190), /* numhex */
			shift(191), /* string */
			shift(194), /* { */
			nil,        /* } */
			shift(195), /* ident */
		},
	},
	actionRow{ // S1389
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(105), /* return, reduce: Atom */
			reduce(105), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(105), /* break, reduce: Atom */
			reduce(105), /* goto, reduce: Atom */
			reduce(105), /* do, reduce: Atom */
			reduce(105), /* end, reduce: Atom */
			reduce(105), /* while, reduce: Atom */
			reduce(105), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(105), /* if, reduce: Atom */
			nil,         /* , */
			reduce(105), /* for, reduce: Atom */
			nil,         /* in */
			reduce(105), /* function, reduce: Atom */
			reduce(105), /* local, reduce: Atom */
			reduce(105), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(105), /* or, reduce: Atom */
			reduce(105), /* and, reduce: Atom */
			reduce(105), /* <, reduce: Atom */
			reduce(105), /* <=, reduce: Atom */
			reduce(105), /* >, reduce: Atom */
			reduce(105), /* >=, reduce: Atom */
			reduce(105), /* ==, reduce: Atom */
			reduce(105), /* ~=, reduce: Atom */
			reduce(105), /* |, reduce: Atom */
			reduce(105), /* ~, reduce: Atom */
			reduce(105), /* &, reduce: Atom */
			reduce(105), /* .., reduce: Atom */
			reduce(105), /* <<, reduce: Atom */
			reduce(105), /* >>, reduce: Atom */
			reduce(105), /* +, reduce: Atom */
			reduce(105), /* -, reduce: Atom */
			reduce(105), /* *, reduce: Atom */
			reduce(105), /* /, reduce: Atom */
			reduce(105), /* %, reduce: Atom */
			reduce(105), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(105), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(105), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(105), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S1390
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(106), /* return, reduce: Atom */
			reduce(106), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(106), /* break, reduce: Atom */
			reduce(106), /* goto, reduce: Atom */
			reduce(106), /* do, reduce: Atom */
			reduce(106), /* end, reduce: Atom */
			reduce(106), /* while, reduce: Atom */
			reduce(106), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(106), /* if, reduce: Atom */
			nil,         /* , */
			reduce(106), /* for, reduce: Atom */
			nil,         /* in */
			reduce(106), /* function, reduce: Atom */
			reduce(106), /* local, reduce: Atom */
			reduce(106), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(106), /* or, reduce: Atom */
			reduce(106), /* and, reduce: Atom */
			reduce(106), /* <, reduce: Atom */
			reduce(106), /* <=, reduce: Atom */
			reduce(106), /* >, reduce: Atom */
			reduce(106), /* >=, reduce: Atom */
			reduce(106), /* ==, reduce: Atom */
			reduce(106), /* ~=, reduce: Atom */
			reduce(106), /* |, reduce: Atom */
			reduce(106), /* ~, reduce: Atom */
			reduce(106), /* &, reduce: Atom */
			reduce(106), /* .., reduce: Atom */
			reduce(106), /* <<, reduce: Atom */
			reduce(106), /* >>, reduce: Atom */
			reduce(106), /* +, reduce: Atom */
			reduce(106), /* -, reduce: Atom */
			reduce(106), /* *, reduce: Atom */
			reduce(106), /* /, reduce: Atom */
			reduce(106), /* %, reduce: Atom */
			reduce(106), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(106), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(106), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(106), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S1391
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(107), /* return, reduce: Atom */
			reduce(107), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(107), /* break, reduce: Atom */
			reduce(107), /* goto, reduce: Atom */
			reduce(107), /* do, reduce: Atom */
			reduce(107), /* end, reduce: Atom */
			reduce(107), /* while, reduce: Atom */
			reduce(107), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(107), /* if, reduce: Atom */
			nil,         /* , */
			reduce(107), /* for, reduce: Atom */
			nil,         /* in */
			reduce(107), /* function, reduce: Atom */
			reduce(107), /* local, reduce: Atom */
			reduce(107), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(107), /* or, reduce: Atom */
			reduce(107), /* and, reduce: Atom */
			reduce(107), /* <, reduce: Atom */
			reduce(107), /* <=, reduce: Atom */
			reduce(107), /* >, reduce: Atom */
			reduce(107), /* >=, reduce: Atom */
			reduce(107), /* ==, reduce: Atom */
			reduce(107), /* ~=, reduce: Atom */
			reduce(107), /* |, reduce: Atom */
			reduce(107), /* ~, reduce: Atom */
			reduce(107), /* &, reduce: Atom */
			reduce(107), /* .., reduce: Atom */
			reduce(107), /* <<, reduce: Atom */
			reduce(107), /* >>, reduce: Atom */
			reduce(107), /* +, reduce: Atom */
			reduce(107), /* -, reduce: Atom */
			reduce(107), /* *, reduce: Atom */
			reduce(107), /* /, reduce: Atom */
			reduce(107), /* %, reduce: Atom */
			reduce(107), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(107), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(107), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(107), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S1392
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(108), /* return, reduce: Atom */
			reduce(108), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(108), /* break, reduce: Atom */
			reduce(108), /* goto, reduce: Atom */
			reduce(108), /* do, reduce: Atom */
			reduce(108), /* end, reduce: Atom */
			reduce(108), /* while, reduce: Atom */
			reduce(108), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(108), /* if, reduce: Atom */
			nil,         /* , */
			reduce(108), /* for, reduce: Atom */
			nil,         /* in */
			reduce(108), /* function, reduce: Atom */
			reduce(108), /* local, reduce: Atom */
			reduce(108), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(108), /* or, reduce: Atom */
			reduce(108), /* and, reduce: Atom */
			reduce(108), /* <, reduce: Atom */
			reduce(108), /* <=, reduce: Atom */
			reduce(108), /* >, reduce: Atom */
			reduce(108), /* >=, reduce: Atom */
			reduce(108), /* ==, reduce: Atom */
			reduce(108), /* ~=, reduce: Atom */
			reduce(108), /* |, reduce: Atom */
			reduce(108), /* ~, reduce: Atom */
			reduce(108), /* &, reduce: Atom */
			reduce(108), /* .., reduce: Atom */
			reduce(108), /* <<, reduce: Atom */
			reduce(108), /* >>, reduce: Atom */
			reduce(108), /* +, reduce: Atom */
			reduce(108), /* -, reduce: Atom */
			reduce(108), /* *, reduce: Atom */
			reduce(108), /* /, reduce: Atom */
			reduce(108), /* %, reduce: Atom */
			reduce(108), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(108), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(108), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(108), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S1393
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(109), /* return, reduce: Atom */
			reduce(109), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(109), /* break, reduce: Atom */
			reduce(109), /* goto, reduce: Atom */
			reduce(109), /* do, reduce: Atom */
			reduce(109), /* end, reduce: Atom */
			reduce(109), /* while, reduce: Atom */
			reduce(109), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(109), /* if, reduce: Atom */
			nil,         /* , */
			reduce(109), /* for, reduce: Atom */
			nil,         /* in */
			reduce(109), /* function, reduce: Atom */
			reduce(109), /* local, reduce: Atom */
			reduce(109), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(109), /* or, reduce: Atom */
			reduce(109), /* and, reduce: Atom */
			reduce(109), /* <, reduce: Atom */
			reduce(109), /* <=, reduce: Atom */
			reduce(109), /* >, reduce: Atom */
			reduce(109), /* >=, reduce: Atom */
			reduce(109), /* ==, reduce: Atom */
			reduce(109), /* ~=, reduce: Atom */
			reduce(109), /* |, reduce: Atom */
			reduce(109), /* ~, reduce: Atom */
			reduce(109), /* &, reduce: Atom */
			reduce(109), /* .., reduce: Atom */
			reduce(109), /* <<, reduce: Atom */
			reduce(109), /* >>, reduce: Atom */
			reduce(109), /* +, reduce: Atom */
			reduce(109), /* -, reduce: Atom */
			reduce(109), /* *, reduce: Atom */
			reduce(109), /* /, reduce: Atom */
			reduce(109), /* %, reduce: Atom */
			reduce(109), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(109), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(109), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(109), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S1394
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(110), /* return, reduce: Atom */
			reduce(110), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(110), /* break, reduce: Atom */
			reduce(110), /* goto, reduce: Atom */
			reduce(110), /* do, reduce: Atom */
			reduce(110), /* end, reduce: Atom */
			reduce(110), /* while, reduce: Atom */
			reduce(110), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(110), /* if, reduce: Atom */
			nil,         /* , */
			reduce(110), /* for, reduce: Atom */
			nil,         /* in */
			reduce(110), /* function, reduce: Atom */
			reduce(110), /* local, reduce: Atom */
			reduce(110), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(110), /* or, reduce: Atom */
			reduce(110), /* and, reduce: Atom */
			reduce(110), /* <, reduce: Atom */
			reduce(110), /* <=, reduce: Atom */
			reduce(110), /* >, reduce: Atom */
			reduce(110), /* >=, reduce: Atom */
			reduce(110), /* ==, reduce: Atom */
			reduce(110), /* ~=, reduce: Atom */
			reduce(110), /* |, reduce: Atom */
			reduce(110), /* ~, reduce: Atom */
			reduce(110), /* &, reduce: Atom */
			reduce(110), /* .., reduce: Atom */
			reduce(110), /* <<, reduce: Atom */
			reduce(110), /* >>, reduce: Atom */
			reduce(110), /* +, reduce: Atom */
			reduce(110), /* -, reduce: Atom */
			reduce(110), /* *, reduce: Atom */
			reduce(110), /* /, reduce: Atom */
			reduce(110), /* %, reduce: Atom */
			reduce(110), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(110), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(110), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(110), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S1395
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(111), /* return, reduce: Atom */
			reduce(111), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(111), /* break, reduce: Atom */
			reduce(111), /* goto, reduce: Atom */
			reduce(111), /* do, reduce: Atom */
			reduce(111), /* end, reduce: Atom */
			reduce(111), /* while, reduce: Atom */
			reduce(111), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(111), /* if, reduce: Atom */
			nil,         /* , */
			reduce(111), /* for, reduce: Atom */
			nil,         /* in */
			reduce(111), /* function, reduce: Atom */
			reduce(111), /* local, reduce: Atom */
			reduce(111), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(111), /* or, reduce: Atom */
			reduce(111), /* and, reduce: Atom */
			reduce(111), /* <, reduce: Atom */
			reduce(111), /* <=, reduce: Atom */
			reduce(111), /* >, reduce: Atom */
			reduce(111), /* >=, reduce: Atom */
			reduce(111), /* ==, reduce: Atom */
			reduce(111), /* ~=, reduce: Atom */
			reduce(111), /* |, reduce: Atom */
			reduce(111), /* ~, reduce: Atom */
			reduce(111), /* &, reduce: Atom */
			reduce(111), /* .., reduce: Atom */
			reduce(111), /* <<, reduce: Atom */
			reduce(111), /* >>, reduce: Atom */
			reduce(111), /* +, reduce: Atom */
			reduce(111), /* -, reduce: Atom */
			reduce(111), /* *, reduce: Atom */
			reduce(111), /* /, reduce: Atom */
			reduce(111), /* %, reduce: Atom */
			reduce(111), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(111), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(111), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(111), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S1396
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(112), /* return, reduce: Atom */
			reduce(112), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(112), /* break, reduce: Atom */
			reduce(112), /* goto, reduce: Atom */
			reduce(112), /* do, reduce: Atom */
			reduce(112), /* end, reduce: Atom */
			reduce(112), /* while, reduce: Atom */
			reduce(112), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(112), /* if, reduce: Atom */
			nil,         /* , */
			reduce(112), /* for, reduce: Atom */
			nil,         /* in */
			reduce(112), /* function, reduce: Atom */
			reduce(112), /* local, reduce: Atom */
			reduce(112), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(112), /* or, reduce: Atom */
			reduce(112), /* and, reduce: Atom */
			reduce(112), /* <, reduce: Atom */
			reduce(112), /* <=, reduce: Atom */
			reduce(112), /* >, reduce: Atom */
			reduce(112), /* >=, reduce: Atom */
			reduce(112), /* ==, reduce: Atom */
			reduce(112), /* ~=, reduce: Atom */
			reduce(112), /* |, reduce: Atom */
			reduce(112), /* ~, reduce: Atom */
			reduce(112), /* &, reduce: Atom */
			reduce(112), /* .., reduce: Atom */
			reduce(112), /* <<, reduce: Atom */
			reduce(112), /* >>, reduce: Atom */
			reduce(112), /* +, reduce: Atom */
			reduce(112), /* -, reduce: Atom */
			reduce(112), /* *, reduce: Atom */
			reduce(112), /* /, reduce: Atom */
			reduce(112), /* %, reduce: Atom */
			reduce(112), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(112), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(112), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(112), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S1397
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(113), /* return, reduce: Atom */
			reduce(113), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(113), /* break, reduce: Atom */
			reduce(113), /* goto, reduce: Atom */
			reduce(113), /* do, reduce: Atom */
			reduce(113), /* end, reduce: Atom */
			reduce(113), /* while, reduce: Atom */
			reduce(113), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(113), /* if, reduce: Atom */
			nil,         /* , */
			reduce(113), /* for, reduce: Atom */
			nil,         /* in */
			reduce(113), /* function, reduce: Atom */
			reduce(113), /* local, reduce: Atom */
			reduce(113), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(113), /* or, reduce: Atom */
			reduce(113), /* and, reduce: Atom */
			reduce(113), /* <, reduce: Atom */
			reduce(113), /* <=, reduce: Atom */
			reduce(113), /* >, reduce: Atom */
			reduce(113), /* >=, reduce: Atom */
			reduce(113), /* ==, reduce: Atom */
			reduce(113), /* ~=, reduce: Atom */
			reduce(113), /* |, reduce: Atom */
			reduce(113), /* ~, reduce: Atom */
			reduce(113), /* &, reduce: Atom */
			reduce(113), /* .., reduce: Atom */
			reduce(113), /* <<, reduce: Atom */
			reduce(113), /* >>, reduce: Atom */
			reduce(113), /* +, reduce: Atom */
			reduce(113), /* -, reduce: Atom */
			reduce(113), /* *, reduce: Atom */
			reduce(113), /* /, reduce: Atom */
			reduce(113), /* %, reduce: Atom */
			reduce(113), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(113), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(113), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(113), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S1398
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			shift(254), /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(268), /* ident */
		},
	},
	actionRow{ // S1399
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(134), /* return, reduce: Name */
			reduce(134), /* ;, reduce: Name */
			nil,         /* empty */
			nil,         /* = */
			reduce(134), /* break, reduce: Name */
			reduce(134), /* goto, reduce: Name */
			reduce(134), /* do, reduce: Name */
			reduce(134), /* end, reduce: Name */
			reduce(134), /* while, reduce: Name */
			reduce(134), /* repeat, reduce: Name */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(134), /* if, reduce: Name */
			nil,         /* , */
			reduce(134), /* for, reduce: Name */
			nil,         /* in */
			reduce(134), /* function, reduce: Name */
			reduce(134), /* local, reduce: Name */
			reduce(134), /* ::, reduce: Name */
			reduce(134), /* ., reduce: Name */
			reduce(134), /* :, reduce: Name */
			reduce(134), /* or, reduce: Name */
			reduce(134), /* and, reduce: Name */
			reduce(134), /* <, reduce: Name */
			reduce(134), /* <=, reduce: Name */
			reduce(134), /* >, reduce: Name */
			reduce(134), /* >=, reduce: Name */
			reduce(134), /* ==, reduce: Name */
			reduce(134), /* ~=, reduce: Name */
			reduce(134), /* |, reduce: Name */
			reduce(134), /* ~, reduce: Name */
			reduce(134), /* &, reduce: Name */
			reduce(134), /* .., reduce: Name */
			reduce(134), /* <<, reduce: Name */
			reduce(134), /* >>, reduce: Name */
			reduce(134), /* +, reduce: Name */
			reduce(134), /* -, reduce: Name */
			reduce(134), /* *, reduce: Name */
			reduce(134), /* /, reduce: Name */
			reduce(134), /* %, reduce: Name */
			reduce(134), /* //, reduce: Name */
			nil,         /* not */
			nil,         /* # */
			reduce(134), /* ^, reduce: Name */
			reduce(134), /* [, reduce: Name */
			nil,         /* ] */
			reduce(134), /* (, reduce: Name */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(134), /* string, reduce: Name */
			reduce(134), /* {, reduce: Name */
			nil,         /* } */
			reduce(134), /* ident, reduce: Name */
		},
	},
	actionRow{ // S1400
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(1694), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			shift(1695), /* elseif */
			shift(1697), /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1401
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			shift(1698), /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1402
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			shift(1699), /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(1221), /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1403
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(1700), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1404
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(43),  /* return, reduce: LocalStat */
			reduce(43),  /* ;, reduce: LocalStat */
			nil,         /* empty */
			nil,         /* = */
			reduce(43),  /* break, reduce: LocalStat */
			reduce(43),  /* goto, reduce: LocalStat */
			reduce(43),  /* do, reduce: LocalStat */
			reduce(43),  /* end, reduce: LocalStat */
			reduce(43),  /* while, reduce: LocalStat */
			reduce(43),  /* repeat, reduce: LocalStat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(43),  /* if, reduce: LocalStat */
			shift(1343), /* , */
			reduce(43),  /* for, reduce: LocalStat */
			nil,         /* in */
			reduce(43),  /* function, reduce: LocalStat */
			reduce(43),  /* local, reduce: LocalStat */
			reduce(43),  /* ::, reduce: LocalStat */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(43),  /* (, reduce: LocalStat */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(43),  /* ident, reduce: LocalStat */
		},
	},
	actionRow{ // S1405
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(52), /* return, reduce: NameList */
			reduce(52), /* ;, reduce: NameList */
			nil,        /* empty */
			reduce(52), /* =, reduce: NameList */
			reduce(52), /* break, reduce: NameList */
			reduce(52), /* goto, reduce: NameList */
			reduce(52), /* do, reduce: NameList */
			reduce(52), /* end, reduce: NameList */
			reduce(52), /* while, reduce: NameList */
			reduce(52), /* repeat, reduce: NameList */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(52), /* if, reduce: NameList */
			reduce(52), /* ,, reduce: NameList */
			reduce(52), /* for, reduce: NameList */
			nil,        /* in */
			reduce(52), /* function, reduce: NameList */
			reduce(52), /* local, reduce: NameList */
			reduce(52), /* ::, reduce: NameList */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(52), /* (, reduce: NameList */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(52), /* ident, reduce: NameList */
		},
	},
	actionRow{ // S1406
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(41), /* return, reduce: LocalFunctionStat */
			reduce(41), /* ;, reduce: LocalFunctionStat */
			nil,        /* empty */
			nil,        /* = */
			reduce(41), /* break, reduce: LocalFunctionStat */
			reduce(41), /* goto, reduce: LocalFunctionStat */
			reduce(41), /* do, reduce: LocalFunctionStat */
			reduce(41), /* end, reduce: LocalFunctionStat */
			reduce(41), /* while, reduce: LocalFunctionStat */
			reduce(41), /* repeat, reduce: LocalFunctionStat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(41), /* if, reduce: LocalFunctionStat */
			nil,        /* , */
			reduce(41), /* for, reduce: LocalFunctionStat */
			nil,        /* in */
			reduce(41), /* function, reduce: LocalFunctionStat */
			reduce(41), /* local, reduce: LocalFunctionStat */
			reduce(41), /* ::, reduce: LocalFunctionStat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(41), /* (, reduce: LocalFunctionStat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(41), /* ident, reduce: LocalFunctionStat */
		},
	},
	actionRow{ // S1407
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(1701), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1408
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(126), /* do, reduce: TableConstructor */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(126), /* ., reduce: TableConstructor */
			reduce(126), /* :, reduce: TableConstructor */
			reduce(126), /* or, reduce: TableConstructor */
			reduce(126), /* and, reduce: TableConstructor */
			reduce(126), /* <, reduce: TableConstructor */
			reduce(126), /* <=, reduce: TableConstructor */
			reduce(126), /* >, reduce: TableConstructor */
			reduce(126), /* >=, reduce: TableConstructor */
			reduce(126), /* ==, reduce: TableConstructor */
			reduce(126), /* ~=, reduce: TableConstructor */
			reduce(126), /* |, reduce: TableConstructor */
			reduce(126), /* ~, reduce: TableConstructor */
			reduce(126), /* &, reduce: TableConstructor */
			reduce(126), /* .., reduce: TableConstructor */
			reduce(126), /* <<, reduce: TableConstructor */
			reduce(126), /* >>, reduce: TableConstructor */
			reduce(126), /* +, reduce: TableConstructor */
			reduce(126), /* -, reduce: TableConstructor */
			reduce(126), /* *, reduce: TableConstructor */
			reduce(126), /* /, reduce: TableConstructor */
			reduce(126), /* %, reduce: TableConstructor */
			reduce(126), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(126), /* ^, reduce: TableConstructor */
			reduce(126), /* [, reduce: TableConstructor */
			nil,         /* ] */
			reduce(126), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(126), /* string, reduce: TableConstructor */
			reduce(126), /* {, reduce: TableConstructor */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1409
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(56),  /* $, reduce: Exp */
			reduce(56),  /* return, reduce: Exp */
			reduce(56),  /* ;, reduce: Exp */
			nil,         /* empty */
			nil,         /* = */
			reduce(56),  /* break, reduce: Exp */
			reduce(56),  /* goto, reduce: Exp */
			reduce(56),  /* do, reduce: Exp */
			nil,         /* end */
			reduce(56),  /* while, reduce: Exp */
			reduce(56),  /* repeat, reduce: Exp */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(56),  /* if, reduce: Exp */
			nil,         /* , */
			reduce(56),  /* for, reduce: Exp */
			nil,         /* in */
			reduce(56),  /* function, reduce: Exp */
			reduce(56),  /* local, reduce: Exp */
			reduce(56),  /* ::, reduce: Exp */
			nil,         /* . */
			nil,         /* : */
			reduce(56),  /* or, reduce: Exp */
			shift(1064), /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(56),  /* (, reduce: Exp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(56),  /* ident, reduce: Exp */
		},
	},
	actionRow{ // S1410
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(1702), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1411
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(58), /* $, reduce: AndExp */
			reduce(58), /* return, reduce: AndExp */
			reduce(58), /* ;, reduce: AndExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(58), /* break, reduce: AndExp */
			reduce(58), /* goto, reduce: AndExp */
			reduce(58), /* do, reduce: AndExp */
			nil,        /* end */
			reduce(58), /* while, reduce: AndExp */
			reduce(58), /* repeat, reduce: AndExp */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(58), /* if, reduce: AndExp */
			nil,        /* , */
			reduce(58), /* for, reduce: AndExp */
			nil,        /* in */
			reduce(58), /* function, reduce: AndExp */
			reduce(58), /* local, reduce: AndExp */
			reduce(58), /* ::, reduce: AndExp */
			nil,        /* . */
			nil,        /* : */
			reduce(58), /* or, reduce: AndExp */
			reduce(58), /* and, reduce: AndExp */
			shift(203), /* < */
			shift(204), /* <= */
			shift(205), /* > */
			shift(206), /* >= */
			shift(207), /* == */
			shift(208), /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(58), /* (, reduce: AndExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(58), /* ident, reduce: AndExp */
		},
	},
	actionRow{ // S1412
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(66),  /* $, reduce: CompExp */
			reduce(66),  /* return, reduce: CompExp */
			reduce(66),  /* ;, reduce: CompExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(66),  /* break, reduce: CompExp */
			reduce(66),  /* goto, reduce: CompExp */
			reduce(66),  /* do, reduce: CompExp */
			nil,         /* end */
			reduce(66),  /* while, reduce: CompExp */
			reduce(66),  /* repeat, reduce: CompExp */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(66),  /* if, reduce: CompExp */
			nil,         /* , */
			reduce(66),  /* for, reduce: CompExp */
			nil,         /* in */
			reduce(66),  /* function, reduce: CompExp */
			reduce(66),  /* local, reduce: CompExp */
			reduce(66),  /* ::, reduce: CompExp */
			nil,         /* . */
			nil,         /* : */
			reduce(66),  /* or, reduce: CompExp */
			reduce(66),  /* and, reduce: CompExp */
			reduce(66),  /* <, reduce: CompExp */
			reduce(66),  /* <=, reduce: CompExp */
			reduce(66),  /* >, reduce: CompExp */
			reduce(66),  /* >=, reduce: CompExp */
			reduce(66),  /* ==, reduce: CompExp */
			reduce(66),  /* ~=, reduce: CompExp */
			shift(1066), /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(66),  /* (, reduce: CompExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(66),  /* ident, reduce: CompExp */
		},
	},
	actionRow{ // S1413
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(68),  /* $, reduce: BitOrExp */
			reduce(68),  /* return, reduce: BitOrExp */
			reduce(68),  /* ;, reduce: BitOrExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(68),  /* break, reduce: BitOrExp */
			reduce(68),  /* goto, reduce: BitOrExp */
			reduce(68),  /* do, reduce: BitOrExp */
			nil,         /* end */
			reduce(68),  /* while, reduce: BitOrExp */
			reduce(68),  /* repeat, reduce: BitOrExp */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(68),  /* if, reduce: BitOrExp */
			nil,         /* , */
			reduce(68),  /* for, reduce: BitOrExp */
			nil,         /* in */
			reduce(68),  /* function, reduce: BitOrExp */
			reduce(68),  /* local, reduce: BitOrExp */
			reduce(68),  /* ::, reduce: BitOrExp */
			nil,         /* . */
			nil,         /* : */
			reduce(68),  /* or, reduce: BitOrExp */
			reduce(68),  /* and, reduce: BitOrExp */
			reduce(68),  /* <, reduce: BitOrExp */
			reduce(68),  /* <=, reduce: BitOrExp */
			reduce(68),  /* >, reduce: BitOrExp */
			reduce(68),  /* >=, reduce: BitOrExp */
			reduce(68),  /* ==, reduce: BitOrExp */
			reduce(68),  /* ~=, reduce: BitOrExp */
			reduce(68),  /* |, reduce: BitOrExp */
			shift(1067), /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(68),  /* (, reduce: BitOrExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(68),  /* ident, reduce: BitOrExp */
		},
	},
	actionRow{ // S1414
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(70),  /* $, reduce: BitXorExp */
			reduce(70),  /* return, reduce: BitXorExp */
			reduce(70),  /* ;, reduce: BitXorExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(70),  /* break, reduce: BitXorExp */
			reduce(70),  /* goto, reduce: BitXorExp */
			reduce(70),  /* do, reduce: BitXorExp */
			nil,         /* end */
			reduce(70),  /* while, reduce: BitXorExp */
			reduce(70),  /* repeat, reduce: BitXorExp */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(70),  /* if, reduce: BitXorExp */
			nil,         /* , */
			reduce(70),  /* for, reduce: BitXorExp */
			nil,         /* in */
			reduce(70),  /* function, reduce: BitXorExp */
			reduce(70),  /* local, reduce: BitXorExp */
			reduce(70),  /* ::, reduce: BitXorExp */
			nil,         /* . */
			nil,         /* : */
			reduce(70),  /* or, reduce: BitXorExp */
			reduce(70),  /* and, reduce: BitXorExp */
			reduce(70),  /* <, reduce: BitXorExp */
			reduce(70),  /* <=, reduce: BitXorExp */
			reduce(70),  /* >, reduce: BitXorExp */
			reduce(70),  /* >=, reduce: BitXorExp */
			reduce(70),  /* ==, reduce: BitXorExp */
			reduce(70),  /* ~=, reduce: BitXorExp */
			reduce(70),  /* |, reduce: BitXorExp */
			reduce(70),  /* ~, reduce: BitXorExp */
			shift(1068), /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(70),  /* (, reduce: BitXorExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(70),  /* ident, reduce: BitXorExp */
		},
	},
	actionRow{ // S1415
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(72),  /* $, reduce: BitAndExp */
			reduce(72),  /* return, reduce: BitAndExp */
			reduce(72),  /* ;, reduce: BitAndExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(72),  /* break, reduce: BitAndExp */
			reduce(72),  /* goto, reduce: BitAndExp */
			reduce(72),  /* do, reduce: BitAndExp */
			nil,         /* end */
			reduce(72),  /* while, reduce: BitAndExp */
			reduce(72),  /* repeat, reduce: BitAndExp */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(72),  /* if, reduce: BitAndExp */
			nil,         /* , */
			reduce(72),  /* for, reduce: BitAndExp */
			nil,         /* in */
			reduce(72),  /* function, reduce: BitAndExp */
			reduce(72),  /* local, reduce: BitAndExp */
			reduce(72),  /* ::, reduce: BitAndExp */
			nil,         /* . */
			nil,         /* : */
			reduce(72),  /* or, reduce: BitAndExp */
			reduce(72),  /* and, reduce: BitAndExp */
			reduce(72),  /* <, reduce: BitAndExp */
			reduce(72),  /* <=, reduce: BitAndExp */
			reduce(72),  /* >, reduce: BitAndExp */
			reduce(72),  /* >=, reduce: BitAndExp */
			reduce(72),  /* ==, reduce: BitAndExp */
			reduce(72),  /* ~=, reduce: BitAndExp */
			reduce(72),  /* |, reduce: BitAndExp */
			reduce(72),  /* ~, reduce: BitAndExp */
			reduce(72),  /* &, reduce: BitAndExp */
			shift(1069), /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(72),  /* (, reduce: BitAndExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(72),  /* ident, reduce: BitAndExp */
		},
	},
	actionRow{ // S1416
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(74), /* $, reduce: ConcatExp */
			reduce(74), /* return, reduce: ConcatExp */
			reduce(74), /* ;, reduce: ConcatExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(74), /* break, reduce: ConcatExp */
			reduce(74), /* goto, reduce: ConcatExp */
			reduce(74), /* do, reduce: ConcatExp */
			nil,        /* end */
			reduce(74), /* while, reduce: ConcatExp */
			reduce(74), /* repeat, reduce: ConcatExp */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(74), /* if, reduce: ConcatExp */
			nil,        /* , */
			reduce(74), /* for, reduce: ConcatExp */
			nil,        /* in */
			reduce(74), /* function, reduce: ConcatExp */
			reduce(74), /* local, reduce: ConcatExp */
			reduce(74), /* ::, reduce: ConcatExp */
			nil,        /* . */
			nil,        /* : */
			reduce(74), /* or, reduce: ConcatExp */
			reduce(74), /* and, reduce: ConcatExp */
			reduce(74), /* <, reduce: ConcatExp */
			reduce(74), /* <=, reduce: ConcatExp */
			reduce(74), /* >, reduce: ConcatExp */
			reduce(74), /* >=, reduce: ConcatExp */
			reduce(74), /* ==, reduce: ConcatExp */
			reduce(74), /* ~=, reduce: ConcatExp */
			reduce(74), /* |, reduce: ConcatExp */
			reduce(74), /* ~, reduce: ConcatExp */
			reduce(74), /* &, reduce: ConcatExp */
			reduce(74), /* .., reduce: ConcatExp */
			shift(214), /* << */
			shift(215), /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(74), /* (, reduce: ConcatExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(74), /* ident, reduce: ConcatExp */
		},
	},
	actionRow{ // S1417
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(78), /* $, reduce: ShiftExp */
			reduce(78), /* return, reduce: ShiftExp */
			reduce(78), /* ;, reduce: ShiftExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(78), /* break, reduce: ShiftExp */
			reduce(78), /* goto, reduce: ShiftExp */
			reduce(78), /* do, reduce: ShiftExp */
			nil,        /* end */
			reduce(78), /* while, reduce: ShiftExp */
			reduce(78), /* repeat, reduce: ShiftExp */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(78), /* if, reduce: ShiftExp */
			nil,        /* , */
			reduce(78), /* for, reduce: ShiftExp */
			nil,        /* in */
			reduce(78), /* function, reduce: ShiftExp */
			reduce(78), /* local, reduce: ShiftExp */
			reduce(78), /* ::, reduce: ShiftExp */
			nil,        /* . */
			nil,        /* : */
			reduce(78), /* or, reduce: ShiftExp */
			reduce(78), /* and, reduce: ShiftExp */
			reduce(78), /* <, reduce: ShiftExp */
			reduce(78), /* <=, reduce: ShiftExp */
			reduce(78), /* >, reduce: ShiftExp */
			reduce(78), /* >=, reduce: ShiftExp */
			reduce(78), /* ==, reduce: ShiftExp */
			reduce(78), /* ~=, reduce: ShiftExp */
			reduce(78), /* |, reduce: ShiftExp */
			reduce(78), /* ~, reduce: ShiftExp */
			reduce(78), /* &, reduce: ShiftExp */
			reduce(78), /* .., reduce: ShiftExp */
			reduce(78), /* <<, reduce: ShiftExp */
			reduce(78), /* >>, reduce: ShiftExp */
			shift(217), /* + */
			shift(218), /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(78), /* (, reduce: ShiftExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(78), /* ident, reduce: ShiftExp */
		},
	},
	actionRow{ // S1418
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(82), /* $, reduce: Sum */
			reduce(82), /* return, reduce: Sum */
			reduce(82), /* ;, reduce: Sum */
			nil,        /* empty */
			nil,        /* = */
			reduce(82), /* break, reduce: Sum */
			reduce(82), /* goto, reduce: Sum */
			reduce(82), /* do, reduce: Sum */
			nil,        /* end */
			reduce(82), /* while, reduce: Sum */
			reduce(82), /* repeat, reduce: Sum */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(82), /* if, reduce: Sum */
			nil,        /* , */
			reduce(82), /* for, reduce: Sum */
			nil,        /* in */
			reduce(82), /* function, reduce: Sum */
			reduce(82), /* local, reduce: Sum */
			reduce(82), /* ::, reduce: Sum */
			nil,        /* . */
			nil,        /* : */
			reduce(82), /* or, reduce: Sum */
			reduce(82), /* and, reduce: Sum */
			reduce(82), /* <, reduce: Sum */
			reduce(82), /* <=, reduce: Sum */
			reduce(82), /* >, reduce: Sum */
			reduce(82), /* >=, reduce: Sum */
			reduce(82), /* ==, reduce: Sum */
			reduce(82), /* ~=, reduce: Sum */
			reduce(82), /* |, reduce: Sum */
			reduce(82), /* ~, reduce: Sum */
			reduce(82), /* &, reduce: Sum */
			reduce(82), /* .., reduce: Sum */
			reduce(82), /* <<, reduce: Sum */
			reduce(82), /* >>, reduce: Sum */
			reduce(82), /* +, reduce: Sum */
			reduce(82), /* -, reduce: Sum */
			shift(220), /* * */
			shift(221), /* / */
			shift(222), /* % */
			shift(223), /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(82), /* (, reduce: Sum */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(82), /* ident, reduce: Sum */
		},
	},
	actionRow{ // S1419
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(88), /* $, reduce: Term */
			reduce(88), /* return, reduce: Term */
			reduce(88), /* ;, reduce: Term */
			nil,        /* empty */
			nil,        /* = */
			reduce(88), /* break, reduce: Term */
			reduce(88), /* goto, reduce: Term */
			reduce(88), /* do, reduce: Term */
			nil,        /* end */
			reduce(88), /* while, reduce: Term */
			reduce(88), /* repeat, reduce: Term */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(88), /* if, reduce: Term */
			nil,        /* , */
			reduce(88), /* for, reduce: Term */
			nil,        /* in */
			reduce(88), /* function, reduce: Term */
			reduce(88), /* local, reduce: Term */
			reduce(88), /* ::, reduce: Term */
			nil,        /* . */
			nil,        /* : */
			reduce(88), /* or, reduce: Term */
			reduce(88), /* and, reduce: Term */
			reduce(88), /* <, reduce: Term */
			reduce(88), /* <=, reduce: Term */
			reduce(88), /* >, reduce: Term */
			reduce(88), /* >=, reduce: Term */
			reduce(88), /* ==, reduce: Term */
			reduce(88), /* ~=, reduce: Term */
			reduce(88), /* |, reduce: Term */
			reduce(88), /* ~, reduce: Term */
			reduce(88), /* &, reduce: Term */
			reduce(88), /* .., reduce: Term */
			reduce(88), /* <<, reduce: Term */
			reduce(88), /* >>, reduce: Term */
			reduce(88), /* +, reduce: Term */
			reduce(88), /* -, reduce: Term */
			reduce(88), /* *, reduce: Term */
			reduce(88), /* /, reduce: Term */
			reduce(88), /* %, reduce: Term */
			reduce(88), /* //, reduce: Term */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(88), /* (, reduce: Term */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(88), /* ident, reduce: Term */
		},
	},
	actionRow{ // S1420
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(96), /* $, reduce: Power */
			reduce(96), /* return, reduce: Power */
			reduce(96), /* ;, reduce: Power */
			nil,        /* empty */
			nil,        /* = */
			reduce(96), /* break, reduce: Power */
			reduce(96), /* goto, reduce: Power */
			reduce(96), /* do, reduce: Power */
			nil,        /* end */
			reduce(96), /* while, reduce: Power */
			reduce(96), /* repeat, reduce: Power */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(96), /* if, reduce: Power */
			nil,        /* , */
			reduce(96), /* for, reduce: Power */
			nil,        /* in */
			reduce(96), /* function, reduce: Power */
			reduce(96), /* local, reduce: Power */
			reduce(96), /* ::, reduce: Power */
			nil,        /* . */
			nil,        /* : */
			reduce(96), /* or, reduce: Power */
			reduce(96), /* and, reduce: Power */
			reduce(96), /* <, reduce: Power */
			reduce(96), /* <=, reduce: Power */
			reduce(96), /* >, reduce: Power */
			reduce(96), /* >=, reduce: Power */
			reduce(96), /* ==, reduce: Power */
			reduce(96), /* ~=, reduce: Power */
			reduce(96), /* |, reduce: Power */
			reduce(96), /* ~, reduce: Power */
			reduce(96), /* &, reduce: Power */
			reduce(96), /* .., reduce: Power */
			reduce(96), /* <<, reduce: Power */
			reduce(96), /* >>, reduce: Power */
			reduce(96), /* +, reduce: Power */
			reduce(96), /* -, reduce: Power */
			reduce(96), /* *, reduce: Power */
			reduce(96), /* /, reduce: Power */
			reduce(96), /* %, reduce: Power */
			reduce(96), /* //, reduce: Power */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(96), /* (, reduce: Power */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(96), /* ident, reduce: Power */
		},
	},
	actionRow{ // S1421
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(99), /* $, reduce: Var */
			reduce(99), /* return, reduce: Var */
			reduce(99), /* ;, reduce: Var */
			nil,        /* empty */
			nil,        /* = */
			reduce(99), /* break, reduce: Var */
			reduce(99), /* goto, reduce: Var */
			reduce(99), /* do, reduce: Var */
			nil,        /* end */
			reduce(99), /* while, reduce: Var */
			reduce(99), /* repeat, reduce: Var */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(99), /* if, reduce: Var */
			nil,        /* , */
			reduce(99), /* for, reduce: Var */
			nil,        /* in */
			reduce(99), /* function, reduce: Var */
			reduce(99), /* local, reduce: Var */
			reduce(99), /* ::, reduce: Var */
			reduce(99), /* ., reduce: Var */
			reduce(99), /* :, reduce: Var */
			reduce(99), /* or, reduce: Var */
			reduce(99), /* and, reduce: Var */
			reduce(99), /* <, reduce: Var */
			reduce(99), /* <=, reduce: Var */
			reduce(99), /* >, reduce: Var */
			reduce(99), /* >=, reduce: Var */
			reduce(99), /* ==, reduce: Var */
			reduce(99), /* ~=, reduce: Var */
			reduce(99), /* |, reduce: Var */
			reduce(99), /* ~, reduce: Var */
			reduce(99), /* &, reduce: Var */
			reduce(99), /* .., reduce: Var */
			reduce(99), /* <<, reduce: Var */
			reduce(99), /* >>, reduce: Var */
			reduce(99), /* +, reduce: Var */
			reduce(99), /* -, reduce: Var */
			reduce(99), /* *, reduce: Var */
			reduce(99), /* /, reduce: Var */
			reduce(99), /* %, reduce: Var */
			reduce(99), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(99), /* ^, reduce: Var */
			reduce(99), /* [, reduce: Var */
			nil,        /* ] */
			reduce(99), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(99), /* string, reduce: Var */
			reduce(99), /* {, reduce: Var */
			nil,        /* } */
			reduce(99), /* ident, reduce: Var */
		},
	},
	actionRow{ // S1422
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1078), /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			shift(1080), /* string */
			shift(1082), /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1423
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			shift(851),  /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			shift(1704), /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1424
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(876),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(1705), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1425
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(115), /* $, reduce: Args */
			reduce(115), /* return, reduce: Args */
			reduce(115), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			reduce(115), /* break, reduce: Args */
			reduce(115), /* goto, reduce: Args */
			reduce(115), /* do, reduce: Args */
			nil,         /* end */
			reduce(115), /* while, reduce: Args */
			reduce(115), /* repeat, reduce: Args */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(115), /* if, reduce: Args */
			nil,         /* , */
			reduce(115), /* for, reduce: Args */
			nil,         /* in */
			reduce(115), /* function, reduce: Args */
			reduce(115), /* local, reduce: Args */
			reduce(115), /* ::, reduce: Args */
			reduce(115), /* ., reduce: Args */
			reduce(115), /* :, reduce: Args */
			reduce(115), /* or, reduce: Args */
			reduce(115), /* and, reduce: Args */
			reduce(115), /* <, reduce: Args */
			reduce(115), /* <=, reduce: Args */
			reduce(115), /* >, reduce: Args */
			reduce(115), /* >=, reduce: Args */
			reduce(115), /* ==, reduce: Args */
			reduce(115), /* ~=, reduce: Args */
			reduce(115), /* |, reduce: Args */
			reduce(115), /* ~, reduce: Args */
			reduce(115), /* &, reduce: Args */
			reduce(115), /* .., reduce: Args */
			reduce(115), /* <<, reduce: Args */
			reduce(115), /* >>, reduce: Args */
			reduce(115), /* +, reduce: Args */
			reduce(115), /* -, reduce: Args */
			reduce(115), /* *, reduce: Args */
			reduce(115), /* /, reduce: Args */
			reduce(115), /* %, reduce: Args */
			reduce(115), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(115), /* ^, reduce: Args */
			reduce(115), /* [, reduce: Args */
			nil,         /* ] */
			reduce(115), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(115), /* string, reduce: Args */
			reduce(115), /* {, reduce: Args */
			nil,         /* } */
			reduce(115), /* ident, reduce: Args */
		},
	},
	actionRow{ // S1426
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			shift(569),  /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(570),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			shift(1706), /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1427
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(102), /* $, reduce: PrefixExp */
			reduce(102), /* return, reduce: PrefixExp */
			reduce(102), /* ;, reduce: PrefixExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(102), /* break, reduce: PrefixExp */
			reduce(102), /* goto, reduce: PrefixExp */
			reduce(102), /* do, reduce: PrefixExp */
			nil,         /* end */
			reduce(102), /* while, reduce: PrefixExp */
			reduce(102), /* repeat, reduce: PrefixExp */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(102), /* if, reduce: PrefixExp */
			nil,         /* , */
			reduce(102), /* for, reduce: PrefixExp */
			nil,         /* in */
			reduce(102), /* function, reduce: PrefixExp */
			reduce(102), /* local, reduce: PrefixExp */
			reduce(102), /* ::, reduce: PrefixExp */
			reduce(102), /* ., reduce: PrefixExp */
			reduce(102), /* :, reduce: PrefixExp */
			reduce(102), /* or, reduce: PrefixExp */
			reduce(102), /* and, reduce: PrefixExp */
			reduce(102), /* <, reduce: PrefixExp */
			reduce(102), /* <=, reduce: PrefixExp */
			reduce(102), /* >, reduce: PrefixExp */
			reduce(102), /* >=, reduce: PrefixExp */
			reduce(102), /* ==, reduce: PrefixExp */
			reduce(102), /* ~=, reduce: PrefixExp */
			reduce(102), /* |, reduce: PrefixExp */
			reduce(102), /* ~, reduce: PrefixExp */
			reduce(102), /* &, reduce: PrefixExp */
			reduce(102), /* .., reduce: PrefixExp */
			reduce(102), /* <<, reduce: PrefixExp */
			reduce(102), /* >>, reduce: PrefixExp */
			reduce(102), /* +, reduce: PrefixExp */
			reduce(102), /* -, reduce: PrefixExp */
			reduce(102), /* *, reduce: PrefixExp */
			reduce(102), /* /, reduce: PrefixExp */
			reduce(102), /* %, reduce: PrefixExp */
			reduce(102), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(102), /* ^, reduce: PrefixExp */
			reduce(102), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(102), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(102), /* string, reduce: PrefixExp */
			reduce(102), /* {, reduce: PrefixExp */
			nil,         /* } */
			reduce(102), /* ident, reduce: PrefixExp */
		},
	},
	actionRow{ // S1428
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(125), /* $, reduce: TableConstructor */
			reduce(125), /* return, reduce: TableConstructor */
			reduce(125), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			reduce(125), /* break, reduce: TableConstructor */
			reduce(125), /* goto, reduce: TableConstructor */
			reduce(125), /* do, reduce: TableConstructor */
			nil,         /* end */
			reduce(125), /* while, reduce: TableConstructor */
			reduce(125), /* repeat, reduce: TableConstructor */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(125), /* if, reduce: TableConstructor */
			nil,         /* , */
			reduce(125), /* for, reduce: TableConstructor */
			nil,         /* in */
			reduce(125), /* function, reduce: TableConstructor */
			reduce(125), /* local, reduce: TableConstructor */
			reduce(125), /* ::, reduce: TableConstructor */
			nil,         /* . */
			nil,         /* : */
			reduce(125), /* or, reduce: TableConstructor */
			reduce(125), /* and, reduce: TableConstructor */
			reduce(125), /* <, reduce: TableConstructor */
			reduce(125), /* <=, reduce: TableConstructor */
			reduce(125), /* >, reduce: TableConstructor */
			reduce(125), /* >=, reduce: TableConstructor */
			reduce(125), /* ==, reduce: TableConstructor */
			reduce(125), /* ~=, reduce: TableConstructor */
			reduce(125), /* |, reduce: TableConstructor */
			reduce(125), /* ~, reduce: TableConstructor */
			reduce(125), /* &, reduce: TableConstructor */
			reduce(125), /* .., reduce: TableConstructor */
			reduce(125), /* <<, reduce: TableConstructor */
			reduce(125), /* >>, reduce: TableConstructor */
			reduce(125), /* +, reduce: TableConstructor */
			reduce(125), /* -, reduce: TableConstructor */
			reduce(125), /* *, reduce: TableConstructor */
			reduce(125), /* /, reduce: TableConstructor */
			reduce(125), /* %, reduce: TableConstructor */
			reduce(125), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(125), /* ^, reduce: TableConstructor */
			nil,         /* [ */
			nil,         /* ] */
			reduce(125), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(125), /* ident, reduce: TableConstructor */
		},
	},
	actionRow{ // S1429
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(238),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			shift(254),  /* [ */
			nil,         /* ] */
			shift(255),  /* ( */
			nil,         /* ) */
			shift(256),  /* nil */
			shift(257),  /* true */
			shift(258),  /* false */
			shift(259),  /* ... */
			shift(260),  /* numdec */
			shift(261),  /* numhex */
			shift(262),  /* string */
			shift(265),  /* { */
			shift(1708), /* } */
			shift(268),  /* ident */
		},
	},
	actionRow{ // S1430
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(54),  /* ;, reduce: ExpList */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			reduce(54),  /* until, reduce: ExpList */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(54),  /* ,, reduce: ExpList */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			shift(1087), /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1431
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(56),  /* ;, reduce: Exp */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			reduce(56),  /* until, reduce: Exp */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(56),  /* ,, reduce: Exp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(56),  /* or, reduce: Exp */
			shift(1090), /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1432
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(1709), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1433
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(58), /* ;, reduce: AndExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			reduce(58), /* until, reduce: AndExp */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(58), /* ,, reduce: AndExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(58), /* or, reduce: AndExp */
			reduce(58), /* and, reduce: AndExp */
			shift(203), /* < */
			shift(204), /* <= */
			shift(205), /* > */
			shift(206), /* >= */
			shift(207), /* == */
			shift(208), /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1434
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(66),  /* ;, reduce: CompExp */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			reduce(66),  /* until, reduce: CompExp */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(66),  /* ,, reduce: CompExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(66),  /* or, reduce: CompExp */
			reduce(66),  /* and, reduce: CompExp */
			reduce(66),  /* <, reduce: CompExp */
			reduce(66),  /* <=, reduce: CompExp */
			reduce(66),  /* >, reduce: CompExp */
			reduce(66),  /* >=, reduce: CompExp */
			reduce(66),  /* ==, reduce: CompExp */
			reduce(66),  /* ~=, reduce: CompExp */
			shift(1092), /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1435
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(68),  /* ;, reduce: BitOrExp */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			reduce(68),  /* until, reduce: BitOrExp */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(68),  /* ,, reduce: BitOrExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(68),  /* or, reduce: BitOrExp */
			reduce(68),  /* and, reduce: BitOrExp */
			reduce(68),  /* <, reduce: BitOrExp */
			reduce(68),  /* <=, reduce: BitOrExp */
			reduce(68),  /* >, reduce: BitOrExp */
			reduce(68),  /* >=, reduce: BitOrExp */
			reduce(68),  /* ==, reduce: BitOrExp */
			reduce(68),  /* ~=, reduce: BitOrExp */
			reduce(68),  /* |, reduce: BitOrExp */
			shift(1093), /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1436
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(70),  /* ;, reduce: BitXorExp */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			reduce(70),  /* until, reduce: BitXorExp */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(70),  /* ,, reduce: BitXorExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(70),  /* or, reduce: BitXorExp */
			reduce(70),  /* and, reduce: BitXorExp */
			reduce(70),  /* <, reduce: BitXorExp */
			reduce(70),  /* <=, reduce: BitXorExp */
			reduce(70),  /* >, reduce: BitXorExp */
			reduce(70),  /* >=, reduce: BitXorExp */
			reduce(70),  /* ==, reduce: BitXorExp */
			reduce(70),  /* ~=, reduce: BitXorExp */
			reduce(70),  /* |, reduce: BitXorExp */
			reduce(70),  /* ~, reduce: BitXorExp */
			shift(1094), /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1437
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(72),  /* ;, reduce: BitAndExp */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			reduce(72),  /* until, reduce: BitAndExp */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(72),  /* ,, reduce: BitAndExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(72),  /* or, reduce: BitAndExp */
			reduce(72),  /* and, reduce: BitAndExp */
			reduce(72),  /* <, reduce: BitAndExp */
			reduce(72),  /* <=, reduce: BitAndExp */
			reduce(72),  /* >, reduce: BitAndExp */
			reduce(72),  /* >=, reduce: BitAndExp */
			reduce(72),  /* ==, reduce: BitAndExp */
			reduce(72),  /* ~=, reduce: BitAndExp */
			reduce(72),  /* |, reduce: BitAndExp */
			reduce(72),  /* ~, reduce: BitAndExp */
			reduce(72),  /* &, reduce: BitAndExp */
			shift(1095), /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1438
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(74), /* ;, reduce: ConcatExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			reduce(74), /* until, reduce: ConcatExp */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(74), /* ,, reduce: ConcatExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(74), /* or, reduce: ConcatExp */
			reduce(74), /* and, reduce: ConcatExp */
			reduce(74), /* <, reduce: ConcatExp */
			reduce(74), /* <=, reduce: ConcatExp */
			reduce(74), /* >, reduce: ConcatExp */
			reduce(74), /* >=, reduce: ConcatExp */
			reduce(74), /* ==, reduce: ConcatExp */
			reduce(74), /* ~=, reduce: ConcatExp */
			reduce(74), /* |, reduce: ConcatExp */
			reduce(74), /* ~, reduce: ConcatExp */
			reduce(74), /* &, reduce: ConcatExp */
			reduce(74), /* .., reduce: ConcatExp */
			shift(214), /* << */
			shift(215), /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1439
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(78), /* ;, reduce: ShiftExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			reduce(78), /* until, reduce: ShiftExp */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(78), /* ,, reduce: ShiftExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(78), /* or, reduce: ShiftExp */
			reduce(78), /* and, reduce: ShiftExp */
			reduce(78), /* <, reduce: ShiftExp */
			reduce(78), /* <=, reduce: ShiftExp */
			reduce(78), /* >, reduce: ShiftExp */
			reduce(78), /* >=, reduce: ShiftExp */
			reduce(78), /* ==, reduce: ShiftExp */
			reduce(78), /* ~=, reduce: ShiftExp */
			reduce(78), /* |, reduce: ShiftExp */
			reduce(78), /* ~, reduce: ShiftExp */
			reduce(78), /* &, reduce: ShiftExp */
			reduce(78), /* .., reduce: ShiftExp */
			reduce(78), /* <<, reduce: ShiftExp */
			reduce(78), /* >>, reduce: ShiftExp */
			shift(217), /* + */
			shift(218), /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1440
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(82), /* ;, reduce: Sum */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			reduce(82), /* until, reduce: Sum */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(82), /* ,, reduce: Sum */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(82), /* or, reduce: Sum */
			reduce(82), /* and, reduce: Sum */
			reduce(82), /* <, reduce: Sum */
			reduce(82), /* <=, reduce: Sum */
			reduce(82), /* >, reduce: Sum */
			reduce(82), /* >=, reduce: Sum */
			reduce(82), /* ==, reduce: Sum */
			reduce(82), /* ~=, reduce: Sum */
			reduce(82), /* |, reduce: Sum */
			reduce(82), /* ~, reduce: Sum */
			reduce(82), /* &, reduce: Sum */
			reduce(82), /* .., reduce: Sum */
			reduce(82), /* <<, reduce: Sum */
			reduce(82), /* >>, reduce: Sum */
			reduce(82), /* +, reduce: Sum */
			reduce(82), /* -, reduce: Sum */
			shift(220), /* * */
			shift(221), /* / */
			shift(222), /* % */
			shift(223), /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1441
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(88), /* ;, reduce: Term */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			reduce(88), /* until, reduce: Term */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(88), /* ,, reduce: Term */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(88), /* or, reduce: Term */
			reduce(88), /* and, reduce: Term */
			reduce(88), /* <, reduce: Term */
			reduce(88), /* <=, reduce: Term */
			reduce(88), /* >, reduce: Term */
			reduce(88), /* >=, reduce: Term */
			reduce(88), /* ==, reduce: Term */
			reduce(88), /* ~=, reduce: Term */
			reduce(88), /* |, reduce: Term */
			reduce(88), /* ~, reduce: Term */
			reduce(88), /* &, reduce: Term */
			reduce(88), /* .., reduce: Term */
			reduce(88), /* <<, reduce: Term */
			reduce(88), /* >>, reduce: Term */
			reduce(88), /* +, reduce: Term */
			reduce(88), /* -, reduce: Term */
			reduce(88), /* *, reduce: Term */
			reduce(88), /* /, reduce: Term */
			reduce(88), /* %, reduce: Term */
			reduce(88), /* //, reduce: Term */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1442
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(96), /* ;, reduce: Power */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			reduce(96), /* until, reduce: Power */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(96), /* ,, reduce: Power */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(96), /* or, reduce: Power */
			reduce(96), /* and, reduce: Power */
			reduce(96), /* <, reduce: Power */
			reduce(96), /* <=, reduce: Power */
			reduce(96), /* >, reduce: Power */
			reduce(96), /* >=, reduce: Power */
			reduce(96), /* ==, reduce: Power */
			reduce(96), /* ~=, reduce: Power */
			reduce(96), /* |, reduce: Power */
			reduce(96), /* ~, reduce: Power */
			reduce(96), /* &, reduce: Power */
			reduce(96), /* .., reduce: Power */
			reduce(96), /* <<, reduce: Power */
			reduce(96), /* >>, reduce: Power */
			reduce(96), /* +, reduce: Power */
			reduce(96), /* -, reduce: Power */
			reduce(96), /* *, reduce: Power */
			reduce(96), /* /, reduce: Power */
			reduce(96), /* %, reduce: Power */
			reduce(96), /* //, reduce: Power */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1443
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(99), /* ;, reduce: Var */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			reduce(99), /* until, reduce: Var */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(99), /* ,, reduce: Var */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			reduce(99), /* ., reduce: Var */
			reduce(99), /* :, reduce: Var */
			reduce(99), /* or, reduce: Var */
			reduce(99), /* and, reduce: Var */
			reduce(99), /* <, reduce: Var */
			reduce(99), /* <=, reduce: Var */
			reduce(99), /* >, reduce: Var */
			reduce(99), /* >=, reduce: Var */
			reduce(99), /* ==, reduce: Var */
			reduce(99), /* ~=, reduce: Var */
			reduce(99), /* |, reduce: Var */
			reduce(99), /* ~, reduce: Var */
			reduce(99), /* &, reduce: Var */
			reduce(99), /* .., reduce: Var */
			reduce(99), /* <<, reduce: Var */
			reduce(99), /* >>, reduce: Var */
			reduce(99), /* +, reduce: Var */
			reduce(99), /* -, reduce: Var */
			reduce(99), /* *, reduce: Var */
			reduce(99), /* /, reduce: Var */
			reduce(99), /* %, reduce: Var */
			reduce(99), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(99), /* ^, reduce: Var */
			reduce(99), /* [, reduce: Var */
			nil,        /* ] */
			reduce(99), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(99), /* string, reduce: Var */
			reduce(99), /* {, reduce: Var */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1444
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1104), /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			shift(1106), /* string */
			shift(1108), /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1445
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			shift(851),  /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			shift(1711), /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1446
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(876),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(1712), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1447
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(115), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			reduce(115), /* until, reduce: Args */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(115), /* ,, reduce: Args */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(115), /* ., reduce: Args */
			reduce(115), /* :, reduce: Args */
			reduce(115), /* or, reduce: Args */
			reduce(115), /* and, reduce: Args */
			reduce(115), /* <, reduce: Args */
			reduce(115), /* <=, reduce: Args */
			reduce(115), /* >, reduce: Args */
			reduce(115), /* >=, reduce: Args */
			reduce(115), /* ==, reduce: Args */
			reduce(115), /* ~=, reduce: Args */
			reduce(115), /* |, reduce: Args */
			reduce(115), /* ~, reduce: Args */
			reduce(115), /* &, reduce: Args */
			reduce(115), /* .., reduce: Args */
			reduce(115), /* <<, reduce: Args */
			reduce(115), /* >>, reduce: Args */
			reduce(115), /* +, reduce: Args */
			reduce(115), /* -, reduce: Args */
			reduce(115), /* *, reduce: Args */
			reduce(115), /* /, reduce: Args */
			reduce(115), /* %, reduce: Args */
			reduce(115), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(115), /* ^, reduce: Args */
			reduce(115), /* [, reduce: Args */
			nil,         /* ] */
			reduce(115), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(115), /* string, reduce: Args */
			reduce(115), /* {, reduce: Args */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1448
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			shift(569),  /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(570),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			shift(1713), /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1449
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(102), /* ;, reduce: PrefixExp */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			reduce(102), /* until, reduce: PrefixExp */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(102), /* ,, reduce: PrefixExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(102), /* ., reduce: PrefixExp */
			reduce(102), /* :, reduce: PrefixExp */
			reduce(102), /* or, reduce: PrefixExp */
			reduce(102), /* and, reduce: PrefixExp */
			reduce(102), /* <, reduce: PrefixExp */
			reduce(102), /* <=, reduce: PrefixExp */
			reduce(102), /* >, reduce: PrefixExp */
			reduce(102), /* >=, reduce: PrefixExp */
			reduce(102), /* ==, reduce: PrefixExp */
			reduce(102), /* ~=, reduce: PrefixExp */
			reduce(102), /* |, reduce: PrefixExp */
			reduce(102), /* ~, reduce: PrefixExp */
			reduce(102), /* &, reduce: PrefixExp */
			reduce(102), /* .., reduce: PrefixExp */
			reduce(102), /* <<, reduce: PrefixExp */
			reduce(102), /* >>, reduce: PrefixExp */
			reduce(102), /* +, reduce: PrefixExp */
			reduce(102), /* -, reduce: PrefixExp */
			reduce(102), /* *, reduce: PrefixExp */
			reduce(102), /* /, reduce: PrefixExp */
			reduce(102), /* %, reduce: PrefixExp */
			reduce(102), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(102), /* ^, reduce: PrefixExp */
			reduce(102), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(102), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(102), /* string, reduce: PrefixExp */
			reduce(102), /* {, reduce: PrefixExp */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1450
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(125), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			reduce(125), /* until, reduce: TableConstructor */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(125), /* ,, reduce: TableConstructor */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(125), /* or, reduce: TableConstructor */
			reduce(125), /* and, reduce: TableConstructor */
			reduce(125), /* <, reduce: TableConstructor */
			reduce(125), /* <=, reduce: TableConstructor */
			reduce(125), /* >, reduce: TableConstructor */
			reduce(125), /* >=, reduce: TableConstructor */
			reduce(125), /* ==, reduce: TableConstructor */
			reduce(125), /* ~=, reduce: TableConstructor */
			reduce(125), /* |, reduce: TableConstructor */
			reduce(125), /* ~, reduce: TableConstructor */
			reduce(125), /* &, reduce: TableConstructor */
			reduce(125), /* .., reduce: TableConstructor */
			reduce(125), /* <<, reduce: TableConstructor */
			reduce(125), /* >>, reduce: TableConstructor */
			reduce(125), /* +, reduce: TableConstructor */
			reduce(125), /* -, reduce: TableConstructor */
			reduce(125), /* *, reduce: TableConstructor */
			reduce(125), /* /, reduce: TableConstructor */
			reduce(125), /* %, reduce: TableConstructor */
			reduce(125), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(125), /* ^, reduce: TableConstructor */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1451
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(238),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			shift(254),  /* [ */
			nil,         /* ] */
			shift(255),  /* ( */
			nil,         /* ) */
			shift(256),  /* nil */
			shift(257),  /* true */
			shift(258),  /* false */
			shift(259),  /* ... */
			shift(260),  /* numdec */
			shift(261),  /* numhex */
			shift(262),  /* string */
			shift(265),  /* { */
			shift(1715), /* } */
			shift(268),  /* ident */
		},
	},
	actionRow{ // S1452
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1115), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1131), /* ( */
			nil,         /* ) */
			shift(1132), /* nil */
			shift(1133), /* true */
			shift(1134), /* false */
			shift(1135), /* ... */
			shift(1136), /* numdec */
			shift(1137), /* numhex */
			shift(1138), /* string */
			shift(1141), /* { */
			nil,         /* } */
			shift(1142), /* ident */
		},
	},
	actionRow{ // S1453
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1115), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1131), /* ( */
			nil,         /* ) */
			shift(1132), /* nil */
			shift(1133), /* true */
			shift(1134), /* false */
			shift(1135), /* ... */
			shift(1136), /* numdec */
			shift(1137), /* numhex */
			shift(1138), /* string */
			shift(1141), /* { */
			nil,         /* } */
			shift(1142), /* ident */
		},
	},
	actionRow{ // S1454
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(119), /* return, reduce: FunctionDef */
			reduce(119), /* ;, reduce: FunctionDef */
			nil,         /* empty */
			nil,         /* = */
			reduce(119), /* break, reduce: FunctionDef */
			reduce(119), /* goto, reduce: FunctionDef */
			reduce(119), /* do, reduce: FunctionDef */
			nil,         /* end */
			reduce(119), /* while, reduce: FunctionDef */
			reduce(119), /* repeat, reduce: FunctionDef */
			reduce(119), /* until, reduce: FunctionDef */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(119), /* if, reduce: FunctionDef */
			reduce(119), /* ,, reduce: FunctionDef */
			reduce(119), /* for, reduce: FunctionDef */
			nil,         /* in */
			reduce(119), /* function, reduce: FunctionDef */
			reduce(119), /* local, reduce: FunctionDef */
			reduce(119), /* ::, reduce: FunctionDef */
			nil,         /* . */
			nil,         /* : */
			reduce(119), /* or, reduce: FunctionDef */
			reduce(119), /* and, reduce: FunctionDef */
			reduce(119), /* <, reduce: FunctionDef */
			reduce(119), /* <=, reduce: FunctionDef */
			reduce(119), /* >, reduce: FunctionDef */
			reduce(119), /* >=, reduce: FunctionDef */
			reduce(119), /* ==, reduce: FunctionDef */
			reduce(119), /* ~=, reduce: FunctionDef */
			reduce(119), /* |, reduce: FunctionDef */
			reduce(119), /* ~, reduce: FunctionDef */
			reduce(119), /* &, reduce: FunctionDef */
			reduce(119), /* .., reduce: FunctionDef */
			reduce(119), /* <<, reduce: FunctionDef */
			reduce(119), /* >>, reduce: FunctionDef */
			reduce(119), /* +, reduce: FunctionDef */
			reduce(119), /* -, reduce: FunctionDef */
			reduce(119), /* *, reduce: FunctionDef */
			reduce(119), /* /, reduce: FunctionDef */
			reduce(119), /* %, reduce: FunctionDef */
			reduce(119), /* //, reduce: FunctionDef */
			nil,         /* not */
			nil,         /* # */
			reduce(119), /* ^, reduce: FunctionDef */
			nil,         /* [ */
			nil,         /* ] */
			reduce(119), /* (, reduce: FunctionDef */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(119), /* ident, reduce: FunctionDef */
		},
	},
	actionRow{ // S1455
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(123), /* ), reduce: ParList */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			shift(521),  /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			shift(523),  /* ident */
		},
	},
	actionRow{ // S1456
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1115), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1131), /* ( */
			nil,         /* ) */
			shift(1132), /* nil */
			shift(1133), /* true */
			shift(1134), /* false */
			shift(1135), /* ... */
			shift(1136), /* numdec */
			shift(1137), /* numhex */
			shift(1138), /* string */
			shift(1141), /* { */
			nil,         /* } */
			shift(1142), /* ident */
		},
	},
	actionRow{ // S1457
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1115), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1131), /* ( */
			nil,         /* ) */
			shift(1132), /* nil */
			shift(1133), /* true */
			shift(1134), /* false */
			shift(1135), /* ... */
			shift(1136), /* numdec */
			shift(1137), /* numhex */
			shift(1138), /* string */
			shift(1141), /* { */
			nil,         /* } */
			shift(1142), /* ident */
		},
	},
	actionRow{ // S1458
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1115), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1131), /* ( */
			nil,         /* ) */
			shift(1132), /* nil */
			shift(1133), /* true */
			shift(1134), /* false */
			shift(1135), /* ... */
			shift(1136), /* numdec */
			shift(1137), /* numhex */
			shift(1138), /* string */
			shift(1141), /* { */
			nil,         /* } */
			shift(1142), /* ident */
		},
	},
	actionRow{ // S1459
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1115), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1131), /* ( */
			nil,         /* ) */
			shift(1132), /* nil */
			shift(1133), /* true */
			shift(1134), /* false */
			shift(1135), /* ... */
			shift(1136), /* numdec */
			shift(1137), /* numhex */
			shift(1138), /* string */
			shift(1141), /* { */
			nil,         /* } */
			shift(1142), /* ident */
		},
	},
	actionRow{ // S1460
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1115), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1131), /* ( */
			nil,         /* ) */
			shift(1132), /* nil */
			shift(1133), /* true */
			shift(1134), /* false */
			shift(1135), /* ... */
			shift(1136), /* numdec */
			shift(1137), /* numhex */
			shift(1138), /* string */
			shift(1141), /* { */
			nil,         /* } */
			shift(1142), /* ident */
		},
	},
	actionRow{ // S1461
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1115), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1131), /* ( */
			nil,         /* ) */
			shift(1132), /* nil */
			shift(1133), /* true */
			shift(1134), /* false */
			shift(1135), /* ... */
			shift(1136), /* numdec */
			shift(1137), /* numhex */
			shift(1138), /* string */
			shift(1141), /* { */
			nil,         /* } */
			shift(1142), /* ident */
		},
	},
	actionRow{ // S1462
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1115), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1131), /* ( */
			nil,         /* ) */
			shift(1132), /* nil */
			shift(1133), /* true */
			shift(1134), /* false */
			shift(1135), /* ... */
			shift(1136), /* numdec */
			shift(1137), /* numhex */
			shift(1138), /* string */
			shift(1141), /* { */
			nil,         /* } */
			shift(1142), /* ident */
		},
	},
	actionRow{ // S1463
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1115), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1131), /* ( */
			nil,         /* ) */
			shift(1132), /* nil */
			shift(1133), /* true */
			shift(1134), /* false */
			shift(1135), /* ... */
			shift(1136), /* numdec */
			shift(1137), /* numhex */
			shift(1138), /* string */
			shift(1141), /* { */
			nil,         /* } */
			shift(1142), /* ident */
		},
	},
	actionRow{ // S1464
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1115), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1131), /* ( */
			nil,         /* ) */
			shift(1132), /* nil */
			shift(1133), /* true */
			shift(1134), /* false */
			shift(1135), /* ... */
			shift(1136), /* numdec */
			shift(1137), /* numhex */
			shift(1138), /* string */
			shift(1141), /* { */
			nil,         /* } */
			shift(1142), /* ident */
		},
	},
	actionRow{ // S1465
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(93), /* return, reduce: Factor */
			reduce(93), /* ;, reduce: Factor */
			nil,        /* empty */
			nil,        /* = */
			reduce(93), /* break, reduce: Factor */
			reduce(93), /* goto, reduce: Factor */
			reduce(93), /* do, reduce: Factor */
			nil,        /* end */
			reduce(93), /* while, reduce: Factor */
			reduce(93), /* repeat, reduce: Factor */
			reduce(93), /* until, reduce: Factor */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(93), /* if, reduce: Factor */
			reduce(93), /* ,, reduce: Factor */
			reduce(93), /* for, reduce: Factor */
			nil,        /* in */
			reduce(93), /* function, reduce: Factor */
			reduce(93), /* local, reduce: Factor */
			reduce(93), /* ::, reduce: Factor */
			nil,        /* . */
			nil,        /* : */
			reduce(93), /* or, reduce: Factor */
			reduce(93), /* and, reduce: Factor */
			reduce(93), /* <, reduce: Factor */
			reduce(93), /* <=, reduce: Factor */
			reduce(93), /* >, reduce: Factor */
			reduce(93), /* >=, reduce: Factor */
			reduce(93), /* ==, reduce: Factor */
			reduce(93), /* ~=, reduce: Factor */
			reduce(93), /* |, reduce: Factor */
			reduce(93), /* ~, reduce: Factor */
			reduce(93), /* &, reduce: Factor */
			reduce(93), /* .., reduce: Factor */
			reduce(93), /* <<, reduce: Factor */
			reduce(93), /* >>, reduce: Factor */
			reduce(93), /* +, reduce: Factor */
			reduce(93), /* -, reduce: Factor */
			reduce(93), /* *, reduce: Factor */
			reduce(93), /* /, reduce: Factor */
			reduce(93), /* %, reduce: Factor */
			reduce(93), /* //, reduce: Factor */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(93), /* (, reduce: Factor */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(93), /* ident, reduce: Factor */
		},
	},
	actionRow{ // S1466
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1115), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1131), /* ( */
			nil,         /* ) */
			shift(1132), /* nil */
			shift(1133), /* true */
			shift(1134), /* false */
			shift(1135), /* ... */
			shift(1136), /* numdec */
			shift(1137), /* numhex */
			shift(1138), /* string */
			shift(1141), /* { */
			nil,         /* } */
			shift(1142), /* ident */
		},
	},
	actionRow{ // S1467
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			shift(1142), /* ident */
		},
	},
	actionRow{ // S1468
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(426), /* ident */
		},
	},
	actionRow{ // S1469
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(430), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(446), /* ( */
			nil,        /* ) */
			shift(447), /* nil */
			shift(448), /* true */
			shift(449), /* false */
			shift(450), /* ... */
			shift(451), /* numdec */
			shift(452), /* numhex */
			shift(453), /* string */
			shift(456), /* { */
			nil,        /* } */
			shift(457), /* ident */
		},
	},
	actionRow{ // S1470
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(462),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(478),  /* ( */
			shift(1733), /* ) */
			shift(480),  /* nil */
			shift(481),  /* true */
			shift(482),  /* false */
			shift(483),  /* ... */
			shift(484),  /* numdec */
			shift(485),  /* numhex */
			shift(486),  /* string */
			shift(489),  /* { */
			nil,         /* } */
			shift(490),  /* ident */
		},
	},
	actionRow{ // S1471
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(103), /* return, reduce: FunctionCall */
			reduce(103), /* ;, reduce: FunctionCall */
			nil,         /* empty */
			nil,         /* = */
			reduce(103), /* break, reduce: FunctionCall */
			reduce(103), /* goto, reduce: FunctionCall */
			reduce(103), /* do, reduce: FunctionCall */
			nil,         /* end */
			reduce(103), /* while, reduce: FunctionCall */
			reduce(103), /* repeat, reduce: FunctionCall */
			reduce(103), /* until, reduce: FunctionCall */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(103), /* if, reduce: FunctionCall */
			reduce(103), /* ,, reduce: FunctionCall */
			reduce(103), /* for, reduce: FunctionCall */
			nil,         /* in */
			reduce(103), /* function, reduce: FunctionCall */
			reduce(103), /* local, reduce: FunctionCall */
			reduce(103), /* ::, reduce: FunctionCall */
			reduce(103), /* ., reduce: FunctionCall */
			reduce(103), /* :, reduce: FunctionCall */
			reduce(103), /* or, reduce: FunctionCall */
			reduce(103), /* and, reduce: FunctionCall */
			reduce(103), /* <, reduce: FunctionCall */
			reduce(103), /* <=, reduce: FunctionCall */
			reduce(103), /* >, reduce: FunctionCall */
			reduce(103), /* >=, reduce: FunctionCall */
			reduce(103), /* ==, reduce: FunctionCall */
			reduce(103), /* ~=, reduce: FunctionCall */
			reduce(103), /* |, reduce: FunctionCall */
			reduce(103), /* ~, reduce: FunctionCall */
			reduce(103), /* &, reduce: FunctionCall */
			reduce(103), /* .., reduce: FunctionCall */
			reduce(103), /* <<, reduce: FunctionCall */
			reduce(103), /* >>, reduce: FunctionCall */
			reduce(103), /* +, reduce: FunctionCall */
			reduce(103), /* -, reduce: FunctionCall */
			reduce(103), /* *, reduce: FunctionCall */
			reduce(103), /* /, reduce: FunctionCall */
			reduce(103), /* %, reduce: FunctionCall */
			reduce(103), /* //, reduce: FunctionCall */
			nil,         /* not */
			nil,         /* # */
			reduce(103), /* ^, reduce: FunctionCall */
			reduce(103), /* [, reduce: FunctionCall */
			nil,         /* ] */
			reduce(103), /* (, reduce: FunctionCall */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(103), /* string, reduce: FunctionCall */
			reduce(103), /* {, reduce: FunctionCall */
			nil,         /* } */
			reduce(103), /* ident, reduce: FunctionCall */
		},
	},
	actionRow{ // S1472
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(118), /* return, reduce: Args */
			reduce(118), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			reduce(118), /* break, reduce: Args */
			reduce(118), /* goto, reduce: Args */
			reduce(118), /* do, reduce: Args */
			nil,         /* end */
			reduce(118), /* while, reduce: Args */
			reduce(118), /* repeat, reduce: Args */
			reduce(118), /* until, reduce: Args */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(118), /* if, reduce: Args */
			reduce(118), /* ,, reduce: Args */
			reduce(118), /* for, reduce: Args */
			nil,         /* in */
			reduce(118), /* function, reduce: Args */
			reduce(118), /* local, reduce: Args */
			reduce(118), /* ::, reduce: Args */
			reduce(118), /* ., reduce: Args */
			reduce(118), /* :, reduce: Args */
			reduce(118), /* or, reduce: Args */
			reduce(118), /* and, reduce: Args */
			reduce(118), /* <, reduce: Args */
			reduce(118), /* <=, reduce: Args */
			reduce(118), /* >, reduce: Args */
			reduce(118), /* >=, reduce: Args */
			reduce(118), /* ==, reduce: Args */
			reduce(118), /* ~=, reduce: Args */
			reduce(118), /* |, reduce: Args */
			reduce(118), /* ~, reduce: Args */
			reduce(118), /* &, reduce: Args */
			reduce(118), /* .., reduce: Args */
			reduce(118), /* <<, reduce: Args */
			reduce(118), /* >>, reduce: Args */
			reduce(118), /* +, reduce: Args */
			reduce(118), /* -, reduce: Args */
			reduce(118), /* *, reduce: Args */
			reduce(118), /* /, reduce: Args */
			reduce(118), /* %, reduce: Args */
			reduce(118), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(118), /* ^, reduce: Args */
			reduce(118), /* [, reduce: Args */
			nil,         /* ] */
			reduce(118), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(118), /* string, reduce: Args */
			reduce(118), /* {, reduce: Args */
			nil,         /* } */
			reduce(118), /* ident, reduce: Args */
		},
	},
	actionRow{ // S1473
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(117), /* return, reduce: Args */
			reduce(117), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			reduce(117), /* break, reduce: Args */
			reduce(117), /* goto, reduce: Args */
			reduce(117), /* do, reduce: Args */
			nil,         /* end */
			reduce(117), /* while, reduce: Args */
			reduce(117), /* repeat, reduce: Args */
			reduce(117), /* until, reduce: Args */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(117), /* if, reduce: Args */
			reduce(117), /* ,, reduce: Args */
			reduce(117), /* for, reduce: Args */
			nil,         /* in */
			reduce(117), /* function, reduce: Args */
			reduce(117), /* local, reduce: Args */
			reduce(117), /* ::, reduce: Args */
			reduce(117), /* ., reduce: Args */
			reduce(117), /* :, reduce: Args */
			reduce(117), /* or, reduce: Args */
			reduce(117), /* and, reduce: Args */
			reduce(117), /* <, reduce: Args */
			reduce(117), /* <=, reduce: Args */
			reduce(117), /* >, reduce: Args */
			reduce(117), /* >=, reduce: Args */
			reduce(117), /* ==, reduce: Args */
			reduce(117), /* ~=, reduce: Args */
			reduce(117), /* |, reduce: Args */
			reduce(117), /* ~, reduce: Args */
			reduce(117), /* &, reduce: Args */
			reduce(117), /* .., reduce: Args */
			reduce(117), /* <<, reduce: Args */
			reduce(117), /* >>, reduce: Args */
			reduce(117), /* +, reduce: Args */
			reduce(117), /* -, reduce: Args */
			reduce(117), /* *, reduce: Args */
			reduce(117), /* /, reduce: Args */
			reduce(117), /* %, reduce: Args */
			reduce(117), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(117), /* ^, reduce: Args */
			reduce(117), /* [, reduce: Args */
			nil,         /* ] */
			reduce(117), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(117), /* string, reduce: Args */
			reduce(117), /* {, reduce: Args */
			nil,         /* } */
			reduce(117), /* ident, reduce: Args */
		},
	},
	actionRow{ // S1474
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			shift(254), /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(268), /* ident */
		},
	},
	actionRow{ // S1475
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			shift(492),  /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(1735), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1476
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			shift(569),  /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(570),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			shift(1736), /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1477
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(1738), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1478
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(101), /* return, reduce: PrefixExp */
			reduce(101), /* ;, reduce: PrefixExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(101), /* break, reduce: PrefixExp */
			reduce(101), /* goto, reduce: PrefixExp */
			reduce(101), /* do, reduce: PrefixExp */
			nil,         /* end */
			reduce(101), /* while, reduce: PrefixExp */
			reduce(101), /* repeat, reduce: PrefixExp */
			reduce(101), /* until, reduce: PrefixExp */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(101), /* if, reduce: PrefixExp */
			nil,         /* , */
			reduce(101), /* for, reduce: PrefixExp */
			nil,         /* in */
			reduce(101), /* function, reduce: PrefixExp */
			reduce(101), /* local, reduce: PrefixExp */
			reduce(101), /* ::, reduce: PrefixExp */
			reduce(101), /* ., reduce: PrefixExp */
			reduce(101), /* :, reduce: PrefixExp */
			reduce(101), /* or, reduce: PrefixExp */
			reduce(101), /* and, reduce: PrefixExp */
			reduce(101), /* <, reduce: PrefixExp */
			reduce(101), /* <=, reduce: PrefixExp */
			reduce(101), /* >, reduce: PrefixExp */
			reduce(101), /* >=, reduce: PrefixExp */
			reduce(101), /* ==, reduce: PrefixExp */
			reduce(101), /* ~=, reduce: PrefixExp */
			reduce(101), /* |, reduce: PrefixExp */
			reduce(101), /* ~, reduce: PrefixExp */
			reduce(101), /* &, reduce: PrefixExp */
			reduce(101), /* .., reduce: PrefixExp */
			reduce(101), /* <<, reduce: PrefixExp */
			reduce(101), /* >>, reduce: PrefixExp */
			reduce(101), /* +, reduce: PrefixExp */
			reduce(101), /* -, reduce: PrefixExp */
			reduce(101), /* *, reduce: PrefixExp */
			reduce(101), /* /, reduce: PrefixExp */
			reduce(101), /* %, reduce: PrefixExp */
			reduce(101), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(101), /* ^, reduce: PrefixExp */
			reduce(101), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(101), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(101), /* string, reduce: PrefixExp */
			reduce(101), /* {, reduce: PrefixExp */
			nil,         /* } */
			reduce(101), /* ident, reduce: PrefixExp */
		},
	},
	actionRow{ // S1479
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(97), /* return, reduce: Var */
			reduce(97), /* ;, reduce: Var */
			nil,        /* empty */
			nil,        /* = */
			reduce(97), /* break, reduce: Var */
			reduce(97), /* goto, reduce: Var */
			reduce(97), /* do, reduce: Var */
			nil,        /* end */
			reduce(97), /* while, reduce: Var */
			reduce(97), /* repeat, reduce: Var */
			reduce(97), /* until, reduce: Var */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(97), /* if, reduce: Var */
			nil,        /* , */
			reduce(97), /* for, reduce: Var */
			nil,        /* in */
			reduce(97), /* function, reduce: Var */
			reduce(97), /* local, reduce: Var */
			reduce(97), /* ::, reduce: Var */
			reduce(97), /* ., reduce: Var */
			reduce(97), /* :, reduce: Var */
			reduce(97), /* or, reduce: Var */
			reduce(97), /* and, reduce: Var */
			reduce(97), /* <, reduce: Var */
			reduce(97), /* <=, reduce: Var */
			reduce(97), /* >, reduce: Var */
			reduce(97), /* >=, reduce: Var */
			reduce(97), /* ==, reduce: Var */
			reduce(97), /* ~=, reduce: Var */
			reduce(97), /* |, reduce: Var */
			reduce(97), /* ~, reduce: Var */
			reduce(97), /* &, reduce: Var */
			reduce(97), /* .., reduce: Var */
			reduce(97), /* <<, reduce: Var */
			reduce(97), /* >>, reduce: Var */
			reduce(97), /* +, reduce: Var */
			reduce(97), /* -, reduce: Var */
			reduce(97), /* *, reduce: Var */
			reduce(97), /* /, reduce: Var */
			reduce(97), /* %, reduce: Var */
			reduce(97), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(97), /* ^, reduce: Var */
			reduce(97), /* [, reduce: Var */
			nil,        /* ] */
			reduce(97), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(97), /* string, reduce: Var */
			reduce(97), /* {, reduce: Var */
			nil,        /* } */
			reduce(97), /* ident, reduce: Var */
		},
	},
	actionRow{ // S1480
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(28),  /* return, reduce: RepeatStat */
			reduce(28),  /* ;, reduce: RepeatStat */
			nil,         /* empty */
			nil,         /* = */
			reduce(28),  /* break, reduce: RepeatStat */
			reduce(28),  /* goto, reduce: RepeatStat */
			reduce(28),  /* do, reduce: RepeatStat */
			nil,         /* end */
			reduce(28),  /* while, reduce: RepeatStat */
			reduce(28),  /* repeat, reduce: RepeatStat */
			reduce(28),  /* until, reduce: RepeatStat */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(28),  /* if, reduce: RepeatStat */
			nil,         /* , */
			reduce(28),  /* for, reduce: RepeatStat */
			nil,         /* in */
			reduce(28),  /* function, reduce: RepeatStat */
			reduce(28),  /* local, reduce: RepeatStat */
			reduce(28),  /* ::, reduce: RepeatStat */
			nil,         /* . */
			nil,         /* : */
			shift(1739), /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(28),  /* (, reduce: RepeatStat */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(28),  /* ident, reduce: RepeatStat */
		},
	},
	actionRow{ // S1481
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1741), /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1482
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(100), /* return, reduce: PrefixExp */
			reduce(100), /* ;, reduce: PrefixExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(100), /* break, reduce: PrefixExp */
			reduce(100), /* goto, reduce: PrefixExp */
			reduce(100), /* do, reduce: PrefixExp */
			nil,         /* end */
			reduce(100), /* while, reduce: PrefixExp */
			reduce(100), /* repeat, reduce: PrefixExp */
			reduce(100), /* until, reduce: PrefixExp */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(100), /* if, reduce: PrefixExp */
			nil,         /* , */
			reduce(100), /* for, reduce: PrefixExp */
			nil,         /* in */
			reduce(100), /* function, reduce: PrefixExp */
			reduce(100), /* local, reduce: PrefixExp */
			reduce(100), /* ::, reduce: PrefixExp */
			reduce(100), /* ., reduce: PrefixExp */
			reduce(100), /* :, reduce: PrefixExp */
			reduce(100), /* or, reduce: PrefixExp */
			reduce(100), /* and, reduce: PrefixExp */
			reduce(100), /* <, reduce: PrefixExp */
			reduce(100), /* <=, reduce: PrefixExp */
			reduce(100), /* >, reduce: PrefixExp */
			reduce(100), /* >=, reduce: PrefixExp */
			reduce(100), /* ==, reduce: PrefixExp */
			reduce(100), /* ~=, reduce: PrefixExp */
			reduce(100), /* |, reduce: PrefixExp */
			reduce(100), /* ~, reduce: PrefixExp */
			reduce(100), /* &, reduce: PrefixExp */
			reduce(100), /* .., reduce: PrefixExp */
			reduce(100), /* <<, reduce: PrefixExp */
			reduce(100), /* >>, reduce: PrefixExp */
			reduce(100), /* +, reduce: PrefixExp */
			reduce(100), /* -, reduce: PrefixExp */
			reduce(100), /* *, reduce: PrefixExp */
			reduce(100), /* /, reduce: PrefixExp */
			reduce(100), /* %, reduce: PrefixExp */
			reduce(100), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(100), /* ^, reduce: PrefixExp */
			reduce(100), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(100), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(100), /* string, reduce: PrefixExp */
			reduce(100), /* {, reduce: PrefixExp */
			nil,         /* } */
			reduce(100), /* ident, reduce: PrefixExp */
		},
	},
	actionRow{ // S1483
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(55),  /* return, reduce: Exp */
			reduce(55),  /* ;, reduce: Exp */
			nil,         /* empty */
			nil,         /* = */
			reduce(55),  /* break, reduce: Exp */
			reduce(55),  /* goto, reduce: Exp */
			reduce(55),  /* do, reduce: Exp */
			nil,         /* end */
			reduce(55),  /* while, reduce: Exp */
			reduce(55),  /* repeat, reduce: Exp */
			reduce(55),  /* until, reduce: Exp */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(55),  /* if, reduce: Exp */
			nil,         /* , */
			reduce(55),  /* for, reduce: Exp */
			nil,         /* in */
			reduce(55),  /* function, reduce: Exp */
			reduce(55),  /* local, reduce: Exp */
			reduce(55),  /* ::, reduce: Exp */
			nil,         /* . */
			nil,         /* : */
			reduce(55),  /* or, reduce: Exp */
			shift(1742), /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(55),  /* (, reduce: Exp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(55),  /* ident, reduce: Exp */
		},
	},
	actionRow{ // S1484
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(57), /* return, reduce: AndExp */
			reduce(57), /* ;, reduce: AndExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(57), /* break, reduce: AndExp */
			reduce(57), /* goto, reduce: AndExp */
			reduce(57), /* do, reduce: AndExp */
			nil,        /* end */
			reduce(57), /* while, reduce: AndExp */
			reduce(57), /* repeat, reduce: AndExp */
			reduce(57), /* until, reduce: AndExp */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(57), /* if, reduce: AndExp */
			nil,        /* , */
			reduce(57), /* for, reduce: AndExp */
			nil,        /* in */
			reduce(57), /* function, reduce: AndExp */
			reduce(57), /* local, reduce: AndExp */
			reduce(57), /* ::, reduce: AndExp */
			nil,        /* . */
			nil,        /* : */
			reduce(57), /* or, reduce: AndExp */
			reduce(57), /* and, reduce: AndExp */
			shift(203), /* < */
			shift(204), /* <= */
			shift(205), /* > */
			shift(206), /* >= */
			shift(207), /* == */
			shift(208), /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(57), /* (, reduce: AndExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(57), /* ident, reduce: AndExp */
		},
	},
	actionRow{ // S1485
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(65),  /* return, reduce: CompExp */
			reduce(65),  /* ;, reduce: CompExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(65),  /* break, reduce: CompExp */
			reduce(65),  /* goto, reduce: CompExp */
			reduce(65),  /* do, reduce: CompExp */
			nil,         /* end */
			reduce(65),  /* while, reduce: CompExp */
			reduce(65),  /* repeat, reduce: CompExp */
			reduce(65),  /* until, reduce: CompExp */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(65),  /* if, reduce: CompExp */
			nil,         /* , */
			reduce(65),  /* for, reduce: CompExp */
			nil,         /* in */
			reduce(65),  /* function, reduce: CompExp */
			reduce(65),  /* local, reduce: CompExp */
			reduce(65),  /* ::, reduce: CompExp */
			nil,         /* . */
			nil,         /* : */
			reduce(65),  /* or, reduce: CompExp */
			reduce(65),  /* and, reduce: CompExp */
			reduce(65),  /* <, reduce: CompExp */
			reduce(65),  /* <=, reduce: CompExp */
			reduce(65),  /* >, reduce: CompExp */
			reduce(65),  /* >=, reduce: CompExp */
			reduce(65),  /* ==, reduce: CompExp */
			reduce(65),  /* ~=, reduce: CompExp */
			shift(1744), /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(65),  /* (, reduce: CompExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(65),  /* ident, reduce: CompExp */
		},
	},
	actionRow{ // S1486
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(67),  /* return, reduce: BitOrExp */
			reduce(67),  /* ;, reduce: BitOrExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(67),  /* break, reduce: BitOrExp */
			reduce(67),  /* goto, reduce: BitOrExp */
			reduce(67),  /* do, reduce: BitOrExp */
			nil,         /* end */
			reduce(67),  /* while, reduce: BitOrExp */
			reduce(67),  /* repeat, reduce: BitOrExp */
			reduce(67),  /* until, reduce: BitOrExp */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(67),  /* if, reduce: BitOrExp */
			nil,         /* , */
			reduce(67),  /* for, reduce: BitOrExp */
			nil,         /* in */
			reduce(67),  /* function, reduce: BitOrExp */
			reduce(67),  /* local, reduce: BitOrExp */
			reduce(67),  /* ::, reduce: BitOrExp */
			nil,         /* . */
			nil,         /* : */
			reduce(67),  /* or, reduce: BitOrExp */
			reduce(67),  /* and, reduce: BitOrExp */
			reduce(67),  /* <, reduce: BitOrExp */
			reduce(67),  /* <=, reduce: BitOrExp */
			reduce(67),  /* >, reduce: BitOrExp */
			reduce(67),  /* >=, reduce: BitOrExp */
			reduce(67),  /* ==, reduce: BitOrExp */
			reduce(67),  /* ~=, reduce: BitOrExp */
			reduce(67),  /* |, reduce: BitOrExp */
			shift(1745), /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(67),  /* (, reduce: BitOrExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(67),  /* ident, reduce: BitOrExp */
		},
	},
	actionRow{ // S1487
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(69),  /* return, reduce: BitXorExp */
			reduce(69),  /* ;, reduce: BitXorExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(69),  /* break, reduce: BitXorExp */
			reduce(69),  /* goto, reduce: BitXorExp */
			reduce(69),  /* do, reduce: BitXorExp */
			nil,         /* end */
			reduce(69),  /* while, reduce: BitXorExp */
			reduce(69),  /* repeat, reduce: BitXorExp */
			reduce(69),  /* until, reduce: BitXorExp */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(69),  /* if, reduce: BitXorExp */
			nil,         /* , */
			reduce(69),  /* for, reduce: BitXorExp */
			nil,         /* in */
			reduce(69),  /* function, reduce: BitXorExp */
			reduce(69),  /* local, reduce: BitXorExp */
			reduce(69),  /* ::, reduce: BitXorExp */
			nil,         /* . */
			nil,         /* : */
			reduce(69),  /* or, reduce: BitXorExp */
			reduce(69),  /* and, reduce: BitXorExp */
			reduce(69),  /* <, reduce: BitXorExp */
			reduce(69),  /* <=, reduce: BitXorExp */
			reduce(69),  /* >, reduce: BitXorExp */
			reduce(69),  /* >=, reduce: BitXorExp */
			reduce(69),  /* ==, reduce: BitXorExp */
			reduce(69),  /* ~=, reduce: BitXorExp */
			reduce(69),  /* |, reduce: BitXorExp */
			reduce(69),  /* ~, reduce: BitXorExp */
			shift(1746), /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(69),  /* (, reduce: BitXorExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(69),  /* ident, reduce: BitXorExp */
		},
	},
	actionRow{ // S1488
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(71),  /* return, reduce: BitAndExp */
			reduce(71),  /* ;, reduce: BitAndExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(71),  /* break, reduce: BitAndExp */
			reduce(71),  /* goto, reduce: BitAndExp */
			reduce(71),  /* do, reduce: BitAndExp */
			nil,         /* end */
			reduce(71),  /* while, reduce: BitAndExp */
			reduce(71),  /* repeat, reduce: BitAndExp */
			reduce(71),  /* until, reduce: BitAndExp */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(71),  /* if, reduce: BitAndExp */
			nil,         /* , */
			reduce(71),  /* for, reduce: BitAndExp */
			nil,         /* in */
			reduce(71),  /* function, reduce: BitAndExp */
			reduce(71),  /* local, reduce: BitAndExp */
			reduce(71),  /* ::, reduce: BitAndExp */
			nil,         /* . */
			nil,         /* : */
			reduce(71),  /* or, reduce: BitAndExp */
			reduce(71),  /* and, reduce: BitAndExp */
			reduce(71),  /* <, reduce: BitAndExp */
			reduce(71),  /* <=, reduce: BitAndExp */
			reduce(71),  /* >, reduce: BitAndExp */
			reduce(71),  /* >=, reduce: BitAndExp */
			reduce(71),  /* ==, reduce: BitAndExp */
			reduce(71),  /* ~=, reduce: BitAndExp */
			reduce(71),  /* |, reduce: BitAndExp */
			reduce(71),  /* ~, reduce: BitAndExp */
			reduce(71),  /* &, reduce: BitAndExp */
			shift(1747), /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(71),  /* (, reduce: BitAndExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(71),  /* ident, reduce: BitAndExp */
		},
	},
	actionRow{ // S1489
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(73), /* return, reduce: ConcatExp */
			reduce(73), /* ;, reduce: ConcatExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(73), /* break, reduce: ConcatExp */
			reduce(73), /* goto, reduce: ConcatExp */
			reduce(73), /* do, reduce: ConcatExp */
			nil,        /* end */
			reduce(73), /* while, reduce: ConcatExp */
			reduce(73), /* repeat, reduce: ConcatExp */
			reduce(73), /* until, reduce: ConcatExp */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(73), /* if, reduce: ConcatExp */
			nil,        /* , */
			reduce(73), /* for, reduce: ConcatExp */
			nil,        /* in */
			reduce(73), /* function, reduce: ConcatExp */
			reduce(73), /* local, reduce: ConcatExp */
			reduce(73), /* ::, reduce: ConcatExp */
			nil,        /* . */
			nil,        /* : */
			reduce(73), /* or, reduce: ConcatExp */
			reduce(73), /* and, reduce: ConcatExp */
			reduce(73), /* <, reduce: ConcatExp */
			reduce(73), /* <=, reduce: ConcatExp */
			reduce(73), /* >, reduce: ConcatExp */
			reduce(73), /* >=, reduce: ConcatExp */
			reduce(73), /* ==, reduce: ConcatExp */
			reduce(73), /* ~=, reduce: ConcatExp */
			reduce(73), /* |, reduce: ConcatExp */
			reduce(73), /* ~, reduce: ConcatExp */
			reduce(73), /* &, reduce: ConcatExp */
			reduce(73), /* .., reduce: ConcatExp */
			shift(214), /* << */
			shift(215), /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(73), /* (, reduce: ConcatExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(73), /* ident, reduce: ConcatExp */
		},
	},
	actionRow{ // S1490
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(77), /* return, reduce: ShiftExp */
			reduce(77), /* ;, reduce: ShiftExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(77), /* break, reduce: ShiftExp */
			reduce(77), /* goto, reduce: ShiftExp */
			reduce(77), /* do, reduce: ShiftExp */
			nil,        /* end */
			reduce(77), /* while, reduce: ShiftExp */
			reduce(77), /* repeat, reduce: ShiftExp */
			reduce(77), /* until, reduce: ShiftExp */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(77), /* if, reduce: ShiftExp */
			nil,        /* , */
			reduce(77), /* for, reduce: ShiftExp */
			nil,        /* in */
			reduce(77), /* function, reduce: ShiftExp */
			reduce(77), /* local, reduce: ShiftExp */
			reduce(77), /* ::, reduce: ShiftExp */
			nil,        /* . */
			nil,        /* : */
			reduce(77), /* or, reduce: ShiftExp */
			reduce(77), /* and, reduce: ShiftExp */
			reduce(77), /* <, reduce: ShiftExp */
			reduce(77), /* <=, reduce: ShiftExp */
			reduce(77), /* >, reduce: ShiftExp */
			reduce(77), /* >=, reduce: ShiftExp */
			reduce(77), /* ==, reduce: ShiftExp */
			reduce(77), /* ~=, reduce: ShiftExp */
			reduce(77), /* |, reduce: ShiftExp */
			reduce(77), /* ~, reduce: ShiftExp */
			reduce(77), /* &, reduce: ShiftExp */
			reduce(77), /* .., reduce: ShiftExp */
			reduce(77), /* <<, reduce: ShiftExp */
			reduce(77), /* >>, reduce: ShiftExp */
			shift(217), /* + */
			shift(218), /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(77), /* (, reduce: ShiftExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(77), /* ident, reduce: ShiftExp */
		},
	},
	actionRow{ // S1491
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(81), /* return, reduce: Sum */
			reduce(81), /* ;, reduce: Sum */
			nil,        /* empty */
			nil,        /* = */
			reduce(81), /* break, reduce: Sum */
			reduce(81), /* goto, reduce: Sum */
			reduce(81), /* do, reduce: Sum */
			nil,        /* end */
			reduce(81), /* while, reduce: Sum */
			reduce(81), /* repeat, reduce: Sum */
			reduce(81), /* until, reduce: Sum */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(81), /* if, reduce: Sum */
			nil,        /* , */
			reduce(81), /* for, reduce: Sum */
			nil,        /* in */
			reduce(81), /* function, reduce: Sum */
			reduce(81), /* local, reduce: Sum */
			reduce(81), /* ::, reduce: Sum */
			nil,        /* . */
			nil,        /* : */
			reduce(81), /* or, reduce: Sum */
			reduce(81), /* and, reduce: Sum */
			reduce(81), /* <, reduce: Sum */
			reduce(81), /* <=, reduce: Sum */
			reduce(81), /* >, reduce: Sum */
			reduce(81), /* >=, reduce: Sum */
			reduce(81), /* ==, reduce: Sum */
			reduce(81), /* ~=, reduce: Sum */
			reduce(81), /* |, reduce: Sum */
			reduce(81), /* ~, reduce: Sum */
			reduce(81), /* &, reduce: Sum */
			reduce(81), /* .., reduce: Sum */
			reduce(81), /* <<, reduce: Sum */
			reduce(81), /* >>, reduce: Sum */
			reduce(81), /* +, reduce: Sum */
			reduce(81), /* -, reduce: Sum */
			shift(220), /* * */
			shift(221), /* / */
			shift(222), /* % */
			shift(223), /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(81), /* (, reduce: Sum */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(81), /* ident, reduce: Sum */
		},
	},
	actionRow{ // S1492
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(87), /* return, reduce: Term */
			reduce(87), /* ;, reduce: Term */
			nil,        /* empty */
			nil,        /* = */
			reduce(87), /* break, reduce: Term */
			reduce(87), /* goto, reduce: Term */
			reduce(87), /* do, reduce: Term */
			nil,        /* end */
			reduce(87), /* while, reduce: Term */
			reduce(87), /* repeat, reduce: Term */
			reduce(87), /* until, reduce: Term */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(87), /* if, reduce: Term */
			nil,        /* , */
			reduce(87), /* for, reduce: Term */
			nil,        /* in */
			reduce(87), /* function, reduce: Term */
			reduce(87), /* local, reduce: Term */
			reduce(87), /* ::, reduce: Term */
			nil,        /* . */
			nil,        /* : */
			reduce(87), /* or, reduce: Term */
			reduce(87), /* and, reduce: Term */
			reduce(87), /* <, reduce: Term */
			reduce(87), /* <=, reduce: Term */
			reduce(87), /* >, reduce: Term */
			reduce(87), /* >=, reduce: Term */
			reduce(87), /* ==, reduce: Term */
			reduce(87), /* ~=, reduce: Term */
			reduce(87), /* |, reduce: Term */
			reduce(87), /* ~, reduce: Term */
			reduce(87), /* &, reduce: Term */
			reduce(87), /* .., reduce: Term */
			reduce(87), /* <<, reduce: Term */
			reduce(87), /* >>, reduce: Term */
			reduce(87), /* +, reduce: Term */
			reduce(87), /* -, reduce: Term */
			reduce(87), /* *, reduce: Term */
			reduce(87), /* /, reduce: Term */
			reduce(87), /* %, reduce: Term */
			reduce(87), /* //, reduce: Term */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(87), /* (, reduce: Term */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(87), /* ident, reduce: Term */
		},
	},
	actionRow{ // S1493
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1481), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1497), /* ( */
			nil,         /* ) */
			shift(1498), /* nil */
			shift(1499), /* true */
			shift(1500), /* false */
			shift(1501), /* ... */
			shift(1502), /* numdec */
			shift(1503), /* numhex */
			shift(1504), /* string */
			shift(1507), /* { */
			nil,         /* } */
			shift(1508), /* ident */
		},
	},
	actionRow{ // S1494
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(94), /* return, reduce: Factor */
			reduce(94), /* ;, reduce: Factor */
			nil,        /* empty */
			nil,        /* = */
			reduce(94), /* break, reduce: Factor */
			reduce(94), /* goto, reduce: Factor */
			reduce(94), /* do, reduce: Factor */
			nil,        /* end */
			reduce(94), /* while, reduce: Factor */
			reduce(94), /* repeat, reduce: Factor */
			reduce(94), /* until, reduce: Factor */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(94), /* if, reduce: Factor */
			nil,        /* , */
			reduce(94), /* for, reduce: Factor */
			nil,        /* in */
			reduce(94), /* function, reduce: Factor */
			reduce(94), /* local, reduce: Factor */
			reduce(94), /* ::, reduce: Factor */
			nil,        /* . */
			nil,        /* : */
			reduce(94), /* or, reduce: Factor */
			reduce(94), /* and, reduce: Factor */
			reduce(94), /* <, reduce: Factor */
			reduce(94), /* <=, reduce: Factor */
			reduce(94), /* >, reduce: Factor */
			reduce(94), /* >=, reduce: Factor */
			reduce(94), /* ==, reduce: Factor */
			reduce(94), /* ~=, reduce: Factor */
			reduce(94), /* |, reduce: Factor */
			reduce(94), /* ~, reduce: Factor */
			reduce(94), /* &, reduce: Factor */
			reduce(94), /* .., reduce: Factor */
			reduce(94), /* <<, reduce: Factor */
			reduce(94), /* >>, reduce: Factor */
			reduce(94), /* +, reduce: Factor */
			reduce(94), /* -, reduce: Factor */
			reduce(94), /* *, reduce: Factor */
			reduce(94), /* /, reduce: Factor */
			reduce(94), /* %, reduce: Factor */
			reduce(94), /* //, reduce: Factor */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(94), /* (, reduce: Factor */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(94), /* ident, reduce: Factor */
		},
	},
	actionRow{ // S1495
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(95),  /* return, reduce: Power */
			reduce(95),  /* ;, reduce: Power */
			nil,         /* empty */
			nil,         /* = */
			reduce(95),  /* break, reduce: Power */
			reduce(95),  /* goto, reduce: Power */
			reduce(95),  /* do, reduce: Power */
			nil,         /* end */
			reduce(95),  /* while, reduce: Power */
			reduce(95),  /* repeat, reduce: Power */
			reduce(95),  /* until, reduce: Power */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(95),  /* if, reduce: Power */
			nil,         /* , */
			reduce(95),  /* for, reduce: Power */
			nil,         /* in */
			reduce(95),  /* function, reduce: Power */
			reduce(95),  /* local, reduce: Power */
			reduce(95),  /* ::, reduce: Power */
			nil,         /* . */
			nil,         /* : */
			reduce(95),  /* or, reduce: Power */
			reduce(95),  /* and, reduce: Power */
			reduce(95),  /* <, reduce: Power */
			reduce(95),  /* <=, reduce: Power */
			reduce(95),  /* >, reduce: Power */
			reduce(95),  /* >=, reduce: Power */
			reduce(95),  /* ==, reduce: Power */
			reduce(95),  /* ~=, reduce: Power */
			reduce(95),  /* |, reduce: Power */
			reduce(95),  /* ~, reduce: Power */
			reduce(95),  /* &, reduce: Power */
			reduce(95),  /* .., reduce: Power */
			reduce(95),  /* <<, reduce: Power */
			reduce(95),  /* >>, reduce: Power */
			reduce(95),  /* +, reduce: Power */
			reduce(95),  /* -, reduce: Power */
			reduce(95),  /* *, reduce: Power */
			reduce(95),  /* /, reduce: Power */
			reduce(95),  /* %, reduce: Power */
			reduce(95),  /* //, reduce: Power */
			nil,         /* not */
			nil,         /* # */
			shift(1752), /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(95),  /* (, reduce: Power */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(95),  /* ident, reduce: Power */
		},
	},
	actionRow{ // S1496
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(114), /* return, reduce: Atom */
			reduce(114), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(114), /* break, reduce: Atom */
			reduce(114), /* goto, reduce: Atom */
			reduce(114), /* do, reduce: Atom */
			nil,         /* end */
			reduce(114), /* while, reduce: Atom */
			reduce(114), /* repeat, reduce: Atom */
			reduce(114), /* until, reduce: Atom */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(114), /* if, reduce: Atom */
			nil,         /* , */
			reduce(114), /* for, reduce: Atom */
			nil,         /* in */
			reduce(114), /* function, reduce: Atom */
			reduce(114), /* local, reduce: Atom */
			reduce(114), /* ::, reduce: Atom */
			shift(1753), /* . */
			shift(1754), /* : */
			reduce(114), /* or, reduce: Atom */
			reduce(114), /* and, reduce: Atom */
			reduce(114), /* <, reduce: Atom */
			reduce(114), /* <=, reduce: Atom */
			reduce(114), /* >, reduce: Atom */
			reduce(114), /* >=, reduce: Atom */
			reduce(114), /* ==, reduce: Atom */
			reduce(114), /* ~=, reduce: Atom */
			reduce(114), /* |, reduce: Atom */
			reduce(114), /* ~, reduce: Atom */
			reduce(114), /* &, reduce: Atom */
			reduce(114), /* .., reduce: Atom */
			reduce(114), /* <<, reduce: Atom */
			reduce(114), /* >>, reduce: Atom */
			reduce(114), /* +, reduce: Atom */
			reduce(114), /* -, reduce: Atom */
			reduce(114), /* *, reduce: Atom */
			reduce(114), /* /, reduce: Atom */
			reduce(114), /* %, reduce: Atom */
			reduce(114), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(114), /* ^, reduce: Atom */
			shift(1755), /* [ */
			nil,         /* ] */
			shift(1756), /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			shift(1758), /* string */
			shift(1760), /* { */
			nil,         /* } */
			reduce(114), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S1497
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(168), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(184), /* ( */
			nil,        /* ) */
			shift(185), /* nil */
			shift(186), /* true */
			shift(187), /* false */
			shift(188), /* ... */
			shift(189), /* numdec */
			shift(190), /* numhex */
			shift(191), /* string */
			shift(194), /* { */
			nil,        /* } */
			shift(195), /* ident */
		},
	},
	actionRow{ // S1498
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(105), /* return, reduce: Atom */
			reduce(105), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(105), /* break, reduce: Atom */
			reduce(105), /* goto, reduce: Atom */
			reduce(105), /* do, reduce: Atom */
			nil,         /* end */
			reduce(105), /* while, reduce: Atom */
			reduce(105), /* repeat, reduce: Atom */
			reduce(105), /* until, reduce: Atom */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(105), /* if, reduce: Atom */
			nil,         /* , */
			reduce(105), /* for, reduce: Atom */
			nil,         /* in */
			reduce(105), /* function, reduce: Atom */
			reduce(105), /* local, reduce: Atom */
			reduce(105), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(105), /* or, reduce: Atom */
			reduce(105), /* and, reduce: Atom */
			reduce(105), /* <, reduce: Atom */
			reduce(105), /* <=, reduce: Atom */
			reduce(105), /* >, reduce: Atom */
			reduce(105), /* >=, reduce: Atom */
			reduce(105), /* ==, reduce: Atom */
			reduce(105), /* ~=, reduce: Atom */
			reduce(105), /* |, reduce: Atom */
			reduce(105), /* ~, reduce: Atom */
			reduce(105), /* &, reduce: Atom */
			reduce(105), /* .., reduce: Atom */
			reduce(105), /* <<, reduce: Atom */
			reduce(105), /* >>, reduce: Atom */
			reduce(105), /* +, reduce: Atom */
			reduce(105), /* -, reduce: Atom */
			reduce(105), /* *, reduce: Atom */
			reduce(105), /* /, reduce: Atom */
			reduce(105), /* %, reduce: Atom */
			reduce(105), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(105), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(105), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(105), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S1499
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(106), /* return, reduce: Atom */
			reduce(106), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(106), /* break, reduce: Atom */
			reduce(106), /* goto, reduce: Atom */
			reduce(106), /* do, reduce: Atom */
			nil,         /* end */
			reduce(106), /* while, reduce: Atom */
			reduce(106), /* repeat, reduce: Atom */
			reduce(106), /* until, reduce: Atom */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(106), /* if, reduce: Atom */
			nil,         /* , */
			reduce(106), /* for, reduce: Atom */
			nil,         /* in */
			reduce(106), /* function, reduce: Atom */
			reduce(106), /* local, reduce: Atom */
			reduce(106), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(106), /* or, reduce: Atom */
			reduce(106), /* and, reduce: Atom */
			reduce(106), /* <, reduce: Atom */
			reduce(106), /* <=, reduce: Atom */
			reduce(106), /* >, reduce: Atom */
			reduce(106), /* >=, reduce: Atom */
			reduce(106), /* ==, reduce: Atom */
			reduce(106), /* ~=, reduce: Atom */
			reduce(106), /* |, reduce: Atom */
			reduce(106), /* ~, reduce: Atom */
			reduce(106), /* &, reduce: Atom */
			reduce(106), /* .., reduce: Atom */
			reduce(106), /* <<, reduce: Atom */
			reduce(106), /* >>, reduce: Atom */
			reduce(106), /* +, reduce: Atom */
			reduce(106), /* -, reduce: Atom */
			reduce(106), /* *, reduce: Atom */
			reduce(106), /* /, reduce: Atom */
			reduce(106), /* %, reduce: Atom */
			reduce(106), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(106), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(106), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(106), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S1500
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(107), /* return, reduce: Atom */
			reduce(107), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(107), /* break, reduce: Atom */
			reduce(107), /* goto, reduce: Atom */
			reduce(107), /* do, reduce: Atom */
			nil,         /* end */
			reduce(107), /* while, reduce: Atom */
			reduce(107), /* repeat, reduce: Atom */
			reduce(107), /* until, reduce: Atom */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(107), /* if, reduce: Atom */
			nil,         /* , */
			reduce(107), /* for, reduce: Atom */
			nil,         /* in */
			reduce(107), /* function, reduce: Atom */
			reduce(107), /* local, reduce: Atom */
			reduce(107), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(107), /* or, reduce: Atom */
			reduce(107), /* and, reduce: Atom */
			reduce(107), /* <, reduce: Atom */
			reduce(107), /* <=, reduce: Atom */
			reduce(107), /* >, reduce: Atom */
			reduce(107), /* >=, reduce: Atom */
			reduce(107), /* ==, reduce: Atom */
			reduce(107), /* ~=, reduce: Atom */
			reduce(107), /* |, reduce: Atom */
			reduce(107), /* ~, reduce: Atom */
			reduce(107), /* &, reduce: Atom */
			reduce(107), /* .., reduce: Atom */
			reduce(107), /* <<, reduce: Atom */
			reduce(107), /* >>, reduce: Atom */
			reduce(107), /* +, reduce: Atom */
			reduce(107), /* -, reduce: Atom */
			reduce(107), /* *, reduce: Atom */
			reduce(107), /* /, reduce: Atom */
			reduce(107), /* %, reduce: Atom */
			reduce(107), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(107), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(107), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(107), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S1501
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(108), /* return, reduce: Atom */
			reduce(108), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(108), /* break, reduce: Atom */
			reduce(108), /* goto, reduce: Atom */
			reduce(108), /* do, reduce: Atom */
			nil,         /* end */
			reduce(108), /* while, reduce: Atom */
			reduce(108), /* repeat, reduce: Atom */
			reduce(108), /* until, reduce: Atom */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(108), /* if, reduce: Atom */
			nil,         /* , */
			reduce(108), /* for, reduce: Atom */
			nil,         /* in */
			reduce(108), /* function, reduce: Atom */
			reduce(108), /* local, reduce: Atom */
			reduce(108), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(108), /* or, reduce: Atom */
			reduce(108), /* and, reduce: Atom */
			reduce(108), /* <, reduce: Atom */
			reduce(108), /* <=, reduce: Atom */
			reduce(108), /* >, reduce: Atom */
			reduce(108), /* >=, reduce: Atom */
			reduce(108), /* ==, reduce: Atom */
			reduce(108), /* ~=, reduce: Atom */
			reduce(108), /* |, reduce: Atom */
			reduce(108), /* ~, reduce: Atom */
			reduce(108), /* &, reduce: Atom */
			reduce(108), /* .., reduce: Atom */
			reduce(108), /* <<, reduce: Atom */
			reduce(108), /* >>, reduce: Atom */
			reduce(108), /* +, reduce: Atom */
			reduce(108), /* -, reduce: Atom */
			reduce(108), /* *, reduce: Atom */
			reduce(108), /* /, reduce: Atom */
			reduce(108), /* %, reduce: Atom */
			reduce(108), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(108), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(108), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(108), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S1502
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(109), /* return, reduce: Atom */
			reduce(109), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(109), /* break, reduce: Atom */
			reduce(109), /* goto, reduce: Atom */
			reduce(109), /* do, reduce: Atom */
			nil,         /* end */
			reduce(109), /* while, reduce: Atom */
			reduce(109), /* repeat, reduce: Atom */
			reduce(109), /* until, reduce: Atom */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(109), /* if, reduce: Atom */
			nil,         /* , */
			reduce(109), /* for, reduce: Atom */
			nil,         /* in */
			reduce(109), /* function, reduce: Atom */
			reduce(109), /* local, reduce: Atom */
			reduce(109), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(109), /* or, reduce: Atom */
			reduce(109), /* and, reduce: Atom */
			reduce(109), /* <, reduce: Atom */
			reduce(109), /* <=, reduce: Atom */
			reduce(109), /* >, reduce: Atom */
			reduce(109), /* >=, reduce: Atom */
			reduce(109), /* ==, reduce: Atom */
			reduce(109), /* ~=, reduce: Atom */
			reduce(109), /* |, reduce: Atom */
			reduce(109), /* ~, reduce: Atom */
			reduce(109), /* &, reduce: Atom */
			reduce(109), /* .., reduce: Atom */
			reduce(109), /* <<, reduce: Atom */
			reduce(109), /* >>, reduce: Atom */
			reduce(109), /* +, reduce: Atom */
			reduce(109), /* -, reduce: Atom */
			reduce(109), /* *, reduce: Atom */
			reduce(109), /* /, reduce: Atom */
			reduce(109), /* %, reduce: Atom */
			reduce(109), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(109), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(109), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(109), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S1503
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(110), /* return, reduce: Atom */
			reduce(110), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(110), /* break, reduce: Atom */
			reduce(110), /* goto, reduce: Atom */
			reduce(110), /* do, reduce: Atom */
			nil,         /* end */
			reduce(110), /* while, reduce: Atom */
			reduce(110), /* repeat, reduce: Atom */
			reduce(110), /* until, reduce: Atom */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(110), /* if, reduce: Atom */
			nil,         /* , */
			reduce(110), /* for, reduce: Atom */
			nil,         /* in */
			reduce(110), /* function, reduce: Atom */
			reduce(110), /* local, reduce: Atom */
			reduce(110), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(110), /* or, reduce: Atom */
			reduce(110), /* and, reduce: Atom */
			reduce(110), /* <, reduce: Atom */
			reduce(110), /* <=, reduce: Atom */
			reduce(110), /* >, reduce: Atom */
			reduce(110), /* >=, reduce: Atom */
			reduce(110), /* ==, reduce: Atom */
			reduce(110), /* ~=, reduce: Atom */
			reduce(110), /* |, reduce: Atom */
			reduce(110), /* ~, reduce: Atom */
			reduce(110), /* &, reduce: Atom */
			reduce(110), /* .., reduce: Atom */
			reduce(110), /* <<, reduce: Atom */
			reduce(110), /* >>, reduce: Atom */
			reduce(110), /* +, reduce: Atom */
			reduce(110), /* -, reduce: Atom */
			reduce(110), /* *, reduce: Atom */
			reduce(110), /* /, reduce: Atom */
			reduce(110), /* %, reduce: Atom */
			reduce(110), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(110), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(110), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(110), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S1504
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(111), /* return, reduce: Atom */
			reduce(111), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(111), /* break, reduce: Atom */
			reduce(111), /* goto, reduce: Atom */
			reduce(111), /* do, reduce: Atom */
			nil,         /* end */
			reduce(111), /* while, reduce: Atom */
			reduce(111), /* repeat, reduce: Atom */
			reduce(111), /* until, reduce: Atom */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(111), /* if, reduce: Atom */
			nil,         /* , */
			reduce(111), /* for, reduce: Atom */
			nil,         /* in */
			reduce(111), /* function, reduce: Atom */
			reduce(111), /* local, reduce: Atom */
			reduce(111), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(111), /* or, reduce: Atom */
			reduce(111), /* and, reduce: Atom */
			reduce(111), /* <, reduce: Atom */
			reduce(111), /* <=, reduce: Atom */
			reduce(111), /* >, reduce: Atom */
			reduce(111), /* >=, reduce: Atom */
			reduce(111), /* ==, reduce: Atom */
			reduce(111), /* ~=, reduce: Atom */
			reduce(111), /* |, reduce: Atom */
			reduce(111), /* ~, reduce: Atom */
			reduce(111), /* &, reduce: Atom */
			reduce(111), /* .., reduce: Atom */
			reduce(111), /* <<, reduce: Atom */
			reduce(111), /* >>, reduce: Atom */
			reduce(111), /* +, reduce: Atom */
			reduce(111), /* -, reduce: Atom */
			reduce(111), /* *, reduce: Atom */
			reduce(111), /* /, reduce: Atom */
			reduce(111), /* %, reduce: Atom */
			reduce(111), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(111), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(111), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(111), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S1505
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(112), /* return, reduce: Atom */
			reduce(112), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(112), /* break, reduce: Atom */
			reduce(112), /* goto, reduce: Atom */
			reduce(112), /* do, reduce: Atom */
			nil,         /* end */
			reduce(112), /* while, reduce: Atom */
			reduce(112), /* repeat, reduce: Atom */
			reduce(112), /* until, reduce: Atom */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(112), /* if, reduce: Atom */
			nil,         /* , */
			reduce(112), /* for, reduce: Atom */
			nil,         /* in */
			reduce(112), /* function, reduce: Atom */
			reduce(112), /* local, reduce: Atom */
			reduce(112), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(112), /* or, reduce: Atom */
			reduce(112), /* and, reduce: Atom */
			reduce(112), /* <, reduce: Atom */
			reduce(112), /* <=, reduce: Atom */
			reduce(112), /* >, reduce: Atom */
			reduce(112), /* >=, reduce: Atom */
			reduce(112), /* ==, reduce: Atom */
			reduce(112), /* ~=, reduce: Atom */
			reduce(112), /* |, reduce: Atom */
			reduce(112), /* ~, reduce: Atom */
			reduce(112), /* &, reduce: Atom */
			reduce(112), /* .., reduce: Atom */
			reduce(112), /* <<, reduce: Atom */
			reduce(112), /* >>, reduce: Atom */
			reduce(112), /* +, reduce: Atom */
			reduce(112), /* -, reduce: Atom */
			reduce(112), /* *, reduce: Atom */
			reduce(112), /* /, reduce: Atom */
			reduce(112), /* %, reduce: Atom */
			reduce(112), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(112), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(112), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(112), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S1506
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(113), /* return, reduce: Atom */
			reduce(113), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(113), /* break, reduce: Atom */
			reduce(113), /* goto, reduce: Atom */
			reduce(113), /* do, reduce: Atom */
			nil,         /* end */
			reduce(113), /* while, reduce: Atom */
			reduce(113), /* repeat, reduce: Atom */
			reduce(113), /* until, reduce: Atom */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(113), /* if, reduce: Atom */
			nil,         /* , */
			reduce(113), /* for, reduce: Atom */
			nil,         /* in */
			reduce(113), /* function, reduce: Atom */
			reduce(113), /* local, reduce: Atom */
			reduce(113), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(113), /* or, reduce: Atom */
			reduce(113), /* and, reduce: Atom */
			reduce(113), /* <, reduce: Atom */
			reduce(113), /* <=, reduce: Atom */
			reduce(113), /* >, reduce: Atom */
			reduce(113), /* >=, reduce: Atom */
			reduce(113), /* ==, reduce: Atom */
			reduce(113), /* ~=, reduce: Atom */
			reduce(113), /* |, reduce: Atom */
			reduce(113), /* ~, reduce: Atom */
			reduce(113), /* &, reduce: Atom */
			reduce(113), /* .., reduce: Atom */
			reduce(113), /* <<, reduce: Atom */
			reduce(113), /* >>, reduce: Atom */
			reduce(113), /* +, reduce: Atom */
			reduce(113), /* -, reduce: Atom */
			reduce(113), /* *, reduce: Atom */
			reduce(113), /* /, reduce: Atom */
			reduce(113), /* %, reduce: Atom */
			reduce(113), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(113), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(113), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(113), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S1507
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			shift(254), /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(268), /* ident */
		},
	},
	actionRow{ // S1508
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(134), /* return, reduce: Name */
			reduce(134), /* ;, reduce: Name */
			nil,         /* empty */
			nil,         /* = */
			reduce(134), /* break, reduce: Name */
			reduce(134), /* goto, reduce: Name */
			reduce(134), /* do, reduce: Name */
			nil,         /* end */
			reduce(134), /* while, reduce: Name */
			reduce(134), /* repeat, reduce: Name */
			reduce(134), /* until, reduce: Name */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(134), /* if, reduce: Name */
			nil,         /* , */
			reduce(134), /* for, reduce: Name */
			nil,         /* in */
			reduce(134), /* function, reduce: Name */
			reduce(134), /* local, reduce: Name */
			reduce(134), /* ::, reduce: Name */
			reduce(134), /* ., reduce: Name */
			reduce(134), /* :, reduce: Name */
			reduce(134), /* or, reduce: Name */
			reduce(134), /* and, reduce: Name */
			reduce(134), /* <, reduce: Name */
			reduce(134), /* <=, reduce: Name */
			reduce(134), /* >, reduce: Name */
			reduce(134), /* >=, reduce: Name */
			reduce(134), /* ==, reduce: Name */
			reduce(134), /* ~=, reduce: Name */
			reduce(134), /* |, reduce: Name */
			reduce(134), /* ~, reduce: Name */
			reduce(134), /* &, reduce: Name */
			reduce(134), /* .., reduce: Name */
			reduce(134), /* <<, reduce: Name */
			reduce(134), /* >>, reduce: Name */
			reduce(134), /* +, reduce: Name */
			reduce(134), /* -, reduce: Name */
			reduce(134), /* *, reduce: Name */
			reduce(134), /* /, reduce: Name */
			reduce(134), /* %, reduce: Name */
			reduce(134), /* //, reduce: Name */
			nil,         /* not */
			nil,         /* # */
			reduce(134), /* ^, reduce: Name */
			reduce(134), /* [, reduce: Name */
			nil,         /* ] */
			reduce(134), /* (, reduce: Name */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(134), /* string, reduce: Name */
			reduce(134), /* {, reduce: Name */
			nil,         /* } */
			reduce(134), /* ident, reduce: Name */
		},
	},
	actionRow{ // S1509
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(1763), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			shift(1764), /* elseif */
			shift(1766), /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1510
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			shift(1767), /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1511
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			shift(1768), /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(1221), /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1512
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(1769), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1513
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(43),  /* return, reduce: LocalStat */
			reduce(43),  /* ;, reduce: LocalStat */
			nil,         /* empty */
			nil,         /* = */
			reduce(43),  /* break, reduce: LocalStat */
			reduce(43),  /* goto, reduce: LocalStat */
			reduce(43),  /* do, reduce: LocalStat */
			nil,         /* end */
			reduce(43),  /* while, reduce: LocalStat */
			reduce(43),  /* repeat, reduce: LocalStat */
			reduce(43),  /* until, reduce: LocalStat */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(43),  /* if, reduce: LocalStat */
			shift(1452), /* , */
			reduce(43),  /* for, reduce: LocalStat */
			nil,         /* in */
			reduce(43),  /* function, reduce: LocalStat */
			reduce(43),  /* local, reduce: LocalStat */
			reduce(43),  /* ::, reduce: LocalStat */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(43),  /* (, reduce: LocalStat */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(43),  /* ident, reduce: LocalStat */
		},
	},
	actionRow{ // S1514
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(52), /* return, reduce: NameList */
			reduce(52), /* ;, reduce: NameList */
			nil,        /* empty */
			reduce(52), /* =, reduce: NameList */
			reduce(52), /* break, reduce: NameList */
			reduce(52), /* goto, reduce: NameList */
			reduce(52), /* do, reduce: NameList */
			nil,        /* end */
			reduce(52), /* while, reduce: NameList */
			reduce(52), /* repeat, reduce: NameList */
			reduce(52), /* until, reduce: NameList */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(52), /* if, reduce: NameList */
			reduce(52), /* ,, reduce: NameList */
			reduce(52), /* for, reduce: NameList */
			nil,        /* in */
			reduce(52), /* function, reduce: NameList */
			reduce(52), /* local, reduce: NameList */
			reduce(52), /* ::, reduce: NameList */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(52), /* (, reduce: NameList */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(52), /* ident, reduce: NameList */
		},
	},
	actionRow{ // S1515
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(41), /* return, reduce: LocalFunctionStat */
			reduce(41), /* ;, reduce: LocalFunctionStat */
			nil,        /* empty */
			nil,        /* = */
			reduce(41), /* break, reduce: LocalFunctionStat */
			reduce(41), /* goto, reduce: LocalFunctionStat */
			reduce(41), /* do, reduce: LocalFunctionStat */
			nil,        /* end */
			reduce(41), /* while, reduce: LocalFunctionStat */
			reduce(41), /* repeat, reduce: LocalFunctionStat */
			reduce(41), /* until, reduce: LocalFunctionStat */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(41), /* if, reduce: LocalFunctionStat */
			nil,        /* , */
			reduce(41), /* for, reduce: LocalFunctionStat */
			nil,        /* in */
			reduce(41), /* function, reduce: LocalFunctionStat */
			reduce(41), /* local, reduce: LocalFunctionStat */
			reduce(41), /* ::, reduce: LocalFunctionStat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(41), /* (, reduce: LocalFunctionStat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(41), /* ident, reduce: LocalFunctionStat */
		},
	},
	actionRow{ // S1516
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			shift(1770), /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			shift(388),  /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1517
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(1771), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			shift(1772), /* elseif */
			shift(1773), /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1518
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(1774), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1519
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			shift(1775), /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(2),   /* end, reduce: Chunk */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			reduce(2),   /* elseif, reduce: Chunk */
			reduce(2),   /* else, reduce: Chunk */
			nil,         /* if */
			shift(1776), /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1520
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* return */
			nil,       /* ; */
			nil,       /* empty */
			nil,       /* = */
			nil,       /* break */
			nil,       /* goto */
			nil,       /* do */
			reduce(3), /* end, reduce: Chunk */
			nil,       /* while */
			nil,       /* repeat */
			nil,       /* until */
			nil,       /* then */
			reduce(3), /* elseif, reduce: Chunk */
			reduce(3), /* else, reduce: Chunk */
			nil,       /* if */
			nil,       /* , */
			nil,       /* for */
			nil,       /* in */
			nil,       /* function */
			nil,       /* local */
			nil,       /* :: */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			nil,       /* ( */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			nil,       /* ident */
		},
	},
	actionRow{ // S1521
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(101), /* ;, reduce: PrefixExp */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(101), /* end, reduce: PrefixExp */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			reduce(101), /* elseif, reduce: PrefixExp */
			reduce(101), /* else, reduce: PrefixExp */
			nil,         /* if */
			reduce(101), /* ,, reduce: PrefixExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(101), /* ., reduce: PrefixExp */
			reduce(101), /* :, reduce: PrefixExp */
			reduce(101), /* or, reduce: PrefixExp */
			reduce(101), /* and, reduce: PrefixExp */
			reduce(101), /* <, reduce: PrefixExp */
			reduce(101), /* <=, reduce: PrefixExp */
			reduce(101), /* >, reduce: PrefixExp */
			reduce(101), /* >=, reduce: PrefixExp */
			reduce(101), /* ==, reduce: PrefixExp */
			reduce(101), /* ~=, reduce: PrefixExp */
			reduce(101), /* |, reduce: PrefixExp */
			reduce(101), /* ~, reduce: PrefixExp */
			reduce(101), /* &, reduce: PrefixExp */
			reduce(101), /* .., reduce: PrefixExp */
			reduce(101), /* <<, reduce: PrefixExp */
			reduce(101), /* >>, reduce: PrefixExp */
			reduce(101), /* +, reduce: PrefixExp */
			reduce(101), /* -, reduce: PrefixExp */
			reduce(101), /* *, reduce: PrefixExp */
			reduce(101), /* /, reduce: PrefixExp */
			reduce(101), /* %, reduce: PrefixExp */
			reduce(101), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(101), /* ^, reduce: PrefixExp */
			reduce(101), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(101), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(101), /* string, reduce: PrefixExp */
			reduce(101), /* {, reduce: PrefixExp */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1522
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(97), /* ;, reduce: Var */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			reduce(97), /* end, reduce: Var */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			reduce(97), /* elseif, reduce: Var */
			reduce(97), /* else, reduce: Var */
			nil,        /* if */
			reduce(97), /* ,, reduce: Var */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			reduce(97), /* ., reduce: Var */
			reduce(97), /* :, reduce: Var */
			reduce(97), /* or, reduce: Var */
			reduce(97), /* and, reduce: Var */
			reduce(97), /* <, reduce: Var */
			reduce(97), /* <=, reduce: Var */
			reduce(97), /* >, reduce: Var */
			reduce(97), /* >=, reduce: Var */
			reduce(97), /* ==, reduce: Var */
			reduce(97), /* ~=, reduce: Var */
			reduce(97), /* |, reduce: Var */
			reduce(97), /* ~, reduce: Var */
			reduce(97), /* &, reduce: Var */
			reduce(97), /* .., reduce: Var */
			reduce(97), /* <<, reduce: Var */
			reduce(97), /* >>, reduce: Var */
			reduce(97), /* +, reduce: Var */
			reduce(97), /* -, reduce: Var */
			reduce(97), /* *, reduce: Var */
			reduce(97), /* /, reduce: Var */
			reduce(97), /* %, reduce: Var */
			reduce(97), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(97), /* ^, reduce: Var */
			reduce(97), /* [, reduce: Var */
			nil,        /* ] */
			reduce(97), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(97), /* string, reduce: Var */
			reduce(97), /* {, reduce: Var */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1523
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(53),  /* ;, reduce: ExpList */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(53),  /* end, reduce: ExpList */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			reduce(53),  /* elseif, reduce: ExpList */
			reduce(53),  /* else, reduce: ExpList */
			nil,         /* if */
			reduce(53),  /* ,, reduce: ExpList */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			shift(1777), /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1524
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1779), /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1525
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(100), /* ;, reduce: PrefixExp */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(100), /* end, reduce: PrefixExp */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			reduce(100), /* elseif, reduce: PrefixExp */
			reduce(100), /* else, reduce: PrefixExp */
			nil,         /* if */
			reduce(100), /* ,, reduce: PrefixExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(100), /* ., reduce: PrefixExp */
			reduce(100), /* :, reduce: PrefixExp */
			reduce(100), /* or, reduce: PrefixExp */
			reduce(100), /* and, reduce: PrefixExp */
			reduce(100), /* <, reduce: PrefixExp */
			reduce(100), /* <=, reduce: PrefixExp */
			reduce(100), /* >, reduce: PrefixExp */
			reduce(100), /* >=, reduce: PrefixExp */
			reduce(100), /* ==, reduce: PrefixExp */
			reduce(100), /* ~=, reduce: PrefixExp */
			reduce(100), /* |, reduce: PrefixExp */
			reduce(100), /* ~, reduce: PrefixExp */
			reduce(100), /* &, reduce: PrefixExp */
			reduce(100), /* .., reduce: PrefixExp */
			reduce(100), /* <<, reduce: PrefixExp */
			reduce(100), /* >>, reduce: PrefixExp */
			reduce(100), /* +, reduce: PrefixExp */
			reduce(100), /* -, reduce: PrefixExp */
			reduce(100), /* *, reduce: PrefixExp */
			reduce(100), /* /, reduce: PrefixExp */
			reduce(100), /* %, reduce: PrefixExp */
			reduce(100), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(100), /* ^, reduce: PrefixExp */
			reduce(100), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(100), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(100), /* string, reduce: PrefixExp */
			reduce(100), /* {, reduce: PrefixExp */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1526
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(55),  /* ;, reduce: Exp */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(55),  /* end, reduce: Exp */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			reduce(55),  /* elseif, reduce: Exp */
			reduce(55),  /* else, reduce: Exp */
			nil,         /* if */
			reduce(55),  /* ,, reduce: Exp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(55),  /* or, reduce: Exp */
			shift(1780), /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1527
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(57), /* ;, reduce: AndExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			reduce(57), /* end, reduce: AndExp */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			reduce(57), /* elseif, reduce: AndExp */
			reduce(57), /* else, reduce: AndExp */
			nil,        /* if */
			reduce(57), /* ,, reduce: AndExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(57), /* or, reduce: AndExp */
			reduce(57), /* and, reduce: AndExp */
			shift(203), /* < */
			shift(204), /* <= */
			shift(205), /* > */
			shift(206), /* >= */
			shift(207), /* == */
			shift(208), /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1528
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(65),  /* ;, reduce: CompExp */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(65),  /* end, reduce: CompExp */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			reduce(65),  /* elseif, reduce: CompExp */
			reduce(65),  /* else, reduce: CompExp */
			nil,         /* if */
			reduce(65),  /* ,, reduce: CompExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(65),  /* or, reduce: CompExp */
			reduce(65),  /* and, reduce: CompExp */
			reduce(65),  /* <, reduce: CompExp */
			reduce(65),  /* <=, reduce: CompExp */
			reduce(65),  /* >, reduce: CompExp */
			reduce(65),  /* >=, reduce: CompExp */
			reduce(65),  /* ==, reduce: CompExp */
			reduce(65),  /* ~=, reduce: CompExp */
			shift(1782), /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1529
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(67),  /* ;, reduce: BitOrExp */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(67),  /* end, reduce: BitOrExp */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			reduce(67),  /* elseif, reduce: BitOrExp */
			reduce(67),  /* else, reduce: BitOrExp */
			nil,         /* if */
			reduce(67),  /* ,, reduce: BitOrExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(67),  /* or, reduce: BitOrExp */
			reduce(67),  /* and, reduce: BitOrExp */
			reduce(67),  /* <, reduce: BitOrExp */
			reduce(67),  /* <=, reduce: BitOrExp */
			reduce(67),  /* >, reduce: BitOrExp */
			reduce(67),  /* >=, reduce: BitOrExp */
			reduce(67),  /* ==, reduce: BitOrExp */
			reduce(67),  /* ~=, reduce: BitOrExp */
			reduce(67),  /* |, reduce: BitOrExp */
			shift(1783), /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1530
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(69),  /* ;, reduce: BitXorExp */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(69),  /* end, reduce: BitXorExp */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			reduce(69),  /* elseif, reduce: BitXorExp */
			reduce(69),  /* else, reduce: BitXorExp */
			nil,         /* if */
			reduce(69),  /* ,, reduce: BitXorExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(69),  /* or, reduce: BitXorExp */
			reduce(69),  /* and, reduce: BitXorExp */
			reduce(69),  /* <, reduce: BitXorExp */
			reduce(69),  /* <=, reduce: BitXorExp */
			reduce(69),  /* >, reduce: BitXorExp */
			reduce(69),  /* >=, reduce: BitXorExp */
			reduce(69),  /* ==, reduce: BitXorExp */
			reduce(69),  /* ~=, reduce: BitXorExp */
			reduce(69),  /* |, reduce: BitXorExp */
			reduce(69),  /* ~, reduce: BitXorExp */
			shift(1784), /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1531
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(71),  /* ;, reduce: BitAndExp */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(71),  /* end, reduce: BitAndExp */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			reduce(71),  /* elseif, reduce: BitAndExp */
			reduce(71),  /* else, reduce: BitAndExp */
			nil,         /* if */
			reduce(71),  /* ,, reduce: BitAndExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(71),  /* or, reduce: BitAndExp */
			reduce(71),  /* and, reduce: BitAndExp */
			reduce(71),  /* <, reduce: BitAndExp */
			reduce(71),  /* <=, reduce: BitAndExp */
			reduce(71),  /* >, reduce: BitAndExp */
			reduce(71),  /* >=, reduce: BitAndExp */
			reduce(71),  /* ==, reduce: BitAndExp */
			reduce(71),  /* ~=, reduce: BitAndExp */
			reduce(71),  /* |, reduce: BitAndExp */
			reduce(71),  /* ~, reduce: BitAndExp */
			reduce(71),  /* &, reduce: BitAndExp */
			shift(1785), /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1532
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(73), /* ;, reduce: ConcatExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			reduce(73), /* end, reduce: ConcatExp */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			reduce(73), /* elseif, reduce: ConcatExp */
			reduce(73), /* else, reduce: ConcatExp */
			nil,        /* if */
			reduce(73), /* ,, reduce: ConcatExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(73), /* or, reduce: ConcatExp */
			reduce(73), /* and, reduce: ConcatExp */
			reduce(73), /* <, reduce: ConcatExp */
			reduce(73), /* <=, reduce: ConcatExp */
			reduce(73), /* >, reduce: ConcatExp */
			reduce(73), /* >=, reduce: ConcatExp */
			reduce(73), /* ==, reduce: ConcatExp */
			reduce(73), /* ~=, reduce: ConcatExp */
			reduce(73), /* |, reduce: ConcatExp */
			reduce(73), /* ~, reduce: ConcatExp */
			reduce(73), /* &, reduce: ConcatExp */
			reduce(73), /* .., reduce: ConcatExp */
			shift(214), /* << */
			shift(215), /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1533
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(77), /* ;, reduce: ShiftExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			reduce(77), /* end, reduce: ShiftExp */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			reduce(77), /* elseif, reduce: ShiftExp */
			reduce(77), /* else, reduce: ShiftExp */
			nil,        /* if */
			reduce(77), /* ,, reduce: ShiftExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(77), /* or, reduce: ShiftExp */
			reduce(77), /* and, reduce: ShiftExp */
			reduce(77), /* <, reduce: ShiftExp */
			reduce(77), /* <=, reduce: ShiftExp */
			reduce(77), /* >, reduce: ShiftExp */
			reduce(77), /* >=, reduce: ShiftExp */
			reduce(77), /* ==, reduce: ShiftExp */
			reduce(77), /* ~=, reduce: ShiftExp */
			reduce(77), /* |, reduce: ShiftExp */
			reduce(77), /* ~, reduce: ShiftExp */
			reduce(77), /* &, reduce: ShiftExp */
			reduce(77), /* .., reduce: ShiftExp */
			reduce(77), /* <<, reduce: ShiftExp */
			reduce(77), /* >>, reduce: ShiftExp */
			shift(217), /* + */
			shift(218), /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1534
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(81), /* ;, reduce: Sum */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			reduce(81), /* end, reduce: Sum */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			reduce(81), /* elseif, reduce: Sum */
			reduce(81), /* else, reduce: Sum */
			nil,        /* if */
			reduce(81), /* ,, reduce: Sum */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(81), /* or, reduce: Sum */
			reduce(81), /* and, reduce: Sum */
			reduce(81), /* <, reduce: Sum */
			reduce(81), /* <=, reduce: Sum */
			reduce(81), /* >, reduce: Sum */
			reduce(81), /* >=, reduce: Sum */
			reduce(81), /* ==, reduce: Sum */
			reduce(81), /* ~=, reduce: Sum */
			reduce(81), /* |, reduce: Sum */
			reduce(81), /* ~, reduce: Sum */
			reduce(81), /* &, reduce: Sum */
			reduce(81), /* .., reduce: Sum */
			reduce(81), /* <<, reduce: Sum */
			reduce(81), /* >>, reduce: Sum */
			reduce(81), /* +, reduce: Sum */
			reduce(81), /* -, reduce: Sum */
			shift(220), /* * */
			shift(221), /* / */
			shift(222), /* % */
			shift(223), /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1535
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(87), /* ;, reduce: Term */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			reduce(87), /* end, reduce: Term */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			reduce(87), /* elseif, reduce: Term */
			reduce(87), /* else, reduce: Term */
			nil,        /* if */
			reduce(87), /* ,, reduce: Term */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(87), /* or, reduce: Term */
			reduce(87), /* and, reduce: Term */
			reduce(87), /* <, reduce: Term */
			reduce(87), /* <=, reduce: Term */
			reduce(87), /* >, reduce: Term */
			reduce(87), /* >=, reduce: Term */
			reduce(87), /* ==, reduce: Term */
			reduce(87), /* ~=, reduce: Term */
			reduce(87), /* |, reduce: Term */
			reduce(87), /* ~, reduce: Term */
			reduce(87), /* &, reduce: Term */
			reduce(87), /* .., reduce: Term */
			reduce(87), /* <<, reduce: Term */
			reduce(87), /* >>, reduce: Term */
			reduce(87), /* +, reduce: Term */
			reduce(87), /* -, reduce: Term */
			reduce(87), /* *, reduce: Term */
			reduce(87), /* /, reduce: Term */
			reduce(87), /* %, reduce: Term */
			reduce(87), /* //, reduce: Term */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1536
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1524), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1540), /* ( */
			nil,         /* ) */
			shift(1541), /* nil */
			shift(1542), /* true */
			shift(1543), /* false */
			shift(1544), /* ... */
			shift(1545), /* numdec */
			shift(1546), /* numhex */
			shift(1547), /* string */
			shift(1550), /* { */
			nil,         /* } */
			shift(1551), /* ident */
		},
	},
	actionRow{ // S1537
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(94), /* ;, reduce: Factor */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			reduce(94), /* end, reduce: Factor */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			reduce(94), /* elseif, reduce: Factor */
			reduce(94), /* else, reduce: Factor */
			nil,        /* if */
			reduce(94), /* ,, reduce: Factor */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(94), /* or, reduce: Factor */
			reduce(94), /* and, reduce: Factor */
			reduce(94), /* <, reduce: Factor */
			reduce(94), /* <=, reduce: Factor */
			reduce(94), /* >, reduce: Factor */
			reduce(94), /* >=, reduce: Factor */
			reduce(94), /* ==, reduce: Factor */
			reduce(94), /* ~=, reduce: Factor */
			reduce(94), /* |, reduce: Factor */
			reduce(94), /* ~, reduce: Factor */
			reduce(94), /* &, reduce: Factor */
			reduce(94), /* .., reduce: Factor */
			reduce(94), /* <<, reduce: Factor */
			reduce(94), /* >>, reduce: Factor */
			reduce(94), /* +, reduce: Factor */
			reduce(94), /* -, reduce: Factor */
			reduce(94), /* *, reduce: Factor */
			reduce(94), /* /, reduce: Factor */
			reduce(94), /* %, reduce: Factor */
			reduce(94), /* //, reduce: Factor */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1538
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(95),  /* ;, reduce: Power */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(95),  /* end, reduce: Power */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			reduce(95),  /* elseif, reduce: Power */
			reduce(95),  /* else, reduce: Power */
			nil,         /* if */
			reduce(95),  /* ,, reduce: Power */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(95),  /* or, reduce: Power */
			reduce(95),  /* and, reduce: Power */
			reduce(95),  /* <, reduce: Power */
			reduce(95),  /* <=, reduce: Power */
			reduce(95),  /* >, reduce: Power */
			reduce(95),  /* >=, reduce: Power */
			reduce(95),  /* ==, reduce: Power */
			reduce(95),  /* ~=, reduce: Power */
			reduce(95),  /* |, reduce: Power */
			reduce(95),  /* ~, reduce: Power */
			reduce(95),  /* &, reduce: Power */
			reduce(95),  /* .., reduce: Power */
			reduce(95),  /* <<, reduce: Power */
			reduce(95),  /* >>, reduce: Power */
			reduce(95),  /* +, reduce: Power */
			reduce(95),  /* -, reduce: Power */
			reduce(95),  /* *, reduce: Power */
			reduce(95),  /* /, reduce: Power */
			reduce(95),  /* %, reduce: Power */
			reduce(95),  /* //, reduce: Power */
			nil,         /* not */
			nil,         /* # */
			shift(1790), /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1539
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(114), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(114), /* end, reduce: Atom */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			reduce(114), /* elseif, reduce: Atom */
			reduce(114), /* else, reduce: Atom */
			nil,         /* if */
			reduce(114), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			shift(1791), /* . */
			shift(1792), /* : */
			reduce(114), /* or, reduce: Atom */
			reduce(114), /* and, reduce: Atom */
			reduce(114), /* <, reduce: Atom */
			reduce(114), /* <=, reduce: Atom */
			reduce(114), /* >, reduce: Atom */
			reduce(114), /* >=, reduce: Atom */
			reduce(114), /* ==, reduce: Atom */
			reduce(114), /* ~=, reduce: Atom */
			reduce(114), /* |, reduce: Atom */
			reduce(114), /* ~, reduce: Atom */
			reduce(114), /* &, reduce: Atom */
			reduce(114), /* .., reduce: Atom */
			reduce(114), /* <<, reduce: Atom */
			reduce(114), /* >>, reduce: Atom */
			reduce(114), /* +, reduce: Atom */
			reduce(114), /* -, reduce: Atom */
			reduce(114), /* *, reduce: Atom */
			reduce(114), /* /, reduce: Atom */
			reduce(114), /* %, reduce: Atom */
			reduce(114), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(114), /* ^, reduce: Atom */
			shift(1793), /* [ */
			nil,         /* ] */
			shift(1794), /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			shift(1796), /* string */
			shift(1798), /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1540
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(168), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(184), /* ( */
			nil,        /* ) */
			shift(185), /* nil */
			shift(186), /* true */
			shift(187), /* false */
			shift(188), /* ... */
			shift(189), /* numdec */
			shift(190), /* numhex */
			shift(191), /* string */
			shift(194), /* { */
			nil,        /* } */
			shift(195), /* ident */
		},
	},
	actionRow{ // S1541
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(105), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(105), /* end, reduce: Atom */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			reduce(105), /* elseif, reduce: Atom */
			reduce(105), /* else, reduce: Atom */
			nil,         /* if */
			reduce(105), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(105), /* or, reduce: Atom */
			reduce(105), /* and, reduce: Atom */
			reduce(105), /* <, reduce: Atom */
			reduce(105), /* <=, reduce: Atom */
			reduce(105), /* >, reduce: Atom */
			reduce(105), /* >=, reduce: Atom */
			reduce(105), /* ==, reduce: Atom */
			reduce(105), /* ~=, reduce: Atom */
			reduce(105), /* |, reduce: Atom */
			reduce(105), /* ~, reduce: Atom */
			reduce(105), /* &, reduce: Atom */
			reduce(105), /* .., reduce: Atom */
			reduce(105), /* <<, reduce: Atom */
			reduce(105), /* >>, reduce: Atom */
			reduce(105), /* +, reduce: Atom */
			reduce(105), /* -, reduce: Atom */
			reduce(105), /* *, reduce: Atom */
			reduce(105), /* /, reduce: Atom */
			reduce(105), /* %, reduce: Atom */
			reduce(105), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(105), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1542
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(106), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(106), /* end, reduce: Atom */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			reduce(106), /* elseif, reduce: Atom */
			reduce(106), /* else, reduce: Atom */
			nil,         /* if */
			reduce(106), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(106), /* or, reduce: Atom */
			reduce(106), /* and, reduce: Atom */
			reduce(106), /* <, reduce: Atom */
			reduce(106), /* <=, reduce: Atom */
			reduce(106), /* >, reduce: Atom */
			reduce(106), /* >=, reduce: Atom */
			reduce(106), /* ==, reduce: Atom */
			reduce(106), /* ~=, reduce: Atom */
			reduce(106), /* |, reduce: Atom */
			reduce(106), /* ~, reduce: Atom */
			reduce(106), /* &, reduce: Atom */
			reduce(106), /* .., reduce: Atom */
			reduce(106), /* <<, reduce: Atom */
			reduce(106), /* >>, reduce: Atom */
			reduce(106), /* +, reduce: Atom */
			reduce(106), /* -, reduce: Atom */
			reduce(106), /* *, reduce: Atom */
			reduce(106), /* /, reduce: Atom */
			reduce(106), /* %, reduce: Atom */
			reduce(106), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(106), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1543
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(107), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(107), /* end, reduce: Atom */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			reduce(107), /* elseif, reduce: Atom */
			reduce(107), /* else, reduce: Atom */
			nil,         /* if */
			reduce(107), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(107), /* or, reduce: Atom */
			reduce(107), /* and, reduce: Atom */
			reduce(107), /* <, reduce: Atom */
			reduce(107), /* <=, reduce: Atom */
			reduce(107), /* >, reduce: Atom */
			reduce(107), /* >=, reduce: Atom */
			reduce(107), /* ==, reduce: Atom */
			reduce(107), /* ~=, reduce: Atom */
			reduce(107), /* |, reduce: Atom */
			reduce(107), /* ~, reduce: Atom */
			reduce(107), /* &, reduce: Atom */
			reduce(107), /* .., reduce: Atom */
			reduce(107), /* <<, reduce: Atom */
			reduce(107), /* >>, reduce: Atom */
			reduce(107), /* +, reduce: Atom */
			reduce(107), /* -, reduce: Atom */
			reduce(107), /* *, reduce: Atom */
			reduce(107), /* /, reduce: Atom */
			reduce(107), /* %, reduce: Atom */
			reduce(107), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(107), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1544
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(108), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(108), /* end, reduce: Atom */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			reduce(108), /* elseif, reduce: Atom */
			reduce(108), /* else, reduce: Atom */
			nil,         /* if */
			reduce(108), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(108), /* or, reduce: Atom */
			reduce(108), /* and, reduce: Atom */
			reduce(108), /* <, reduce: Atom */
			reduce(108), /* <=, reduce: Atom */
			reduce(108), /* >, reduce: Atom */
			reduce(108), /* >=, reduce: Atom */
			reduce(108), /* ==, reduce: Atom */
			reduce(108), /* ~=, reduce: Atom */
			reduce(108), /* |, reduce: Atom */
			reduce(108), /* ~, reduce: Atom */
			reduce(108), /* &, reduce: Atom */
			reduce(108), /* .., reduce: Atom */
			reduce(108), /* <<, reduce: Atom */
			reduce(108), /* >>, reduce: Atom */
			reduce(108), /* +, reduce: Atom */
			reduce(108), /* -, reduce: Atom */
			reduce(108), /* *, reduce: Atom */
			reduce(108), /* /, reduce: Atom */
			reduce(108), /* %, reduce: Atom */
			reduce(108), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(108), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1545
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(109), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(109), /* end, reduce: Atom */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			reduce(109), /* elseif, reduce: Atom */
			reduce(109), /* else, reduce: Atom */
			nil,         /* if */
			reduce(109), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(109), /* or, reduce: Atom */
			reduce(109), /* and, reduce: Atom */
			reduce(109), /* <, reduce: Atom */
			reduce(109), /* <=, reduce: Atom */
			reduce(109), /* >, reduce: Atom */
			reduce(109), /* >=, reduce: Atom */
			reduce(109), /* ==, reduce: Atom */
			reduce(109), /* ~=, reduce: Atom */
			reduce(109), /* |, reduce: Atom */
			reduce(109), /* ~, reduce: Atom */
			reduce(109), /* &, reduce: Atom */
			reduce(109), /* .., reduce: Atom */
			reduce(109), /* <<, reduce: Atom */
			reduce(109), /* >>, reduce: Atom */
			reduce(109), /* +, reduce: Atom */
			reduce(109), /* -, reduce: Atom */
			reduce(109), /* *, reduce: Atom */
			reduce(109), /* /, reduce: Atom */
			reduce(109), /* %, reduce: Atom */
			reduce(109), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(109), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1546
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(110), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(110), /* end, reduce: Atom */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			reduce(110), /* elseif, reduce: Atom */
			reduce(110), /* else, reduce: Atom */
			nil,         /* if */
			reduce(110), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(110), /* or, reduce: Atom */
			reduce(110), /* and, reduce: Atom */
			reduce(110), /* <, reduce: Atom */
			reduce(110), /* <=, reduce: Atom */
			reduce(110), /* >, reduce: Atom */
			reduce(110), /* >=, reduce: Atom */
			reduce(110), /* ==, reduce: Atom */
			reduce(110), /* ~=, reduce: Atom */
			reduce(110), /* |, reduce: Atom */
			reduce(110), /* ~, reduce: Atom */
			reduce(110), /* &, reduce: Atom */
			reduce(110), /* .., reduce: Atom */
			reduce(110), /* <<, reduce: Atom */
			reduce(110), /* >>, reduce: Atom */
			reduce(110), /* +, reduce: Atom */
			reduce(110), /* -, reduce: Atom */
			reduce(110), /* *, reduce: Atom */
			reduce(110), /* /, reduce: Atom */
			reduce(110), /* %, reduce: Atom */
			reduce(110), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(110), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1547
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(111), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(111), /* end, reduce: Atom */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			reduce(111), /* elseif, reduce: Atom */
			reduce(111), /* else, reduce: Atom */
			nil,         /* if */
			reduce(111), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(111), /* or, reduce: Atom */
			reduce(111), /* and, reduce: Atom */
			reduce(111), /* <, reduce: Atom */
			reduce(111), /* <=, reduce: Atom */
			reduce(111), /* >, reduce: Atom */
			reduce(111), /* >=, reduce: Atom */
			reduce(111), /* ==, reduce: Atom */
			reduce(111), /* ~=, reduce: Atom */
			reduce(111), /* |, reduce: Atom */
			reduce(111), /* ~, reduce: Atom */
			reduce(111), /* &, reduce: Atom */
			reduce(111), /* .., reduce: Atom */
			reduce(111), /* <<, reduce: Atom */
			reduce(111), /* >>, reduce: Atom */
			reduce(111), /* +, reduce: Atom */
			reduce(111), /* -, reduce: Atom */
			reduce(111), /* *, reduce: Atom */
			reduce(111), /* /, reduce: Atom */
			reduce(111), /* %, reduce: Atom */
			reduce(111), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(111), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1548
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(112), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(112), /* end, reduce: Atom */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			reduce(112), /* elseif, reduce: Atom */
			reduce(112), /* else, reduce: Atom */
			nil,         /* if */
			reduce(112), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(112), /* or, reduce: Atom */
			reduce(112), /* and, reduce: Atom */
			reduce(112), /* <, reduce: Atom */
			reduce(112), /* <=, reduce: Atom */
			reduce(112), /* >, reduce: Atom */
			reduce(112), /* >=, reduce: Atom */
			reduce(112), /* ==, reduce: Atom */
			reduce(112), /* ~=, reduce: Atom */
			reduce(112), /* |, reduce: Atom */
			reduce(112), /* ~, reduce: Atom */
			reduce(112), /* &, reduce: Atom */
			reduce(112), /* .., reduce: Atom */
			reduce(112), /* <<, reduce: Atom */
			reduce(112), /* >>, reduce: Atom */
			reduce(112), /* +, reduce: Atom */
			reduce(112), /* -, reduce: Atom */
			reduce(112), /* *, reduce: Atom */
			reduce(112), /* /, reduce: Atom */
			reduce(112), /* %, reduce: Atom */
			reduce(112), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(112), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1549
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(113), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(113), /* end, reduce: Atom */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			reduce(113), /* elseif, reduce: Atom */
			reduce(113), /* else, reduce: Atom */
			nil,         /* if */
			reduce(113), /* ,, reduce: Atom */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(113), /* or, reduce: Atom */
			reduce(113), /* and, reduce: Atom */
			reduce(113), /* <, reduce: Atom */
			reduce(113), /* <=, reduce: Atom */
			reduce(113), /* >, reduce: Atom */
			reduce(113), /* >=, reduce: Atom */
			reduce(113), /* ==, reduce: Atom */
			reduce(113), /* ~=, reduce: Atom */
			reduce(113), /* |, reduce: Atom */
			reduce(113), /* ~, reduce: Atom */
			reduce(113), /* &, reduce: Atom */
			reduce(113), /* .., reduce: Atom */
			reduce(113), /* <<, reduce: Atom */
			reduce(113), /* >>, reduce: Atom */
			reduce(113), /* +, reduce: Atom */
			reduce(113), /* -, reduce: Atom */
			reduce(113), /* *, reduce: Atom */
			reduce(113), /* /, reduce: Atom */
			reduce(113), /* %, reduce: Atom */
			reduce(113), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(113), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1550
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			shift(254), /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(268), /* ident */
		},
	},
	actionRow{ // S1551
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(134), /* ;, reduce: Name */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(134), /* end, reduce: Name */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			reduce(134), /* elseif, reduce: Name */
			reduce(134), /* else, reduce: Name */
			nil,         /* if */
			reduce(134), /* ,, reduce: Name */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(134), /* ., reduce: Name */
			reduce(134), /* :, reduce: Name */
			reduce(134), /* or, reduce: Name */
			reduce(134), /* and, reduce: Name */
			reduce(134), /* <, reduce: Name */
			reduce(134), /* <=, reduce: Name */
			reduce(134), /* >, reduce: Name */
			reduce(134), /* >=, reduce: Name */
			reduce(134), /* ==, reduce: Name */
			reduce(134), /* ~=, reduce: Name */
			reduce(134), /* |, reduce: Name */
			reduce(134), /* ~, reduce: Name */
			reduce(134), /* &, reduce: Name */
			reduce(134), /* .., reduce: Name */
			reduce(134), /* <<, reduce: Name */
			reduce(134), /* >>, reduce: Name */
			reduce(134), /* +, reduce: Name */
			reduce(134), /* -, reduce: Name */
			reduce(134), /* *, reduce: Name */
			reduce(134), /* /, reduce: Name */
			reduce(134), /* %, reduce: Name */
			reduce(134), /* //, reduce: Name */
			nil,         /* not */
			nil,         /* # */
			reduce(134), /* ^, reduce: Name */
			reduce(134), /* [, reduce: Name */
			nil,         /* ] */
			reduce(134), /* (, reduce: Name */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(134), /* string, reduce: Name */
			reduce(134), /* {, reduce: Name */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1552
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(10), /* return, reduce: Stat */
			reduce(10), /* ;, reduce: Stat */
			nil,        /* empty */
			nil,        /* = */
			reduce(10), /* break, reduce: Stat */
			reduce(10), /* goto, reduce: Stat */
			reduce(10), /* do, reduce: Stat */
			reduce(10), /* end, reduce: Stat */
			reduce(10), /* while, reduce: Stat */
			reduce(10), /* repeat, reduce: Stat */
			nil,        /* until */
			nil,        /* then */
			reduce(10), /* elseif, reduce: Stat */
			reduce(10), /* else, reduce: Stat */
			reduce(10), /* if, reduce: Stat */
			nil,        /* , */
			reduce(10), /* for, reduce: Stat */
			nil,        /* in */
			reduce(10), /* function, reduce: Stat */
			reduce(10), /* local, reduce: Stat */
			reduce(10), /* ::, reduce: Stat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(10), /* (, reduce: Stat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(10), /* ident, reduce: Stat */
		},
	},
	actionRow{ // S1553
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1805), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1821), /* ( */
			nil,         /* ) */
			shift(1822), /* nil */
			shift(1823), /* true */
			shift(1824), /* false */
			shift(1825), /* ... */
			shift(1826), /* numdec */
			shift(1827), /* numhex */
			shift(1828), /* string */
			shift(1831), /* { */
			nil,         /* } */
			shift(1832), /* ident */
		},
	},
	actionRow{ // S1554
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(25), /* return, reduce: GotoStat */
			reduce(25), /* ;, reduce: GotoStat */
			nil,        /* empty */
			nil,        /* = */
			reduce(25), /* break, reduce: GotoStat */
			reduce(25), /* goto, reduce: GotoStat */
			reduce(25), /* do, reduce: GotoStat */
			reduce(25), /* end, reduce: GotoStat */
			reduce(25), /* while, reduce: GotoStat */
			reduce(25), /* repeat, reduce: GotoStat */
			nil,        /* until */
			nil,        /* then */
			reduce(25), /* elseif, reduce: GotoStat */
			reduce(25), /* else, reduce: GotoStat */
			reduce(25), /* if, reduce: GotoStat */
			nil,        /* , */
			reduce(25), /* for, reduce: GotoStat */
			nil,        /* in */
			reduce(25), /* function, reduce: GotoStat */
			reduce(25), /* local, reduce: GotoStat */
			reduce(25), /* ::, reduce: GotoStat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(25), /* (, reduce: GotoStat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(25), /* ident, reduce: GotoStat */
		},
	},
	actionRow{ // S1555
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(134), /* return, reduce: Name */
			reduce(134), /* ;, reduce: Name */
			nil,         /* empty */
			nil,         /* = */
			reduce(134), /* break, reduce: Name */
			reduce(134), /* goto, reduce: Name */
			reduce(134), /* do, reduce: Name */
			reduce(134), /* end, reduce: Name */
			reduce(134), /* while, reduce: Name */
			reduce(134), /* repeat, reduce: Name */
			nil,         /* until */
			nil,         /* then */
			reduce(134), /* elseif, reduce: Name */
			reduce(134), /* else, reduce: Name */
			reduce(134), /* if, reduce: Name */
			nil,         /* , */
			reduce(134), /* for, reduce: Name */
			nil,         /* in */
			reduce(134), /* function, reduce: Name */
			reduce(134), /* local, reduce: Name */
			reduce(134), /* ::, reduce: Name */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(134), /* (, reduce: Name */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(134), /* ident, reduce: Name */
		},
	},
	actionRow{ // S1556
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(1833), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1557
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			shift(1834), /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			shift(334),  /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1558
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			shift(1835), /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1559
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			shift(1836), /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			shift(388),  /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1560
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			shift(1837), /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(51),  /* ,, reduce: NameList */
			nil,         /* for */
			reduce(51),  /* in, reduce: NameList */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1561
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(413),  /* , */
			nil,         /* for */
			shift(1838), /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1562
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1840), /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1563
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(51), /* return, reduce: NameList */
			reduce(51), /* ;, reduce: NameList */
			nil,        /* empty */
			reduce(51), /* =, reduce: NameList */
			reduce(51), /* break, reduce: NameList */
			reduce(51), /* goto, reduce: NameList */
			reduce(51), /* do, reduce: NameList */
			reduce(51), /* end, reduce: NameList */
			reduce(51), /* while, reduce: NameList */
			reduce(51), /* repeat, reduce: NameList */
			nil,        /* until */
			nil,        /* then */
			reduce(51), /* elseif, reduce: NameList */
			reduce(51), /* else, reduce: NameList */
			reduce(51), /* if, reduce: NameList */
			reduce(51), /* ,, reduce: NameList */
			reduce(51), /* for, reduce: NameList */
			nil,        /* in */
			reduce(51), /* function, reduce: NameList */
			reduce(51), /* local, reduce: NameList */
			reduce(51), /* ::, reduce: NameList */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(51), /* (, reduce: NameList */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(51), /* ident, reduce: NameList */
		},
	},
	actionRow{ // S1564
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(42),  /* return, reduce: LocalStat */
			reduce(42),  /* ;, reduce: LocalStat */
			nil,         /* empty */
			shift(1841), /* = */
			reduce(42),  /* break, reduce: LocalStat */
			reduce(42),  /* goto, reduce: LocalStat */
			reduce(42),  /* do, reduce: LocalStat */
			reduce(42),  /* end, reduce: LocalStat */
			reduce(42),  /* while, reduce: LocalStat */
			reduce(42),  /* repeat, reduce: LocalStat */
			nil,         /* until */
			nil,         /* then */
			reduce(42),  /* elseif, reduce: LocalStat */
			reduce(42),  /* else, reduce: LocalStat */
			reduce(42),  /* if, reduce: LocalStat */
			shift(1842), /* , */
			reduce(42),  /* for, reduce: LocalStat */
			nil,         /* in */
			reduce(42),  /* function, reduce: LocalStat */
			reduce(42),  /* local, reduce: LocalStat */
			reduce(42),  /* ::, reduce: LocalStat */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(42),  /* (, reduce: LocalStat */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(42),  /* ident, reduce: LocalStat */
		},
	},
	actionRow{ // S1565
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(422), /* ident */
		},
	},
	actionRow{ // S1566
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(134), /* return, reduce: Name */
			reduce(134), /* ;, reduce: Name */
			nil,         /* empty */
			reduce(134), /* =, reduce: Name */
			reduce(134), /* break, reduce: Name */
			reduce(134), /* goto, reduce: Name */
			reduce(134), /* do, reduce: Name */
			reduce(134), /* end, reduce: Name */
			reduce(134), /* while, reduce: Name */
			reduce(134), /* repeat, reduce: Name */
			nil,         /* until */
			nil,         /* then */
			reduce(134), /* elseif, reduce: Name */
			reduce(134), /* else, reduce: Name */
			reduce(134), /* if, reduce: Name */
			reduce(134), /* ,, reduce: Name */
			reduce(134), /* for, reduce: Name */
			nil,         /* in */
			reduce(134), /* function, reduce: Name */
			reduce(134), /* local, reduce: Name */
			reduce(134), /* ::, reduce: Name */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(134), /* (, reduce: Name */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(134), /* ident, reduce: Name */
		},
	},
	actionRow{ // S1567
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			shift(1844), /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1568
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(1845), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1569
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			reduce(126), /* then, reduce: TableConstructor */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(126), /* ., reduce: TableConstructor */
			reduce(126), /* :, reduce: TableConstructor */
			reduce(126), /* or, reduce: TableConstructor */
			reduce(126), /* and, reduce: TableConstructor */
			reduce(126), /* <, reduce: TableConstructor */
			reduce(126), /* <=, reduce: TableConstructor */
			reduce(126), /* >, reduce: TableConstructor */
			reduce(126), /* >=, reduce: TableConstructor */
			reduce(126), /* ==, reduce: TableConstructor */
			reduce(126), /* ~=, reduce: TableConstructor */
			reduce(126), /* |, reduce: TableConstructor */
			reduce(126), /* ~, reduce: TableConstructor */
			reduce(126), /* &, reduce: TableConstructor */
			reduce(126), /* .., reduce: TableConstructor */
			reduce(126), /* <<, reduce: TableConstructor */
			reduce(126), /* >>, reduce: TableConstructor */
			reduce(126), /* +, reduce: TableConstructor */
			reduce(126), /* -, reduce: TableConstructor */
			reduce(126), /* *, reduce: TableConstructor */
			reduce(126), /* /, reduce: TableConstructor */
			reduce(126), /* %, reduce: TableConstructor */
			reduce(126), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(126), /* ^, reduce: TableConstructor */
			reduce(126), /* [, reduce: TableConstructor */
			nil,         /* ] */
			reduce(126), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(126), /* string, reduce: TableConstructor */
			reduce(126), /* {, reduce: TableConstructor */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1570
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(36),  /* do, reduce: ForList */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(1846), /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			shift(1222), /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1571
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(56),  /* ,, reduce: Exp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(56),  /* or, reduce: Exp */
			shift(1199), /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1572
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(1847), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1573
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(1848), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1574
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(58), /* ,, reduce: AndExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(58), /* or, reduce: AndExp */
			reduce(58), /* and, reduce: AndExp */
			shift(203), /* < */
			shift(204), /* <= */
			shift(205), /* > */
			shift(206), /* >= */
			shift(207), /* == */
			shift(208), /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1575
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(66),  /* ,, reduce: CompExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(66),  /* or, reduce: CompExp */
			reduce(66),  /* and, reduce: CompExp */
			reduce(66),  /* <, reduce: CompExp */
			reduce(66),  /* <=, reduce: CompExp */
			reduce(66),  /* >, reduce: CompExp */
			reduce(66),  /* >=, reduce: CompExp */
			reduce(66),  /* ==, reduce: CompExp */
			reduce(66),  /* ~=, reduce: CompExp */
			shift(1201), /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1576
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(68),  /* ,, reduce: BitOrExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(68),  /* or, reduce: BitOrExp */
			reduce(68),  /* and, reduce: BitOrExp */
			reduce(68),  /* <, reduce: BitOrExp */
			reduce(68),  /* <=, reduce: BitOrExp */
			reduce(68),  /* >, reduce: BitOrExp */
			reduce(68),  /* >=, reduce: BitOrExp */
			reduce(68),  /* ==, reduce: BitOrExp */
			reduce(68),  /* ~=, reduce: BitOrExp */
			reduce(68),  /* |, reduce: BitOrExp */
			shift(1202), /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1577
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(70),  /* ,, reduce: BitXorExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(70),  /* or, reduce: BitXorExp */
			reduce(70),  /* and, reduce: BitXorExp */
			reduce(70),  /* <, reduce: BitXorExp */
			reduce(70),  /* <=, reduce: BitXorExp */
			reduce(70),  /* >, reduce: BitXorExp */
			reduce(70),  /* >=, reduce: BitXorExp */
			reduce(70),  /* ==, reduce: BitXorExp */
			reduce(70),  /* ~=, reduce: BitXorExp */
			reduce(70),  /* |, reduce: BitXorExp */
			reduce(70),  /* ~, reduce: BitXorExp */
			shift(1203), /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1578
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(72),  /* ,, reduce: BitAndExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(72),  /* or, reduce: BitAndExp */
			reduce(72),  /* and, reduce: BitAndExp */
			reduce(72),  /* <, reduce: BitAndExp */
			reduce(72),  /* <=, reduce: BitAndExp */
			reduce(72),  /* >, reduce: BitAndExp */
			reduce(72),  /* >=, reduce: BitAndExp */
			reduce(72),  /* ==, reduce: BitAndExp */
			reduce(72),  /* ~=, reduce: BitAndExp */
			reduce(72),  /* |, reduce: BitAndExp */
			reduce(72),  /* ~, reduce: BitAndExp */
			reduce(72),  /* &, reduce: BitAndExp */
			shift(1204), /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1579
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(74), /* ,, reduce: ConcatExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(74), /* or, reduce: ConcatExp */
			reduce(74), /* and, reduce: ConcatExp */
			reduce(74), /* <, reduce: ConcatExp */
			reduce(74), /* <=, reduce: ConcatExp */
			reduce(74), /* >, reduce: ConcatExp */
			reduce(74), /* >=, reduce: ConcatExp */
			reduce(74), /* ==, reduce: ConcatExp */
			reduce(74), /* ~=, reduce: ConcatExp */
			reduce(74), /* |, reduce: ConcatExp */
			reduce(74), /* ~, reduce: ConcatExp */
			reduce(74), /* &, reduce: ConcatExp */
			reduce(74), /* .., reduce: ConcatExp */
			shift(214), /* << */
			shift(215), /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1580
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(78), /* ,, reduce: ShiftExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(78), /* or, reduce: ShiftExp */
			reduce(78), /* and, reduce: ShiftExp */
			reduce(78), /* <, reduce: ShiftExp */
			reduce(78), /* <=, reduce: ShiftExp */
			reduce(78), /* >, reduce: ShiftExp */
			reduce(78), /* >=, reduce: ShiftExp */
			reduce(78), /* ==, reduce: ShiftExp */
			reduce(78), /* ~=, reduce: ShiftExp */
			reduce(78), /* |, reduce: ShiftExp */
			reduce(78), /* ~, reduce: ShiftExp */
			reduce(78), /* &, reduce: ShiftExp */
			reduce(78), /* .., reduce: ShiftExp */
			reduce(78), /* <<, reduce: ShiftExp */
			reduce(78), /* >>, reduce: ShiftExp */
			shift(217), /* + */
			shift(218), /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1581
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(82), /* ,, reduce: Sum */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(82), /* or, reduce: Sum */
			reduce(82), /* and, reduce: Sum */
			reduce(82), /* <, reduce: Sum */
			reduce(82), /* <=, reduce: Sum */
			reduce(82), /* >, reduce: Sum */
			reduce(82), /* >=, reduce: Sum */
			reduce(82), /* ==, reduce: Sum */
			reduce(82), /* ~=, reduce: Sum */
			reduce(82), /* |, reduce: Sum */
			reduce(82), /* ~, reduce: Sum */
			reduce(82), /* &, reduce: Sum */
			reduce(82), /* .., reduce: Sum */
			reduce(82), /* <<, reduce: Sum */
			reduce(82), /* >>, reduce: Sum */
			reduce(82), /* +, reduce: Sum */
			reduce(82), /* -, reduce: Sum */
			shift(220), /* * */
			shift(221), /* / */
			shift(222), /* % */
			shift(223), /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1582
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(88), /* ,, reduce: Term */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(88), /* or, reduce: Term */
			reduce(88), /* and, reduce: Term */
			reduce(88), /* <, reduce: Term */
			reduce(88), /* <=, reduce: Term */
			reduce(88), /* >, reduce: Term */
			reduce(88), /* >=, reduce: Term */
			reduce(88), /* ==, reduce: Term */
			reduce(88), /* ~=, reduce: Term */
			reduce(88), /* |, reduce: Term */
			reduce(88), /* ~, reduce: Term */
			reduce(88), /* &, reduce: Term */
			reduce(88), /* .., reduce: Term */
			reduce(88), /* <<, reduce: Term */
			reduce(88), /* >>, reduce: Term */
			reduce(88), /* +, reduce: Term */
			reduce(88), /* -, reduce: Term */
			reduce(88), /* *, reduce: Term */
			reduce(88), /* /, reduce: Term */
			reduce(88), /* %, reduce: Term */
			reduce(88), /* //, reduce: Term */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1583
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(96), /* ,, reduce: Power */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(96), /* or, reduce: Power */
			reduce(96), /* and, reduce: Power */
			reduce(96), /* <, reduce: Power */
			reduce(96), /* <=, reduce: Power */
			reduce(96), /* >, reduce: Power */
			reduce(96), /* >=, reduce: Power */
			reduce(96), /* ==, reduce: Power */
			reduce(96), /* ~=, reduce: Power */
			reduce(96), /* |, reduce: Power */
			reduce(96), /* ~, reduce: Power */
			reduce(96), /* &, reduce: Power */
			reduce(96), /* .., reduce: Power */
			reduce(96), /* <<, reduce: Power */
			reduce(96), /* >>, reduce: Power */
			reduce(96), /* +, reduce: Power */
			reduce(96), /* -, reduce: Power */
			reduce(96), /* *, reduce: Power */
			reduce(96), /* /, reduce: Power */
			reduce(96), /* %, reduce: Power */
			reduce(96), /* //, reduce: Power */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1584
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(99), /* ,, reduce: Var */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			reduce(99), /* ., reduce: Var */
			reduce(99), /* :, reduce: Var */
			reduce(99), /* or, reduce: Var */
			reduce(99), /* and, reduce: Var */
			reduce(99), /* <, reduce: Var */
			reduce(99), /* <=, reduce: Var */
			reduce(99), /* >, reduce: Var */
			reduce(99), /* >=, reduce: Var */
			reduce(99), /* ==, reduce: Var */
			reduce(99), /* ~=, reduce: Var */
			reduce(99), /* |, reduce: Var */
			reduce(99), /* ~, reduce: Var */
			reduce(99), /* &, reduce: Var */
			reduce(99), /* .., reduce: Var */
			reduce(99), /* <<, reduce: Var */
			reduce(99), /* >>, reduce: Var */
			reduce(99), /* +, reduce: Var */
			reduce(99), /* -, reduce: Var */
			reduce(99), /* *, reduce: Var */
			reduce(99), /* /, reduce: Var */
			reduce(99), /* %, reduce: Var */
			reduce(99), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(99), /* ^, reduce: Var */
			reduce(99), /* [, reduce: Var */
			nil,        /* ] */
			reduce(99), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(99), /* string, reduce: Var */
			reduce(99), /* {, reduce: Var */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1585
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1213), /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			shift(1215), /* string */
			shift(1217), /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1586
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			shift(851),  /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			shift(1850), /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1587
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(876),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(1851), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1588
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(115), /* ,, reduce: Args */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(115), /* ., reduce: Args */
			reduce(115), /* :, reduce: Args */
			reduce(115), /* or, reduce: Args */
			reduce(115), /* and, reduce: Args */
			reduce(115), /* <, reduce: Args */
			reduce(115), /* <=, reduce: Args */
			reduce(115), /* >, reduce: Args */
			reduce(115), /* >=, reduce: Args */
			reduce(115), /* ==, reduce: Args */
			reduce(115), /* ~=, reduce: Args */
			reduce(115), /* |, reduce: Args */
			reduce(115), /* ~, reduce: Args */
			reduce(115), /* &, reduce: Args */
			reduce(115), /* .., reduce: Args */
			reduce(115), /* <<, reduce: Args */
			reduce(115), /* >>, reduce: Args */
			reduce(115), /* +, reduce: Args */
			reduce(115), /* -, reduce: Args */
			reduce(115), /* *, reduce: Args */
			reduce(115), /* /, reduce: Args */
			reduce(115), /* %, reduce: Args */
			reduce(115), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(115), /* ^, reduce: Args */
			reduce(115), /* [, reduce: Args */
			nil,         /* ] */
			reduce(115), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(115), /* string, reduce: Args */
			reduce(115), /* {, reduce: Args */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1589
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			shift(569),  /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(570),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			shift(1852), /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1590
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(102), /* ,, reduce: PrefixExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(102), /* ., reduce: PrefixExp */
			reduce(102), /* :, reduce: PrefixExp */
			reduce(102), /* or, reduce: PrefixExp */
			reduce(102), /* and, reduce: PrefixExp */
			reduce(102), /* <, reduce: PrefixExp */
			reduce(102), /* <=, reduce: PrefixExp */
			reduce(102), /* >, reduce: PrefixExp */
			reduce(102), /* >=, reduce: PrefixExp */
			reduce(102), /* ==, reduce: PrefixExp */
			reduce(102), /* ~=, reduce: PrefixExp */
			reduce(102), /* |, reduce: PrefixExp */
			reduce(102), /* ~, reduce: PrefixExp */
			reduce(102), /* &, reduce: PrefixExp */
			reduce(102), /* .., reduce: PrefixExp */
			reduce(102), /* <<, reduce: PrefixExp */
			reduce(102), /* >>, reduce: PrefixExp */
			reduce(102), /* +, reduce: PrefixExp */
			reduce(102), /* -, reduce: PrefixExp */
			reduce(102), /* *, reduce: PrefixExp */
			reduce(102), /* /, reduce: PrefixExp */
			reduce(102), /* %, reduce: PrefixExp */
			reduce(102), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(102), /* ^, reduce: PrefixExp */
			reduce(102), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(102), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(102), /* string, reduce: PrefixExp */
			reduce(102), /* {, reduce: PrefixExp */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1591
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(125), /* ,, reduce: TableConstructor */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(125), /* or, reduce: TableConstructor */
			reduce(125), /* and, reduce: TableConstructor */
			reduce(125), /* <, reduce: TableConstructor */
			reduce(125), /* <=, reduce: TableConstructor */
			reduce(125), /* >, reduce: TableConstructor */
			reduce(125), /* >=, reduce: TableConstructor */
			reduce(125), /* ==, reduce: TableConstructor */
			reduce(125), /* ~=, reduce: TableConstructor */
			reduce(125), /* |, reduce: TableConstructor */
			reduce(125), /* ~, reduce: TableConstructor */
			reduce(125), /* &, reduce: TableConstructor */
			reduce(125), /* .., reduce: TableConstructor */
			reduce(125), /* <<, reduce: TableConstructor */
			reduce(125), /* >>, reduce: TableConstructor */
			reduce(125), /* +, reduce: TableConstructor */
			reduce(125), /* -, reduce: TableConstructor */
			reduce(125), /* *, reduce: TableConstructor */
			reduce(125), /* /, reduce: TableConstructor */
			reduce(125), /* %, reduce: TableConstructor */
			reduce(125), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(125), /* ^, reduce: TableConstructor */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1592
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(238),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			shift(254),  /* [ */
			nil,         /* ] */
			shift(255),  /* ( */
			nil,         /* ) */
			shift(256),  /* nil */
			shift(257),  /* true */
			shift(258),  /* false */
			shift(259),  /* ... */
			shift(260),  /* numdec */
			shift(261),  /* numhex */
			shift(262),  /* string */
			shift(265),  /* { */
			shift(1854), /* } */
			shift(268),  /* ident */
		},
	},
	actionRow{ // S1593
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(1855), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1594
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(54),  /* do, reduce: ExpList */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(54),  /* ,, reduce: ExpList */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			shift(1222), /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1595
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(56),  /* do, reduce: Exp */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(56),  /* ,, reduce: Exp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(56),  /* or, reduce: Exp */
			shift(1225), /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1596
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(1856), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1597
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			reduce(58), /* do, reduce: AndExp */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(58), /* ,, reduce: AndExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(58), /* or, reduce: AndExp */
			reduce(58), /* and, reduce: AndExp */
			shift(203), /* < */
			shift(204), /* <= */
			shift(205), /* > */
			shift(206), /* >= */
			shift(207), /* == */
			shift(208), /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1598
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(66),  /* do, reduce: CompExp */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(66),  /* ,, reduce: CompExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(66),  /* or, reduce: CompExp */
			reduce(66),  /* and, reduce: CompExp */
			reduce(66),  /* <, reduce: CompExp */
			reduce(66),  /* <=, reduce: CompExp */
			reduce(66),  /* >, reduce: CompExp */
			reduce(66),  /* >=, reduce: CompExp */
			reduce(66),  /* ==, reduce: CompExp */
			reduce(66),  /* ~=, reduce: CompExp */
			shift(1227), /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1599
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(68),  /* do, reduce: BitOrExp */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(68),  /* ,, reduce: BitOrExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(68),  /* or, reduce: BitOrExp */
			reduce(68),  /* and, reduce: BitOrExp */
			reduce(68),  /* <, reduce: BitOrExp */
			reduce(68),  /* <=, reduce: BitOrExp */
			reduce(68),  /* >, reduce: BitOrExp */
			reduce(68),  /* >=, reduce: BitOrExp */
			reduce(68),  /* ==, reduce: BitOrExp */
			reduce(68),  /* ~=, reduce: BitOrExp */
			reduce(68),  /* |, reduce: BitOrExp */
			shift(1228), /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1600
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(70),  /* do, reduce: BitXorExp */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(70),  /* ,, reduce: BitXorExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(70),  /* or, reduce: BitXorExp */
			reduce(70),  /* and, reduce: BitXorExp */
			reduce(70),  /* <, reduce: BitXorExp */
			reduce(70),  /* <=, reduce: BitXorExp */
			reduce(70),  /* >, reduce: BitXorExp */
			reduce(70),  /* >=, reduce: BitXorExp */
			reduce(70),  /* ==, reduce: BitXorExp */
			reduce(70),  /* ~=, reduce: BitXorExp */
			reduce(70),  /* |, reduce: BitXorExp */
			reduce(70),  /* ~, reduce: BitXorExp */
			shift(1229), /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1601
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(72),  /* do, reduce: BitAndExp */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(72),  /* ,, reduce: BitAndExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(72),  /* or, reduce: BitAndExp */
			reduce(72),  /* and, reduce: BitAndExp */
			reduce(72),  /* <, reduce: BitAndExp */
			reduce(72),  /* <=, reduce: BitAndExp */
			reduce(72),  /* >, reduce: BitAndExp */
			reduce(72),  /* >=, reduce: BitAndExp */
			reduce(72),  /* ==, reduce: BitAndExp */
			reduce(72),  /* ~=, reduce: BitAndExp */
			reduce(72),  /* |, reduce: BitAndExp */
			reduce(72),  /* ~, reduce: BitAndExp */
			reduce(72),  /* &, reduce: BitAndExp */
			shift(1230), /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1602
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			reduce(74), /* do, reduce: ConcatExp */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(74), /* ,, reduce: ConcatExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(74), /* or, reduce: ConcatExp */
			reduce(74), /* and, reduce: ConcatExp */
			reduce(74), /* <, reduce: ConcatExp */
			reduce(74), /* <=, reduce: ConcatExp */
			reduce(74), /* >, reduce: ConcatExp */
			reduce(74), /* >=, reduce: ConcatExp */
			reduce(74), /* ==, reduce: ConcatExp */
			reduce(74), /* ~=, reduce: ConcatExp */
			reduce(74), /* |, reduce: ConcatExp */
			reduce(74), /* ~, reduce: ConcatExp */
			reduce(74), /* &, reduce: ConcatExp */
			reduce(74), /* .., reduce: ConcatExp */
			shift(214), /* << */
			shift(215), /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1603
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			reduce(78), /* do, reduce: ShiftExp */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(78), /* ,, reduce: ShiftExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(78), /* or, reduce: ShiftExp */
			reduce(78), /* and, reduce: ShiftExp */
			reduce(78), /* <, reduce: ShiftExp */
			reduce(78), /* <=, reduce: ShiftExp */
			reduce(78), /* >, reduce: ShiftExp */
			reduce(78), /* >=, reduce: ShiftExp */
			reduce(78), /* ==, reduce: ShiftExp */
			reduce(78), /* ~=, reduce: ShiftExp */
			reduce(78), /* |, reduce: ShiftExp */
			reduce(78), /* ~, reduce: ShiftExp */
			reduce(78), /* &, reduce: ShiftExp */
			reduce(78), /* .., reduce: ShiftExp */
			reduce(78), /* <<, reduce: ShiftExp */
			reduce(78), /* >>, reduce: ShiftExp */
			shift(217), /* + */
			shift(218), /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1604
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			reduce(82), /* do, reduce: Sum */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(82), /* ,, reduce: Sum */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(82), /* or, reduce: Sum */
			reduce(82), /* and, reduce: Sum */
			reduce(82), /* <, reduce: Sum */
			reduce(82), /* <=, reduce: Sum */
			reduce(82), /* >, reduce: Sum */
			reduce(82), /* >=, reduce: Sum */
			reduce(82), /* ==, reduce: Sum */
			reduce(82), /* ~=, reduce: Sum */
			reduce(82), /* |, reduce: Sum */
			reduce(82), /* ~, reduce: Sum */
			reduce(82), /* &, reduce: Sum */
			reduce(82), /* .., reduce: Sum */
			reduce(82), /* <<, reduce: Sum */
			reduce(82), /* >>, reduce: Sum */
			reduce(82), /* +, reduce: Sum */
			reduce(82), /* -, reduce: Sum */
			shift(220), /* * */
			shift(221), /* / */
			shift(222), /* % */
			shift(223), /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1605
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			reduce(88), /* do, reduce: Term */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(88), /* ,, reduce: Term */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(88), /* or, reduce: Term */
			reduce(88), /* and, reduce: Term */
			reduce(88), /* <, reduce: Term */
			reduce(88), /* <=, reduce: Term */
			reduce(88), /* >, reduce: Term */
			reduce(88), /* >=, reduce: Term */
			reduce(88), /* ==, reduce: Term */
			reduce(88), /* ~=, reduce: Term */
			reduce(88), /* |, reduce: Term */
			reduce(88), /* ~, reduce: Term */
			reduce(88), /* &, reduce: Term */
			reduce(88), /* .., reduce: Term */
			reduce(88), /* <<, reduce: Term */
			reduce(88), /* >>, reduce: Term */
			reduce(88), /* +, reduce: Term */
			reduce(88), /* -, reduce: Term */
			reduce(88), /* *, reduce: Term */
			reduce(88), /* /, reduce: Term */
			reduce(88), /* %, reduce: Term */
			reduce(88), /* //, reduce: Term */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1606
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			reduce(96), /* do, reduce: Power */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(96), /* ,, reduce: Power */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(96), /* or, reduce: Power */
			reduce(96), /* and, reduce: Power */
			reduce(96), /* <, reduce: Power */
			reduce(96), /* <=, reduce: Power */
			reduce(96), /* >, reduce: Power */
			reduce(96), /* >=, reduce: Power */
			reduce(96), /* ==, reduce: Power */
			reduce(96), /* ~=, reduce: Power */
			reduce(96), /* |, reduce: Power */
			reduce(96), /* ~, reduce: Power */
			reduce(96), /* &, reduce: Power */
			reduce(96), /* .., reduce: Power */
			reduce(96), /* <<, reduce: Power */
			reduce(96), /* >>, reduce: Power */
			reduce(96), /* +, reduce: Power */
			reduce(96), /* -, reduce: Power */
			reduce(96), /* *, reduce: Power */
			reduce(96), /* /, reduce: Power */
			reduce(96), /* %, reduce: Power */
			reduce(96), /* //, reduce: Power */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1607
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			reduce(99), /* do, reduce: Var */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(99), /* ,, reduce: Var */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			reduce(99), /* ., reduce: Var */
			reduce(99), /* :, reduce: Var */
			reduce(99), /* or, reduce: Var */
			reduce(99), /* and, reduce: Var */
			reduce(99), /* <, reduce: Var */
			reduce(99), /* <=, reduce: Var */
			reduce(99), /* >, reduce: Var */
			reduce(99), /* >=, reduce: Var */
			reduce(99), /* ==, reduce: Var */
			reduce(99), /* ~=, reduce: Var */
			reduce(99), /* |, reduce: Var */
			reduce(99), /* ~, reduce: Var */
			reduce(99), /* &, reduce: Var */
			reduce(99), /* .., reduce: Var */
			reduce(99), /* <<, reduce: Var */
			reduce(99), /* >>, reduce: Var */
			reduce(99), /* +, reduce: Var */
			reduce(99), /* -, reduce: Var */
			reduce(99), /* *, reduce: Var */
			reduce(99), /* /, reduce: Var */
			reduce(99), /* %, reduce: Var */
			reduce(99), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(99), /* ^, reduce: Var */
			reduce(99), /* [, reduce: Var */
			nil,        /* ] */
			reduce(99), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(99), /* string, reduce: Var */
			reduce(99), /* {, reduce: Var */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1608
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1239), /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			shift(1241), /* string */
			shift(1243), /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1609
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			shift(851),  /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			shift(1858), /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1610
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(876),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(1859), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1611
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(115), /* do, reduce: Args */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(115), /* ,, reduce: Args */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(115), /* ., reduce: Args */
			reduce(115), /* :, reduce: Args */
			reduce(115), /* or, reduce: Args */
			reduce(115), /* and, reduce: Args */
			reduce(115), /* <, reduce: Args */
			reduce(115), /* <=, reduce: Args */
			reduce(115), /* >, reduce: Args */
			reduce(115), /* >=, reduce: Args */
			reduce(115), /* ==, reduce: Args */
			reduce(115), /* ~=, reduce: Args */
			reduce(115), /* |, reduce: Args */
			reduce(115), /* ~, reduce: Args */
			reduce(115), /* &, reduce: Args */
			reduce(115), /* .., reduce: Args */
			reduce(115), /* <<, reduce: Args */
			reduce(115), /* >>, reduce: Args */
			reduce(115), /* +, reduce: Args */
			reduce(115), /* -, reduce: Args */
			reduce(115), /* *, reduce: Args */
			reduce(115), /* /, reduce: Args */
			reduce(115), /* %, reduce: Args */
			reduce(115), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(115), /* ^, reduce: Args */
			reduce(115), /* [, reduce: Args */
			nil,         /* ] */
			reduce(115), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(115), /* string, reduce: Args */
			reduce(115), /* {, reduce: Args */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1612
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			shift(569),  /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(570),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			shift(1860), /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1613
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(102), /* do, reduce: PrefixExp */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(102), /* ,, reduce: PrefixExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(102), /* ., reduce: PrefixExp */
			reduce(102), /* :, reduce: PrefixExp */
			reduce(102), /* or, reduce: PrefixExp */
			reduce(102), /* and, reduce: PrefixExp */
			reduce(102), /* <, reduce: PrefixExp */
			reduce(102), /* <=, reduce: PrefixExp */
			reduce(102), /* >, reduce: PrefixExp */
			reduce(102), /* >=, reduce: PrefixExp */
			reduce(102), /* ==, reduce: PrefixExp */
			reduce(102), /* ~=, reduce: PrefixExp */
			reduce(102), /* |, reduce: PrefixExp */
			reduce(102), /* ~, reduce: PrefixExp */
			reduce(102), /* &, reduce: PrefixExp */
			reduce(102), /* .., reduce: PrefixExp */
			reduce(102), /* <<, reduce: PrefixExp */
			reduce(102), /* >>, reduce: PrefixExp */
			reduce(102), /* +, reduce: PrefixExp */
			reduce(102), /* -, reduce: PrefixExp */
			reduce(102), /* *, reduce: PrefixExp */
			reduce(102), /* /, reduce: PrefixExp */
			reduce(102), /* %, reduce: PrefixExp */
			reduce(102), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(102), /* ^, reduce: PrefixExp */
			reduce(102), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(102), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(102), /* string, reduce: PrefixExp */
			reduce(102), /* {, reduce: PrefixExp */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1614
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(125), /* do, reduce: TableConstructor */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(125), /* ,, reduce: TableConstructor */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(125), /* or, reduce: TableConstructor */
			reduce(125), /* and, reduce: TableConstructor */
			reduce(125), /* <, reduce: TableConstructor */
			reduce(125), /* <=, reduce: TableConstructor */
			reduce(125), /* >, reduce: TableConstructor */
			reduce(125), /* >=, reduce: TableConstructor */
			reduce(125), /* ==, reduce: TableConstructor */
			reduce(125), /* ~=, reduce: TableConstructor */
			reduce(125), /* |, reduce: TableConstructor */
			reduce(125), /* ~, reduce: TableConstructor */
			reduce(125), /* &, reduce: TableConstructor */
			reduce(125), /* .., reduce: TableConstructor */
			reduce(125), /* <<, reduce: TableConstructor */
			reduce(125), /* >>, reduce: TableConstructor */
			reduce(125), /* +, reduce: TableConstructor */
			reduce(125), /* -, reduce: TableConstructor */
			reduce(125), /* *, reduce: TableConstructor */
			reduce(125), /* /, reduce: TableConstructor */
			reduce(125), /* %, reduce: TableConstructor */
			reduce(125), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(125), /* ^, reduce: TableConstructor */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1615
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(238),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			shift(254),  /* [ */
			nil,         /* ] */
			shift(255),  /* ( */
			nil,         /* ) */
			shift(256),  /* nil */
			shift(257),  /* true */
			shift(258),  /* false */
			shift(259),  /* ... */
			shift(260),  /* numdec */
			shift(261),  /* numhex */
			shift(262),  /* string */
			shift(265),  /* { */
			shift(1862), /* } */
			shift(268),  /* ident */
		},
	},
	actionRow{ // S1616
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(1863), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1617
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S1618
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(104), /* ., reduce: FunctionCall */
			reduce(104), /* :, reduce: FunctionCall */
			reduce(104), /* or, reduce: FunctionCall */
			reduce(104), /* and, reduce: FunctionCall */
			reduce(104), /* <, reduce: FunctionCall */
			reduce(104), /* <=, reduce: FunctionCall */
			reduce(104), /* >, reduce: FunctionCall */
			reduce(104), /* >=, reduce: FunctionCall */
			reduce(104), /* ==, reduce: FunctionCall */
			reduce(104), /* ~=, reduce: FunctionCall */
			reduce(104), /* |, reduce: FunctionCall */
			reduce(104), /* ~, reduce: FunctionCall */
			reduce(104), /* &, reduce: FunctionCall */
			reduce(104), /* .., reduce: FunctionCall */
			reduce(104), /* <<, reduce: FunctionCall */
			reduce(104), /* >>, reduce: FunctionCall */
			reduce(104), /* +, reduce: FunctionCall */
			reduce(104), /* -, reduce: FunctionCall */
			reduce(104), /* *, reduce: FunctionCall */
			reduce(104), /* /, reduce: FunctionCall */
			reduce(104), /* %, reduce: FunctionCall */
			reduce(104), /* //, reduce: FunctionCall */
			nil,         /* not */
			nil,         /* # */
			reduce(104), /* ^, reduce: FunctionCall */
			reduce(104), /* [, reduce: FunctionCall */
			reduce(104), /* ], reduce: FunctionCall */
			reduce(104), /* (, reduce: FunctionCall */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(104), /* string, reduce: FunctionCall */
			reduce(104), /* {, reduce: FunctionCall */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1619
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			reduce(98), /* ., reduce: Var */
			reduce(98), /* :, reduce: Var */
			reduce(98), /* or, reduce: Var */
			reduce(98), /* and, reduce: Var */
			reduce(98), /* <, reduce: Var */
			reduce(98), /* <=, reduce: Var */
			reduce(98), /* >, reduce: Var */
			reduce(98), /* >=, reduce: Var */
			reduce(98), /* ==, reduce: Var */
			reduce(98), /* ~=, reduce: Var */
			reduce(98), /* |, reduce: Var */
			reduce(98), /* ~, reduce: Var */
			reduce(98), /* &, reduce: Var */
			reduce(98), /* .., reduce: Var */
			reduce(98), /* <<, reduce: Var */
			reduce(98), /* >>, reduce: Var */
			reduce(98), /* +, reduce: Var */
			reduce(98), /* -, reduce: Var */
			reduce(98), /* *, reduce: Var */
			reduce(98), /* /, reduce: Var */
			reduce(98), /* %, reduce: Var */
			reduce(98), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(98), /* ^, reduce: Var */
			reduce(98), /* [, reduce: Var */
			reduce(98), /* ], reduce: Var */
			reduce(98), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(98), /* string, reduce: Var */
			reduce(98), /* {, reduce: Var */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1620
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(116), /* ., reduce: Args */
			reduce(116), /* :, reduce: Args */
			reduce(116), /* or, reduce: Args */
			reduce(116), /* and, reduce: Args */
			reduce(116), /* <, reduce: Args */
			reduce(116), /* <=, reduce: Args */
			reduce(116), /* >, reduce: Args */
			reduce(116), /* >=, reduce: Args */
			reduce(116), /* ==, reduce: Args */
			reduce(116), /* ~=, reduce: Args */
			reduce(116), /* |, reduce: Args */
			reduce(116), /* ~, reduce: Args */
			reduce(116), /* &, reduce: Args */
			reduce(116), /* .., reduce: Args */
			reduce(116), /* <<, reduce: Args */
			reduce(116), /* >>, reduce: Args */
			reduce(116), /* +, reduce: Args */
			reduce(116), /* -, reduce: Args */
			reduce(116), /* *, reduce: Args */
			reduce(116), /* /, reduce: Args */
			reduce(116), /* %, reduce: Args */
			reduce(116), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(116), /* ^, reduce: Args */
			reduce(116), /* [, reduce: Args */
			reduce(116), /* ], reduce: Args */
			reduce(116), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(116), /* string, reduce: Args */
			reduce(116), /* {, reduce: Args */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1621
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(125), /* ., reduce: TableConstructor */
			reduce(125), /* :, reduce: TableConstructor */
			reduce(125), /* or, reduce: TableConstructor */
			reduce(125), /* and, reduce: TableConstructor */
			reduce(125), /* <, reduce: TableConstructor */
			reduce(125), /* <=, reduce: TableConstructor */
			reduce(125), /* >, reduce: TableConstructor */
			reduce(125), /* >=, reduce: TableConstructor */
			reduce(125), /* ==, reduce: TableConstructor */
			reduce(125), /* ~=, reduce: TableConstructor */
			reduce(125), /* |, reduce: TableConstructor */
			reduce(125), /* ~, reduce: TableConstructor */
			reduce(125), /* &, reduce: TableConstructor */
			reduce(125), /* .., reduce: TableConstructor */
			reduce(125), /* <<, reduce: TableConstructor */
			reduce(125), /* >>, reduce: TableConstructor */
			reduce(125), /* +, reduce: TableConstructor */
			reduce(125), /* -, reduce: TableConstructor */
			reduce(125), /* *, reduce: TableConstructor */
			reduce(125), /* /, reduce: TableConstructor */
			reduce(125), /* %, reduce: TableConstructor */
			reduce(125), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(125), /* ^, reduce: TableConstructor */
			reduce(125), /* [, reduce: TableConstructor */
			reduce(125), /* ], reduce: TableConstructor */
			reduce(125), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(125), /* string, reduce: TableConstructor */
			reduce(125), /* {, reduce: TableConstructor */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1622
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(238),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			shift(254),  /* [ */
			nil,         /* ] */
			shift(255),  /* ( */
			nil,         /* ) */
			shift(256),  /* nil */
			shift(257),  /* true */
			shift(258),  /* false */
			shift(259),  /* ... */
			shift(260),  /* numdec */
			shift(261),  /* numhex */
			shift(262),  /* string */
			shift(265),  /* { */
			shift(1865), /* } */
			shift(268),  /* ident */
		},
	},
	actionRow{ // S1623
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(126), /* or, reduce: TableConstructor */
			reduce(126), /* and, reduce: TableConstructor */
			reduce(126), /* <, reduce: TableConstructor */
			reduce(126), /* <=, reduce: TableConstructor */
			reduce(126), /* >, reduce: TableConstructor */
			reduce(126), /* >=, reduce: TableConstructor */
			reduce(126), /* ==, reduce: TableConstructor */
			reduce(126), /* ~=, reduce: TableConstructor */
			reduce(126), /* |, reduce: TableConstructor */
			reduce(126), /* ~, reduce: TableConstructor */
			reduce(126), /* &, reduce: TableConstructor */
			reduce(126), /* .., reduce: TableConstructor */
			reduce(126), /* <<, reduce: TableConstructor */
			reduce(126), /* >>, reduce: TableConstructor */
			reduce(126), /* +, reduce: TableConstructor */
			reduce(126), /* -, reduce: TableConstructor */
			reduce(126), /* *, reduce: TableConstructor */
			reduce(126), /* /, reduce: TableConstructor */
			reduce(126), /* %, reduce: TableConstructor */
			reduce(126), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(126), /* ^, reduce: TableConstructor */
			nil,         /* [ */
			reduce(126), /* ], reduce: TableConstructor */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1624
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S1625
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(104), /* ,, reduce: FunctionCall */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(104), /* ., reduce: FunctionCall */
			reduce(104), /* :, reduce: FunctionCall */
			reduce(104), /* or, reduce: FunctionCall */
			reduce(104), /* and, reduce: FunctionCall */
			reduce(104), /* <, reduce: FunctionCall */
			reduce(104), /* <=, reduce: FunctionCall */
			reduce(104), /* >, reduce: FunctionCall */
			reduce(104), /* >=, reduce: FunctionCall */
			reduce(104), /* ==, reduce: FunctionCall */
			reduce(104), /* ~=, reduce: FunctionCall */
			reduce(104), /* |, reduce: FunctionCall */
			reduce(104), /* ~, reduce: FunctionCall */
			reduce(104), /* &, reduce: FunctionCall */
			reduce(104), /* .., reduce: FunctionCall */
			reduce(104), /* <<, reduce: FunctionCall */
			reduce(104), /* >>, reduce: FunctionCall */
			reduce(104), /* +, reduce: FunctionCall */
			reduce(104), /* -, reduce: FunctionCall */
			reduce(104), /* *, reduce: FunctionCall */
			reduce(104), /* /, reduce: FunctionCall */
			reduce(104), /* %, reduce: FunctionCall */
			reduce(104), /* //, reduce: FunctionCall */
			nil,         /* not */
			nil,         /* # */
			reduce(104), /* ^, reduce: FunctionCall */
			reduce(104), /* [, reduce: FunctionCall */
			nil,         /* ] */
			reduce(104), /* (, reduce: FunctionCall */
			reduce(104), /* ), reduce: FunctionCall */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(104), /* string, reduce: FunctionCall */
			reduce(104), /* {, reduce: FunctionCall */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1626
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(98), /* ,, reduce: Var */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			reduce(98), /* ., reduce: Var */
			reduce(98), /* :, reduce: Var */
			reduce(98), /* or, reduce: Var */
			reduce(98), /* and, reduce: Var */
			reduce(98), /* <, reduce: Var */
			reduce(98), /* <=, reduce: Var */
			reduce(98), /* >, reduce: Var */
			reduce(98), /* >=, reduce: Var */
			reduce(98), /* ==, reduce: Var */
			reduce(98), /* ~=, reduce: Var */
			reduce(98), /* |, reduce: Var */
			reduce(98), /* ~, reduce: Var */
			reduce(98), /* &, reduce: Var */
			reduce(98), /* .., reduce: Var */
			reduce(98), /* <<, reduce: Var */
			reduce(98), /* >>, reduce: Var */
			reduce(98), /* +, reduce: Var */
			reduce(98), /* -, reduce: Var */
			reduce(98), /* *, reduce: Var */
			reduce(98), /* /, reduce: Var */
			reduce(98), /* %, reduce: Var */
			reduce(98), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(98), /* ^, reduce: Var */
			reduce(98), /* [, reduce: Var */
			nil,        /* ] */
			reduce(98), /* (, reduce: Var */
			reduce(98), /* ), reduce: Var */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(98), /* string, reduce: Var */
			reduce(98), /* {, reduce: Var */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1627
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(116), /* ,, reduce: Args */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(116), /* ., reduce: Args */
			reduce(116), /* :, reduce: Args */
			reduce(116), /* or, reduce: Args */
			reduce(116), /* and, reduce: Args */
			reduce(116), /* <, reduce: Args */
			reduce(116), /* <=, reduce: Args */
			reduce(116), /* >, reduce: Args */
			reduce(116), /* >=, reduce: Args */
			reduce(116), /* ==, reduce: Args */
			reduce(116), /* ~=, reduce: Args */
			reduce(116), /* |, reduce: Args */
			reduce(116), /* ~, reduce: Args */
			reduce(116), /* &, reduce: Args */
			reduce(116), /* .., reduce: Args */
			reduce(116), /* <<, reduce: Args */
			reduce(116), /* >>, reduce: Args */
			reduce(116), /* +, reduce: Args */
			reduce(116), /* -, reduce: Args */
			reduce(116), /* *, reduce: Args */
			reduce(116), /* /, reduce: Args */
			reduce(116), /* %, reduce: Args */
			reduce(116), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(116), /* ^, reduce: Args */
			reduce(116), /* [, reduce: Args */
			nil,         /* ] */
			reduce(116), /* (, reduce: Args */
			reduce(116), /* ), reduce: Args */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(116), /* string, reduce: Args */
			reduce(116), /* {, reduce: Args */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1628
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(125), /* ,, reduce: TableConstructor */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(125), /* ., reduce: TableConstructor */
			reduce(125), /* :, reduce: TableConstructor */
			reduce(125), /* or, reduce: TableConstructor */
			reduce(125), /* and, reduce: TableConstructor */
			reduce(125), /* <, reduce: TableConstructor */
			reduce(125), /* <=, reduce: TableConstructor */
			reduce(125), /* >, reduce: TableConstructor */
			reduce(125), /* >=, reduce: TableConstructor */
			reduce(125), /* ==, reduce: TableConstructor */
			reduce(125), /* ~=, reduce: TableConstructor */
			reduce(125), /* |, reduce: TableConstructor */
			reduce(125), /* ~, reduce: TableConstructor */
			reduce(125), /* &, reduce: TableConstructor */
			reduce(125), /* .., reduce: TableConstructor */
			reduce(125), /* <<, reduce: TableConstructor */
			reduce(125), /* >>, reduce: TableConstructor */
			reduce(125), /* +, reduce: TableConstructor */
			reduce(125), /* -, reduce: TableConstructor */
			reduce(125), /* *, reduce: TableConstructor */
			reduce(125), /* /, reduce: TableConstructor */
			reduce(125), /* %, reduce: TableConstructor */
			reduce(125), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(125), /* ^, reduce: TableConstructor */
			reduce(125), /* [, reduce: TableConstructor */
			nil,         /* ] */
			reduce(125), /* (, reduce: TableConstructor */
			reduce(125), /* ), reduce: TableConstructor */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(125), /* string, reduce: TableConstructor */
			reduce(125), /* {, reduce: TableConstructor */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1629
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(238),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			shift(254),  /* [ */
			nil,         /* ] */
			shift(255),  /* ( */
			nil,         /* ) */
			shift(256),  /* nil */
			shift(257),  /* true */
			shift(258),  /* false */
			shift(259),  /* ... */
			shift(260),  /* numdec */
			shift(261),  /* numhex */
			shift(262),  /* string */
			shift(265),  /* { */
			shift(1867), /* } */
			shift(268),  /* ident */
		},
	},
	actionRow{ // S1630
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(126), /* ,, reduce: TableConstructor */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(126), /* or, reduce: TableConstructor */
			reduce(126), /* and, reduce: TableConstructor */
			reduce(126), /* <, reduce: TableConstructor */
			reduce(126), /* <=, reduce: TableConstructor */
			reduce(126), /* >, reduce: TableConstructor */
			reduce(126), /* >=, reduce: TableConstructor */
			reduce(126), /* ==, reduce: TableConstructor */
			reduce(126), /* ~=, reduce: TableConstructor */
			reduce(126), /* |, reduce: TableConstructor */
			reduce(126), /* ~, reduce: TableConstructor */
			reduce(126), /* &, reduce: TableConstructor */
			reduce(126), /* .., reduce: TableConstructor */
			reduce(126), /* <<, reduce: TableConstructor */
			reduce(126), /* >>, reduce: TableConstructor */
			reduce(126), /* +, reduce: TableConstructor */
			reduce(126), /* -, reduce: TableConstructor */
			reduce(126), /* *, reduce: TableConstructor */
			reduce(126), /* /, reduce: TableConstructor */
			reduce(126), /* %, reduce: TableConstructor */
			reduce(126), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(126), /* ^, reduce: TableConstructor */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(126), /* ), reduce: TableConstructor */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1631
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(1868), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1632
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(126), /* ., reduce: TableConstructor */
			reduce(126), /* :, reduce: TableConstructor */
			reduce(126), /* or, reduce: TableConstructor */
			reduce(126), /* and, reduce: TableConstructor */
			reduce(126), /* <, reduce: TableConstructor */
			reduce(126), /* <=, reduce: TableConstructor */
			reduce(126), /* >, reduce: TableConstructor */
			reduce(126), /* >=, reduce: TableConstructor */
			reduce(126), /* ==, reduce: TableConstructor */
			reduce(126), /* ~=, reduce: TableConstructor */
			reduce(126), /* |, reduce: TableConstructor */
			reduce(126), /* ~, reduce: TableConstructor */
			reduce(126), /* &, reduce: TableConstructor */
			reduce(126), /* .., reduce: TableConstructor */
			reduce(126), /* <<, reduce: TableConstructor */
			reduce(126), /* >>, reduce: TableConstructor */
			reduce(126), /* +, reduce: TableConstructor */
			reduce(126), /* -, reduce: TableConstructor */
			reduce(126), /* *, reduce: TableConstructor */
			reduce(126), /* /, reduce: TableConstructor */
			reduce(126), /* %, reduce: TableConstructor */
			reduce(126), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(126), /* ^, reduce: TableConstructor */
			reduce(126), /* [, reduce: TableConstructor */
			nil,         /* ] */
			reduce(126), /* (, reduce: TableConstructor */
			reduce(126), /* ), reduce: TableConstructor */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(126), /* string, reduce: TableConstructor */
			reduce(126), /* {, reduce: TableConstructor */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1633
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(124), /* $, reduce: FuncBody */
			nil,         /* return */
			reduce(124), /* ;, reduce: FuncBody */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(124), /* ,, reduce: FuncBody */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(124), /* or, reduce: FuncBody */
			reduce(124), /* and, reduce: FuncBody */
			reduce(124), /* <, reduce: FuncBody */
			reduce(124), /* <=, reduce: FuncBody */
			reduce(124), /* >, reduce: FuncBody */
			reduce(124), /* >=, reduce: FuncBody */
			reduce(124), /* ==, reduce: FuncBody */
			reduce(124), /* ~=, reduce: FuncBody */
			reduce(124), /* |, reduce: FuncBody */
			reduce(124), /* ~, reduce: FuncBody */
			reduce(124), /* &, reduce: FuncBody */
			reduce(124), /* .., reduce: FuncBody */
			reduce(124), /* <<, reduce: FuncBody */
			reduce(124), /* >>, reduce: FuncBody */
			reduce(124), /* +, reduce: FuncBody */
			reduce(124), /* -, reduce: FuncBody */
			reduce(124), /* *, reduce: FuncBody */
			reduce(124), /* /, reduce: FuncBody */
			reduce(124), /* %, reduce: FuncBody */
			reduce(124), /* //, reduce: FuncBody */
			nil,         /* not */
			nil,         /* # */
			reduce(124), /* ^, reduce: FuncBody */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1634
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(1869), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1635
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(126), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(126), /* ,, reduce: TableConstructor */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(126), /* ., reduce: TableConstructor */
			reduce(126), /* :, reduce: TableConstructor */
			reduce(126), /* or, reduce: TableConstructor */
			reduce(126), /* and, reduce: TableConstructor */
			reduce(126), /* <, reduce: TableConstructor */
			reduce(126), /* <=, reduce: TableConstructor */
			reduce(126), /* >, reduce: TableConstructor */
			reduce(126), /* >=, reduce: TableConstructor */
			reduce(126), /* ==, reduce: TableConstructor */
			reduce(126), /* ~=, reduce: TableConstructor */
			reduce(126), /* |, reduce: TableConstructor */
			reduce(126), /* ~, reduce: TableConstructor */
			reduce(126), /* &, reduce: TableConstructor */
			reduce(126), /* .., reduce: TableConstructor */
			reduce(126), /* <<, reduce: TableConstructor */
			reduce(126), /* >>, reduce: TableConstructor */
			reduce(126), /* +, reduce: TableConstructor */
			reduce(126), /* -, reduce: TableConstructor */
			reduce(126), /* *, reduce: TableConstructor */
			reduce(126), /* /, reduce: TableConstructor */
			reduce(126), /* %, reduce: TableConstructor */
			reduce(126), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(126), /* ^, reduce: TableConstructor */
			reduce(126), /* [, reduce: TableConstructor */
			nil,         /* ] */
			reduce(126), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(126), /* string, reduce: TableConstructor */
			reduce(126), /* {, reduce: TableConstructor */
			reduce(126), /* }, reduce: TableConstructor */
			nil,         /* ident */
		},
	},
	actionRow{ // S1636
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(131), /* ;, reduce: Field */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(131), /* ,, reduce: Field */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			shift(542),  /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			reduce(131), /* }, reduce: Field */
			nil,         /* ident */
		},
	},
	actionRow{ // S1637
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(1870), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1638
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(126), /* $, reduce: TableConstructor */
			reduce(126), /* return, reduce: TableConstructor */
			reduce(126), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			reduce(126), /* break, reduce: TableConstructor */
			reduce(126), /* goto, reduce: TableConstructor */
			reduce(126), /* do, reduce: TableConstructor */
			nil,         /* end */
			reduce(126), /* while, reduce: TableConstructor */
			reduce(126), /* repeat, reduce: TableConstructor */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(126), /* if, reduce: TableConstructor */
			reduce(126), /* ,, reduce: TableConstructor */
			reduce(126), /* for, reduce: TableConstructor */
			nil,         /* in */
			reduce(126), /* function, reduce: TableConstructor */
			reduce(126), /* local, reduce: TableConstructor */
			reduce(126), /* ::, reduce: TableConstructor */
			reduce(126), /* ., reduce: TableConstructor */
			reduce(126), /* :, reduce: TableConstructor */
			reduce(126), /* or, reduce: TableConstructor */
			reduce(126), /* and, reduce: TableConstructor */
			reduce(126), /* <, reduce: TableConstructor */
			reduce(126), /* <=, reduce: TableConstructor */
			reduce(126), /* >, reduce: TableConstructor */
			reduce(126), /* >=, reduce: TableConstructor */
			reduce(126), /* ==, reduce: TableConstructor */
			reduce(126), /* ~=, reduce: TableConstructor */
			reduce(126), /* |, reduce: TableConstructor */
			reduce(126), /* ~, reduce: TableConstructor */
			reduce(126), /* &, reduce: TableConstructor */
			reduce(126), /* .., reduce: TableConstructor */
			reduce(126), /* <<, reduce: TableConstructor */
			reduce(126), /* >>, reduce: TableConstructor */
			reduce(126), /* +, reduce: TableConstructor */
			reduce(126), /* -, reduce: TableConstructor */
			reduce(126), /* *, reduce: TableConstructor */
			reduce(126), /* /, reduce: TableConstructor */
			reduce(126), /* %, reduce: TableConstructor */
			reduce(126), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(126), /* ^, reduce: TableConstructor */
			reduce(126), /* [, reduce: TableConstructor */
			nil,         /* ] */
			reduce(126), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(126), /* string, reduce: TableConstructor */
			reduce(126), /* {, reduce: TableConstructor */
			nil,         /* } */
			reduce(126), /* ident, reduce: TableConstructor */
		},
	},
	actionRow{ // S1639
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(126), /* ., reduce: TableConstructor */
			reduce(126), /* :, reduce: TableConstructor */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			reduce(126), /* [, reduce: TableConstructor */
			nil,         /* ] */
			reduce(126), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(126), /* string, reduce: TableConstructor */
			reduce(126), /* {, reduce: TableConstructor */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1640
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S1641
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(104), /* ;, reduce: FunctionCall */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(104), /* end, reduce: FunctionCall */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(104), /* ,, reduce: FunctionCall */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(104), /* ., reduce: FunctionCall */
			reduce(104), /* :, reduce: FunctionCall */
			reduce(104), /* or, reduce: FunctionCall */
			reduce(104), /* and, reduce: FunctionCall */
			reduce(104), /* <, reduce: FunctionCall */
			reduce(104), /* <=, reduce: FunctionCall */
			reduce(104), /* >, reduce: FunctionCall */
			reduce(104), /* >=, reduce: FunctionCall */
			reduce(104), /* ==, reduce: FunctionCall */
			reduce(104), /* ~=, reduce: FunctionCall */
			reduce(104), /* |, reduce: FunctionCall */
			reduce(104), /* ~, reduce: FunctionCall */
			reduce(104), /* &, reduce: FunctionCall */
			reduce(104), /* .., reduce: FunctionCall */
			reduce(104), /* <<, reduce: FunctionCall */
			reduce(104), /* >>, reduce: FunctionCall */
			reduce(104), /* +, reduce: FunctionCall */
			reduce(104), /* -, reduce: FunctionCall */
			reduce(104), /* *, reduce: FunctionCall */
			reduce(104), /* /, reduce: FunctionCall */
			reduce(104), /* %, reduce: FunctionCall */
			reduce(104), /* //, reduce: FunctionCall */
			nil,         /* not */
			nil,         /* # */
			reduce(104), /* ^, reduce: FunctionCall */
			reduce(104), /* [, reduce: FunctionCall */
			nil,         /* ] */
			reduce(104), /* (, reduce: FunctionCall */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(104), /* string, reduce: FunctionCall */
			reduce(104), /* {, reduce: FunctionCall */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1642
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(98), /* ;, reduce: Var */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			reduce(98), /* end, reduce: Var */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(98), /* ,, reduce: Var */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			reduce(98), /* ., reduce: Var */
			reduce(98), /* :, reduce: Var */
			reduce(98), /* or, reduce: Var */
			reduce(98), /* and, reduce: Var */
			reduce(98), /* <, reduce: Var */
			reduce(98), /* <=, reduce: Var */
			reduce(98), /* >, reduce: Var */
			reduce(98), /* >=, reduce: Var */
			reduce(98), /* ==, reduce: Var */
			reduce(98), /* ~=, reduce: Var */
			reduce(98), /* |, reduce: Var */
			reduce(98), /* ~, reduce: Var */
			reduce(98), /* &, reduce: Var */
			reduce(98), /* .., reduce: Var */
			reduce(98), /* <<, reduce: Var */
			reduce(98), /* >>, reduce: Var */
			reduce(98), /* +, reduce: Var */
			reduce(98), /* -, reduce: Var */
			reduce(98), /* *, reduce: Var */
			reduce(98), /* /, reduce: Var */
			reduce(98), /* %, reduce: Var */
			reduce(98), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(98), /* ^, reduce: Var */
			reduce(98), /* [, reduce: Var */
			nil,        /* ] */
			reduce(98), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(98), /* string, reduce: Var */
			reduce(98), /* {, reduce: Var */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1643
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(116), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(116), /* end, reduce: Args */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(116), /* ,, reduce: Args */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(116), /* ., reduce: Args */
			reduce(116), /* :, reduce: Args */
			reduce(116), /* or, reduce: Args */
			reduce(116), /* and, reduce: Args */
			reduce(116), /* <, reduce: Args */
			reduce(116), /* <=, reduce: Args */
			reduce(116), /* >, reduce: Args */
			reduce(116), /* >=, reduce: Args */
			reduce(116), /* ==, reduce: Args */
			reduce(116), /* ~=, reduce: Args */
			reduce(116), /* |, reduce: Args */
			reduce(116), /* ~, reduce: Args */
			reduce(116), /* &, reduce: Args */
			reduce(116), /* .., reduce: Args */
			reduce(116), /* <<, reduce: Args */
			reduce(116), /* >>, reduce: Args */
			reduce(116), /* +, reduce: Args */
			reduce(116), /* -, reduce: Args */
			reduce(116), /* *, reduce: Args */
			reduce(116), /* /, reduce: Args */
			reduce(116), /* %, reduce: Args */
			reduce(116), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(116), /* ^, reduce: Args */
			reduce(116), /* [, reduce: Args */
			nil,         /* ] */
			reduce(116), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(116), /* string, reduce: Args */
			reduce(116), /* {, reduce: Args */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1644
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(125), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(125), /* end, reduce: TableConstructor */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(125), /* ,, reduce: TableConstructor */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(125), /* ., reduce: TableConstructor */
			reduce(125), /* :, reduce: TableConstructor */
			reduce(125), /* or, reduce: TableConstructor */
			reduce(125), /* and, reduce: TableConstructor */
			reduce(125), /* <, reduce: TableConstructor */
			reduce(125), /* <=, reduce: TableConstructor */
			reduce(125), /* >, reduce: TableConstructor */
			reduce(125), /* >=, reduce: TableConstructor */
			reduce(125), /* ==, reduce: TableConstructor */
			reduce(125), /* ~=, reduce: TableConstructor */
			reduce(125), /* |, reduce: TableConstructor */
			reduce(125), /* ~, reduce: TableConstructor */
			reduce(125), /* &, reduce: TableConstructor */
			reduce(125), /* .., reduce: TableConstructor */
			reduce(125), /* <<, reduce: TableConstructor */
			reduce(125), /* >>, reduce: TableConstructor */
			reduce(125), /* +, reduce: TableConstructor */
			reduce(125), /* -, reduce: TableConstructor */
			reduce(125), /* *, reduce: TableConstructor */
			reduce(125), /* /, reduce: TableConstructor */
			reduce(125), /* %, reduce: TableConstructor */
			reduce(125), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(125), /* ^, reduce: TableConstructor */
			reduce(125), /* [, reduce: TableConstructor */
			nil,         /* ] */
			reduce(125), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(125), /* string, reduce: TableConstructor */
			reduce(125), /* {, reduce: TableConstructor */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1645
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(238),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			shift(254),  /* [ */
			nil,         /* ] */
			shift(255),  /* ( */
			nil,         /* ) */
			shift(256),  /* nil */
			shift(257),  /* true */
			shift(258),  /* false */
			shift(259),  /* ... */
			shift(260),  /* numdec */
			shift(261),  /* numhex */
			shift(262),  /* string */
			shift(265),  /* { */
			shift(1872), /* } */
			shift(268),  /* ident */
		},
	},
	actionRow{ // S1646
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(126), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(126), /* end, reduce: TableConstructor */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(126), /* ,, reduce: TableConstructor */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(126), /* or, reduce: TableConstructor */
			reduce(126), /* and, reduce: TableConstructor */
			reduce(126), /* <, reduce: TableConstructor */
			reduce(126), /* <=, reduce: TableConstructor */
			reduce(126), /* >, reduce: TableConstructor */
			reduce(126), /* >=, reduce: TableConstructor */
			reduce(126), /* ==, reduce: TableConstructor */
			reduce(126), /* ~=, reduce: TableConstructor */
			reduce(126), /* |, reduce: TableConstructor */
			reduce(126), /* ~, reduce: TableConstructor */
			reduce(126), /* &, reduce: TableConstructor */
			reduce(126), /* .., reduce: TableConstructor */
			reduce(126), /* <<, reduce: TableConstructor */
			reduce(126), /* >>, reduce: TableConstructor */
			reduce(126), /* +, reduce: TableConstructor */
			reduce(126), /* -, reduce: TableConstructor */
			reduce(126), /* *, reduce: TableConstructor */
			reduce(126), /* /, reduce: TableConstructor */
			reduce(126), /* %, reduce: TableConstructor */
			reduce(126), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(126), /* ^, reduce: TableConstructor */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1647
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(54),  /* return, reduce: ExpList */
			reduce(54),  /* ;, reduce: ExpList */
			nil,         /* empty */
			nil,         /* = */
			reduce(54),  /* break, reduce: ExpList */
			reduce(54),  /* goto, reduce: ExpList */
			reduce(54),  /* do, reduce: ExpList */
			reduce(54),  /* end, reduce: ExpList */
			reduce(54),  /* while, reduce: ExpList */
			reduce(54),  /* repeat, reduce: ExpList */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(54),  /* if, reduce: ExpList */
			reduce(54),  /* ,, reduce: ExpList */
			reduce(54),  /* for, reduce: ExpList */
			nil,         /* in */
			reduce(54),  /* function, reduce: ExpList */
			reduce(54),  /* local, reduce: ExpList */
			reduce(54),  /* ::, reduce: ExpList */
			nil,         /* . */
			nil,         /* : */
			shift(1344), /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(54),  /* (, reduce: ExpList */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(54),  /* ident, reduce: ExpList */
		},
	},
	actionRow{ // S1648
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(56),  /* return, reduce: Exp */
			reduce(56),  /* ;, reduce: Exp */
			nil,         /* empty */
			nil,         /* = */
			reduce(56),  /* break, reduce: Exp */
			reduce(56),  /* goto, reduce: Exp */
			reduce(56),  /* do, reduce: Exp */
			reduce(56),  /* end, reduce: Exp */
			reduce(56),  /* while, reduce: Exp */
			reduce(56),  /* repeat, reduce: Exp */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(56),  /* if, reduce: Exp */
			reduce(56),  /* ,, reduce: Exp */
			reduce(56),  /* for, reduce: Exp */
			nil,         /* in */
			reduce(56),  /* function, reduce: Exp */
			reduce(56),  /* local, reduce: Exp */
			reduce(56),  /* ::, reduce: Exp */
			nil,         /* . */
			nil,         /* : */
			reduce(56),  /* or, reduce: Exp */
			shift(1347), /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(56),  /* (, reduce: Exp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(56),  /* ident, reduce: Exp */
		},
	},
	actionRow{ // S1649
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(1873), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1650
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(58), /* return, reduce: AndExp */
			reduce(58), /* ;, reduce: AndExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(58), /* break, reduce: AndExp */
			reduce(58), /* goto, reduce: AndExp */
			reduce(58), /* do, reduce: AndExp */
			reduce(58), /* end, reduce: AndExp */
			reduce(58), /* while, reduce: AndExp */
			reduce(58), /* repeat, reduce: AndExp */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(58), /* if, reduce: AndExp */
			reduce(58), /* ,, reduce: AndExp */
			reduce(58), /* for, reduce: AndExp */
			nil,        /* in */
			reduce(58), /* function, reduce: AndExp */
			reduce(58), /* local, reduce: AndExp */
			reduce(58), /* ::, reduce: AndExp */
			nil,        /* . */
			nil,        /* : */
			reduce(58), /* or, reduce: AndExp */
			reduce(58), /* and, reduce: AndExp */
			shift(203), /* < */
			shift(204), /* <= */
			shift(205), /* > */
			shift(206), /* >= */
			shift(207), /* == */
			shift(208), /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(58), /* (, reduce: AndExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(58), /* ident, reduce: AndExp */
		},
	},
	actionRow{ // S1651
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(66),  /* return, reduce: CompExp */
			reduce(66),  /* ;, reduce: CompExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(66),  /* break, reduce: CompExp */
			reduce(66),  /* goto, reduce: CompExp */
			reduce(66),  /* do, reduce: CompExp */
			reduce(66),  /* end, reduce: CompExp */
			reduce(66),  /* while, reduce: CompExp */
			reduce(66),  /* repeat, reduce: CompExp */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(66),  /* if, reduce: CompExp */
			reduce(66),  /* ,, reduce: CompExp */
			reduce(66),  /* for, reduce: CompExp */
			nil,         /* in */
			reduce(66),  /* function, reduce: CompExp */
			reduce(66),  /* local, reduce: CompExp */
			reduce(66),  /* ::, reduce: CompExp */
			nil,         /* . */
			nil,         /* : */
			reduce(66),  /* or, reduce: CompExp */
			reduce(66),  /* and, reduce: CompExp */
			reduce(66),  /* <, reduce: CompExp */
			reduce(66),  /* <=, reduce: CompExp */
			reduce(66),  /* >, reduce: CompExp */
			reduce(66),  /* >=, reduce: CompExp */
			reduce(66),  /* ==, reduce: CompExp */
			reduce(66),  /* ~=, reduce: CompExp */
			shift(1349), /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(66),  /* (, reduce: CompExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(66),  /* ident, reduce: CompExp */
		},
	},
	actionRow{ // S1652
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(68),  /* return, reduce: BitOrExp */
			reduce(68),  /* ;, reduce: BitOrExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(68),  /* break, reduce: BitOrExp */
			reduce(68),  /* goto, reduce: BitOrExp */
			reduce(68),  /* do, reduce: BitOrExp */
			reduce(68),  /* end, reduce: BitOrExp */
			reduce(68),  /* while, reduce: BitOrExp */
			reduce(68),  /* repeat, reduce: BitOrExp */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(68),  /* if, reduce: BitOrExp */
			reduce(68),  /* ,, reduce: BitOrExp */
			reduce(68),  /* for, reduce: BitOrExp */
			nil,         /* in */
			reduce(68),  /* function, reduce: BitOrExp */
			reduce(68),  /* local, reduce: BitOrExp */
			reduce(68),  /* ::, reduce: BitOrExp */
			nil,         /* . */
			nil,         /* : */
			reduce(68),  /* or, reduce: BitOrExp */
			reduce(68),  /* and, reduce: BitOrExp */
			reduce(68),  /* <, reduce: BitOrExp */
			reduce(68),  /* <=, reduce: BitOrExp */
			reduce(68),  /* >, reduce: BitOrExp */
			reduce(68),  /* >=, reduce: BitOrExp */
			reduce(68),  /* ==, reduce: BitOrExp */
			reduce(68),  /* ~=, reduce: BitOrExp */
			reduce(68),  /* |, reduce: BitOrExp */
			shift(1350), /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(68),  /* (, reduce: BitOrExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(68),  /* ident, reduce: BitOrExp */
		},
	},
	actionRow{ // S1653
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(70),  /* return, reduce: BitXorExp */
			reduce(70),  /* ;, reduce: BitXorExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(70),  /* break, reduce: BitXorExp */
			reduce(70),  /* goto, reduce: BitXorExp */
			reduce(70),  /* do, reduce: BitXorExp */
			reduce(70),  /* end, reduce: BitXorExp */
			reduce(70),  /* while, reduce: BitXorExp */
			reduce(70),  /* repeat, reduce: BitXorExp */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(70),  /* if, reduce: BitXorExp */
			reduce(70),  /* ,, reduce: BitXorExp */
			reduce(70),  /* for, reduce: BitXorExp */
			nil,         /* in */
			reduce(70),  /* function, reduce: BitXorExp */
			reduce(70),  /* local, reduce: BitXorExp */
			reduce(70),  /* ::, reduce: BitXorExp */
			nil,         /* . */
			nil,         /* : */
			reduce(70),  /* or, reduce: BitXorExp */
			reduce(70),  /* and, reduce: BitXorExp */
			reduce(70),  /* <, reduce: BitXorExp */
			reduce(70),  /* <=, reduce: BitXorExp */
			reduce(70),  /* >, reduce: BitXorExp */
			reduce(70),  /* >=, reduce: BitXorExp */
			reduce(70),  /* ==, reduce: BitXorExp */
			reduce(70),  /* ~=, reduce: BitXorExp */
			reduce(70),  /* |, reduce: BitXorExp */
			reduce(70),  /* ~, reduce: BitXorExp */
			shift(1351), /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(70),  /* (, reduce: BitXorExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(70),  /* ident, reduce: BitXorExp */
		},
	},
	actionRow{ // S1654
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(72),  /* return, reduce: BitAndExp */
			reduce(72),  /* ;, reduce: BitAndExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(72),  /* break, reduce: BitAndExp */
			reduce(72),  /* goto, reduce: BitAndExp */
			reduce(72),  /* do, reduce: BitAndExp */
			reduce(72),  /* end, reduce: BitAndExp */
			reduce(72),  /* while, reduce: BitAndExp */
			reduce(72),  /* repeat, reduce: BitAndExp */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(72),  /* if, reduce: BitAndExp */
			reduce(72),  /* ,, reduce: BitAndExp */
			reduce(72),  /* for, reduce: BitAndExp */
			nil,         /* in */
			reduce(72),  /* function, reduce: BitAndExp */
			reduce(72),  /* local, reduce: BitAndExp */
			reduce(72),  /* ::, reduce: BitAndExp */
			nil,         /* . */
			nil,         /* : */
			reduce(72),  /* or, reduce: BitAndExp */
			reduce(72),  /* and, reduce: BitAndExp */
			reduce(72),  /* <, reduce: BitAndExp */
			reduce(72),  /* <=, reduce: BitAndExp */
			reduce(72),  /* >, reduce: BitAndExp */
			reduce(72),  /* >=, reduce: BitAndExp */
			reduce(72),  /* ==, reduce: BitAndExp */
			reduce(72),  /* ~=, reduce: BitAndExp */
			reduce(72),  /* |, reduce: BitAndExp */
			reduce(72),  /* ~, reduce: BitAndExp */
			reduce(72),  /* &, reduce: BitAndExp */
			shift(1352), /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(72),  /* (, reduce: BitAndExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(72),  /* ident, reduce: BitAndExp */
		},
	},
	actionRow{ // S1655
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(74), /* return, reduce: ConcatExp */
			reduce(74), /* ;, reduce: ConcatExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(74), /* break, reduce: ConcatExp */
			reduce(74), /* goto, reduce: ConcatExp */
			reduce(74), /* do, reduce: ConcatExp */
			reduce(74), /* end, reduce: ConcatExp */
			reduce(74), /* while, reduce: ConcatExp */
			reduce(74), /* repeat, reduce: ConcatExp */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(74), /* if, reduce: ConcatExp */
			reduce(74), /* ,, reduce: ConcatExp */
			reduce(74), /* for, reduce: ConcatExp */
			nil,        /* in */
			reduce(74), /* function, reduce: ConcatExp */
			reduce(74), /* local, reduce: ConcatExp */
			reduce(74), /* ::, reduce: ConcatExp */
			nil,        /* . */
			nil,        /* : */
			reduce(74), /* or, reduce: ConcatExp */
			reduce(74), /* and, reduce: ConcatExp */
			reduce(74), /* <, reduce: ConcatExp */
			reduce(74), /* <=, reduce: ConcatExp */
			reduce(74), /* >, reduce: ConcatExp */
			reduce(74), /* >=, reduce: ConcatExp */
			reduce(74), /* ==, reduce: ConcatExp */
			reduce(74), /* ~=, reduce: ConcatExp */
			reduce(74), /* |, reduce: ConcatExp */
			reduce(74), /* ~, reduce: ConcatExp */
			reduce(74), /* &, reduce: ConcatExp */
			reduce(74), /* .., reduce: ConcatExp */
			shift(214), /* << */
			shift(215), /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(74), /* (, reduce: ConcatExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(74), /* ident, reduce: ConcatExp */
		},
	},
	actionRow{ // S1656
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(78), /* return, reduce: ShiftExp */
			reduce(78), /* ;, reduce: ShiftExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(78), /* break, reduce: ShiftExp */
			reduce(78), /* goto, reduce: ShiftExp */
			reduce(78), /* do, reduce: ShiftExp */
			reduce(78), /* end, reduce: ShiftExp */
			reduce(78), /* while, reduce: ShiftExp */
			reduce(78), /* repeat, reduce: ShiftExp */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(78), /* if, reduce: ShiftExp */
			reduce(78), /* ,, reduce: ShiftExp */
			reduce(78), /* for, reduce: ShiftExp */
			nil,        /* in */
			reduce(78), /* function, reduce: ShiftExp */
			reduce(78), /* local, reduce: ShiftExp */
			reduce(78), /* ::, reduce: ShiftExp */
			nil,        /* . */
			nil,        /* : */
			reduce(78), /* or, reduce: ShiftExp */
			reduce(78), /* and, reduce: ShiftExp */
			reduce(78), /* <, reduce: ShiftExp */
			reduce(78), /* <=, reduce: ShiftExp */
			reduce(78), /* >, reduce: ShiftExp */
			reduce(78), /* >=, reduce: ShiftExp */
			reduce(78), /* ==, reduce: ShiftExp */
			reduce(78), /* ~=, reduce: ShiftExp */
			reduce(78), /* |, reduce: ShiftExp */
			reduce(78), /* ~, reduce: ShiftExp */
			reduce(78), /* &, reduce: ShiftExp */
			reduce(78), /* .., reduce: ShiftExp */
			reduce(78), /* <<, reduce: ShiftExp */
			reduce(78), /* >>, reduce: ShiftExp */
			shift(217), /* + */
			shift(218), /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(78), /* (, reduce: ShiftExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(78), /* ident, reduce: ShiftExp */
		},
	},
	actionRow{ // S1657
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(82), /* return, reduce: Sum */
			reduce(82), /* ;, reduce: Sum */
			nil,        /* empty */
			nil,        /* = */
			reduce(82), /* break, reduce: Sum */
			reduce(82), /* goto, reduce: Sum */
			reduce(82), /* do, reduce: Sum */
			reduce(82), /* end, reduce: Sum */
			reduce(82), /* while, reduce: Sum */
			reduce(82), /* repeat, reduce: Sum */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(82), /* if, reduce: Sum */
			reduce(82), /* ,, reduce: Sum */
			reduce(82), /* for, reduce: Sum */
			nil,        /* in */
			reduce(82), /* function, reduce: Sum */
			reduce(82), /* local, reduce: Sum */
			reduce(82), /* ::, reduce: Sum */
			nil,        /* . */
			nil,        /* : */
			reduce(82), /* or, reduce: Sum */
			reduce(82), /* and, reduce: Sum */
			reduce(82), /* <, reduce: Sum */
			reduce(82), /* <=, reduce: Sum */
			reduce(82), /* >, reduce: Sum */
			reduce(82), /* >=, reduce: Sum */
			reduce(82), /* ==, reduce: Sum */
			reduce(82), /* ~=, reduce: Sum */
			reduce(82), /* |, reduce: Sum */
			reduce(82), /* ~, reduce: Sum */
			reduce(82), /* &, reduce: Sum */
			reduce(82), /* .., reduce: Sum */
			reduce(82), /* <<, reduce: Sum */
			reduce(82), /* >>, reduce: Sum */
			reduce(82), /* +, reduce: Sum */
			reduce(82), /* -, reduce: Sum */
			shift(220), /* * */
			shift(221), /* / */
			shift(222), /* % */
			shift(223), /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(82), /* (, reduce: Sum */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(82), /* ident, reduce: Sum */
		},
	},
	actionRow{ // S1658
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(88), /* return, reduce: Term */
			reduce(88), /* ;, reduce: Term */
			nil,        /* empty */
			nil,        /* = */
			reduce(88), /* break, reduce: Term */
			reduce(88), /* goto, reduce: Term */
			reduce(88), /* do, reduce: Term */
			reduce(88), /* end, reduce: Term */
			reduce(88), /* while, reduce: Term */
			reduce(88), /* repeat, reduce: Term */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(88), /* if, reduce: Term */
			reduce(88), /* ,, reduce: Term */
			reduce(88), /* for, reduce: Term */
			nil,        /* in */
			reduce(88), /* function, reduce: Term */
			reduce(88), /* local, reduce: Term */
			reduce(88), /* ::, reduce: Term */
			nil,        /* . */
			nil,        /* : */
			reduce(88), /* or, reduce: Term */
			reduce(88), /* and, reduce: Term */
			reduce(88), /* <, reduce: Term */
			reduce(88), /* <=, reduce: Term */
			reduce(88), /* >, reduce: Term */
			reduce(88), /* >=, reduce: Term */
			reduce(88), /* ==, reduce: Term */
			reduce(88), /* ~=, reduce: Term */
			reduce(88), /* |, reduce: Term */
			reduce(88), /* ~, reduce: Term */
			reduce(88), /* &, reduce: Term */
			reduce(88), /* .., reduce: Term */
			reduce(88), /* <<, reduce: Term */
			reduce(88), /* >>, reduce: Term */
			reduce(88), /* +, reduce: Term */
			reduce(88), /* -, reduce: Term */
			reduce(88), /* *, reduce: Term */
			reduce(88), /* /, reduce: Term */
			reduce(88), /* %, reduce: Term */
			reduce(88), /* //, reduce: Term */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(88), /* (, reduce: Term */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(88), /* ident, reduce: Term */
		},
	},
	actionRow{ // S1659
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(96), /* return, reduce: Power */
			reduce(96), /* ;, reduce: Power */
			nil,        /* empty */
			nil,        /* = */
			reduce(96), /* break, reduce: Power */
			reduce(96), /* goto, reduce: Power */
			reduce(96), /* do, reduce: Power */
			reduce(96), /* end, reduce: Power */
			reduce(96), /* while, reduce: Power */
			reduce(96), /* repeat, reduce: Power */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(96), /* if, reduce: Power */
			reduce(96), /* ,, reduce: Power */
			reduce(96), /* for, reduce: Power */
			nil,        /* in */
			reduce(96), /* function, reduce: Power */
			reduce(96), /* local, reduce: Power */
			reduce(96), /* ::, reduce: Power */
			nil,        /* . */
			nil,        /* : */
			reduce(96), /* or, reduce: Power */
			reduce(96), /* and, reduce: Power */
			reduce(96), /* <, reduce: Power */
			reduce(96), /* <=, reduce: Power */
			reduce(96), /* >, reduce: Power */
			reduce(96), /* >=, reduce: Power */
			reduce(96), /* ==, reduce: Power */
			reduce(96), /* ~=, reduce: Power */
			reduce(96), /* |, reduce: Power */
			reduce(96), /* ~, reduce: Power */
			reduce(96), /* &, reduce: Power */
			reduce(96), /* .., reduce: Power */
			reduce(96), /* <<, reduce: Power */
			reduce(96), /* >>, reduce: Power */
			reduce(96), /* +, reduce: Power */
			reduce(96), /* -, reduce: Power */
			reduce(96), /* *, reduce: Power */
			reduce(96), /* /, reduce: Power */
			reduce(96), /* %, reduce: Power */
			reduce(96), /* //, reduce: Power */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(96), /* (, reduce: Power */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(96), /* ident, reduce: Power */
		},
	},
	actionRow{ // S1660
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(99), /* return, reduce: Var */
			reduce(99), /* ;, reduce: Var */
			nil,        /* empty */
			nil,        /* = */
			reduce(99), /* break, reduce: Var */
			reduce(99), /* goto, reduce: Var */
			reduce(99), /* do, reduce: Var */
			reduce(99), /* end, reduce: Var */
			reduce(99), /* while, reduce: Var */
			reduce(99), /* repeat, reduce: Var */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(99), /* if, reduce: Var */
			reduce(99), /* ,, reduce: Var */
			reduce(99), /* for, reduce: Var */
			nil,        /* in */
			reduce(99), /* function, reduce: Var */
			reduce(99), /* local, reduce: Var */
			reduce(99), /* ::, reduce: Var */
			reduce(99), /* ., reduce: Var */
			reduce(99), /* :, reduce: Var */
			reduce(99), /* or, reduce: Var */
			reduce(99), /* and, reduce: Var */
			reduce(99), /* <, reduce: Var */
			reduce(99), /* <=, reduce: Var */
			reduce(99), /* >, reduce: Var */
			reduce(99), /* >=, reduce: Var */
			reduce(99), /* ==, reduce: Var */
			reduce(99), /* ~=, reduce: Var */
			reduce(99), /* |, reduce: Var */
			reduce(99), /* ~, reduce: Var */
			reduce(99), /* &, reduce: Var */
			reduce(99), /* .., reduce: Var */
			reduce(99), /* <<, reduce: Var */
			reduce(99), /* >>, reduce: Var */
			reduce(99), /* +, reduce: Var */
			reduce(99), /* -, reduce: Var */
			reduce(99), /* *, reduce: Var */
			reduce(99), /* /, reduce: Var */
			reduce(99), /* %, reduce: Var */
			reduce(99), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(99), /* ^, reduce: Var */
			reduce(99), /* [, reduce: Var */
			nil,        /* ] */
			reduce(99), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(99), /* string, reduce: Var */
			reduce(99), /* {, reduce: Var */
			nil,        /* } */
			reduce(99), /* ident, reduce: Var */
		},
	},
	actionRow{ // S1661
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1361), /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			shift(1363), /* string */
			shift(1365), /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1662
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			shift(851),  /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			shift(1875), /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1663
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(876),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(1876), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1664
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(115), /* return, reduce: Args */
			reduce(115), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			reduce(115), /* break, reduce: Args */
			reduce(115), /* goto, reduce: Args */
			reduce(115), /* do, reduce: Args */
			reduce(115), /* end, reduce: Args */
			reduce(115), /* while, reduce: Args */
			reduce(115), /* repeat, reduce: Args */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(115), /* if, reduce: Args */
			reduce(115), /* ,, reduce: Args */
			reduce(115), /* for, reduce: Args */
			nil,         /* in */
			reduce(115), /* function, reduce: Args */
			reduce(115), /* local, reduce: Args */
			reduce(115), /* ::, reduce: Args */
			reduce(115), /* ., reduce: Args */
			reduce(115), /* :, reduce: Args */
			reduce(115), /* or, reduce: Args */
			reduce(115), /* and, reduce: Args */
			reduce(115), /* <, reduce: Args */
			reduce(115), /* <=, reduce: Args */
			reduce(115), /* >, reduce: Args */
			reduce(115), /* >=, reduce: Args */
			reduce(115), /* ==, reduce: Args */
			reduce(115), /* ~=, reduce: Args */
			reduce(115), /* |, reduce: Args */
			reduce(115), /* ~, reduce: Args */
			reduce(115), /* &, reduce: Args */
			reduce(115), /* .., reduce: Args */
			reduce(115), /* <<, reduce: Args */
			reduce(115), /* >>, reduce: Args */
			reduce(115), /* +, reduce: Args */
			reduce(115), /* -, reduce: Args */
			reduce(115), /* *, reduce: Args */
			reduce(115), /* /, reduce: Args */
			reduce(115), /* %, reduce: Args */
			reduce(115), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(115), /* ^, reduce: Args */
			reduce(115), /* [, reduce: Args */
			nil,         /* ] */
			reduce(115), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(115), /* string, reduce: Args */
			reduce(115), /* {, reduce: Args */
			nil,         /* } */
			reduce(115), /* ident, reduce: Args */
		},
	},
	actionRow{ // S1665
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			shift(569),  /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(570),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			shift(1877), /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1666
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(102), /* return, reduce: PrefixExp */
			reduce(102), /* ;, reduce: PrefixExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(102), /* break, reduce: PrefixExp */
			reduce(102), /* goto, reduce: PrefixExp */
			reduce(102), /* do, reduce: PrefixExp */
			reduce(102), /* end, reduce: PrefixExp */
			reduce(102), /* while, reduce: PrefixExp */
			reduce(102), /* repeat, reduce: PrefixExp */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(102), /* if, reduce: PrefixExp */
			reduce(102), /* ,, reduce: PrefixExp */
			reduce(102), /* for, reduce: PrefixExp */
			nil,         /* in */
			reduce(102), /* function, reduce: PrefixExp */
			reduce(102), /* local, reduce: PrefixExp */
			reduce(102), /* ::, reduce: PrefixExp */
			reduce(102), /* ., reduce: PrefixExp */
			reduce(102), /* :, reduce: PrefixExp */
			reduce(102), /* or, reduce: PrefixExp */
			reduce(102), /* and, reduce: PrefixExp */
			reduce(102), /* <, reduce: PrefixExp */
			reduce(102), /* <=, reduce: PrefixExp */
			reduce(102), /* >, reduce: PrefixExp */
			reduce(102), /* >=, reduce: PrefixExp */
			reduce(102), /* ==, reduce: PrefixExp */
			reduce(102), /* ~=, reduce: PrefixExp */
			reduce(102), /* |, reduce: PrefixExp */
			reduce(102), /* ~, reduce: PrefixExp */
			reduce(102), /* &, reduce: PrefixExp */
			reduce(102), /* .., reduce: PrefixExp */
			reduce(102), /* <<, reduce: PrefixExp */
			reduce(102), /* >>, reduce: PrefixExp */
			reduce(102), /* +, reduce: PrefixExp */
			reduce(102), /* -, reduce: PrefixExp */
			reduce(102), /* *, reduce: PrefixExp */
			reduce(102), /* /, reduce: PrefixExp */
			reduce(102), /* %, reduce: PrefixExp */
			reduce(102), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(102), /* ^, reduce: PrefixExp */
			reduce(102), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(102), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(102), /* string, reduce: PrefixExp */
			reduce(102), /* {, reduce: PrefixExp */
			nil,         /* } */
			reduce(102), /* ident, reduce: PrefixExp */
		},
	},
	actionRow{ // S1667
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(125), /* return, reduce: TableConstructor */
			reduce(125), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			reduce(125), /* break, reduce: TableConstructor */
			reduce(125), /* goto, reduce: TableConstructor */
			reduce(125), /* do, reduce: TableConstructor */
			reduce(125), /* end, reduce: TableConstructor */
			reduce(125), /* while, reduce: TableConstructor */
			reduce(125), /* repeat, reduce: TableConstructor */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(125), /* if, reduce: TableConstructor */
			reduce(125), /* ,, reduce: TableConstructor */
			reduce(125), /* for, reduce: TableConstructor */
			nil,         /* in */
			reduce(125), /* function, reduce: TableConstructor */
			reduce(125), /* local, reduce: TableConstructor */
			reduce(125), /* ::, reduce: TableConstructor */
			nil,         /* . */
			nil,         /* : */
			reduce(125), /* or, reduce: TableConstructor */
			reduce(125), /* and, reduce: TableConstructor */
			reduce(125), /* <, reduce: TableConstructor */
			reduce(125), /* <=, reduce: TableConstructor */
			reduce(125), /* >, reduce: TableConstructor */
			reduce(125), /* >=, reduce: TableConstructor */
			reduce(125), /* ==, reduce: TableConstructor */
			reduce(125), /* ~=, reduce: TableConstructor */
			reduce(125), /* |, reduce: TableConstructor */
			reduce(125), /* ~, reduce: TableConstructor */
			reduce(125), /* &, reduce: TableConstructor */
			reduce(125), /* .., reduce: TableConstructor */
			reduce(125), /* <<, reduce: TableConstructor */
			reduce(125), /* >>, reduce: TableConstructor */
			reduce(125), /* +, reduce: TableConstructor */
			reduce(125), /* -, reduce: TableConstructor */
			reduce(125), /* *, reduce: TableConstructor */
			reduce(125), /* /, reduce: TableConstructor */
			reduce(125), /* %, reduce: TableConstructor */
			reduce(125), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(125), /* ^, reduce: TableConstructor */
			nil,         /* [ */
			nil,         /* ] */
			reduce(125), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(125), /* ident, reduce: TableConstructor */
		},
	},
	actionRow{ // S1668
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(238),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			shift(254),  /* [ */
			nil,         /* ] */
			shift(255),  /* ( */
			nil,         /* ) */
			shift(256),  /* nil */
			shift(257),  /* true */
			shift(258),  /* false */
			shift(259),  /* ... */
			shift(260),  /* numdec */
			shift(261),  /* numhex */
			shift(262),  /* string */
			shift(265),  /* { */
			shift(1879), /* } */
			shift(268),  /* ident */
		},
	},
	actionRow{ // S1669
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(27), /* return, reduce: WhileStat */
			reduce(27), /* ;, reduce: WhileStat */
			nil,        /* empty */
			nil,        /* = */
			reduce(27), /* break, reduce: WhileStat */
			reduce(27), /* goto, reduce: WhileStat */
			reduce(27), /* do, reduce: WhileStat */
			reduce(27), /* end, reduce: WhileStat */
			reduce(27), /* while, reduce: WhileStat */
			reduce(27), /* repeat, reduce: WhileStat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(27), /* if, reduce: WhileStat */
			nil,        /* , */
			reduce(27), /* for, reduce: WhileStat */
			nil,        /* in */
			reduce(27), /* function, reduce: WhileStat */
			reduce(27), /* local, reduce: WhileStat */
			reduce(27), /* ::, reduce: WhileStat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(27), /* (, reduce: WhileStat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(27), /* ident, reduce: WhileStat */
		},
	},
	actionRow{ // S1670
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1372), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1388), /* ( */
			nil,         /* ) */
			shift(1389), /* nil */
			shift(1390), /* true */
			shift(1391), /* false */
			shift(1392), /* ... */
			shift(1393), /* numdec */
			shift(1394), /* numhex */
			shift(1395), /* string */
			shift(1398), /* { */
			nil,         /* } */
			shift(1399), /* ident */
		},
	},
	actionRow{ // S1671
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(119), /* return, reduce: FunctionDef */
			reduce(119), /* ;, reduce: FunctionDef */
			nil,         /* empty */
			nil,         /* = */
			reduce(119), /* break, reduce: FunctionDef */
			reduce(119), /* goto, reduce: FunctionDef */
			reduce(119), /* do, reduce: FunctionDef */
			reduce(119), /* end, reduce: FunctionDef */
			reduce(119), /* while, reduce: FunctionDef */
			reduce(119), /* repeat, reduce: FunctionDef */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(119), /* if, reduce: FunctionDef */
			nil,         /* , */
			reduce(119), /* for, reduce: FunctionDef */
			nil,         /* in */
			reduce(119), /* function, reduce: FunctionDef */
			reduce(119), /* local, reduce: FunctionDef */
			reduce(119), /* ::, reduce: FunctionDef */
			nil,         /* . */
			nil,         /* : */
			reduce(119), /* or, reduce: FunctionDef */
			reduce(119), /* and, reduce: FunctionDef */
			reduce(119), /* <, reduce: FunctionDef */
			reduce(119), /* <=, reduce: FunctionDef */
			reduce(119), /* >, reduce: FunctionDef */
			reduce(119), /* >=, reduce: FunctionDef */
			reduce(119), /* ==, reduce: FunctionDef */
			reduce(119), /* ~=, reduce: FunctionDef */
			reduce(119), /* |, reduce: FunctionDef */
			reduce(119), /* ~, reduce: FunctionDef */
			reduce(119), /* &, reduce: FunctionDef */
			reduce(119), /* .., reduce: FunctionDef */
			reduce(119), /* <<, reduce: FunctionDef */
			reduce(119), /* >>, reduce: FunctionDef */
			reduce(119), /* +, reduce: FunctionDef */
			reduce(119), /* -, reduce: FunctionDef */
			reduce(119), /* *, reduce: FunctionDef */
			reduce(119), /* /, reduce: FunctionDef */
			reduce(119), /* %, reduce: FunctionDef */
			reduce(119), /* //, reduce: FunctionDef */
			nil,         /* not */
			nil,         /* # */
			reduce(119), /* ^, reduce: FunctionDef */
			nil,         /* [ */
			nil,         /* ] */
			reduce(119), /* (, reduce: FunctionDef */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(119), /* ident, reduce: FunctionDef */
		},
	},
	actionRow{ // S1672
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(123), /* ), reduce: ParList */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			shift(521),  /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			shift(523),  /* ident */
		},
	},
	actionRow{ // S1673
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1372), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1388), /* ( */
			nil,         /* ) */
			shift(1389), /* nil */
			shift(1390), /* true */
			shift(1391), /* false */
			shift(1392), /* ... */
			shift(1393), /* numdec */
			shift(1394), /* numhex */
			shift(1395), /* string */
			shift(1398), /* { */
			nil,         /* } */
			shift(1399), /* ident */
		},
	},
	actionRow{ // S1674
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1372), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1388), /* ( */
			nil,         /* ) */
			shift(1389), /* nil */
			shift(1390), /* true */
			shift(1391), /* false */
			shift(1392), /* ... */
			shift(1393), /* numdec */
			shift(1394), /* numhex */
			shift(1395), /* string */
			shift(1398), /* { */
			nil,         /* } */
			shift(1399), /* ident */
		},
	},
	actionRow{ // S1675
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1372), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1388), /* ( */
			nil,         /* ) */
			shift(1389), /* nil */
			shift(1390), /* true */
			shift(1391), /* false */
			shift(1392), /* ... */
			shift(1393), /* numdec */
			shift(1394), /* numhex */
			shift(1395), /* string */
			shift(1398), /* { */
			nil,         /* } */
			shift(1399), /* ident */
		},
	},
	actionRow{ // S1676
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1372), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1388), /* ( */
			nil,         /* ) */
			shift(1389), /* nil */
			shift(1390), /* true */
			shift(1391), /* false */
			shift(1392), /* ... */
			shift(1393), /* numdec */
			shift(1394), /* numhex */
			shift(1395), /* string */
			shift(1398), /* { */
			nil,         /* } */
			shift(1399), /* ident */
		},
	},
	actionRow{ // S1677
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1372), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1388), /* ( */
			nil,         /* ) */
			shift(1389), /* nil */
			shift(1390), /* true */
			shift(1391), /* false */
			shift(1392), /* ... */
			shift(1393), /* numdec */
			shift(1394), /* numhex */
			shift(1395), /* string */
			shift(1398), /* { */
			nil,         /* } */
			shift(1399), /* ident */
		},
	},
	actionRow{ // S1678
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1372), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1388), /* ( */
			nil,         /* ) */
			shift(1389), /* nil */
			shift(1390), /* true */
			shift(1391), /* false */
			shift(1392), /* ... */
			shift(1393), /* numdec */
			shift(1394), /* numhex */
			shift(1395), /* string */
			shift(1398), /* { */
			nil,         /* } */
			shift(1399), /* ident */
		},
	},
	actionRow{ // S1679
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1372), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1388), /* ( */
			nil,         /* ) */
			shift(1389), /* nil */
			shift(1390), /* true */
			shift(1391), /* false */
			shift(1392), /* ... */
			shift(1393), /* numdec */
			shift(1394), /* numhex */
			shift(1395), /* string */
			shift(1398), /* { */
			nil,         /* } */
			shift(1399), /* ident */
		},
	},
	actionRow{ // S1680
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1372), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1388), /* ( */
			nil,         /* ) */
			shift(1389), /* nil */
			shift(1390), /* true */
			shift(1391), /* false */
			shift(1392), /* ... */
			shift(1393), /* numdec */
			shift(1394), /* numhex */
			shift(1395), /* string */
			shift(1398), /* { */
			nil,         /* } */
			shift(1399), /* ident */
		},
	},
	actionRow{ // S1681
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1372), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1388), /* ( */
			nil,         /* ) */
			shift(1389), /* nil */
			shift(1390), /* true */
			shift(1391), /* false */
			shift(1392), /* ... */
			shift(1393), /* numdec */
			shift(1394), /* numhex */
			shift(1395), /* string */
			shift(1398), /* { */
			nil,         /* } */
			shift(1399), /* ident */
		},
	},
	actionRow{ // S1682
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(93), /* return, reduce: Factor */
			reduce(93), /* ;, reduce: Factor */
			nil,        /* empty */
			nil,        /* = */
			reduce(93), /* break, reduce: Factor */
			reduce(93), /* goto, reduce: Factor */
			reduce(93), /* do, reduce: Factor */
			reduce(93), /* end, reduce: Factor */
			reduce(93), /* while, reduce: Factor */
			reduce(93), /* repeat, reduce: Factor */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(93), /* if, reduce: Factor */
			nil,        /* , */
			reduce(93), /* for, reduce: Factor */
			nil,        /* in */
			reduce(93), /* function, reduce: Factor */
			reduce(93), /* local, reduce: Factor */
			reduce(93), /* ::, reduce: Factor */
			nil,        /* . */
			nil,        /* : */
			reduce(93), /* or, reduce: Factor */
			reduce(93), /* and, reduce: Factor */
			reduce(93), /* <, reduce: Factor */
			reduce(93), /* <=, reduce: Factor */
			reduce(93), /* >, reduce: Factor */
			reduce(93), /* >=, reduce: Factor */
			reduce(93), /* ==, reduce: Factor */
			reduce(93), /* ~=, reduce: Factor */
			reduce(93), /* |, reduce: Factor */
			reduce(93), /* ~, reduce: Factor */
			reduce(93), /* &, reduce: Factor */
			reduce(93), /* .., reduce: Factor */
			reduce(93), /* <<, reduce: Factor */
			reduce(93), /* >>, reduce: Factor */
			reduce(93), /* +, reduce: Factor */
			reduce(93), /* -, reduce: Factor */
			reduce(93), /* *, reduce: Factor */
			reduce(93), /* /, reduce: Factor */
			reduce(93), /* %, reduce: Factor */
			reduce(93), /* //, reduce: Factor */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(93), /* (, reduce: Factor */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(93), /* ident, reduce: Factor */
		},
	},
	actionRow{ // S1683
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1372), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1388), /* ( */
			nil,         /* ) */
			shift(1389), /* nil */
			shift(1390), /* true */
			shift(1391), /* false */
			shift(1392), /* ... */
			shift(1393), /* numdec */
			shift(1394), /* numhex */
			shift(1395), /* string */
			shift(1398), /* { */
			nil,         /* } */
			shift(1399), /* ident */
		},
	},
	actionRow{ // S1684
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			shift(1399), /* ident */
		},
	},
	actionRow{ // S1685
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(426), /* ident */
		},
	},
	actionRow{ // S1686
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(430), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(446), /* ( */
			nil,        /* ) */
			shift(447), /* nil */
			shift(448), /* true */
			shift(449), /* false */
			shift(450), /* ... */
			shift(451), /* numdec */
			shift(452), /* numhex */
			shift(453), /* string */
			shift(456), /* { */
			nil,        /* } */
			shift(457), /* ident */
		},
	},
	actionRow{ // S1687
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(462),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(478),  /* ( */
			shift(1896), /* ) */
			shift(480),  /* nil */
			shift(481),  /* true */
			shift(482),  /* false */
			shift(483),  /* ... */
			shift(484),  /* numdec */
			shift(485),  /* numhex */
			shift(486),  /* string */
			shift(489),  /* { */
			nil,         /* } */
			shift(490),  /* ident */
		},
	},
	actionRow{ // S1688
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(103), /* return, reduce: FunctionCall */
			reduce(103), /* ;, reduce: FunctionCall */
			nil,         /* empty */
			nil,         /* = */
			reduce(103), /* break, reduce: FunctionCall */
			reduce(103), /* goto, reduce: FunctionCall */
			reduce(103), /* do, reduce: FunctionCall */
			reduce(103), /* end, reduce: FunctionCall */
			reduce(103), /* while, reduce: FunctionCall */
			reduce(103), /* repeat, reduce: FunctionCall */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(103), /* if, reduce: FunctionCall */
			nil,         /* , */
			reduce(103), /* for, reduce: FunctionCall */
			nil,         /* in */
			reduce(103), /* function, reduce: FunctionCall */
			reduce(103), /* local, reduce: FunctionCall */
			reduce(103), /* ::, reduce: FunctionCall */
			reduce(103), /* ., reduce: FunctionCall */
			reduce(103), /* :, reduce: FunctionCall */
			reduce(103), /* or, reduce: FunctionCall */
			reduce(103), /* and, reduce: FunctionCall */
			reduce(103), /* <, reduce: FunctionCall */
			reduce(103), /* <=, reduce: FunctionCall */
			reduce(103), /* >, reduce: FunctionCall */
			reduce(103), /* >=, reduce: FunctionCall */
			reduce(103), /* ==, reduce: FunctionCall */
			reduce(103), /* ~=, reduce: FunctionCall */
			reduce(103), /* |, reduce: FunctionCall */
			reduce(103), /* ~, reduce: FunctionCall */
			reduce(103), /* &, reduce: FunctionCall */
			reduce(103), /* .., reduce: FunctionCall */
			reduce(103), /* <<, reduce: FunctionCall */
			reduce(103), /* >>, reduce: FunctionCall */
			reduce(103), /* +, reduce: FunctionCall */
			reduce(103), /* -, reduce: FunctionCall */
			reduce(103), /* *, reduce: FunctionCall */
			reduce(103), /* /, reduce: FunctionCall */
			reduce(103), /* %, reduce: FunctionCall */
			reduce(103), /* //, reduce: FunctionCall */
			nil,         /* not */
			nil,         /* # */
			reduce(103), /* ^, reduce: FunctionCall */
			reduce(103), /* [, reduce: FunctionCall */
			nil,         /* ] */
			reduce(103), /* (, reduce: FunctionCall */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(103), /* string, reduce: FunctionCall */
			reduce(103), /* {, reduce: FunctionCall */
			nil,         /* } */
			reduce(103), /* ident, reduce: FunctionCall */
		},
	},
	actionRow{ // S1689
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(118), /* return, reduce: Args */
			reduce(118), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			reduce(118), /* break, reduce: Args */
			reduce(118), /* goto, reduce: Args */
			reduce(118), /* do, reduce: Args */
			reduce(118), /* end, reduce: Args */
			reduce(118), /* while, reduce: Args */
			reduce(118), /* repeat, reduce: Args */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(118), /* if, reduce: Args */
			nil,         /* , */
			reduce(118), /* for, reduce: Args */
			nil,         /* in */
			reduce(118), /* function, reduce: Args */
			reduce(118), /* local, reduce: Args */
			reduce(118), /* ::, reduce: Args */
			reduce(118), /* ., reduce: Args */
			reduce(118), /* :, reduce: Args */
			reduce(118), /* or, reduce: Args */
			reduce(118), /* and, reduce: Args */
			reduce(118), /* <, reduce: Args */
			reduce(118), /* <=, reduce: Args */
			reduce(118), /* >, reduce: Args */
			reduce(118), /* >=, reduce: Args */
			reduce(118), /* ==, reduce: Args */
			reduce(118), /* ~=, reduce: Args */
			reduce(118), /* |, reduce: Args */
			reduce(118), /* ~, reduce: Args */
			reduce(118), /* &, reduce: Args */
			reduce(118), /* .., reduce: Args */
			reduce(118), /* <<, reduce: Args */
			reduce(118), /* >>, reduce: Args */
			reduce(118), /* +, reduce: Args */
			reduce(118), /* -, reduce: Args */
			reduce(118), /* *, reduce: Args */
			reduce(118), /* /, reduce: Args */
			reduce(118), /* %, reduce: Args */
			reduce(118), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(118), /* ^, reduce: Args */
			reduce(118), /* [, reduce: Args */
			nil,         /* ] */
			reduce(118), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(118), /* string, reduce: Args */
			reduce(118), /* {, reduce: Args */
			nil,         /* } */
			reduce(118), /* ident, reduce: Args */
		},
	},
	actionRow{ // S1690
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(117), /* return, reduce: Args */
			reduce(117), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			reduce(117), /* break, reduce: Args */
			reduce(117), /* goto, reduce: Args */
			reduce(117), /* do, reduce: Args */
			reduce(117), /* end, reduce: Args */
			reduce(117), /* while, reduce: Args */
			reduce(117), /* repeat, reduce: Args */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(117), /* if, reduce: Args */
			nil,         /* , */
			reduce(117), /* for, reduce: Args */
			nil,         /* in */
			reduce(117), /* function, reduce: Args */
			reduce(117), /* local, reduce: Args */
			reduce(117), /* ::, reduce: Args */
			reduce(117), /* ., reduce: Args */
			reduce(117), /* :, reduce: Args */
			reduce(117), /* or, reduce: Args */
			reduce(117), /* and, reduce: Args */
			reduce(117), /* <, reduce: Args */
			reduce(117), /* <=, reduce: Args */
			reduce(117), /* >, reduce: Args */
			reduce(117), /* >=, reduce: Args */
			reduce(117), /* ==, reduce: Args */
			reduce(117), /* ~=, reduce: Args */
			reduce(117), /* |, reduce: Args */
			reduce(117), /* ~, reduce: Args */
			reduce(117), /* &, reduce: Args */
			reduce(117), /* .., reduce: Args */
			reduce(117), /* <<, reduce: Args */
			reduce(117), /* >>, reduce: Args */
			reduce(117), /* +, reduce: Args */
			reduce(117), /* -, reduce: Args */
			reduce(117), /* *, reduce: Args */
			reduce(117), /* /, reduce: Args */
			reduce(117), /* %, reduce: Args */
			reduce(117), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(117), /* ^, reduce: Args */
			reduce(117), /* [, reduce: Args */
			nil,         /* ] */
			reduce(117), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(117), /* string, reduce: Args */
			reduce(117), /* {, reduce: Args */
			nil,         /* } */
			reduce(117), /* ident, reduce: Args */
		},
	},
	actionRow{ // S1691
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			shift(254), /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(268), /* ident */
		},
	},
	actionRow{ // S1692
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			shift(492),  /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(1898), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1693
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			shift(569),  /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(570),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			shift(1899), /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1694
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(34), /* return, reduce: Else */
			reduce(34), /* ;, reduce: Else */
			nil,        /* empty */
			nil,        /* = */
			reduce(34), /* break, reduce: Else */
			reduce(34), /* goto, reduce: Else */
			reduce(34), /* do, reduce: Else */
			reduce(34), /* end, reduce: Else */
			reduce(34), /* while, reduce: Else */
			reduce(34), /* repeat, reduce: Else */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(34), /* if, reduce: Else */
			nil,        /* , */
			reduce(34), /* for, reduce: Else */
			nil,        /* in */
			reduce(34), /* function, reduce: Else */
			reduce(34), /* local, reduce: Else */
			reduce(34), /* ::, reduce: Else */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(34), /* (, reduce: Else */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(34), /* ident, reduce: Else */
		},
	},
	actionRow{ // S1695
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(116), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(132), /* ( */
			nil,        /* ) */
			shift(133), /* nil */
			shift(134), /* true */
			shift(135), /* false */
			shift(136), /* ... */
			shift(137), /* numdec */
			shift(138), /* numhex */
			shift(139), /* string */
			shift(142), /* { */
			nil,        /* } */
			shift(143), /* ident */
		},
	},
	actionRow{ // S1696
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(35), /* return, reduce: IfStat */
			reduce(35), /* ;, reduce: IfStat */
			nil,        /* empty */
			nil,        /* = */
			reduce(35), /* break, reduce: IfStat */
			reduce(35), /* goto, reduce: IfStat */
			reduce(35), /* do, reduce: IfStat */
			reduce(35), /* end, reduce: IfStat */
			reduce(35), /* while, reduce: IfStat */
			reduce(35), /* repeat, reduce: IfStat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(35), /* if, reduce: IfStat */
			nil,        /* , */
			reduce(35), /* for, reduce: IfStat */
			nil,        /* in */
			reduce(35), /* function, reduce: IfStat */
			reduce(35), /* local, reduce: IfStat */
			reduce(35), /* ::, reduce: IfStat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(35), /* (, reduce: IfStat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(35), /* ident, reduce: IfStat */
		},
	},
	actionRow{ // S1697
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S1698
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S1699
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S1700
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S1701
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(124), /* do, reduce: FuncBody */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(124), /* or, reduce: FuncBody */
			reduce(124), /* and, reduce: FuncBody */
			reduce(124), /* <, reduce: FuncBody */
			reduce(124), /* <=, reduce: FuncBody */
			reduce(124), /* >, reduce: FuncBody */
			reduce(124), /* >=, reduce: FuncBody */
			reduce(124), /* ==, reduce: FuncBody */
			reduce(124), /* ~=, reduce: FuncBody */
			reduce(124), /* |, reduce: FuncBody */
			reduce(124), /* ~, reduce: FuncBody */
			reduce(124), /* &, reduce: FuncBody */
			reduce(124), /* .., reduce: FuncBody */
			reduce(124), /* <<, reduce: FuncBody */
			reduce(124), /* >>, reduce: FuncBody */
			reduce(124), /* +, reduce: FuncBody */
			reduce(124), /* -, reduce: FuncBody */
			reduce(124), /* *, reduce: FuncBody */
			reduce(124), /* /, reduce: FuncBody */
			reduce(124), /* %, reduce: FuncBody */
			reduce(124), /* //, reduce: FuncBody */
			nil,         /* not */
			nil,         /* # */
			reduce(124), /* ^, reduce: FuncBody */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1702
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S1703
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(104), /* $, reduce: FunctionCall */
			reduce(104), /* return, reduce: FunctionCall */
			reduce(104), /* ;, reduce: FunctionCall */
			nil,         /* empty */
			nil,         /* = */
			reduce(104), /* break, reduce: FunctionCall */
			reduce(104), /* goto, reduce: FunctionCall */
			reduce(104), /* do, reduce: FunctionCall */
			nil,         /* end */
			reduce(104), /* while, reduce: FunctionCall */
			reduce(104), /* repeat, reduce: FunctionCall */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(104), /* if, reduce: FunctionCall */
			nil,         /* , */
			reduce(104), /* for, reduce: FunctionCall */
			nil,         /* in */
			reduce(104), /* function, reduce: FunctionCall */
			reduce(104), /* local, reduce: FunctionCall */
			reduce(104), /* ::, reduce: FunctionCall */
			reduce(104), /* ., reduce: FunctionCall */
			reduce(104), /* :, reduce: FunctionCall */
			reduce(104), /* or, reduce: FunctionCall */
			reduce(104), /* and, reduce: FunctionCall */
			reduce(104), /* <, reduce: FunctionCall */
			reduce(104), /* <=, reduce: FunctionCall */
			reduce(104), /* >, reduce: FunctionCall */
			reduce(104), /* >=, reduce: FunctionCall */
			reduce(104), /* ==, reduce: FunctionCall */
			reduce(104), /* ~=, reduce: FunctionCall */
			reduce(104), /* |, reduce: FunctionCall */
			reduce(104), /* ~, reduce: FunctionCall */
			reduce(104), /* &, reduce: FunctionCall */
			reduce(104), /* .., reduce: FunctionCall */
			reduce(104), /* <<, reduce: FunctionCall */
			reduce(104), /* >>, reduce: FunctionCall */
			reduce(104), /* +, reduce: FunctionCall */
			reduce(104), /* -, reduce: FunctionCall */
			reduce(104), /* *, reduce: FunctionCall */
			reduce(104), /* /, reduce: FunctionCall */
			reduce(104), /* %, reduce: FunctionCall */
			reduce(104), /* //, reduce: FunctionCall */
			nil,         /* not */
			nil,         /* # */
			reduce(104), /* ^, reduce: FunctionCall */
			reduce(104), /* [, reduce: FunctionCall */
			nil,         /* ] */
			reduce(104), /* (, reduce: FunctionCall */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(104), /* string, reduce: FunctionCall */
			reduce(104), /* {, reduce: FunctionCall */
			nil,         /* } */
			reduce(104), /* ident, reduce: FunctionCall */
		},
	},
	actionRow{ // S1704
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(98), /* $, reduce: Var */
			reduce(98), /* return, reduce: Var */
			reduce(98), /* ;, reduce: Var */
			nil,        /* empty */
			nil,        /* = */
			reduce(98), /* break, reduce: Var */
			reduce(98), /* goto, reduce: Var */
			reduce(98), /* do, reduce: Var */
			nil,        /* end */
			reduce(98), /* while, reduce: Var */
			reduce(98), /* repeat, reduce: Var */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(98), /* if, reduce: Var */
			nil,        /* , */
			reduce(98), /* for, reduce: Var */
			nil,        /* in */
			reduce(98), /* function, reduce: Var */
			reduce(98), /* local, reduce: Var */
			reduce(98), /* ::, reduce: Var */
			reduce(98), /* ., reduce: Var */
			reduce(98), /* :, reduce: Var */
			reduce(98), /* or, reduce: Var */
			reduce(98), /* and, reduce: Var */
			reduce(98), /* <, reduce: Var */
			reduce(98), /* <=, reduce: Var */
			reduce(98), /* >, reduce: Var */
			reduce(98), /* >=, reduce: Var */
			reduce(98), /* ==, reduce: Var */
			reduce(98), /* ~=, reduce: Var */
			reduce(98), /* |, reduce: Var */
			reduce(98), /* ~, reduce: Var */
			reduce(98), /* &, reduce: Var */
			reduce(98), /* .., reduce: Var */
			reduce(98), /* <<, reduce: Var */
			reduce(98), /* >>, reduce: Var */
			reduce(98), /* +, reduce: Var */
			reduce(98), /* -, reduce: Var */
			reduce(98), /* *, reduce: Var */
			reduce(98), /* /, reduce: Var */
			reduce(98), /* %, reduce: Var */
			reduce(98), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(98), /* ^, reduce: Var */
			reduce(98), /* [, reduce: Var */
			nil,        /* ] */
			reduce(98), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(98), /* string, reduce: Var */
			reduce(98), /* {, reduce: Var */
			nil,        /* } */
			reduce(98), /* ident, reduce: Var */
		},
	},
	actionRow{ // S1705
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(116), /* $, reduce: Args */
			reduce(116), /* return, reduce: Args */
			reduce(116), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			reduce(116), /* break, reduce: Args */
			reduce(116), /* goto, reduce: Args */
			reduce(116), /* do, reduce: Args */
			nil,         /* end */
			reduce(116), /* while, reduce: Args */
			reduce(116), /* repeat, reduce: Args */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(116), /* if, reduce: Args */
			nil,         /* , */
			reduce(116), /* for, reduce: Args */
			nil,         /* in */
			reduce(116), /* function, reduce: Args */
			reduce(116), /* local, reduce: Args */
			reduce(116), /* ::, reduce: Args */
			reduce(116), /* ., reduce: Args */
			reduce(116), /* :, reduce: Args */
			reduce(116), /* or, reduce: Args */
			reduce(116), /* and, reduce: Args */
			reduce(116), /* <, reduce: Args */
			reduce(116), /* <=, reduce: Args */
			reduce(116), /* >, reduce: Args */
			reduce(116), /* >=, reduce: Args */
			reduce(116), /* ==, reduce: Args */
			reduce(116), /* ~=, reduce: Args */
			reduce(116), /* |, reduce: Args */
			reduce(116), /* ~, reduce: Args */
			reduce(116), /* &, reduce: Args */
			reduce(116), /* .., reduce: Args */
			reduce(116), /* <<, reduce: Args */
			reduce(116), /* >>, reduce: Args */
			reduce(116), /* +, reduce: Args */
			reduce(116), /* -, reduce: Args */
			reduce(116), /* *, reduce: Args */
			reduce(116), /* /, reduce: Args */
			reduce(116), /* %, reduce: Args */
			reduce(116), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(116), /* ^, reduce: Args */
			reduce(116), /* [, reduce: Args */
			nil,         /* ] */
			reduce(116), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(116), /* string, reduce: Args */
			reduce(116), /* {, reduce: Args */
			nil,         /* } */
			reduce(116), /* ident, reduce: Args */
		},
	},
	actionRow{ // S1706
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(125), /* $, reduce: TableConstructor */
			reduce(125), /* return, reduce: TableConstructor */
			reduce(125), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			reduce(125), /* break, reduce: TableConstructor */
			reduce(125), /* goto, reduce: TableConstructor */
			reduce(125), /* do, reduce: TableConstructor */
			nil,         /* end */
			reduce(125), /* while, reduce: TableConstructor */
			reduce(125), /* repeat, reduce: TableConstructor */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(125), /* if, reduce: TableConstructor */
			nil,         /* , */
			reduce(125), /* for, reduce: TableConstructor */
			nil,         /* in */
			reduce(125), /* function, reduce: TableConstructor */
			reduce(125), /* local, reduce: TableConstructor */
			reduce(125), /* ::, reduce: TableConstructor */
			reduce(125), /* ., reduce: TableConstructor */
			reduce(125), /* :, reduce: TableConstructor */
			reduce(125), /* or, reduce: TableConstructor */
			reduce(125), /* and, reduce: TableConstructor */
			reduce(125), /* <, reduce: TableConstructor */
			reduce(125), /* <=, reduce: TableConstructor */
			reduce(125), /* >, reduce: TableConstructor */
			reduce(125), /* >=, reduce: TableConstructor */
			reduce(125), /* ==, reduce: TableConstructor */
			reduce(125), /* ~=, reduce: TableConstructor */
			reduce(125), /* |, reduce: TableConstructor */
			reduce(125), /* ~, reduce: TableConstructor */
			reduce(125), /* &, reduce: TableConstructor */
			reduce(125), /* .., reduce: TableConstructor */
			reduce(125), /* <<, reduce: TableConstructor */
			reduce(125), /* >>, reduce: TableConstructor */
			reduce(125), /* +, reduce: TableConstructor */
			reduce(125), /* -, reduce: TableConstructor */
			reduce(125), /* *, reduce: TableConstructor */
			reduce(125), /* /, reduce: TableConstructor */
			reduce(125), /* %, reduce: TableConstructor */
			reduce(125), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(125), /* ^, reduce: TableConstructor */
			reduce(125), /* [, reduce: TableConstructor */
			nil,         /* ] */
			reduce(125), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(125), /* string, reduce: TableConstructor */
			reduce(125), /* {, reduce: TableConstructor */
			nil,         /* } */
			reduce(125), /* ident, reduce: TableConstructor */
		},
	},
	actionRow{ // S1707
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(238),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			shift(254),  /* [ */
			nil,         /* ] */
			shift(255),  /* ( */
			nil,         /* ) */
			shift(256),  /* nil */
			shift(257),  /* true */
			shift(258),  /* false */
			shift(259),  /* ... */
			shift(260),  /* numdec */
			shift(261),  /* numhex */
			shift(262),  /* string */
			shift(265),  /* { */
			shift(1907), /* } */
			shift(268),  /* ident */
		},
	},
	actionRow{ // S1708
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(126), /* $, reduce: TableConstructor */
			reduce(126), /* return, reduce: TableConstructor */
			reduce(126), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			reduce(126), /* break, reduce: TableConstructor */
			reduce(126), /* goto, reduce: TableConstructor */
			reduce(126), /* do, reduce: TableConstructor */
			nil,         /* end */
			reduce(126), /* while, reduce: TableConstructor */
			reduce(126), /* repeat, reduce: TableConstructor */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(126), /* if, reduce: TableConstructor */
			nil,         /* , */
			reduce(126), /* for, reduce: TableConstructor */
			nil,         /* in */
			reduce(126), /* function, reduce: TableConstructor */
			reduce(126), /* local, reduce: TableConstructor */
			reduce(126), /* ::, reduce: TableConstructor */
			nil,         /* . */
			nil,         /* : */
			reduce(126), /* or, reduce: TableConstructor */
			reduce(126), /* and, reduce: TableConstructor */
			reduce(126), /* <, reduce: TableConstructor */
			reduce(126), /* <=, reduce: TableConstructor */
			reduce(126), /* >, reduce: TableConstructor */
			reduce(126), /* >=, reduce: TableConstructor */
			reduce(126), /* ==, reduce: TableConstructor */
			reduce(126), /* ~=, reduce: TableConstructor */
			reduce(126), /* |, reduce: TableConstructor */
			reduce(126), /* ~, reduce: TableConstructor */
			reduce(126), /* &, reduce: TableConstructor */
			reduce(126), /* .., reduce: TableConstructor */
			reduce(126), /* <<, reduce: TableConstructor */
			reduce(126), /* >>, reduce: TableConstructor */
			reduce(126), /* +, reduce: TableConstructor */
			reduce(126), /* -, reduce: TableConstructor */
			reduce(126), /* *, reduce: TableConstructor */
			reduce(126), /* /, reduce: TableConstructor */
			reduce(126), /* %, reduce: TableConstructor */
			reduce(126), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(126), /* ^, reduce: TableConstructor */
			nil,         /* [ */
			nil,         /* ] */
			reduce(126), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(126), /* ident, reduce: TableConstructor */
		},
	},
	actionRow{ // S1709
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S1710
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(104), /* ;, reduce: FunctionCall */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			reduce(104), /* until, reduce: FunctionCall */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(104), /* ,, reduce: FunctionCall */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(104), /* ., reduce: FunctionCall */
			reduce(104), /* :, reduce: FunctionCall */
			reduce(104), /* or, reduce: FunctionCall */
			reduce(104), /* and, reduce: FunctionCall */
			reduce(104), /* <, reduce: FunctionCall */
			reduce(104), /* <=, reduce: FunctionCall */
			reduce(104), /* >, reduce: FunctionCall */
			reduce(104), /* >=, reduce: FunctionCall */
			reduce(104), /* ==, reduce: FunctionCall */
			reduce(104), /* ~=, reduce: FunctionCall */
			reduce(104), /* |, reduce: FunctionCall */
			reduce(104), /* ~, reduce: FunctionCall */
			reduce(104), /* &, reduce: FunctionCall */
			reduce(104), /* .., reduce: FunctionCall */
			reduce(104), /* <<, reduce: FunctionCall */
			reduce(104), /* >>, reduce: FunctionCall */
			reduce(104), /* +, reduce: FunctionCall */
			reduce(104), /* -, reduce: FunctionCall */
			reduce(104), /* *, reduce: FunctionCall */
			reduce(104), /* /, reduce: FunctionCall */
			reduce(104), /* %, reduce: FunctionCall */
			reduce(104), /* //, reduce: FunctionCall */
			nil,         /* not */
			nil,         /* # */
			reduce(104), /* ^, reduce: FunctionCall */
			reduce(104), /* [, reduce: FunctionCall */
			nil,         /* ] */
			reduce(104), /* (, reduce: FunctionCall */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(104), /* string, reduce: FunctionCall */
			reduce(104), /* {, reduce: FunctionCall */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1711
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(98), /* ;, reduce: Var */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			reduce(98), /* until, reduce: Var */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(98), /* ,, reduce: Var */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			reduce(98), /* ., reduce: Var */
			reduce(98), /* :, reduce: Var */
			reduce(98), /* or, reduce: Var */
			reduce(98), /* and, reduce: Var */
			reduce(98), /* <, reduce: Var */
			reduce(98), /* <=, reduce: Var */
			reduce(98), /* >, reduce: Var */
			reduce(98), /* >=, reduce: Var */
			reduce(98), /* ==, reduce: Var */
			reduce(98), /* ~=, reduce: Var */
			reduce(98), /* |, reduce: Var */
			reduce(98), /* ~, reduce: Var */
			reduce(98), /* &, reduce: Var */
			reduce(98), /* .., reduce: Var */
			reduce(98), /* <<, reduce: Var */
			reduce(98), /* >>, reduce: Var */
			reduce(98), /* +, reduce: Var */
			reduce(98), /* -, reduce: Var */
			reduce(98), /* *, reduce: Var */
			reduce(98), /* /, reduce: Var */
			reduce(98), /* %, reduce: Var */
			reduce(98), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(98), /* ^, reduce: Var */
			reduce(98), /* [, reduce: Var */
			nil,        /* ] */
			reduce(98), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(98), /* string, reduce: Var */
			reduce(98), /* {, reduce: Var */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1712
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(116), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			reduce(116), /* until, reduce: Args */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(116), /* ,, reduce: Args */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(116), /* ., reduce: Args */
			reduce(116), /* :, reduce: Args */
			reduce(116), /* or, reduce: Args */
			reduce(116), /* and, reduce: Args */
			reduce(116), /* <, reduce: Args */
			reduce(116), /* <=, reduce: Args */
			reduce(116), /* >, reduce: Args */
			reduce(116), /* >=, reduce: Args */
			reduce(116), /* ==, reduce: Args */
			reduce(116), /* ~=, reduce: Args */
			reduce(116), /* |, reduce: Args */
			reduce(116), /* ~, reduce: Args */
			reduce(116), /* &, reduce: Args */
			reduce(116), /* .., reduce: Args */
			reduce(116), /* <<, reduce: Args */
			reduce(116), /* >>, reduce: Args */
			reduce(116), /* +, reduce: Args */
			reduce(116), /* -, reduce: Args */
			reduce(116), /* *, reduce: Args */
			reduce(116), /* /, reduce: Args */
			reduce(116), /* %, reduce: Args */
			reduce(116), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(116), /* ^, reduce: Args */
			reduce(116), /* [, reduce: Args */
			nil,         /* ] */
			reduce(116), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(116), /* string, reduce: Args */
			reduce(116), /* {, reduce: Args */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1713
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(125), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			reduce(125), /* until, reduce: TableConstructor */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(125), /* ,, reduce: TableConstructor */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(125), /* ., reduce: TableConstructor */
			reduce(125), /* :, reduce: TableConstructor */
			reduce(125), /* or, reduce: TableConstructor */
			reduce(125), /* and, reduce: TableConstructor */
			reduce(125), /* <, reduce: TableConstructor */
			reduce(125), /* <=, reduce: TableConstructor */
			reduce(125), /* >, reduce: TableConstructor */
			reduce(125), /* >=, reduce: TableConstructor */
			reduce(125), /* ==, reduce: TableConstructor */
			reduce(125), /* ~=, reduce: TableConstructor */
			reduce(125), /* |, reduce: TableConstructor */
			reduce(125), /* ~, reduce: TableConstructor */
			reduce(125), /* &, reduce: TableConstructor */
			reduce(125), /* .., reduce: TableConstructor */
			reduce(125), /* <<, reduce: TableConstructor */
			reduce(125), /* >>, reduce: TableConstructor */
			reduce(125), /* +, reduce: TableConstructor */
			reduce(125), /* -, reduce: TableConstructor */
			reduce(125), /* *, reduce: TableConstructor */
			reduce(125), /* /, reduce: TableConstructor */
			reduce(125), /* %, reduce: TableConstructor */
			reduce(125), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(125), /* ^, reduce: TableConstructor */
			reduce(125), /* [, reduce: TableConstructor */
			nil,         /* ] */
			reduce(125), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(125), /* string, reduce: TableConstructor */
			reduce(125), /* {, reduce: TableConstructor */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1714
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(238),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			shift(254),  /* [ */
			nil,         /* ] */
			shift(255),  /* ( */
			nil,         /* ) */
			shift(256),  /* nil */
			shift(257),  /* true */
			shift(258),  /* false */
			shift(259),  /* ... */
			shift(260),  /* numdec */
			shift(261),  /* numhex */
			shift(262),  /* string */
			shift(265),  /* { */
			shift(1909), /* } */
			shift(268),  /* ident */
		},
	},
	actionRow{ // S1715
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(126), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			reduce(126), /* until, reduce: TableConstructor */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(126), /* ,, reduce: TableConstructor */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(126), /* or, reduce: TableConstructor */
			reduce(126), /* and, reduce: TableConstructor */
			reduce(126), /* <, reduce: TableConstructor */
			reduce(126), /* <=, reduce: TableConstructor */
			reduce(126), /* >, reduce: TableConstructor */
			reduce(126), /* >=, reduce: TableConstructor */
			reduce(126), /* ==, reduce: TableConstructor */
			reduce(126), /* ~=, reduce: TableConstructor */
			reduce(126), /* |, reduce: TableConstructor */
			reduce(126), /* ~, reduce: TableConstructor */
			reduce(126), /* &, reduce: TableConstructor */
			reduce(126), /* .., reduce: TableConstructor */
			reduce(126), /* <<, reduce: TableConstructor */
			reduce(126), /* >>, reduce: TableConstructor */
			reduce(126), /* +, reduce: TableConstructor */
			reduce(126), /* -, reduce: TableConstructor */
			reduce(126), /* *, reduce: TableConstructor */
			reduce(126), /* /, reduce: TableConstructor */
			reduce(126), /* %, reduce: TableConstructor */
			reduce(126), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(126), /* ^, reduce: TableConstructor */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1716
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(54),  /* return, reduce: ExpList */
			reduce(54),  /* ;, reduce: ExpList */
			nil,         /* empty */
			nil,         /* = */
			reduce(54),  /* break, reduce: ExpList */
			reduce(54),  /* goto, reduce: ExpList */
			reduce(54),  /* do, reduce: ExpList */
			nil,         /* end */
			reduce(54),  /* while, reduce: ExpList */
			reduce(54),  /* repeat, reduce: ExpList */
			reduce(54),  /* until, reduce: ExpList */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(54),  /* if, reduce: ExpList */
			reduce(54),  /* ,, reduce: ExpList */
			reduce(54),  /* for, reduce: ExpList */
			nil,         /* in */
			reduce(54),  /* function, reduce: ExpList */
			reduce(54),  /* local, reduce: ExpList */
			reduce(54),  /* ::, reduce: ExpList */
			nil,         /* . */
			nil,         /* : */
			shift(1453), /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(54),  /* (, reduce: ExpList */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(54),  /* ident, reduce: ExpList */
		},
	},
	actionRow{ // S1717
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(56),  /* return, reduce: Exp */
			reduce(56),  /* ;, reduce: Exp */
			nil,         /* empty */
			nil,         /* = */
			reduce(56),  /* break, reduce: Exp */
			reduce(56),  /* goto, reduce: Exp */
			reduce(56),  /* do, reduce: Exp */
			nil,         /* end */
			reduce(56),  /* while, reduce: Exp */
			reduce(56),  /* repeat, reduce: Exp */
			reduce(56),  /* until, reduce: Exp */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(56),  /* if, reduce: Exp */
			reduce(56),  /* ,, reduce: Exp */
			reduce(56),  /* for, reduce: Exp */
			nil,         /* in */
			reduce(56),  /* function, reduce: Exp */
			reduce(56),  /* local, reduce: Exp */
			reduce(56),  /* ::, reduce: Exp */
			nil,         /* . */
			nil,         /* : */
			reduce(56),  /* or, reduce: Exp */
			shift(1456), /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(56),  /* (, reduce: Exp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(56),  /* ident, reduce: Exp */
		},
	},
	actionRow{ // S1718
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(1910), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1719
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(58), /* return, reduce: AndExp */
			reduce(58), /* ;, reduce: AndExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(58), /* break, reduce: AndExp */
			reduce(58), /* goto, reduce: AndExp */
			reduce(58), /* do, reduce: AndExp */
			nil,        /* end */
			reduce(58), /* while, reduce: AndExp */
			reduce(58), /* repeat, reduce: AndExp */
			reduce(58), /* until, reduce: AndExp */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(58), /* if, reduce: AndExp */
			reduce(58), /* ,, reduce: AndExp */
			reduce(58), /* for, reduce: AndExp */
			nil,        /* in */
			reduce(58), /* function, reduce: AndExp */
			reduce(58), /* local, reduce: AndExp */
			reduce(58), /* ::, reduce: AndExp */
			nil,        /* . */
			nil,        /* : */
			reduce(58), /* or, reduce: AndExp */
			reduce(58), /* and, reduce: AndExp */
			shift(203), /* < */
			shift(204), /* <= */
			shift(205), /* > */
			shift(206), /* >= */
			shift(207), /* == */
			shift(208), /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(58), /* (, reduce: AndExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(58), /* ident, reduce: AndExp */
		},
	},
	actionRow{ // S1720
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(66),  /* return, reduce: CompExp */
			reduce(66),  /* ;, reduce: CompExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(66),  /* break, reduce: CompExp */
			reduce(66),  /* goto, reduce: CompExp */
			reduce(66),  /* do, reduce: CompExp */
			nil,         /* end */
			reduce(66),  /* while, reduce: CompExp */
			reduce(66),  /* repeat, reduce: CompExp */
			reduce(66),  /* until, reduce: CompExp */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(66),  /* if, reduce: CompExp */
			reduce(66),  /* ,, reduce: CompExp */
			reduce(66),  /* for, reduce: CompExp */
			nil,         /* in */
			reduce(66),  /* function, reduce: CompExp */
			reduce(66),  /* local, reduce: CompExp */
			reduce(66),  /* ::, reduce: CompExp */
			nil,         /* . */
			nil,         /* : */
			reduce(66),  /* or, reduce: CompExp */
			reduce(66),  /* and, reduce: CompExp */
			reduce(66),  /* <, reduce: CompExp */
			reduce(66),  /* <=, reduce: CompExp */
			reduce(66),  /* >, reduce: CompExp */
			reduce(66),  /* >=, reduce: CompExp */
			reduce(66),  /* ==, reduce: CompExp */
			reduce(66),  /* ~=, reduce: CompExp */
			shift(1458), /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(66),  /* (, reduce: CompExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(66),  /* ident, reduce: CompExp */
		},
	},
	actionRow{ // S1721
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(68),  /* return, reduce: BitOrExp */
			reduce(68),  /* ;, reduce: BitOrExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(68),  /* break, reduce: BitOrExp */
			reduce(68),  /* goto, reduce: BitOrExp */
			reduce(68),  /* do, reduce: BitOrExp */
			nil,         /* end */
			reduce(68),  /* while, reduce: BitOrExp */
			reduce(68),  /* repeat, reduce: BitOrExp */
			reduce(68),  /* until, reduce: BitOrExp */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(68),  /* if, reduce: BitOrExp */
			reduce(68),  /* ,, reduce: BitOrExp */
			reduce(68),  /* for, reduce: BitOrExp */
			nil,         /* in */
			reduce(68),  /* function, reduce: BitOrExp */
			reduce(68),  /* local, reduce: BitOrExp */
			reduce(68),  /* ::, reduce: BitOrExp */
			nil,         /* . */
			nil,         /* : */
			reduce(68),  /* or, reduce: BitOrExp */
			reduce(68),  /* and, reduce: BitOrExp */
			reduce(68),  /* <, reduce: BitOrExp */
			reduce(68),  /* <=, reduce: BitOrExp */
			reduce(68),  /* >, reduce: BitOrExp */
			reduce(68),  /* >=, reduce: BitOrExp */
			reduce(68),  /* ==, reduce: BitOrExp */
			reduce(68),  /* ~=, reduce: BitOrExp */
			reduce(68),  /* |, reduce: BitOrExp */
			shift(1459), /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(68),  /* (, reduce: BitOrExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(68),  /* ident, reduce: BitOrExp */
		},
	},
	actionRow{ // S1722
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(70),  /* return, reduce: BitXorExp */
			reduce(70),  /* ;, reduce: BitXorExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(70),  /* break, reduce: BitXorExp */
			reduce(70),  /* goto, reduce: BitXorExp */
			reduce(70),  /* do, reduce: BitXorExp */
			nil,         /* end */
			reduce(70),  /* while, reduce: BitXorExp */
			reduce(70),  /* repeat, reduce: BitXorExp */
			reduce(70),  /* until, reduce: BitXorExp */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(70),  /* if, reduce: BitXorExp */
			reduce(70),  /* ,, reduce: BitXorExp */
			reduce(70),  /* for, reduce: BitXorExp */
			nil,         /* in */
			reduce(70),  /* function, reduce: BitXorExp */
			reduce(70),  /* local, reduce: BitXorExp */
			reduce(70),  /* ::, reduce: BitXorExp */
			nil,         /* . */
			nil,         /* : */
			reduce(70),  /* or, reduce: BitXorExp */
			reduce(70),  /* and, reduce: BitXorExp */
			reduce(70),  /* <, reduce: BitXorExp */
			reduce(70),  /* <=, reduce: BitXorExp */
			reduce(70),  /* >, reduce: BitXorExp */
			reduce(70),  /* >=, reduce: BitXorExp */
			reduce(70),  /* ==, reduce: BitXorExp */
			reduce(70),  /* ~=, reduce: BitXorExp */
			reduce(70),  /* |, reduce: BitXorExp */
			reduce(70),  /* ~, reduce: BitXorExp */
			shift(1460), /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(70),  /* (, reduce: BitXorExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(70),  /* ident, reduce: BitXorExp */
		},
	},
	actionRow{ // S1723
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(72),  /* return, reduce: BitAndExp */
			reduce(72),  /* ;, reduce: BitAndExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(72),  /* break, reduce: BitAndExp */
			reduce(72),  /* goto, reduce: BitAndExp */
			reduce(72),  /* do, reduce: BitAndExp */
			nil,         /* end */
			reduce(72),  /* while, reduce: BitAndExp */
			reduce(72),  /* repeat, reduce: BitAndExp */
			reduce(72),  /* until, reduce: BitAndExp */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(72),  /* if, reduce: BitAndExp */
			reduce(72),  /* ,, reduce: BitAndExp */
			reduce(72),  /* for, reduce: BitAndExp */
			nil,         /* in */
			reduce(72),  /* function, reduce: BitAndExp */
			reduce(72),  /* local, reduce: BitAndExp */
			reduce(72),  /* ::, reduce: BitAndExp */
			nil,         /* . */
			nil,         /* : */
			reduce(72),  /* or, reduce: BitAndExp */
			reduce(72),  /* and, reduce: BitAndExp */
			reduce(72),  /* <, reduce: BitAndExp */
			reduce(72),  /* <=, reduce: BitAndExp */
			reduce(72),  /* >, reduce: BitAndExp */
			reduce(72),  /* >=, reduce: BitAndExp */
			reduce(72),  /* ==, reduce: BitAndExp */
			reduce(72),  /* ~=, reduce: BitAndExp */
			reduce(72),  /* |, reduce: BitAndExp */
			reduce(72),  /* ~, reduce: BitAndExp */
			reduce(72),  /* &, reduce: BitAndExp */
			shift(1461), /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(72),  /* (, reduce: BitAndExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(72),  /* ident, reduce: BitAndExp */
		},
	},
	actionRow{ // S1724
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(74), /* return, reduce: ConcatExp */
			reduce(74), /* ;, reduce: ConcatExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(74), /* break, reduce: ConcatExp */
			reduce(74), /* goto, reduce: ConcatExp */
			reduce(74), /* do, reduce: ConcatExp */
			nil,        /* end */
			reduce(74), /* while, reduce: ConcatExp */
			reduce(74), /* repeat, reduce: ConcatExp */
			reduce(74), /* until, reduce: ConcatExp */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(74), /* if, reduce: ConcatExp */
			reduce(74), /* ,, reduce: ConcatExp */
			reduce(74), /* for, reduce: ConcatExp */
			nil,        /* in */
			reduce(74), /* function, reduce: ConcatExp */
			reduce(74), /* local, reduce: ConcatExp */
			reduce(74), /* ::, reduce: ConcatExp */
			nil,        /* . */
			nil,        /* : */
			reduce(74), /* or, reduce: ConcatExp */
			reduce(74), /* and, reduce: ConcatExp */
			reduce(74), /* <, reduce: ConcatExp */
			reduce(74), /* <=, reduce: ConcatExp */
			reduce(74), /* >, reduce: ConcatExp */
			reduce(74), /* >=, reduce: ConcatExp */
			reduce(74), /* ==, reduce: ConcatExp */
			reduce(74), /* ~=, reduce: ConcatExp */
			reduce(74), /* |, reduce: ConcatExp */
			reduce(74), /* ~, reduce: ConcatExp */
			reduce(74), /* &, reduce: ConcatExp */
			reduce(74), /* .., reduce: ConcatExp */
			shift(214), /* << */
			shift(215), /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(74), /* (, reduce: ConcatExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(74), /* ident, reduce: ConcatExp */
		},
	},
	actionRow{ // S1725
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(78), /* return, reduce: ShiftExp */
			reduce(78), /* ;, reduce: ShiftExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(78), /* break, reduce: ShiftExp */
			reduce(78), /* goto, reduce: ShiftExp */
			reduce(78), /* do, reduce: ShiftExp */
			nil,        /* end */
			reduce(78), /* while, reduce: ShiftExp */
			reduce(78), /* repeat, reduce: ShiftExp */
			reduce(78), /* until, reduce: ShiftExp */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(78), /* if, reduce: ShiftExp */
			reduce(78), /* ,, reduce: ShiftExp */
			reduce(78), /* for, reduce: ShiftExp */
			nil,        /* in */
			reduce(78), /* function, reduce: ShiftExp */
			reduce(78), /* local, reduce: ShiftExp */
			reduce(78), /* ::, reduce: ShiftExp */
			nil,        /* . */
			nil,        /* : */
			reduce(78), /* or, reduce: ShiftExp */
			reduce(78), /* and, reduce: ShiftExp */
			reduce(78), /* <, reduce: ShiftExp */
			reduce(78), /* <=, reduce: ShiftExp */
			reduce(78), /* >, reduce: ShiftExp */
			reduce(78), /* >=, reduce: ShiftExp */
			reduce(78), /* ==, reduce: ShiftExp */
			reduce(78), /* ~=, reduce: ShiftExp */
			reduce(78), /* |, reduce: ShiftExp */
			reduce(78), /* ~, reduce: ShiftExp */
			reduce(78), /* &, reduce: ShiftExp */
			reduce(78), /* .., reduce: ShiftExp */
			reduce(78), /* <<, reduce: ShiftExp */
			reduce(78), /* >>, reduce: ShiftExp */
			shift(217), /* + */
			shift(218), /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(78), /* (, reduce: ShiftExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(78), /* ident, reduce: ShiftExp */
		},
	},
	actionRow{ // S1726
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(82), /* return, reduce: Sum */
			reduce(82), /* ;, reduce: Sum */
			nil,        /* empty */
			nil,        /* = */
			reduce(82), /* break, reduce: Sum */
			reduce(82), /* goto, reduce: Sum */
			reduce(82), /* do, reduce: Sum */
			nil,        /* end */
			reduce(82), /* while, reduce: Sum */
			reduce(82), /* repeat, reduce: Sum */
			reduce(82), /* until, reduce: Sum */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(82), /* if, reduce: Sum */
			reduce(82), /* ,, reduce: Sum */
			reduce(82), /* for, reduce: Sum */
			nil,        /* in */
			reduce(82), /* function, reduce: Sum */
			reduce(82), /* local, reduce: Sum */
			reduce(82), /* ::, reduce: Sum */
			nil,        /* . */
			nil,        /* : */
			reduce(82), /* or, reduce: Sum */
			reduce(82), /* and, reduce: Sum */
			reduce(82), /* <, reduce: Sum */
			reduce(82), /* <=, reduce: Sum */
			reduce(82), /* >, reduce: Sum */
			reduce(82), /* >=, reduce: Sum */
			reduce(82), /* ==, reduce: Sum */
			reduce(82), /* ~=, reduce: Sum */
			reduce(82), /* |, reduce: Sum */
			reduce(82), /* ~, reduce: Sum */
			reduce(82), /* &, reduce: Sum */
			reduce(82), /* .., reduce: Sum */
			reduce(82), /* <<, reduce: Sum */
			reduce(82), /* >>, reduce: Sum */
			reduce(82), /* +, reduce: Sum */
			reduce(82), /* -, reduce: Sum */
			shift(220), /* * */
			shift(221), /* / */
			shift(222), /* % */
			shift(223), /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(82), /* (, reduce: Sum */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(82), /* ident, reduce: Sum */
		},
	},
	actionRow{ // S1727
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(88), /* return, reduce: Term */
			reduce(88), /* ;, reduce: Term */
			nil,        /* empty */
			nil,        /* = */
			reduce(88), /* break, reduce: Term */
			reduce(88), /* goto, reduce: Term */
			reduce(88), /* do, reduce: Term */
			nil,        /* end */
			reduce(88), /* while, reduce: Term */
			reduce(88), /* repeat, reduce: Term */
			reduce(88), /* until, reduce: Term */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(88), /* if, reduce: Term */
			reduce(88), /* ,, reduce: Term */
			reduce(88), /* for, reduce: Term */
			nil,        /* in */
			reduce(88), /* function, reduce: Term */
			reduce(88), /* local, reduce: Term */
			reduce(88), /* ::, reduce: Term */
			nil,        /* . */
			nil,        /* : */
			reduce(88), /* or, reduce: Term */
			reduce(88), /* and, reduce: Term */
			reduce(88), /* <, reduce: Term */
			reduce(88), /* <=, reduce: Term */
			reduce(88), /* >, reduce: Term */
			reduce(88), /* >=, reduce: Term */
			reduce(88), /* ==, reduce: Term */
			reduce(88), /* ~=, reduce: Term */
			reduce(88), /* |, reduce: Term */
			reduce(88), /* ~, reduce: Term */
			reduce(88), /* &, reduce: Term */
			reduce(88), /* .., reduce: Term */
			reduce(88), /* <<, reduce: Term */
			reduce(88), /* >>, reduce: Term */
			reduce(88), /* +, reduce: Term */
			reduce(88), /* -, reduce: Term */
			reduce(88), /* *, reduce: Term */
			reduce(88), /* /, reduce: Term */
			reduce(88), /* %, reduce: Term */
			reduce(88), /* //, reduce: Term */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(88), /* (, reduce: Term */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(88), /* ident, reduce: Term */
		},
	},
	actionRow{ // S1728
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(96), /* return, reduce: Power */
			reduce(96), /* ;, reduce: Power */
			nil,        /* empty */
			nil,        /* = */
			reduce(96), /* break, reduce: Power */
			reduce(96), /* goto, reduce: Power */
			reduce(96), /* do, reduce: Power */
			nil,        /* end */
			reduce(96), /* while, reduce: Power */
			reduce(96), /* repeat, reduce: Power */
			reduce(96), /* until, reduce: Power */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(96), /* if, reduce: Power */
			reduce(96), /* ,, reduce: Power */
			reduce(96), /* for, reduce: Power */
			nil,        /* in */
			reduce(96), /* function, reduce: Power */
			reduce(96), /* local, reduce: Power */
			reduce(96), /* ::, reduce: Power */
			nil,        /* . */
			nil,        /* : */
			reduce(96), /* or, reduce: Power */
			reduce(96), /* and, reduce: Power */
			reduce(96), /* <, reduce: Power */
			reduce(96), /* <=, reduce: Power */
			reduce(96), /* >, reduce: Power */
			reduce(96), /* >=, reduce: Power */
			reduce(96), /* ==, reduce: Power */
			reduce(96), /* ~=, reduce: Power */
			reduce(96), /* |, reduce: Power */
			reduce(96), /* ~, reduce: Power */
			reduce(96), /* &, reduce: Power */
			reduce(96), /* .., reduce: Power */
			reduce(96), /* <<, reduce: Power */
			reduce(96), /* >>, reduce: Power */
			reduce(96), /* +, reduce: Power */
			reduce(96), /* -, reduce: Power */
			reduce(96), /* *, reduce: Power */
			reduce(96), /* /, reduce: Power */
			reduce(96), /* %, reduce: Power */
			reduce(96), /* //, reduce: Power */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(96), /* (, reduce: Power */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(96), /* ident, reduce: Power */
		},
	},
	actionRow{ // S1729
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(99), /* return, reduce: Var */
			reduce(99), /* ;, reduce: Var */
			nil,        /* empty */
			nil,        /* = */
			reduce(99), /* break, reduce: Var */
			reduce(99), /* goto, reduce: Var */
			reduce(99), /* do, reduce: Var */
			nil,        /* end */
			reduce(99), /* while, reduce: Var */
			reduce(99), /* repeat, reduce: Var */
			reduce(99), /* until, reduce: Var */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(99), /* if, reduce: Var */
			reduce(99), /* ,, reduce: Var */
			reduce(99), /* for, reduce: Var */
			nil,        /* in */
			reduce(99), /* function, reduce: Var */
			reduce(99), /* local, reduce: Var */
			reduce(99), /* ::, reduce: Var */
			reduce(99), /* ., reduce: Var */
			reduce(99), /* :, reduce: Var */
			reduce(99), /* or, reduce: Var */
			reduce(99), /* and, reduce: Var */
			reduce(99), /* <, reduce: Var */
			reduce(99), /* <=, reduce: Var */
			reduce(99), /* >, reduce: Var */
			reduce(99), /* >=, reduce: Var */
			reduce(99), /* ==, reduce: Var */
			reduce(99), /* ~=, reduce: Var */
			reduce(99), /* |, reduce: Var */
			reduce(99), /* ~, reduce: Var */
			reduce(99), /* &, reduce: Var */
			reduce(99), /* .., reduce: Var */
			reduce(99), /* <<, reduce: Var */
			reduce(99), /* >>, reduce: Var */
			reduce(99), /* +, reduce: Var */
			reduce(99), /* -, reduce: Var */
			reduce(99), /* *, reduce: Var */
			reduce(99), /* /, reduce: Var */
			reduce(99), /* %, reduce: Var */
			reduce(99), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(99), /* ^, reduce: Var */
			reduce(99), /* [, reduce: Var */
			nil,        /* ] */
			reduce(99), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(99), /* string, reduce: Var */
			reduce(99), /* {, reduce: Var */
			nil,        /* } */
			reduce(99), /* ident, reduce: Var */
		},
	},
	actionRow{ // S1730
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1470), /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			shift(1472), /* string */
			shift(1474), /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1731
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			shift(851),  /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			shift(1912), /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1732
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(876),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(1913), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1733
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(115), /* return, reduce: Args */
			reduce(115), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			reduce(115), /* break, reduce: Args */
			reduce(115), /* goto, reduce: Args */
			reduce(115), /* do, reduce: Args */
			nil,         /* end */
			reduce(115), /* while, reduce: Args */
			reduce(115), /* repeat, reduce: Args */
			reduce(115), /* until, reduce: Args */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(115), /* if, reduce: Args */
			reduce(115), /* ,, reduce: Args */
			reduce(115), /* for, reduce: Args */
			nil,         /* in */
			reduce(115), /* function, reduce: Args */
			reduce(115), /* local, reduce: Args */
			reduce(115), /* ::, reduce: Args */
			reduce(115), /* ., reduce: Args */
			reduce(115), /* :, reduce: Args */
			reduce(115), /* or, reduce: Args */
			reduce(115), /* and, reduce: Args */
			reduce(115), /* <, reduce: Args */
			reduce(115), /* <=, reduce: Args */
			reduce(115), /* >, reduce: Args */
			reduce(115), /* >=, reduce: Args */
			reduce(115), /* ==, reduce: Args */
			reduce(115), /* ~=, reduce: Args */
			reduce(115), /* |, reduce: Args */
			reduce(115), /* ~, reduce: Args */
			reduce(115), /* &, reduce: Args */
			reduce(115), /* .., reduce: Args */
			reduce(115), /* <<, reduce: Args */
			reduce(115), /* >>, reduce: Args */
			reduce(115), /* +, reduce: Args */
			reduce(115), /* -, reduce: Args */
			reduce(115), /* *, reduce: Args */
			reduce(115), /* /, reduce: Args */
			reduce(115), /* %, reduce: Args */
			reduce(115), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(115), /* ^, reduce: Args */
			reduce(115), /* [, reduce: Args */
			nil,         /* ] */
			reduce(115), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(115), /* string, reduce: Args */
			reduce(115), /* {, reduce: Args */
			nil,         /* } */
			reduce(115), /* ident, reduce: Args */
		},
	},
	actionRow{ // S1734
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			shift(569),  /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(570),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			shift(1914), /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1735
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(102), /* return, reduce: PrefixExp */
			reduce(102), /* ;, reduce: PrefixExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(102), /* break, reduce: PrefixExp */
			reduce(102), /* goto, reduce: PrefixExp */
			reduce(102), /* do, reduce: PrefixExp */
			nil,         /* end */
			reduce(102), /* while, reduce: PrefixExp */
			reduce(102), /* repeat, reduce: PrefixExp */
			reduce(102), /* until, reduce: PrefixExp */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(102), /* if, reduce: PrefixExp */
			reduce(102), /* ,, reduce: PrefixExp */
			reduce(102), /* for, reduce: PrefixExp */
			nil,         /* in */
			reduce(102), /* function, reduce: PrefixExp */
			reduce(102), /* local, reduce: PrefixExp */
			reduce(102), /* ::, reduce: PrefixExp */
			reduce(102), /* ., reduce: PrefixExp */
			reduce(102), /* :, reduce: PrefixExp */
			reduce(102), /* or, reduce: PrefixExp */
			reduce(102), /* and, reduce: PrefixExp */
			reduce(102), /* <, reduce: PrefixExp */
			reduce(102), /* <=, reduce: PrefixExp */
			reduce(102), /* >, reduce: PrefixExp */
			reduce(102), /* >=, reduce: PrefixExp */
			reduce(102), /* ==, reduce: PrefixExp */
			reduce(102), /* ~=, reduce: PrefixExp */
			reduce(102), /* |, reduce: PrefixExp */
			reduce(102), /* ~, reduce: PrefixExp */
			reduce(102), /* &, reduce: PrefixExp */
			reduce(102), /* .., reduce: PrefixExp */
			reduce(102), /* <<, reduce: PrefixExp */
			reduce(102), /* >>, reduce: PrefixExp */
			reduce(102), /* +, reduce: PrefixExp */
			reduce(102), /* -, reduce: PrefixExp */
			reduce(102), /* *, reduce: PrefixExp */
			reduce(102), /* /, reduce: PrefixExp */
			reduce(102), /* %, reduce: PrefixExp */
			reduce(102), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(102), /* ^, reduce: PrefixExp */
			reduce(102), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(102), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(102), /* string, reduce: PrefixExp */
			reduce(102), /* {, reduce: PrefixExp */
			nil,         /* } */
			reduce(102), /* ident, reduce: PrefixExp */
		},
	},
	actionRow{ // S1736
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(125), /* return, reduce: TableConstructor */
			reduce(125), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			reduce(125), /* break, reduce: TableConstructor */
			reduce(125), /* goto, reduce: TableConstructor */
			reduce(125), /* do, reduce: TableConstructor */
			nil,         /* end */
			reduce(125), /* while, reduce: TableConstructor */
			reduce(125), /* repeat, reduce: TableConstructor */
			reduce(125), /* until, reduce: TableConstructor */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(125), /* if, reduce: TableConstructor */
			reduce(125), /* ,, reduce: TableConstructor */
			reduce(125), /* for, reduce: TableConstructor */
			nil,         /* in */
			reduce(125), /* function, reduce: TableConstructor */
			reduce(125), /* local, reduce: TableConstructor */
			reduce(125), /* ::, reduce: TableConstructor */
			nil,         /* . */
			nil,         /* : */
			reduce(125), /* or, reduce: TableConstructor */
			reduce(125), /* and, reduce: TableConstructor */
			reduce(125), /* <, reduce: TableConstructor */
			reduce(125), /* <=, reduce: TableConstructor */
			reduce(125), /* >, reduce: TableConstructor */
			reduce(125), /* >=, reduce: TableConstructor */
			reduce(125), /* ==, reduce: TableConstructor */
			reduce(125), /* ~=, reduce: TableConstructor */
			reduce(125), /* |, reduce: TableConstructor */
			reduce(125), /* ~, reduce: TableConstructor */
			reduce(125), /* &, reduce: TableConstructor */
			reduce(125), /* .., reduce: TableConstructor */
			reduce(125), /* <<, reduce: TableConstructor */
			reduce(125), /* >>, reduce: TableConstructor */
			reduce(125), /* +, reduce: TableConstructor */
			reduce(125), /* -, reduce: TableConstructor */
			reduce(125), /* *, reduce: TableConstructor */
			reduce(125), /* /, reduce: TableConstructor */
			reduce(125), /* %, reduce: TableConstructor */
			reduce(125), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(125), /* ^, reduce: TableConstructor */
			nil,         /* [ */
			nil,         /* ] */
			reduce(125), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(125), /* ident, reduce: TableConstructor */
		},
	},
	actionRow{ // S1737
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(238),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			shift(254),  /* [ */
			nil,         /* ] */
			shift(255),  /* ( */
			nil,         /* ) */
			shift(256),  /* nil */
			shift(257),  /* true */
			shift(258),  /* false */
			shift(259),  /* ... */
			shift(260),  /* numdec */
			shift(261),  /* numhex */
			shift(262),  /* string */
			shift(265),  /* { */
			shift(1916), /* } */
			shift(268),  /* ident */
		},
	},
	actionRow{ // S1738
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(27), /* return, reduce: WhileStat */
			reduce(27), /* ;, reduce: WhileStat */
			nil,        /* empty */
			nil,        /* = */
			reduce(27), /* break, reduce: WhileStat */
			reduce(27), /* goto, reduce: WhileStat */
			reduce(27), /* do, reduce: WhileStat */
			nil,        /* end */
			reduce(27), /* while, reduce: WhileStat */
			reduce(27), /* repeat, reduce: WhileStat */
			reduce(27), /* until, reduce: WhileStat */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(27), /* if, reduce: WhileStat */
			nil,        /* , */
			reduce(27), /* for, reduce: WhileStat */
			nil,        /* in */
			reduce(27), /* function, reduce: WhileStat */
			reduce(27), /* local, reduce: WhileStat */
			reduce(27), /* ::, reduce: WhileStat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(27), /* (, reduce: WhileStat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(27), /* ident, reduce: WhileStat */
		},
	},
	actionRow{ // S1739
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1481), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1497), /* ( */
			nil,         /* ) */
			shift(1498), /* nil */
			shift(1499), /* true */
			shift(1500), /* false */
			shift(1501), /* ... */
			shift(1502), /* numdec */
			shift(1503), /* numhex */
			shift(1504), /* string */
			shift(1507), /* { */
			nil,         /* } */
			shift(1508), /* ident */
		},
	},
	actionRow{ // S1740
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(119), /* return, reduce: FunctionDef */
			reduce(119), /* ;, reduce: FunctionDef */
			nil,         /* empty */
			nil,         /* = */
			reduce(119), /* break, reduce: FunctionDef */
			reduce(119), /* goto, reduce: FunctionDef */
			reduce(119), /* do, reduce: FunctionDef */
			nil,         /* end */
			reduce(119), /* while, reduce: FunctionDef */
			reduce(119), /* repeat, reduce: FunctionDef */
			reduce(119), /* until, reduce: FunctionDef */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(119), /* if, reduce: FunctionDef */
			nil,         /* , */
			reduce(119), /* for, reduce: FunctionDef */
			nil,         /* in */
			reduce(119), /* function, reduce: FunctionDef */
			reduce(119), /* local, reduce: FunctionDef */
			reduce(119), /* ::, reduce: FunctionDef */
			nil,         /* . */
			nil,         /* : */
			reduce(119), /* or, reduce: FunctionDef */
			reduce(119), /* and, reduce: FunctionDef */
			reduce(119), /* <, reduce: FunctionDef */
			reduce(119), /* <=, reduce: FunctionDef */
			reduce(119), /* >, reduce: FunctionDef */
			reduce(119), /* >=, reduce: FunctionDef */
			reduce(119), /* ==, reduce: FunctionDef */
			reduce(119), /* ~=, reduce: FunctionDef */
			reduce(119), /* |, reduce: FunctionDef */
			reduce(119), /* ~, reduce: FunctionDef */
			reduce(119), /* &, reduce: FunctionDef */
			reduce(119), /* .., reduce: FunctionDef */
			reduce(119), /* <<, reduce: FunctionDef */
			reduce(119), /* >>, reduce: FunctionDef */
			reduce(119), /* +, reduce: FunctionDef */
			reduce(119), /* -, reduce: FunctionDef */
			reduce(119), /* *, reduce: FunctionDef */
			reduce(119), /* /, reduce: FunctionDef */
			reduce(119), /* %, reduce: FunctionDef */
			reduce(119), /* //, reduce: FunctionDef */
			nil,         /* not */
			nil,         /* # */
			reduce(119), /* ^, reduce: FunctionDef */
			nil,         /* [ */
			nil,         /* ] */
			reduce(119), /* (, reduce: FunctionDef */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(119), /* ident, reduce: FunctionDef */
		},
	},
	actionRow{ // S1741
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(123), /* ), reduce: ParList */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			shift(521),  /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			shift(523),  /* ident */
		},
	},
	actionRow{ // S1742
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1481), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1497), /* ( */
			nil,         /* ) */
			shift(1498), /* nil */
			shift(1499), /* true */
			shift(1500), /* false */
			shift(1501), /* ... */
			shift(1502), /* numdec */
			shift(1503), /* numhex */
			shift(1504), /* string */
			shift(1507), /* { */
			nil,         /* } */
			shift(1508), /* ident */
		},
	},
	actionRow{ // S1743
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1481), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1497), /* ( */
			nil,         /* ) */
			shift(1498), /* nil */
			shift(1499), /* true */
			shift(1500), /* false */
			shift(1501), /* ... */
			shift(1502), /* numdec */
			shift(1503), /* numhex */
			shift(1504), /* string */
			shift(1507), /* { */
			nil,         /* } */
			shift(1508), /* ident */
		},
	},
	actionRow{ // S1744
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1481), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1497), /* ( */
			nil,         /* ) */
			shift(1498), /* nil */
			shift(1499), /* true */
			shift(1500), /* false */
			shift(1501), /* ... */
			shift(1502), /* numdec */
			shift(1503), /* numhex */
			shift(1504), /* string */
			shift(1507), /* { */
			nil,         /* } */
			shift(1508), /* ident */
		},
	},
	actionRow{ // S1745
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1481), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1497), /* ( */
			nil,         /* ) */
			shift(1498), /* nil */
			shift(1499), /* true */
			shift(1500), /* false */
			shift(1501), /* ... */
			shift(1502), /* numdec */
			shift(1503), /* numhex */
			shift(1504), /* string */
			shift(1507), /* { */
			nil,         /* } */
			shift(1508), /* ident */
		},
	},
	actionRow{ // S1746
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1481), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1497), /* ( */
			nil,         /* ) */
			shift(1498), /* nil */
			shift(1499), /* true */
			shift(1500), /* false */
			shift(1501), /* ... */
			shift(1502), /* numdec */
			shift(1503), /* numhex */
			shift(1504), /* string */
			shift(1507), /* { */
			nil,         /* } */
			shift(1508), /* ident */
		},
	},
	actionRow{ // S1747
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1481), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1497), /* ( */
			nil,         /* ) */
			shift(1498), /* nil */
			shift(1499), /* true */
			shift(1500), /* false */
			shift(1501), /* ... */
			shift(1502), /* numdec */
			shift(1503), /* numhex */
			shift(1504), /* string */
			shift(1507), /* { */
			nil,         /* } */
			shift(1508), /* ident */
		},
	},
	actionRow{ // S1748
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1481), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1497), /* ( */
			nil,         /* ) */
			shift(1498), /* nil */
			shift(1499), /* true */
			shift(1500), /* false */
			shift(1501), /* ... */
			shift(1502), /* numdec */
			shift(1503), /* numhex */
			shift(1504), /* string */
			shift(1507), /* { */
			nil,         /* } */
			shift(1508), /* ident */
		},
	},
	actionRow{ // S1749
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1481), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1497), /* ( */
			nil,         /* ) */
			shift(1498), /* nil */
			shift(1499), /* true */
			shift(1500), /* false */
			shift(1501), /* ... */
			shift(1502), /* numdec */
			shift(1503), /* numhex */
			shift(1504), /* string */
			shift(1507), /* { */
			nil,         /* } */
			shift(1508), /* ident */
		},
	},
	actionRow{ // S1750
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1481), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1497), /* ( */
			nil,         /* ) */
			shift(1498), /* nil */
			shift(1499), /* true */
			shift(1500), /* false */
			shift(1501), /* ... */
			shift(1502), /* numdec */
			shift(1503), /* numhex */
			shift(1504), /* string */
			shift(1507), /* { */
			nil,         /* } */
			shift(1508), /* ident */
		},
	},
	actionRow{ // S1751
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(93), /* return, reduce: Factor */
			reduce(93), /* ;, reduce: Factor */
			nil,        /* empty */
			nil,        /* = */
			reduce(93), /* break, reduce: Factor */
			reduce(93), /* goto, reduce: Factor */
			reduce(93), /* do, reduce: Factor */
			nil,        /* end */
			reduce(93), /* while, reduce: Factor */
			reduce(93), /* repeat, reduce: Factor */
			reduce(93), /* until, reduce: Factor */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(93), /* if, reduce: Factor */
			nil,        /* , */
			reduce(93), /* for, reduce: Factor */
			nil,        /* in */
			reduce(93), /* function, reduce: Factor */
			reduce(93), /* local, reduce: Factor */
			reduce(93), /* ::, reduce: Factor */
			nil,        /* . */
			nil,        /* : */
			reduce(93), /* or, reduce: Factor */
			reduce(93), /* and, reduce: Factor */
			reduce(93), /* <, reduce: Factor */
			reduce(93), /* <=, reduce: Factor */
			reduce(93), /* >, reduce: Factor */
			reduce(93), /* >=, reduce: Factor */
			reduce(93), /* ==, reduce: Factor */
			reduce(93), /* ~=, reduce: Factor */
			reduce(93), /* |, reduce: Factor */
			reduce(93), /* ~, reduce: Factor */
			reduce(93), /* &, reduce: Factor */
			reduce(93), /* .., reduce: Factor */
			reduce(93), /* <<, reduce: Factor */
			reduce(93), /* >>, reduce: Factor */
			reduce(93), /* +, reduce: Factor */
			reduce(93), /* -, reduce: Factor */
			reduce(93), /* *, reduce: Factor */
			reduce(93), /* /, reduce: Factor */
			reduce(93), /* %, reduce: Factor */
			reduce(93), /* //, reduce: Factor */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(93), /* (, reduce: Factor */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(93), /* ident, reduce: Factor */
		},
	},
	actionRow{ // S1752
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1481), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1497), /* ( */
			nil,         /* ) */
			shift(1498), /* nil */
			shift(1499), /* true */
			shift(1500), /* false */
			shift(1501), /* ... */
			shift(1502), /* numdec */
			shift(1503), /* numhex */
			shift(1504), /* string */
			shift(1507), /* { */
			nil,         /* } */
			shift(1508), /* ident */
		},
	},
	actionRow{ // S1753
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			shift(1508), /* ident */
		},
	},
	actionRow{ // S1754
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(426), /* ident */
		},
	},
	actionRow{ // S1755
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(430), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(446), /* ( */
			nil,        /* ) */
			shift(447), /* nil */
			shift(448), /* true */
			shift(449), /* false */
			shift(450), /* ... */
			shift(451), /* numdec */
			shift(452), /* numhex */
			shift(453), /* string */
			shift(456), /* { */
			nil,        /* } */
			shift(457), /* ident */
		},
	},
	actionRow{ // S1756
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(462),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(478),  /* ( */
			shift(1933), /* ) */
			shift(480),  /* nil */
			shift(481),  /* true */
			shift(482),  /* false */
			shift(483),  /* ... */
			shift(484),  /* numdec */
			shift(485),  /* numhex */
			shift(486),  /* string */
			shift(489),  /* { */
			nil,         /* } */
			shift(490),  /* ident */
		},
	},
	actionRow{ // S1757
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(103), /* return, reduce: FunctionCall */
			reduce(103), /* ;, reduce: FunctionCall */
			nil,         /* empty */
			nil,         /* = */
			reduce(103), /* break, reduce: FunctionCall */
			reduce(103), /* goto, reduce: FunctionCall */
			reduce(103), /* do, reduce: FunctionCall */
			nil,         /* end */
			reduce(103), /* while, reduce: FunctionCall */
			reduce(103), /* repeat, reduce: FunctionCall */
			reduce(103), /* until, reduce: FunctionCall */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(103), /* if, reduce: FunctionCall */
			nil,         /* , */
			reduce(103), /* for, reduce: FunctionCall */
			nil,         /* in */
			reduce(103), /* function, reduce: FunctionCall */
			reduce(103), /* local, reduce: FunctionCall */
			reduce(103), /* ::, reduce: FunctionCall */
			reduce(103), /* ., reduce: FunctionCall */
			reduce(103), /* :, reduce: FunctionCall */
			reduce(103), /* or, reduce: FunctionCall */
			reduce(103), /* and, reduce: FunctionCall */
			reduce(103), /* <, reduce: FunctionCall */
			reduce(103), /* <=, reduce: FunctionCall */
			reduce(103), /* >, reduce: FunctionCall */
			reduce(103), /* >=, reduce: FunctionCall */
			reduce(103), /* ==, reduce: FunctionCall */
			reduce(103), /* ~=, reduce: FunctionCall */
			reduce(103), /* |, reduce: FunctionCall */
			reduce(103), /* ~, reduce: FunctionCall */
			reduce(103), /* &, reduce: FunctionCall */
			reduce(103), /* .., reduce: FunctionCall */
			reduce(103), /* <<, reduce: FunctionCall */
			reduce(103), /* >>, reduce: FunctionCall */
			reduce(103), /* +, reduce: FunctionCall */
			reduce(103), /* -, reduce: FunctionCall */
			reduce(103), /* *, reduce: FunctionCall */
			reduce(103), /* /, reduce: FunctionCall */
			reduce(103), /* %, reduce: FunctionCall */
			reduce(103), /* //, reduce: FunctionCall */
			nil,         /* not */
			nil,         /* # */
			reduce(103), /* ^, reduce: FunctionCall */
			reduce(103), /* [, reduce: FunctionCall */
			nil,         /* ] */
			reduce(103), /* (, reduce: FunctionCall */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(103), /* string, reduce: FunctionCall */
			reduce(103), /* {, reduce: FunctionCall */
			nil,         /* } */
			reduce(103), /* ident, reduce: FunctionCall */
		},
	},
	actionRow{ // S1758
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(118), /* return, reduce: Args */
			reduce(118), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			reduce(118), /* break, reduce: Args */
			reduce(118), /* goto, reduce: Args */
			reduce(118), /* do, reduce: Args */
			nil,         /* end */
			reduce(118), /* while, reduce: Args */
			reduce(118), /* repeat, reduce: Args */
			reduce(118), /* until, reduce: Args */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(118), /* if, reduce: Args */
			nil,         /* , */
			reduce(118), /* for, reduce: Args */
			nil,         /* in */
			reduce(118), /* function, reduce: Args */
			reduce(118), /* local, reduce: Args */
			reduce(118), /* ::, reduce: Args */
			reduce(118), /* ., reduce: Args */
			reduce(118), /* :, reduce: Args */
			reduce(118), /* or, reduce: Args */
			reduce(118), /* and, reduce: Args */
			reduce(118), /* <, reduce: Args */
			reduce(118), /* <=, reduce: Args */
			reduce(118), /* >, reduce: Args */
			reduce(118), /* >=, reduce: Args */
			reduce(118), /* ==, reduce: Args */
			reduce(118), /* ~=, reduce: Args */
			reduce(118), /* |, reduce: Args */
			reduce(118), /* ~, reduce: Args */
			reduce(118), /* &, reduce: Args */
			reduce(118), /* .., reduce: Args */
			reduce(118), /* <<, reduce: Args */
			reduce(118), /* >>, reduce: Args */
			reduce(118), /* +, reduce: Args */
			reduce(118), /* -, reduce: Args */
			reduce(118), /* *, reduce: Args */
			reduce(118), /* /, reduce: Args */
			reduce(118), /* %, reduce: Args */
			reduce(118), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(118), /* ^, reduce: Args */
			reduce(118), /* [, reduce: Args */
			nil,         /* ] */
			reduce(118), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(118), /* string, reduce: Args */
			reduce(118), /* {, reduce: Args */
			nil,         /* } */
			reduce(118), /* ident, reduce: Args */
		},
	},
	actionRow{ // S1759
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(117), /* return, reduce: Args */
			reduce(117), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			reduce(117), /* break, reduce: Args */
			reduce(117), /* goto, reduce: Args */
			reduce(117), /* do, reduce: Args */
			nil,         /* end */
			reduce(117), /* while, reduce: Args */
			reduce(117), /* repeat, reduce: Args */
			reduce(117), /* until, reduce: Args */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(117), /* if, reduce: Args */
			nil,         /* , */
			reduce(117), /* for, reduce: Args */
			nil,         /* in */
			reduce(117), /* function, reduce: Args */
			reduce(117), /* local, reduce: Args */
			reduce(117), /* ::, reduce: Args */
			reduce(117), /* ., reduce: Args */
			reduce(117), /* :, reduce: Args */
			reduce(117), /* or, reduce: Args */
			reduce(117), /* and, reduce: Args */
			reduce(117), /* <, reduce: Args */
			reduce(117), /* <=, reduce: Args */
			reduce(117), /* >, reduce: Args */
			reduce(117), /* >=, reduce: Args */
			reduce(117), /* ==, reduce: Args */
			reduce(117), /* ~=, reduce: Args */
			reduce(117), /* |, reduce: Args */
			reduce(117), /* ~, reduce: Args */
			reduce(117), /* &, reduce: Args */
			reduce(117), /* .., reduce: Args */
			reduce(117), /* <<, reduce: Args */
			reduce(117), /* >>, reduce: Args */
			reduce(117), /* +, reduce: Args */
			reduce(117), /* -, reduce: Args */
			reduce(117), /* *, reduce: Args */
			reduce(117), /* /, reduce: Args */
			reduce(117), /* %, reduce: Args */
			reduce(117), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(117), /* ^, reduce: Args */
			reduce(117), /* [, reduce: Args */
			nil,         /* ] */
			reduce(117), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(117), /* string, reduce: Args */
			reduce(117), /* {, reduce: Args */
			nil,         /* } */
			reduce(117), /* ident, reduce: Args */
		},
	},
	actionRow{ // S1760
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			shift(254), /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(268), /* ident */
		},
	},
	actionRow{ // S1761
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			shift(492),  /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(1935), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1762
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			shift(569),  /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(570),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			shift(1936), /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1763
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(34), /* return, reduce: Else */
			reduce(34), /* ;, reduce: Else */
			nil,        /* empty */
			nil,        /* = */
			reduce(34), /* break, reduce: Else */
			reduce(34), /* goto, reduce: Else */
			reduce(34), /* do, reduce: Else */
			nil,        /* end */
			reduce(34), /* while, reduce: Else */
			reduce(34), /* repeat, reduce: Else */
			reduce(34), /* until, reduce: Else */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(34), /* if, reduce: Else */
			nil,        /* , */
			reduce(34), /* for, reduce: Else */
			nil,        /* in */
			reduce(34), /* function, reduce: Else */
			reduce(34), /* local, reduce: Else */
			reduce(34), /* ::, reduce: Else */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(34), /* (, reduce: Else */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(34), /* ident, reduce: Else */
		},
	},
	actionRow{ // S1764
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(116), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(132), /* ( */
			nil,        /* ) */
			shift(133), /* nil */
			shift(134), /* true */
			shift(135), /* false */
			shift(136), /* ... */
			shift(137), /* numdec */
			shift(138), /* numhex */
			shift(139), /* string */
			shift(142), /* { */
			nil,        /* } */
			shift(143), /* ident */
		},
	},
	actionRow{ // S1765
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(35), /* return, reduce: IfStat */
			reduce(35), /* ;, reduce: IfStat */
			nil,        /* empty */
			nil,        /* = */
			reduce(35), /* break, reduce: IfStat */
			reduce(35), /* goto, reduce: IfStat */
			reduce(35), /* do, reduce: IfStat */
			nil,        /* end */
			reduce(35), /* while, reduce: IfStat */
			reduce(35), /* repeat, reduce: IfStat */
			reduce(35), /* until, reduce: IfStat */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(35), /* if, reduce: IfStat */
			nil,        /* , */
			reduce(35), /* for, reduce: IfStat */
			nil,        /* in */
			reduce(35), /* function, reduce: IfStat */
			reduce(35), /* local, reduce: IfStat */
			reduce(35), /* ::, reduce: IfStat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(35), /* (, reduce: IfStat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(35), /* ident, reduce: IfStat */
		},
	},
	actionRow{ // S1766
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S1767
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S1768
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S1769
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S1770
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			reduce(6), /* elseif, reduce: StatList */
			reduce(6), /* else, reduce: StatList */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S1771
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(32), /* $, reduce: Else */
			reduce(32), /* return, reduce: Else */
			reduce(32), /* ;, reduce: Else */
			nil,        /* empty */
			nil,        /* = */
			reduce(32), /* break, reduce: Else */
			reduce(32), /* goto, reduce: Else */
			reduce(32), /* do, reduce: Else */
			nil,        /* end */
			reduce(32), /* while, reduce: Else */
			reduce(32), /* repeat, reduce: Else */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(32), /* if, reduce: Else */
			nil,        /* , */
			reduce(32), /* for, reduce: Else */
			nil,        /* in */
			reduce(32), /* function, reduce: Else */
			reduce(32), /* local, reduce: Else */
			reduce(32), /* ::, reduce: Else */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(32), /* (, reduce: Else */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(32), /* ident, reduce: Else */
		},
	},
	actionRow{ // S1772
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(116), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(132), /* ( */
			nil,        /* ) */
			shift(133), /* nil */
			shift(134), /* true */
			shift(135), /* false */
			shift(136), /* ... */
			shift(137), /* numdec */
			shift(138), /* numhex */
			shift(139), /* string */
			shift(142), /* { */
			nil,        /* } */
			shift(143), /* ident */
		},
	},
	actionRow{ // S1773
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S1774
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(33), /* $, reduce: Else */
			reduce(33), /* return, reduce: Else */
			reduce(33), /* ;, reduce: Else */
			nil,        /* empty */
			nil,        /* = */
			reduce(33), /* break, reduce: Else */
			reduce(33), /* goto, reduce: Else */
			reduce(33), /* do, reduce: Else */
			nil,        /* end */
			reduce(33), /* while, reduce: Else */
			reduce(33), /* repeat, reduce: Else */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(33), /* if, reduce: Else */
			nil,        /* , */
			reduce(33), /* for, reduce: Else */
			nil,        /* in */
			reduce(33), /* function, reduce: Else */
			reduce(33), /* local, reduce: Else */
			reduce(33), /* ::, reduce: Else */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(33), /* (, reduce: Else */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(33), /* ident, reduce: Else */
		},
	},
	actionRow{ // S1775
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* return */
			nil,       /* ; */
			nil,       /* empty */
			nil,       /* = */
			nil,       /* break */
			nil,       /* goto */
			nil,       /* do */
			reduce(1), /* end, reduce: Chunk */
			nil,       /* while */
			nil,       /* repeat */
			nil,       /* until */
			nil,       /* then */
			reduce(1), /* elseif, reduce: Chunk */
			reduce(1), /* else, reduce: Chunk */
			nil,       /* if */
			nil,       /* , */
			nil,       /* for */
			nil,       /* in */
			nil,       /* function */
			nil,       /* local */
			nil,       /* :: */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			nil,       /* ( */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			nil,       /* ident */
		},
	},
	actionRow{ // S1776
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1524), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1540), /* ( */
			nil,         /* ) */
			shift(1541), /* nil */
			shift(1542), /* true */
			shift(1543), /* false */
			shift(1544), /* ... */
			shift(1545), /* numdec */
			shift(1546), /* numhex */
			shift(1547), /* string */
			shift(1550), /* { */
			nil,         /* } */
			shift(1551), /* ident */
		},
	},
	actionRow{ // S1777
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1524), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1540), /* ( */
			nil,         /* ) */
			shift(1541), /* nil */
			shift(1542), /* true */
			shift(1543), /* false */
			shift(1544), /* ... */
			shift(1545), /* numdec */
			shift(1546), /* numhex */
			shift(1547), /* string */
			shift(1550), /* { */
			nil,         /* } */
			shift(1551), /* ident */
		},
	},
	actionRow{ // S1778
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(119), /* ;, reduce: FunctionDef */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(119), /* end, reduce: FunctionDef */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			reduce(119), /* elseif, reduce: FunctionDef */
			reduce(119), /* else, reduce: FunctionDef */
			nil,         /* if */
			reduce(119), /* ,, reduce: FunctionDef */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(119), /* or, reduce: FunctionDef */
			reduce(119), /* and, reduce: FunctionDef */
			reduce(119), /* <, reduce: FunctionDef */
			reduce(119), /* <=, reduce: FunctionDef */
			reduce(119), /* >, reduce: FunctionDef */
			reduce(119), /* >=, reduce: FunctionDef */
			reduce(119), /* ==, reduce: FunctionDef */
			reduce(119), /* ~=, reduce: FunctionDef */
			reduce(119), /* |, reduce: FunctionDef */
			reduce(119), /* ~, reduce: FunctionDef */
			reduce(119), /* &, reduce: FunctionDef */
			reduce(119), /* .., reduce: FunctionDef */
			reduce(119), /* <<, reduce: FunctionDef */
			reduce(119), /* >>, reduce: FunctionDef */
			reduce(119), /* +, reduce: FunctionDef */
			reduce(119), /* -, reduce: FunctionDef */
			reduce(119), /* *, reduce: FunctionDef */
			reduce(119), /* /, reduce: FunctionDef */
			reduce(119), /* %, reduce: FunctionDef */
			reduce(119), /* //, reduce: FunctionDef */
			nil,         /* not */
			nil,         /* # */
			reduce(119), /* ^, reduce: FunctionDef */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1779
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(123), /* ), reduce: ParList */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			shift(521),  /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			shift(523),  /* ident */
		},
	},
	actionRow{ // S1780
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1524), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1540), /* ( */
			nil,         /* ) */
			shift(1541), /* nil */
			shift(1542), /* true */
			shift(1543), /* false */
			shift(1544), /* ... */
			shift(1545), /* numdec */
			shift(1546), /* numhex */
			shift(1547), /* string */
			shift(1550), /* { */
			nil,         /* } */
			shift(1551), /* ident */
		},
	},
	actionRow{ // S1781
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1524), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1540), /* ( */
			nil,         /* ) */
			shift(1541), /* nil */
			shift(1542), /* true */
			shift(1543), /* false */
			shift(1544), /* ... */
			shift(1545), /* numdec */
			shift(1546), /* numhex */
			shift(1547), /* string */
			shift(1550), /* { */
			nil,         /* } */
			shift(1551), /* ident */
		},
	},
	actionRow{ // S1782
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1524), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1540), /* ( */
			nil,         /* ) */
			shift(1541), /* nil */
			shift(1542), /* true */
			shift(1543), /* false */
			shift(1544), /* ... */
			shift(1545), /* numdec */
			shift(1546), /* numhex */
			shift(1547), /* string */
			shift(1550), /* { */
			nil,         /* } */
			shift(1551), /* ident */
		},
	},
	actionRow{ // S1783
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1524), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1540), /* ( */
			nil,         /* ) */
			shift(1541), /* nil */
			shift(1542), /* true */
			shift(1543), /* false */
			shift(1544), /* ... */
			shift(1545), /* numdec */
			shift(1546), /* numhex */
			shift(1547), /* string */
			shift(1550), /* { */
			nil,         /* } */
			shift(1551), /* ident */
		},
	},
	actionRow{ // S1784
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1524), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1540), /* ( */
			nil,         /* ) */
			shift(1541), /* nil */
			shift(1542), /* true */
			shift(1543), /* false */
			shift(1544), /* ... */
			shift(1545), /* numdec */
			shift(1546), /* numhex */
			shift(1547), /* string */
			shift(1550), /* { */
			nil,         /* } */
			shift(1551), /* ident */
		},
	},
	actionRow{ // S1785
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1524), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1540), /* ( */
			nil,         /* ) */
			shift(1541), /* nil */
			shift(1542), /* true */
			shift(1543), /* false */
			shift(1544), /* ... */
			shift(1545), /* numdec */
			shift(1546), /* numhex */
			shift(1547), /* string */
			shift(1550), /* { */
			nil,         /* } */
			shift(1551), /* ident */
		},
	},
	actionRow{ // S1786
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1524), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1540), /* ( */
			nil,         /* ) */
			shift(1541), /* nil */
			shift(1542), /* true */
			shift(1543), /* false */
			shift(1544), /* ... */
			shift(1545), /* numdec */
			shift(1546), /* numhex */
			shift(1547), /* string */
			shift(1550), /* { */
			nil,         /* } */
			shift(1551), /* ident */
		},
	},
	actionRow{ // S1787
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1524), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1540), /* ( */
			nil,         /* ) */
			shift(1541), /* nil */
			shift(1542), /* true */
			shift(1543), /* false */
			shift(1544), /* ... */
			shift(1545), /* numdec */
			shift(1546), /* numhex */
			shift(1547), /* string */
			shift(1550), /* { */
			nil,         /* } */
			shift(1551), /* ident */
		},
	},
	actionRow{ // S1788
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1524), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1540), /* ( */
			nil,         /* ) */
			shift(1541), /* nil */
			shift(1542), /* true */
			shift(1543), /* false */
			shift(1544), /* ... */
			shift(1545), /* numdec */
			shift(1546), /* numhex */
			shift(1547), /* string */
			shift(1550), /* { */
			nil,         /* } */
			shift(1551), /* ident */
		},
	},
	actionRow{ // S1789
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(93), /* ;, reduce: Factor */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			reduce(93), /* end, reduce: Factor */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			reduce(93), /* elseif, reduce: Factor */
			reduce(93), /* else, reduce: Factor */
			nil,        /* if */
			reduce(93), /* ,, reduce: Factor */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(93), /* or, reduce: Factor */
			reduce(93), /* and, reduce: Factor */
			reduce(93), /* <, reduce: Factor */
			reduce(93), /* <=, reduce: Factor */
			reduce(93), /* >, reduce: Factor */
			reduce(93), /* >=, reduce: Factor */
			reduce(93), /* ==, reduce: Factor */
			reduce(93), /* ~=, reduce: Factor */
			reduce(93), /* |, reduce: Factor */
			reduce(93), /* ~, reduce: Factor */
			reduce(93), /* &, reduce: Factor */
			reduce(93), /* .., reduce: Factor */
			reduce(93), /* <<, reduce: Factor */
			reduce(93), /* >>, reduce: Factor */
			reduce(93), /* +, reduce: Factor */
			reduce(93), /* -, reduce: Factor */
			reduce(93), /* *, reduce: Factor */
			reduce(93), /* /, reduce: Factor */
			reduce(93), /* %, reduce: Factor */
			reduce(93), /* //, reduce: Factor */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1790
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1524), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1540), /* ( */
			nil,         /* ) */
			shift(1541), /* nil */
			shift(1542), /* true */
			shift(1543), /* false */
			shift(1544), /* ... */
			shift(1545), /* numdec */
			shift(1546), /* numhex */
			shift(1547), /* string */
			shift(1550), /* { */
			nil,         /* } */
			shift(1551), /* ident */
		},
	},
	actionRow{ // S1791
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			shift(1551), /* ident */
		},
	},
	actionRow{ // S1792
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(426), /* ident */
		},
	},
	actionRow{ // S1793
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(430), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(446), /* ( */
			nil,        /* ) */
			shift(447), /* nil */
			shift(448), /* true */
			shift(449), /* false */
			shift(450), /* ... */
			shift(451), /* numdec */
			shift(452), /* numhex */
			shift(453), /* string */
			shift(456), /* { */
			nil,        /* } */
			shift(457), /* ident */
		},
	},
	actionRow{ // S1794
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(462),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(478),  /* ( */
			shift(1963), /* ) */
			shift(480),  /* nil */
			shift(481),  /* true */
			shift(482),  /* false */
			shift(483),  /* ... */
			shift(484),  /* numdec */
			shift(485),  /* numhex */
			shift(486),  /* string */
			shift(489),  /* { */
			nil,         /* } */
			shift(490),  /* ident */
		},
	},
	actionRow{ // S1795
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(103), /* ;, reduce: FunctionCall */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(103), /* end, reduce: FunctionCall */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			reduce(103), /* elseif, reduce: FunctionCall */
			reduce(103), /* else, reduce: FunctionCall */
			nil,         /* if */
			reduce(103), /* ,, reduce: FunctionCall */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(103), /* ., reduce: FunctionCall */
			reduce(103), /* :, reduce: FunctionCall */
			reduce(103), /* or, reduce: FunctionCall */
			reduce(103), /* and, reduce: FunctionCall */
			reduce(103), /* <, reduce: FunctionCall */
			reduce(103), /* <=, reduce: FunctionCall */
			reduce(103), /* >, reduce: FunctionCall */
			reduce(103), /* >=, reduce: FunctionCall */
			reduce(103), /* ==, reduce: FunctionCall */
			reduce(103), /* ~=, reduce: FunctionCall */
			reduce(103), /* |, reduce: FunctionCall */
			reduce(103), /* ~, reduce: FunctionCall */
			reduce(103), /* &, reduce: FunctionCall */
			reduce(103), /* .., reduce: FunctionCall */
			reduce(103), /* <<, reduce: FunctionCall */
			reduce(103), /* >>, reduce: FunctionCall */
			reduce(103), /* +, reduce: FunctionCall */
			reduce(103), /* -, reduce: FunctionCall */
			reduce(103), /* *, reduce: FunctionCall */
			reduce(103), /* /, reduce: FunctionCall */
			reduce(103), /* %, reduce: FunctionCall */
			reduce(103), /* //, reduce: FunctionCall */
			nil,         /* not */
			nil,         /* # */
			reduce(103), /* ^, reduce: FunctionCall */
			reduce(103), /* [, reduce: FunctionCall */
			nil,         /* ] */
			reduce(103), /* (, reduce: FunctionCall */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(103), /* string, reduce: FunctionCall */
			reduce(103), /* {, reduce: FunctionCall */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1796
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(118), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(118), /* end, reduce: Args */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			reduce(118), /* elseif, reduce: Args */
			reduce(118), /* else, reduce: Args */
			nil,         /* if */
			reduce(118), /* ,, reduce: Args */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(118), /* ., reduce: Args */
			reduce(118), /* :, reduce: Args */
			reduce(118), /* or, reduce: Args */
			reduce(118), /* and, reduce: Args */
			reduce(118), /* <, reduce: Args */
			reduce(118), /* <=, reduce: Args */
			reduce(118), /* >, reduce: Args */
			reduce(118), /* >=, reduce: Args */
			reduce(118), /* ==, reduce: Args */
			reduce(118), /* ~=, reduce: Args */
			reduce(118), /* |, reduce: Args */
			reduce(118), /* ~, reduce: Args */
			reduce(118), /* &, reduce: Args */
			reduce(118), /* .., reduce: Args */
			reduce(118), /* <<, reduce: Args */
			reduce(118), /* >>, reduce: Args */
			reduce(118), /* +, reduce: Args */
			reduce(118), /* -, reduce: Args */
			reduce(118), /* *, reduce: Args */
			reduce(118), /* /, reduce: Args */
			reduce(118), /* %, reduce: Args */
			reduce(118), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(118), /* ^, reduce: Args */
			reduce(118), /* [, reduce: Args */
			nil,         /* ] */
			reduce(118), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(118), /* string, reduce: Args */
			reduce(118), /* {, reduce: Args */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1797
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(117), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(117), /* end, reduce: Args */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			reduce(117), /* elseif, reduce: Args */
			reduce(117), /* else, reduce: Args */
			nil,         /* if */
			reduce(117), /* ,, reduce: Args */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(117), /* ., reduce: Args */
			reduce(117), /* :, reduce: Args */
			reduce(117), /* or, reduce: Args */
			reduce(117), /* and, reduce: Args */
			reduce(117), /* <, reduce: Args */
			reduce(117), /* <=, reduce: Args */
			reduce(117), /* >, reduce: Args */
			reduce(117), /* >=, reduce: Args */
			reduce(117), /* ==, reduce: Args */
			reduce(117), /* ~=, reduce: Args */
			reduce(117), /* |, reduce: Args */
			reduce(117), /* ~, reduce: Args */
			reduce(117), /* &, reduce: Args */
			reduce(117), /* .., reduce: Args */
			reduce(117), /* <<, reduce: Args */
			reduce(117), /* >>, reduce: Args */
			reduce(117), /* +, reduce: Args */
			reduce(117), /* -, reduce: Args */
			reduce(117), /* *, reduce: Args */
			reduce(117), /* /, reduce: Args */
			reduce(117), /* %, reduce: Args */
			reduce(117), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(117), /* ^, reduce: Args */
			reduce(117), /* [, reduce: Args */
			nil,         /* ] */
			reduce(117), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(117), /* string, reduce: Args */
			reduce(117), /* {, reduce: Args */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1798
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			shift(254), /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(268), /* ident */
		},
	},
	actionRow{ // S1799
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			shift(492),  /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(1965), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1800
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			shift(569),  /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(570),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			shift(1966), /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1801
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(23),  /* return, reduce: AssignStat */
			reduce(23),  /* ;, reduce: AssignStat */
			nil,         /* empty */
			nil,         /* = */
			reduce(23),  /* break, reduce: AssignStat */
			reduce(23),  /* goto, reduce: AssignStat */
			reduce(23),  /* do, reduce: AssignStat */
			reduce(23),  /* end, reduce: AssignStat */
			reduce(23),  /* while, reduce: AssignStat */
			reduce(23),  /* repeat, reduce: AssignStat */
			nil,         /* until */
			nil,         /* then */
			reduce(23),  /* elseif, reduce: AssignStat */
			reduce(23),  /* else, reduce: AssignStat */
			reduce(23),  /* if, reduce: AssignStat */
			shift(1968), /* , */
			reduce(23),  /* for, reduce: AssignStat */
			nil,         /* in */
			reduce(23),  /* function, reduce: AssignStat */
			reduce(23),  /* local, reduce: AssignStat */
			reduce(23),  /* ::, reduce: AssignStat */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(23),  /* (, reduce: AssignStat */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(23),  /* ident, reduce: AssignStat */
		},
	},
	actionRow{ // S1802
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(101), /* return, reduce: PrefixExp */
			reduce(101), /* ;, reduce: PrefixExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(101), /* break, reduce: PrefixExp */
			reduce(101), /* goto, reduce: PrefixExp */
			reduce(101), /* do, reduce: PrefixExp */
			reduce(101), /* end, reduce: PrefixExp */
			reduce(101), /* while, reduce: PrefixExp */
			reduce(101), /* repeat, reduce: PrefixExp */
			nil,         /* until */
			nil,         /* then */
			reduce(101), /* elseif, reduce: PrefixExp */
			reduce(101), /* else, reduce: PrefixExp */
			reduce(101), /* if, reduce: PrefixExp */
			reduce(101), /* ,, reduce: PrefixExp */
			reduce(101), /* for, reduce: PrefixExp */
			nil,         /* in */
			reduce(101), /* function, reduce: PrefixExp */
			reduce(101), /* local, reduce: PrefixExp */
			reduce(101), /* ::, reduce: PrefixExp */
			reduce(101), /* ., reduce: PrefixExp */
			reduce(101), /* :, reduce: PrefixExp */
			reduce(101), /* or, reduce: PrefixExp */
			reduce(101), /* and, reduce: PrefixExp */
			reduce(101), /* <, reduce: PrefixExp */
			reduce(101), /* <=, reduce: PrefixExp */
			reduce(101), /* >, reduce: PrefixExp */
			reduce(101), /* >=, reduce: PrefixExp */
			reduce(101), /* ==, reduce: PrefixExp */
			reduce(101), /* ~=, reduce: PrefixExp */
			reduce(101), /* |, reduce: PrefixExp */
			reduce(101), /* ~, reduce: PrefixExp */
			reduce(101), /* &, reduce: PrefixExp */
			reduce(101), /* .., reduce: PrefixExp */
			reduce(101), /* <<, reduce: PrefixExp */
			reduce(101), /* >>, reduce: PrefixExp */
			reduce(101), /* +, reduce: PrefixExp */
			reduce(101), /* -, reduce: PrefixExp */
			reduce(101), /* *, reduce: PrefixExp */
			reduce(101), /* /, reduce: PrefixExp */
			reduce(101), /* %, reduce: PrefixExp */
			reduce(101), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(101), /* ^, reduce: PrefixExp */
			reduce(101), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(101), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(101), /* string, reduce: PrefixExp */
			reduce(101), /* {, reduce: PrefixExp */
			nil,         /* } */
			reduce(101), /* ident, reduce: PrefixExp */
		},
	},
	actionRow{ // S1803
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(97), /* return, reduce: Var */
			reduce(97), /* ;, reduce: Var */
			nil,        /* empty */
			nil,        /* = */
			reduce(97), /* break, reduce: Var */
			reduce(97), /* goto, reduce: Var */
			reduce(97), /* do, reduce: Var */
			reduce(97), /* end, reduce: Var */
			reduce(97), /* while, reduce: Var */
			reduce(97), /* repeat, reduce: Var */
			nil,        /* until */
			nil,        /* then */
			reduce(97), /* elseif, reduce: Var */
			reduce(97), /* else, reduce: Var */
			reduce(97), /* if, reduce: Var */
			reduce(97), /* ,, reduce: Var */
			reduce(97), /* for, reduce: Var */
			nil,        /* in */
			reduce(97), /* function, reduce: Var */
			reduce(97), /* local, reduce: Var */
			reduce(97), /* ::, reduce: Var */
			reduce(97), /* ., reduce: Var */
			reduce(97), /* :, reduce: Var */
			reduce(97), /* or, reduce: Var */
			reduce(97), /* and, reduce: Var */
			reduce(97), /* <, reduce: Var */
			reduce(97), /* <=, reduce: Var */
			reduce(97), /* >, reduce: Var */
			reduce(97), /* >=, reduce: Var */
			reduce(97), /* ==, reduce: Var */
			reduce(97), /* ~=, reduce: Var */
			reduce(97), /* |, reduce: Var */
			reduce(97), /* ~, reduce: Var */
			reduce(97), /* &, reduce: Var */
			reduce(97), /* .., reduce: Var */
			reduce(97), /* <<, reduce: Var */
			reduce(97), /* >>, reduce: Var */
			reduce(97), /* +, reduce: Var */
			reduce(97), /* -, reduce: Var */
			reduce(97), /* *, reduce: Var */
			reduce(97), /* /, reduce: Var */
			reduce(97), /* %, reduce: Var */
			reduce(97), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(97), /* ^, reduce: Var */
			reduce(97), /* [, reduce: Var */
			nil,        /* ] */
			reduce(97), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(97), /* string, reduce: Var */
			reduce(97), /* {, reduce: Var */
			nil,        /* } */
			reduce(97), /* ident, reduce: Var */
		},
	},
	actionRow{ // S1804
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(53),  /* return, reduce: ExpList */
			reduce(53),  /* ;, reduce: ExpList */
			nil,         /* empty */
			nil,         /* = */
			reduce(53),  /* break, reduce: ExpList */
			reduce(53),  /* goto, reduce: ExpList */
			reduce(53),  /* do, reduce: ExpList */
			reduce(53),  /* end, reduce: ExpList */
			reduce(53),  /* while, reduce: ExpList */
			reduce(53),  /* repeat, reduce: ExpList */
			nil,         /* until */
			nil,         /* then */
			reduce(53),  /* elseif, reduce: ExpList */
			reduce(53),  /* else, reduce: ExpList */
			reduce(53),  /* if, reduce: ExpList */
			reduce(53),  /* ,, reduce: ExpList */
			reduce(53),  /* for, reduce: ExpList */
			nil,         /* in */
			reduce(53),  /* function, reduce: ExpList */
			reduce(53),  /* local, reduce: ExpList */
			reduce(53),  /* ::, reduce: ExpList */
			nil,         /* . */
			nil,         /* : */
			shift(1969), /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(53),  /* (, reduce: ExpList */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(53),  /* ident, reduce: ExpList */
		},
	},
	actionRow{ // S1805
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1971), /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1806
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(100), /* return, reduce: PrefixExp */
			reduce(100), /* ;, reduce: PrefixExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(100), /* break, reduce: PrefixExp */
			reduce(100), /* goto, reduce: PrefixExp */
			reduce(100), /* do, reduce: PrefixExp */
			reduce(100), /* end, reduce: PrefixExp */
			reduce(100), /* while, reduce: PrefixExp */
			reduce(100), /* repeat, reduce: PrefixExp */
			nil,         /* until */
			nil,         /* then */
			reduce(100), /* elseif, reduce: PrefixExp */
			reduce(100), /* else, reduce: PrefixExp */
			reduce(100), /* if, reduce: PrefixExp */
			reduce(100), /* ,, reduce: PrefixExp */
			reduce(100), /* for, reduce: PrefixExp */
			nil,         /* in */
			reduce(100), /* function, reduce: PrefixExp */
			reduce(100), /* local, reduce: PrefixExp */
			reduce(100), /* ::, reduce: PrefixExp */
			reduce(100), /* ., reduce: PrefixExp */
			reduce(100), /* :, reduce: PrefixExp */
			reduce(100), /* or, reduce: PrefixExp */
			reduce(100), /* and, reduce: PrefixExp */
			reduce(100), /* <, reduce: PrefixExp */
			reduce(100), /* <=, reduce: PrefixExp */
			reduce(100), /* >, reduce: PrefixExp */
			reduce(100), /* >=, reduce: PrefixExp */
			reduce(100), /* ==, reduce: PrefixExp */
			reduce(100), /* ~=, reduce: PrefixExp */
			reduce(100), /* |, reduce: PrefixExp */
			reduce(100), /* ~, reduce: PrefixExp */
			reduce(100), /* &, reduce: PrefixExp */
			reduce(100), /* .., reduce: PrefixExp */
			reduce(100), /* <<, reduce: PrefixExp */
			reduce(100), /* >>, reduce: PrefixExp */
			reduce(100), /* +, reduce: PrefixExp */
			reduce(100), /* -, reduce: PrefixExp */
			reduce(100), /* *, reduce: PrefixExp */
			reduce(100), /* /, reduce: PrefixExp */
			reduce(100), /* %, reduce: PrefixExp */
			reduce(100), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(100), /* ^, reduce: PrefixExp */
			reduce(100), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(100), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(100), /* string, reduce: PrefixExp */
			reduce(100), /* {, reduce: PrefixExp */
			nil,         /* } */
			reduce(100), /* ident, reduce: PrefixExp */
		},
	},
	actionRow{ // S1807
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(55),  /* return, reduce: Exp */
			reduce(55),  /* ;, reduce: Exp */
			nil,         /* empty */
			nil,         /* = */
			reduce(55),  /* break, reduce: Exp */
			reduce(55),  /* goto, reduce: Exp */
			reduce(55),  /* do, reduce: Exp */
			reduce(55),  /* end, reduce: Exp */
			reduce(55),  /* while, reduce: Exp */
			reduce(55),  /* repeat, reduce: Exp */
			nil,         /* until */
			nil,         /* then */
			reduce(55),  /* elseif, reduce: Exp */
			reduce(55),  /* else, reduce: Exp */
			reduce(55),  /* if, reduce: Exp */
			reduce(55),  /* ,, reduce: Exp */
			reduce(55),  /* for, reduce: Exp */
			nil,         /* in */
			reduce(55),  /* function, reduce: Exp */
			reduce(55),  /* local, reduce: Exp */
			reduce(55),  /* ::, reduce: Exp */
			nil,         /* . */
			nil,         /* : */
			reduce(55),  /* or, reduce: Exp */
			shift(1972), /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(55),  /* (, reduce: Exp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(55),  /* ident, reduce: Exp */
		},
	},
	actionRow{ // S1808
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(57), /* return, reduce: AndExp */
			reduce(57), /* ;, reduce: AndExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(57), /* break, reduce: AndExp */
			reduce(57), /* goto, reduce: AndExp */
			reduce(57), /* do, reduce: AndExp */
			reduce(57), /* end, reduce: AndExp */
			reduce(57), /* while, reduce: AndExp */
			reduce(57), /* repeat, reduce: AndExp */
			nil,        /* until */
			nil,        /* then */
			reduce(57), /* elseif, reduce: AndExp */
			reduce(57), /* else, reduce: AndExp */
			reduce(57), /* if, reduce: AndExp */
			reduce(57), /* ,, reduce: AndExp */
			reduce(57), /* for, reduce: AndExp */
			nil,        /* in */
			reduce(57), /* function, reduce: AndExp */
			reduce(57), /* local, reduce: AndExp */
			reduce(57), /* ::, reduce: AndExp */
			nil,        /* . */
			nil,        /* : */
			reduce(57), /* or, reduce: AndExp */
			reduce(57), /* and, reduce: AndExp */
			shift(203), /* < */
			shift(204), /* <= */
			shift(205), /* > */
			shift(206), /* >= */
			shift(207), /* == */
			shift(208), /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(57), /* (, reduce: AndExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(57), /* ident, reduce: AndExp */
		},
	},
	actionRow{ // S1809
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(65),  /* return, reduce: CompExp */
			reduce(65),  /* ;, reduce: CompExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(65),  /* break, reduce: CompExp */
			reduce(65),  /* goto, reduce: CompExp */
			reduce(65),  /* do, reduce: CompExp */
			reduce(65),  /* end, reduce: CompExp */
			reduce(65),  /* while, reduce: CompExp */
			reduce(65),  /* repeat, reduce: CompExp */
			nil,         /* until */
			nil,         /* then */
			reduce(65),  /* elseif, reduce: CompExp */
			reduce(65),  /* else, reduce: CompExp */
			reduce(65),  /* if, reduce: CompExp */
			reduce(65),  /* ,, reduce: CompExp */
			reduce(65),  /* for, reduce: CompExp */
			nil,         /* in */
			reduce(65),  /* function, reduce: CompExp */
			reduce(65),  /* local, reduce: CompExp */
			reduce(65),  /* ::, reduce: CompExp */
			nil,         /* . */
			nil,         /* : */
			reduce(65),  /* or, reduce: CompExp */
			reduce(65),  /* and, reduce: CompExp */
			reduce(65),  /* <, reduce: CompExp */
			reduce(65),  /* <=, reduce: CompExp */
			reduce(65),  /* >, reduce: CompExp */
			reduce(65),  /* >=, reduce: CompExp */
			reduce(65),  /* ==, reduce: CompExp */
			reduce(65),  /* ~=, reduce: CompExp */
			shift(1974), /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(65),  /* (, reduce: CompExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(65),  /* ident, reduce: CompExp */
		},
	},
	actionRow{ // S1810
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(67),  /* return, reduce: BitOrExp */
			reduce(67),  /* ;, reduce: BitOrExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(67),  /* break, reduce: BitOrExp */
			reduce(67),  /* goto, reduce: BitOrExp */
			reduce(67),  /* do, reduce: BitOrExp */
			reduce(67),  /* end, reduce: BitOrExp */
			reduce(67),  /* while, reduce: BitOrExp */
			reduce(67),  /* repeat, reduce: BitOrExp */
			nil,         /* until */
			nil,         /* then */
			reduce(67),  /* elseif, reduce: BitOrExp */
			reduce(67),  /* else, reduce: BitOrExp */
			reduce(67),  /* if, reduce: BitOrExp */
			reduce(67),  /* ,, reduce: BitOrExp */
			reduce(67),  /* for, reduce: BitOrExp */
			nil,         /* in */
			reduce(67),  /* function, reduce: BitOrExp */
			reduce(67),  /* local, reduce: BitOrExp */
			reduce(67),  /* ::, reduce: BitOrExp */
			nil,         /* . */
			nil,         /* : */
			reduce(67),  /* or, reduce: BitOrExp */
			reduce(67),  /* and, reduce: BitOrExp */
			reduce(67),  /* <, reduce: BitOrExp */
			reduce(67),  /* <=, reduce: BitOrExp */
			reduce(67),  /* >, reduce: BitOrExp */
			reduce(67),  /* >=, reduce: BitOrExp */
			reduce(67),  /* ==, reduce: BitOrExp */
			reduce(67),  /* ~=, reduce: BitOrExp */
			reduce(67),  /* |, reduce: BitOrExp */
			shift(1975), /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(67),  /* (, reduce: BitOrExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(67),  /* ident, reduce: BitOrExp */
		},
	},
	actionRow{ // S1811
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(69),  /* return, reduce: BitXorExp */
			reduce(69),  /* ;, reduce: BitXorExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(69),  /* break, reduce: BitXorExp */
			reduce(69),  /* goto, reduce: BitXorExp */
			reduce(69),  /* do, reduce: BitXorExp */
			reduce(69),  /* end, reduce: BitXorExp */
			reduce(69),  /* while, reduce: BitXorExp */
			reduce(69),  /* repeat, reduce: BitXorExp */
			nil,         /* until */
			nil,         /* then */
			reduce(69),  /* elseif, reduce: BitXorExp */
			reduce(69),  /* else, reduce: BitXorExp */
			reduce(69),  /* if, reduce: BitXorExp */
			reduce(69),  /* ,, reduce: BitXorExp */
			reduce(69),  /* for, reduce: BitXorExp */
			nil,         /* in */
			reduce(69),  /* function, reduce: BitXorExp */
			reduce(69),  /* local, reduce: BitXorExp */
			reduce(69),  /* ::, reduce: BitXorExp */
			nil,         /* . */
			nil,         /* : */
			reduce(69),  /* or, reduce: BitXorExp */
			reduce(69),  /* and, reduce: BitXorExp */
			reduce(69),  /* <, reduce: BitXorExp */
			reduce(69),  /* <=, reduce: BitXorExp */
			reduce(69),  /* >, reduce: BitXorExp */
			reduce(69),  /* >=, reduce: BitXorExp */
			reduce(69),  /* ==, reduce: BitXorExp */
			reduce(69),  /* ~=, reduce: BitXorExp */
			reduce(69),  /* |, reduce: BitXorExp */
			reduce(69),  /* ~, reduce: BitXorExp */
			shift(1976), /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(69),  /* (, reduce: BitXorExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(69),  /* ident, reduce: BitXorExp */
		},
	},
	actionRow{ // S1812
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(71),  /* return, reduce: BitAndExp */
			reduce(71),  /* ;, reduce: BitAndExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(71),  /* break, reduce: BitAndExp */
			reduce(71),  /* goto, reduce: BitAndExp */
			reduce(71),  /* do, reduce: BitAndExp */
			reduce(71),  /* end, reduce: BitAndExp */
			reduce(71),  /* while, reduce: BitAndExp */
			reduce(71),  /* repeat, reduce: BitAndExp */
			nil,         /* until */
			nil,         /* then */
			reduce(71),  /* elseif, reduce: BitAndExp */
			reduce(71),  /* else, reduce: BitAndExp */
			reduce(71),  /* if, reduce: BitAndExp */
			reduce(71),  /* ,, reduce: BitAndExp */
			reduce(71),  /* for, reduce: BitAndExp */
			nil,         /* in */
			reduce(71),  /* function, reduce: BitAndExp */
			reduce(71),  /* local, reduce: BitAndExp */
			reduce(71),  /* ::, reduce: BitAndExp */
			nil,         /* . */
			nil,         /* : */
			reduce(71),  /* or, reduce: BitAndExp */
			reduce(71),  /* and, reduce: BitAndExp */
			reduce(71),  /* <, reduce: BitAndExp */
			reduce(71),  /* <=, reduce: BitAndExp */
			reduce(71),  /* >, reduce: BitAndExp */
			reduce(71),  /* >=, reduce: BitAndExp */
			reduce(71),  /* ==, reduce: BitAndExp */
			reduce(71),  /* ~=, reduce: BitAndExp */
			reduce(71),  /* |, reduce: BitAndExp */
			reduce(71),  /* ~, reduce: BitAndExp */
			reduce(71),  /* &, reduce: BitAndExp */
			shift(1977), /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(71),  /* (, reduce: BitAndExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(71),  /* ident, reduce: BitAndExp */
		},
	},
	actionRow{ // S1813
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(73), /* return, reduce: ConcatExp */
			reduce(73), /* ;, reduce: ConcatExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(73), /* break, reduce: ConcatExp */
			reduce(73), /* goto, reduce: ConcatExp */
			reduce(73), /* do, reduce: ConcatExp */
			reduce(73), /* end, reduce: ConcatExp */
			reduce(73), /* while, reduce: ConcatExp */
			reduce(73), /* repeat, reduce: ConcatExp */
			nil,        /* until */
			nil,        /* then */
			reduce(73), /* elseif, reduce: ConcatExp */
			reduce(73), /* else, reduce: ConcatExp */
			reduce(73), /* if, reduce: ConcatExp */
			reduce(73), /* ,, reduce: ConcatExp */
			reduce(73), /* for, reduce: ConcatExp */
			nil,        /* in */
			reduce(73), /* function, reduce: ConcatExp */
			reduce(73), /* local, reduce: ConcatExp */
			reduce(73), /* ::, reduce: ConcatExp */
			nil,        /* . */
			nil,        /* : */
			reduce(73), /* or, reduce: ConcatExp */
			reduce(73), /* and, reduce: ConcatExp */
			reduce(73), /* <, reduce: ConcatExp */
			reduce(73), /* <=, reduce: ConcatExp */
			reduce(73), /* >, reduce: ConcatExp */
			reduce(73), /* >=, reduce: ConcatExp */
			reduce(73), /* ==, reduce: ConcatExp */
			reduce(73), /* ~=, reduce: ConcatExp */
			reduce(73), /* |, reduce: ConcatExp */
			reduce(73), /* ~, reduce: ConcatExp */
			reduce(73), /* &, reduce: ConcatExp */
			reduce(73), /* .., reduce: ConcatExp */
			shift(214), /* << */
			shift(215), /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(73), /* (, reduce: ConcatExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(73), /* ident, reduce: ConcatExp */
		},
	},
	actionRow{ // S1814
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(77), /* return, reduce: ShiftExp */
			reduce(77), /* ;, reduce: ShiftExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(77), /* break, reduce: ShiftExp */
			reduce(77), /* goto, reduce: ShiftExp */
			reduce(77), /* do, reduce: ShiftExp */
			reduce(77), /* end, reduce: ShiftExp */
			reduce(77), /* while, reduce: ShiftExp */
			reduce(77), /* repeat, reduce: ShiftExp */
			nil,        /* until */
			nil,        /* then */
			reduce(77), /* elseif, reduce: ShiftExp */
			reduce(77), /* else, reduce: ShiftExp */
			reduce(77), /* if, reduce: ShiftExp */
			reduce(77), /* ,, reduce: ShiftExp */
			reduce(77), /* for, reduce: ShiftExp */
			nil,        /* in */
			reduce(77), /* function, reduce: ShiftExp */
			reduce(77), /* local, reduce: ShiftExp */
			reduce(77), /* ::, reduce: ShiftExp */
			nil,        /* . */
			nil,        /* : */
			reduce(77), /* or, reduce: ShiftExp */
			reduce(77), /* and, reduce: ShiftExp */
			reduce(77), /* <, reduce: ShiftExp */
			reduce(77), /* <=, reduce: ShiftExp */
			reduce(77), /* >, reduce: ShiftExp */
			reduce(77), /* >=, reduce: ShiftExp */
			reduce(77), /* ==, reduce: ShiftExp */
			reduce(77), /* ~=, reduce: ShiftExp */
			reduce(77), /* |, reduce: ShiftExp */
			reduce(77), /* ~, reduce: ShiftExp */
			reduce(77), /* &, reduce: ShiftExp */
			reduce(77), /* .., reduce: ShiftExp */
			reduce(77), /* <<, reduce: ShiftExp */
			reduce(77), /* >>, reduce: ShiftExp */
			shift(217), /* + */
			shift(218), /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(77), /* (, reduce: ShiftExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(77), /* ident, reduce: ShiftExp */
		},
	},
	actionRow{ // S1815
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(81), /* return, reduce: Sum */
			reduce(81), /* ;, reduce: Sum */
			nil,        /* empty */
			nil,        /* = */
			reduce(81), /* break, reduce: Sum */
			reduce(81), /* goto, reduce: Sum */
			reduce(81), /* do, reduce: Sum */
			reduce(81), /* end, reduce: Sum */
			reduce(81), /* while, reduce: Sum */
			reduce(81), /* repeat, reduce: Sum */
			nil,        /* until */
			nil,        /* then */
			reduce(81), /* elseif, reduce: Sum */
			reduce(81), /* else, reduce: Sum */
			reduce(81), /* if, reduce: Sum */
			reduce(81), /* ,, reduce: Sum */
			reduce(81), /* for, reduce: Sum */
			nil,        /* in */
			reduce(81), /* function, reduce: Sum */
			reduce(81), /* local, reduce: Sum */
			reduce(81), /* ::, reduce: Sum */
			nil,        /* . */
			nil,        /* : */
			reduce(81), /* or, reduce: Sum */
			reduce(81), /* and, reduce: Sum */
			reduce(81), /* <, reduce: Sum */
			reduce(81), /* <=, reduce: Sum */
			reduce(81), /* >, reduce: Sum */
			reduce(81), /* >=, reduce: Sum */
			reduce(81), /* ==, reduce: Sum */
			reduce(81), /* ~=, reduce: Sum */
			reduce(81), /* |, reduce: Sum */
			reduce(81), /* ~, reduce: Sum */
			reduce(81), /* &, reduce: Sum */
			reduce(81), /* .., reduce: Sum */
			reduce(81), /* <<, reduce: Sum */
			reduce(81), /* >>, reduce: Sum */
			reduce(81), /* +, reduce: Sum */
			reduce(81), /* -, reduce: Sum */
			shift(220), /* * */
			shift(221), /* / */
			shift(222), /* % */
			shift(223), /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(81), /* (, reduce: Sum */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(81), /* ident, reduce: Sum */
		},
	},
	actionRow{ // S1816
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(87), /* return, reduce: Term */
			reduce(87), /* ;, reduce: Term */
			nil,        /* empty */
			nil,        /* = */
			reduce(87), /* break, reduce: Term */
			reduce(87), /* goto, reduce: Term */
			reduce(87), /* do, reduce: Term */
			reduce(87), /* end, reduce: Term */
			reduce(87), /* while, reduce: Term */
			reduce(87), /* repeat, reduce: Term */
			nil,        /* until */
			nil,        /* then */
			reduce(87), /* elseif, reduce: Term */
			reduce(87), /* else, reduce: Term */
			reduce(87), /* if, reduce: Term */
			reduce(87), /* ,, reduce: Term */
			reduce(87), /* for, reduce: Term */
			nil,        /* in */
			reduce(87), /* function, reduce: Term */
			reduce(87), /* local, reduce: Term */
			reduce(87), /* ::, reduce: Term */
			nil,        /* . */
			nil,        /* : */
			reduce(87), /* or, reduce: Term */
			reduce(87), /* and, reduce: Term */
			reduce(87), /* <, reduce: Term */
			reduce(87), /* <=, reduce: Term */
			reduce(87), /* >, reduce: Term */
			reduce(87), /* >=, reduce: Term */
			reduce(87), /* ==, reduce: Term */
			reduce(87), /* ~=, reduce: Term */
			reduce(87), /* |, reduce: Term */
			reduce(87), /* ~, reduce: Term */
			reduce(87), /* &, reduce: Term */
			reduce(87), /* .., reduce: Term */
			reduce(87), /* <<, reduce: Term */
			reduce(87), /* >>, reduce: Term */
			reduce(87), /* +, reduce: Term */
			reduce(87), /* -, reduce: Term */
			reduce(87), /* *, reduce: Term */
			reduce(87), /* /, reduce: Term */
			reduce(87), /* %, reduce: Term */
			reduce(87), /* //, reduce: Term */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(87), /* (, reduce: Term */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(87), /* ident, reduce: Term */
		},
	},
	actionRow{ // S1817
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1805), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1821), /* ( */
			nil,         /* ) */
			shift(1822), /* nil */
			shift(1823), /* true */
			shift(1824), /* false */
			shift(1825), /* ... */
			shift(1826), /* numdec */
			shift(1827), /* numhex */
			shift(1828), /* string */
			shift(1831), /* { */
			nil,         /* } */
			shift(1832), /* ident */
		},
	},
	actionRow{ // S1818
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(94), /* return, reduce: Factor */
			reduce(94), /* ;, reduce: Factor */
			nil,        /* empty */
			nil,        /* = */
			reduce(94), /* break, reduce: Factor */
			reduce(94), /* goto, reduce: Factor */
			reduce(94), /* do, reduce: Factor */
			reduce(94), /* end, reduce: Factor */
			reduce(94), /* while, reduce: Factor */
			reduce(94), /* repeat, reduce: Factor */
			nil,        /* until */
			nil,        /* then */
			reduce(94), /* elseif, reduce: Factor */
			reduce(94), /* else, reduce: Factor */
			reduce(94), /* if, reduce: Factor */
			reduce(94), /* ,, reduce: Factor */
			reduce(94), /* for, reduce: Factor */
			nil,        /* in */
			reduce(94), /* function, reduce: Factor */
			reduce(94), /* local, reduce: Factor */
			reduce(94), /* ::, reduce: Factor */
			nil,        /* . */
			nil,        /* : */
			reduce(94), /* or, reduce: Factor */
			reduce(94), /* and, reduce: Factor */
			reduce(94), /* <, reduce: Factor */
			reduce(94), /* <=, reduce: Factor */
			reduce(94), /* >, reduce: Factor */
			reduce(94), /* >=, reduce: Factor */
			reduce(94), /* ==, reduce: Factor */
			reduce(94), /* ~=, reduce: Factor */
			reduce(94), /* |, reduce: Factor */
			reduce(94), /* ~, reduce: Factor */
			reduce(94), /* &, reduce: Factor */
			reduce(94), /* .., reduce: Factor */
			reduce(94), /* <<, reduce: Factor */
			reduce(94), /* >>, reduce: Factor */
			reduce(94), /* +, reduce: Factor */
			reduce(94), /* -, reduce: Factor */
			reduce(94), /* *, reduce: Factor */
			reduce(94), /* /, reduce: Factor */
			reduce(94), /* %, reduce: Factor */
			reduce(94), /* //, reduce: Factor */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(94), /* (, reduce: Factor */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(94), /* ident, reduce: Factor */
		},
	},
	actionRow{ // S1819
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(95),  /* return, reduce: Power */
			reduce(95),  /* ;, reduce: Power */
			nil,         /* empty */
			nil,         /* = */
			reduce(95),  /* break, reduce: Power */
			reduce(95),  /* goto, reduce: Power */
			reduce(95),  /* do, reduce: Power */
			reduce(95),  /* end, reduce: Power */
			reduce(95),  /* while, reduce: Power */
			reduce(95),  /* repeat, reduce: Power */
			nil,         /* until */
			nil,         /* then */
			reduce(95),  /* elseif, reduce: Power */
			reduce(95),  /* else, reduce: Power */
			reduce(95),  /* if, reduce: Power */
			reduce(95),  /* ,, reduce: Power */
			reduce(95),  /* for, reduce: Power */
			nil,         /* in */
			reduce(95),  /* function, reduce: Power */
			reduce(95),  /* local, reduce: Power */
			reduce(95),  /* ::, reduce: Power */
			nil,         /* . */
			nil,         /* : */
			reduce(95),  /* or, reduce: Power */
			reduce(95),  /* and, reduce: Power */
			reduce(95),  /* <, reduce: Power */
			reduce(95),  /* <=, reduce: Power */
			reduce(95),  /* >, reduce: Power */
			reduce(95),  /* >=, reduce: Power */
			reduce(95),  /* ==, reduce: Power */
			reduce(95),  /* ~=, reduce: Power */
			reduce(95),  /* |, reduce: Power */
			reduce(95),  /* ~, reduce: Power */
			reduce(95),  /* &, reduce: Power */
			reduce(95),  /* .., reduce: Power */
			reduce(95),  /* <<, reduce: Power */
			reduce(95),  /* >>, reduce: Power */
			reduce(95),  /* +, reduce: Power */
			reduce(95),  /* -, reduce: Power */
			reduce(95),  /* *, reduce: Power */
			reduce(95),  /* /, reduce: Power */
			reduce(95),  /* %, reduce: Power */
			reduce(95),  /* //, reduce: Power */
			nil,         /* not */
			nil,         /* # */
			shift(1982), /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(95),  /* (, reduce: Power */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(95),  /* ident, reduce: Power */
		},
	},
	actionRow{ // S1820
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(114), /* return, reduce: Atom */
			reduce(114), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(114), /* break, reduce: Atom */
			reduce(114), /* goto, reduce: Atom */
			reduce(114), /* do, reduce: Atom */
			reduce(114), /* end, reduce: Atom */
			reduce(114), /* while, reduce: Atom */
			reduce(114), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			reduce(114), /* elseif, reduce: Atom */
			reduce(114), /* else, reduce: Atom */
			reduce(114), /* if, reduce: Atom */
			reduce(114), /* ,, reduce: Atom */
			reduce(114), /* for, reduce: Atom */
			nil,         /* in */
			reduce(114), /* function, reduce: Atom */
			reduce(114), /* local, reduce: Atom */
			reduce(114), /* ::, reduce: Atom */
			shift(1983), /* . */
			shift(1984), /* : */
			reduce(114), /* or, reduce: Atom */
			reduce(114), /* and, reduce: Atom */
			reduce(114), /* <, reduce: Atom */
			reduce(114), /* <=, reduce: Atom */
			reduce(114), /* >, reduce: Atom */
			reduce(114), /* >=, reduce: Atom */
			reduce(114), /* ==, reduce: Atom */
			reduce(114), /* ~=, reduce: Atom */
			reduce(114), /* |, reduce: Atom */
			reduce(114), /* ~, reduce: Atom */
			reduce(114), /* &, reduce: Atom */
			reduce(114), /* .., reduce: Atom */
			reduce(114), /* <<, reduce: Atom */
			reduce(114), /* >>, reduce: Atom */
			reduce(114), /* +, reduce: Atom */
			reduce(114), /* -, reduce: Atom */
			reduce(114), /* *, reduce: Atom */
			reduce(114), /* /, reduce: Atom */
			reduce(114), /* %, reduce: Atom */
			reduce(114), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(114), /* ^, reduce: Atom */
			shift(1985), /* [ */
			nil,         /* ] */
			shift(1986), /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			shift(1988), /* string */
			shift(1990), /* { */
			nil,         /* } */
			reduce(114), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S1821
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(168), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(184), /* ( */
			nil,        /* ) */
			shift(185), /* nil */
			shift(186), /* true */
			shift(187), /* false */
			shift(188), /* ... */
			shift(189), /* numdec */
			shift(190), /* numhex */
			shift(191), /* string */
			shift(194), /* { */
			nil,        /* } */
			shift(195), /* ident */
		},
	},
	actionRow{ // S1822
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(105), /* return, reduce: Atom */
			reduce(105), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(105), /* break, reduce: Atom */
			reduce(105), /* goto, reduce: Atom */
			reduce(105), /* do, reduce: Atom */
			reduce(105), /* end, reduce: Atom */
			reduce(105), /* while, reduce: Atom */
			reduce(105), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			reduce(105), /* elseif, reduce: Atom */
			reduce(105), /* else, reduce: Atom */
			reduce(105), /* if, reduce: Atom */
			reduce(105), /* ,, reduce: Atom */
			reduce(105), /* for, reduce: Atom */
			nil,         /* in */
			reduce(105), /* function, reduce: Atom */
			reduce(105), /* local, reduce: Atom */
			reduce(105), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(105), /* or, reduce: Atom */
			reduce(105), /* and, reduce: Atom */
			reduce(105), /* <, reduce: Atom */
			reduce(105), /* <=, reduce: Atom */
			reduce(105), /* >, reduce: Atom */
			reduce(105), /* >=, reduce: Atom */
			reduce(105), /* ==, reduce: Atom */
			reduce(105), /* ~=, reduce: Atom */
			reduce(105), /* |, reduce: Atom */
			reduce(105), /* ~, reduce: Atom */
			reduce(105), /* &, reduce: Atom */
			reduce(105), /* .., reduce: Atom */
			reduce(105), /* <<, reduce: Atom */
			reduce(105), /* >>, reduce: Atom */
			reduce(105), /* +, reduce: Atom */
			reduce(105), /* -, reduce: Atom */
			reduce(105), /* *, reduce: Atom */
			reduce(105), /* /, reduce: Atom */
			reduce(105), /* %, reduce: Atom */
			reduce(105), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(105), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(105), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(105), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S1823
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(106), /* return, reduce: Atom */
			reduce(106), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(106), /* break, reduce: Atom */
			reduce(106), /* goto, reduce: Atom */
			reduce(106), /* do, reduce: Atom */
			reduce(106), /* end, reduce: Atom */
			reduce(106), /* while, reduce: Atom */
			reduce(106), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			reduce(106), /* elseif, reduce: Atom */
			reduce(106), /* else, reduce: Atom */
			reduce(106), /* if, reduce: Atom */
			reduce(106), /* ,, reduce: Atom */
			reduce(106), /* for, reduce: Atom */
			nil,         /* in */
			reduce(106), /* function, reduce: Atom */
			reduce(106), /* local, reduce: Atom */
			reduce(106), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(106), /* or, reduce: Atom */
			reduce(106), /* and, reduce: Atom */
			reduce(106), /* <, reduce: Atom */
			reduce(106), /* <=, reduce: Atom */
			reduce(106), /* >, reduce: Atom */
			reduce(106), /* >=, reduce: Atom */
			reduce(106), /* ==, reduce: Atom */
			reduce(106), /* ~=, reduce: Atom */
			reduce(106), /* |, reduce: Atom */
			reduce(106), /* ~, reduce: Atom */
			reduce(106), /* &, reduce: Atom */
			reduce(106), /* .., reduce: Atom */
			reduce(106), /* <<, reduce: Atom */
			reduce(106), /* >>, reduce: Atom */
			reduce(106), /* +, reduce: Atom */
			reduce(106), /* -, reduce: Atom */
			reduce(106), /* *, reduce: Atom */
			reduce(106), /* /, reduce: Atom */
			reduce(106), /* %, reduce: Atom */
			reduce(106), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(106), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(106), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(106), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S1824
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(107), /* return, reduce: Atom */
			reduce(107), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(107), /* break, reduce: Atom */
			reduce(107), /* goto, reduce: Atom */
			reduce(107), /* do, reduce: Atom */
			reduce(107), /* end, reduce: Atom */
			reduce(107), /* while, reduce: Atom */
			reduce(107), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			reduce(107), /* elseif, reduce: Atom */
			reduce(107), /* else, reduce: Atom */
			reduce(107), /* if, reduce: Atom */
			reduce(107), /* ,, reduce: Atom */
			reduce(107), /* for, reduce: Atom */
			nil,         /* in */
			reduce(107), /* function, reduce: Atom */
			reduce(107), /* local, reduce: Atom */
			reduce(107), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(107), /* or, reduce: Atom */
			reduce(107), /* and, reduce: Atom */
			reduce(107), /* <, reduce: Atom */
			reduce(107), /* <=, reduce: Atom */
			reduce(107), /* >, reduce: Atom */
			reduce(107), /* >=, reduce: Atom */
			reduce(107), /* ==, reduce: Atom */
			reduce(107), /* ~=, reduce: Atom */
			reduce(107), /* |, reduce: Atom */
			reduce(107), /* ~, reduce: Atom */
			reduce(107), /* &, reduce: Atom */
			reduce(107), /* .., reduce: Atom */
			reduce(107), /* <<, reduce: Atom */
			reduce(107), /* >>, reduce: Atom */
			reduce(107), /* +, reduce: Atom */
			reduce(107), /* -, reduce: Atom */
			reduce(107), /* *, reduce: Atom */
			reduce(107), /* /, reduce: Atom */
			reduce(107), /* %, reduce: Atom */
			reduce(107), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(107), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(107), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(107), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S1825
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(108), /* return, reduce: Atom */
			reduce(108), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(108), /* break, reduce: Atom */
			reduce(108), /* goto, reduce: Atom */
			reduce(108), /* do, reduce: Atom */
			reduce(108), /* end, reduce: Atom */
			reduce(108), /* while, reduce: Atom */
			reduce(108), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			reduce(108), /* elseif, reduce: Atom */
			reduce(108), /* else, reduce: Atom */
			reduce(108), /* if, reduce: Atom */
			reduce(108), /* ,, reduce: Atom */
			reduce(108), /* for, reduce: Atom */
			nil,         /* in */
			reduce(108), /* function, reduce: Atom */
			reduce(108), /* local, reduce: Atom */
			reduce(108), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(108), /* or, reduce: Atom */
			reduce(108), /* and, reduce: Atom */
			reduce(108), /* <, reduce: Atom */
			reduce(108), /* <=, reduce: Atom */
			reduce(108), /* >, reduce: Atom */
			reduce(108), /* >=, reduce: Atom */
			reduce(108), /* ==, reduce: Atom */
			reduce(108), /* ~=, reduce: Atom */
			reduce(108), /* |, reduce: Atom */
			reduce(108), /* ~, reduce: Atom */
			reduce(108), /* &, reduce: Atom */
			reduce(108), /* .., reduce: Atom */
			reduce(108), /* <<, reduce: Atom */
			reduce(108), /* >>, reduce: Atom */
			reduce(108), /* +, reduce: Atom */
			reduce(108), /* -, reduce: Atom */
			reduce(108), /* *, reduce: Atom */
			reduce(108), /* /, reduce: Atom */
			reduce(108), /* %, reduce: Atom */
			reduce(108), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(108), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(108), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(108), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S1826
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(109), /* return, reduce: Atom */
			reduce(109), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(109), /* break, reduce: Atom */
			reduce(109), /* goto, reduce: Atom */
			reduce(109), /* do, reduce: Atom */
			reduce(109), /* end, reduce: Atom */
			reduce(109), /* while, reduce: Atom */
			reduce(109), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			reduce(109), /* elseif, reduce: Atom */
			reduce(109), /* else, reduce: Atom */
			reduce(109), /* if, reduce: Atom */
			reduce(109), /* ,, reduce: Atom */
			reduce(109), /* for, reduce: Atom */
			nil,         /* in */
			reduce(109), /* function, reduce: Atom */
			reduce(109), /* local, reduce: Atom */
			reduce(109), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(109), /* or, reduce: Atom */
			reduce(109), /* and, reduce: Atom */
			reduce(109), /* <, reduce: Atom */
			reduce(109), /* <=, reduce: Atom */
			reduce(109), /* >, reduce: Atom */
			reduce(109), /* >=, reduce: Atom */
			reduce(109), /* ==, reduce: Atom */
			reduce(109), /* ~=, reduce: Atom */
			reduce(109), /* |, reduce: Atom */
			reduce(109), /* ~, reduce: Atom */
			reduce(109), /* &, reduce: Atom */
			reduce(109), /* .., reduce: Atom */
			reduce(109), /* <<, reduce: Atom */
			reduce(109), /* >>, reduce: Atom */
			reduce(109), /* +, reduce: Atom */
			reduce(109), /* -, reduce: Atom */
			reduce(109), /* *, reduce: Atom */
			reduce(109), /* /, reduce: Atom */
			reduce(109), /* %, reduce: Atom */
			reduce(109), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(109), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(109), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(109), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S1827
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(110), /* return, reduce: Atom */
			reduce(110), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(110), /* break, reduce: Atom */
			reduce(110), /* goto, reduce: Atom */
			reduce(110), /* do, reduce: Atom */
			reduce(110), /* end, reduce: Atom */
			reduce(110), /* while, reduce: Atom */
			reduce(110), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			reduce(110), /* elseif, reduce: Atom */
			reduce(110), /* else, reduce: Atom */
			reduce(110), /* if, reduce: Atom */
			reduce(110), /* ,, reduce: Atom */
			reduce(110), /* for, reduce: Atom */
			nil,         /* in */
			reduce(110), /* function, reduce: Atom */
			reduce(110), /* local, reduce: Atom */
			reduce(110), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(110), /* or, reduce: Atom */
			reduce(110), /* and, reduce: Atom */
			reduce(110), /* <, reduce: Atom */
			reduce(110), /* <=, reduce: Atom */
			reduce(110), /* >, reduce: Atom */
			reduce(110), /* >=, reduce: Atom */
			reduce(110), /* ==, reduce: Atom */
			reduce(110), /* ~=, reduce: Atom */
			reduce(110), /* |, reduce: Atom */
			reduce(110), /* ~, reduce: Atom */
			reduce(110), /* &, reduce: Atom */
			reduce(110), /* .., reduce: Atom */
			reduce(110), /* <<, reduce: Atom */
			reduce(110), /* >>, reduce: Atom */
			reduce(110), /* +, reduce: Atom */
			reduce(110), /* -, reduce: Atom */
			reduce(110), /* *, reduce: Atom */
			reduce(110), /* /, reduce: Atom */
			reduce(110), /* %, reduce: Atom */
			reduce(110), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(110), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(110), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(110), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S1828
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(111), /* return, reduce: Atom */
			reduce(111), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(111), /* break, reduce: Atom */
			reduce(111), /* goto, reduce: Atom */
			reduce(111), /* do, reduce: Atom */
			reduce(111), /* end, reduce: Atom */
			reduce(111), /* while, reduce: Atom */
			reduce(111), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			reduce(111), /* elseif, reduce: Atom */
			reduce(111), /* else, reduce: Atom */
			reduce(111), /* if, reduce: Atom */
			reduce(111), /* ,, reduce: Atom */
			reduce(111), /* for, reduce: Atom */
			nil,         /* in */
			reduce(111), /* function, reduce: Atom */
			reduce(111), /* local, reduce: Atom */
			reduce(111), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(111), /* or, reduce: Atom */
			reduce(111), /* and, reduce: Atom */
			reduce(111), /* <, reduce: Atom */
			reduce(111), /* <=, reduce: Atom */
			reduce(111), /* >, reduce: Atom */
			reduce(111), /* >=, reduce: Atom */
			reduce(111), /* ==, reduce: Atom */
			reduce(111), /* ~=, reduce: Atom */
			reduce(111), /* |, reduce: Atom */
			reduce(111), /* ~, reduce: Atom */
			reduce(111), /* &, reduce: Atom */
			reduce(111), /* .., reduce: Atom */
			reduce(111), /* <<, reduce: Atom */
			reduce(111), /* >>, reduce: Atom */
			reduce(111), /* +, reduce: Atom */
			reduce(111), /* -, reduce: Atom */
			reduce(111), /* *, reduce: Atom */
			reduce(111), /* /, reduce: Atom */
			reduce(111), /* %, reduce: Atom */
			reduce(111), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(111), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(111), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(111), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S1829
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(112), /* return, reduce: Atom */
			reduce(112), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(112), /* break, reduce: Atom */
			reduce(112), /* goto, reduce: Atom */
			reduce(112), /* do, reduce: Atom */
			reduce(112), /* end, reduce: Atom */
			reduce(112), /* while, reduce: Atom */
			reduce(112), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			reduce(112), /* elseif, reduce: Atom */
			reduce(112), /* else, reduce: Atom */
			reduce(112), /* if, reduce: Atom */
			reduce(112), /* ,, reduce: Atom */
			reduce(112), /* for, reduce: Atom */
			nil,         /* in */
			reduce(112), /* function, reduce: Atom */
			reduce(112), /* local, reduce: Atom */
			reduce(112), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(112), /* or, reduce: Atom */
			reduce(112), /* and, reduce: Atom */
			reduce(112), /* <, reduce: Atom */
			reduce(112), /* <=, reduce: Atom */
			reduce(112), /* >, reduce: Atom */
			reduce(112), /* >=, reduce: Atom */
			reduce(112), /* ==, reduce: Atom */
			reduce(112), /* ~=, reduce: Atom */
			reduce(112), /* |, reduce: Atom */
			reduce(112), /* ~, reduce: Atom */
			reduce(112), /* &, reduce: Atom */
			reduce(112), /* .., reduce: Atom */
			reduce(112), /* <<, reduce: Atom */
			reduce(112), /* >>, reduce: Atom */
			reduce(112), /* +, reduce: Atom */
			reduce(112), /* -, reduce: Atom */
			reduce(112), /* *, reduce: Atom */
			reduce(112), /* /, reduce: Atom */
			reduce(112), /* %, reduce: Atom */
			reduce(112), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(112), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(112), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(112), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S1830
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(113), /* return, reduce: Atom */
			reduce(113), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(113), /* break, reduce: Atom */
			reduce(113), /* goto, reduce: Atom */
			reduce(113), /* do, reduce: Atom */
			reduce(113), /* end, reduce: Atom */
			reduce(113), /* while, reduce: Atom */
			reduce(113), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			reduce(113), /* elseif, reduce: Atom */
			reduce(113), /* else, reduce: Atom */
			reduce(113), /* if, reduce: Atom */
			reduce(113), /* ,, reduce: Atom */
			reduce(113), /* for, reduce: Atom */
			nil,         /* in */
			reduce(113), /* function, reduce: Atom */
			reduce(113), /* local, reduce: Atom */
			reduce(113), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(113), /* or, reduce: Atom */
			reduce(113), /* and, reduce: Atom */
			reduce(113), /* <, reduce: Atom */
			reduce(113), /* <=, reduce: Atom */
			reduce(113), /* >, reduce: Atom */
			reduce(113), /* >=, reduce: Atom */
			reduce(113), /* ==, reduce: Atom */
			reduce(113), /* ~=, reduce: Atom */
			reduce(113), /* |, reduce: Atom */
			reduce(113), /* ~, reduce: Atom */
			reduce(113), /* &, reduce: Atom */
			reduce(113), /* .., reduce: Atom */
			reduce(113), /* <<, reduce: Atom */
			reduce(113), /* >>, reduce: Atom */
			reduce(113), /* +, reduce: Atom */
			reduce(113), /* -, reduce: Atom */
			reduce(113), /* *, reduce: Atom */
			reduce(113), /* /, reduce: Atom */
			reduce(113), /* %, reduce: Atom */
			reduce(113), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(113), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(113), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(113), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S1831
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			shift(254), /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(268), /* ident */
		},
	},
	actionRow{ // S1832
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(134), /* return, reduce: Name */
			reduce(134), /* ;, reduce: Name */
			nil,         /* empty */
			nil,         /* = */
			reduce(134), /* break, reduce: Name */
			reduce(134), /* goto, reduce: Name */
			reduce(134), /* do, reduce: Name */
			reduce(134), /* end, reduce: Name */
			reduce(134), /* while, reduce: Name */
			reduce(134), /* repeat, reduce: Name */
			nil,         /* until */
			nil,         /* then */
			reduce(134), /* elseif, reduce: Name */
			reduce(134), /* else, reduce: Name */
			reduce(134), /* if, reduce: Name */
			reduce(134), /* ,, reduce: Name */
			reduce(134), /* for, reduce: Name */
			nil,         /* in */
			reduce(134), /* function, reduce: Name */
			reduce(134), /* local, reduce: Name */
			reduce(134), /* ::, reduce: Name */
			reduce(134), /* ., reduce: Name */
			reduce(134), /* :, reduce: Name */
			reduce(134), /* or, reduce: Name */
			reduce(134), /* and, reduce: Name */
			reduce(134), /* <, reduce: Name */
			reduce(134), /* <=, reduce: Name */
			reduce(134), /* >, reduce: Name */
			reduce(134), /* >=, reduce: Name */
			reduce(134), /* ==, reduce: Name */
			reduce(134), /* ~=, reduce: Name */
			reduce(134), /* |, reduce: Name */
			reduce(134), /* ~, reduce: Name */
			reduce(134), /* &, reduce: Name */
			reduce(134), /* .., reduce: Name */
			reduce(134), /* <<, reduce: Name */
			reduce(134), /* >>, reduce: Name */
			reduce(134), /* +, reduce: Name */
			reduce(134), /* -, reduce: Name */
			reduce(134), /* *, reduce: Name */
			reduce(134), /* /, reduce: Name */
			reduce(134), /* %, reduce: Name */
			reduce(134), /* //, reduce: Name */
			nil,         /* not */
			nil,         /* # */
			reduce(134), /* ^, reduce: Name */
			reduce(134), /* [, reduce: Name */
			nil,         /* ] */
			reduce(134), /* (, reduce: Name */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(134), /* string, reduce: Name */
			reduce(134), /* {, reduce: Name */
			nil,         /* } */
			reduce(134), /* ident, reduce: Name */
		},
	},
	actionRow{ // S1833
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(26), /* return, reduce: BlockStat */
			reduce(26), /* ;, reduce: BlockStat */
			nil,        /* empty */
			nil,        /* = */
			reduce(26), /* break, reduce: BlockStat */
			reduce(26), /* goto, reduce: BlockStat */
			reduce(26), /* do, reduce: BlockStat */
			reduce(26), /* end, reduce: BlockStat */
			reduce(26), /* while, reduce: BlockStat */
			reduce(26), /* repeat, reduce: BlockStat */
			nil,        /* until */
			nil,        /* then */
			reduce(26), /* elseif, reduce: BlockStat */
			reduce(26), /* else, reduce: BlockStat */
			reduce(26), /* if, reduce: BlockStat */
			nil,        /* , */
			reduce(26), /* for, reduce: BlockStat */
			nil,        /* in */
			reduce(26), /* function, reduce: BlockStat */
			reduce(26), /* local, reduce: BlockStat */
			reduce(26), /* ::, reduce: BlockStat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(26), /* (, reduce: BlockStat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(26), /* ident, reduce: BlockStat */
		},
	},
	actionRow{ // S1834
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S1835
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1997), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(2013), /* ( */
			nil,         /* ) */
			shift(2014), /* nil */
			shift(2015), /* true */
			shift(2016), /* false */
			shift(2017), /* ... */
			shift(2018), /* numdec */
			shift(2019), /* numhex */
			shift(2020), /* string */
			shift(2023), /* { */
			nil,         /* } */
			shift(2024), /* ident */
		},
	},
	actionRow{ // S1836
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			reduce(6), /* elseif, reduce: StatList */
			reduce(6), /* else, reduce: StatList */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S1837
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(782), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(798), /* ( */
			nil,        /* ) */
			shift(799), /* nil */
			shift(800), /* true */
			shift(801), /* false */
			shift(802), /* ... */
			shift(803), /* numdec */
			shift(804), /* numhex */
			shift(805), /* string */
			shift(808), /* { */
			nil,        /* } */
			shift(809), /* ident */
		},
	},
	actionRow{ // S1838
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(816), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(832), /* ( */
			nil,        /* ) */
			shift(833), /* nil */
			shift(834), /* true */
			shift(835), /* false */
			shift(836), /* ... */
			shift(837), /* numdec */
			shift(838), /* numhex */
			shift(839), /* string */
			shift(842), /* { */
			nil,        /* } */
			shift(843), /* ident */
		},
	},
	actionRow{ // S1839
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(40), /* return, reduce: FunctionStat */
			reduce(40), /* ;, reduce: FunctionStat */
			nil,        /* empty */
			nil,        /* = */
			reduce(40), /* break, reduce: FunctionStat */
			reduce(40), /* goto, reduce: FunctionStat */
			reduce(40), /* do, reduce: FunctionStat */
			reduce(40), /* end, reduce: FunctionStat */
			reduce(40), /* while, reduce: FunctionStat */
			reduce(40), /* repeat, reduce: FunctionStat */
			nil,        /* until */
			nil,        /* then */
			reduce(40), /* elseif, reduce: FunctionStat */
			reduce(40), /* else, reduce: FunctionStat */
			reduce(40), /* if, reduce: FunctionStat */
			nil,        /* , */
			reduce(40), /* for, reduce: FunctionStat */
			nil,        /* in */
			reduce(40), /* function, reduce: FunctionStat */
			reduce(40), /* local, reduce: FunctionStat */
			reduce(40), /* ::, reduce: FunctionStat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(40), /* (, reduce: FunctionStat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(40), /* ident, reduce: FunctionStat */
		},
	},
	actionRow{ // S1840
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(123), /* ), reduce: ParList */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			shift(521),  /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			shift(523),  /* ident */
		},
	},
	actionRow{ // S1841
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1805), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1821), /* ( */
			nil,         /* ) */
			shift(1822), /* nil */
			shift(1823), /* true */
			shift(1824), /* false */
			shift(1825), /* ... */
			shift(1826), /* numdec */
			shift(1827), /* numhex */
			shift(1828), /* string */
			shift(1831), /* { */
			nil,         /* } */
			shift(1832), /* ident */
		},
	},
	actionRow{ // S1842
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			shift(1566), /* ident */
		},
	},
	actionRow{ // S1843
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1840), /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1844
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(44), /* return, reduce: Label */
			reduce(44), /* ;, reduce: Label */
			nil,        /* empty */
			nil,        /* = */
			reduce(44), /* break, reduce: Label */
			reduce(44), /* goto, reduce: Label */
			reduce(44), /* do, reduce: Label */
			reduce(44), /* end, reduce: Label */
			reduce(44), /* while, reduce: Label */
			reduce(44), /* repeat, reduce: Label */
			nil,        /* until */
			nil,        /* then */
			reduce(44), /* elseif, reduce: Label */
			reduce(44), /* else, reduce: Label */
			reduce(44), /* if, reduce: Label */
			nil,        /* , */
			reduce(44), /* for, reduce: Label */
			nil,        /* in */
			reduce(44), /* function, reduce: Label */
			reduce(44), /* local, reduce: Label */
			reduce(44), /* ::, reduce: Label */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(44), /* (, reduce: Label */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(44), /* ident, reduce: Label */
		},
	},
	actionRow{ // S1845
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			reduce(124), /* then, reduce: FuncBody */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(124), /* or, reduce: FuncBody */
			reduce(124), /* and, reduce: FuncBody */
			reduce(124), /* <, reduce: FuncBody */
			reduce(124), /* <=, reduce: FuncBody */
			reduce(124), /* >, reduce: FuncBody */
			reduce(124), /* >=, reduce: FuncBody */
			reduce(124), /* ==, reduce: FuncBody */
			reduce(124), /* ~=, reduce: FuncBody */
			reduce(124), /* |, reduce: FuncBody */
			reduce(124), /* ~, reduce: FuncBody */
			reduce(124), /* &, reduce: FuncBody */
			reduce(124), /* .., reduce: FuncBody */
			reduce(124), /* <<, reduce: FuncBody */
			reduce(124), /* >>, reduce: FuncBody */
			reduce(124), /* +, reduce: FuncBody */
			reduce(124), /* -, reduce: FuncBody */
			reduce(124), /* *, reduce: FuncBody */
			reduce(124), /* /, reduce: FuncBody */
			reduce(124), /* %, reduce: FuncBody */
			reduce(124), /* //, reduce: FuncBody */
			nil,         /* not */
			nil,         /* # */
			reduce(124), /* ^, reduce: FuncBody */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1846
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(83),  /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(99),  /* ( */
			nil,        /* ) */
			shift(100), /* nil */
			shift(101), /* true */
			shift(102), /* false */
			shift(103), /* ... */
			shift(104), /* numdec */
			shift(105), /* numhex */
			shift(106), /* string */
			shift(109), /* { */
			nil,        /* } */
			shift(110), /* ident */
		},
	},
	actionRow{ // S1847
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(38), /* $, reduce: ForStat */
			reduce(38), /* return, reduce: ForStat */
			reduce(38), /* ;, reduce: ForStat */
			nil,        /* empty */
			nil,        /* = */
			reduce(38), /* break, reduce: ForStat */
			reduce(38), /* goto, reduce: ForStat */
			reduce(38), /* do, reduce: ForStat */
			nil,        /* end */
			reduce(38), /* while, reduce: ForStat */
			reduce(38), /* repeat, reduce: ForStat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(38), /* if, reduce: ForStat */
			nil,        /* , */
			reduce(38), /* for, reduce: ForStat */
			nil,        /* in */
			reduce(38), /* function, reduce: ForStat */
			reduce(38), /* local, reduce: ForStat */
			reduce(38), /* ::, reduce: ForStat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(38), /* (, reduce: ForStat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(38), /* ident, reduce: ForStat */
		},
	},
	actionRow{ // S1848
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S1849
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(104), /* ,, reduce: FunctionCall */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(104), /* ., reduce: FunctionCall */
			reduce(104), /* :, reduce: FunctionCall */
			reduce(104), /* or, reduce: FunctionCall */
			reduce(104), /* and, reduce: FunctionCall */
			reduce(104), /* <, reduce: FunctionCall */
			reduce(104), /* <=, reduce: FunctionCall */
			reduce(104), /* >, reduce: FunctionCall */
			reduce(104), /* >=, reduce: FunctionCall */
			reduce(104), /* ==, reduce: FunctionCall */
			reduce(104), /* ~=, reduce: FunctionCall */
			reduce(104), /* |, reduce: FunctionCall */
			reduce(104), /* ~, reduce: FunctionCall */
			reduce(104), /* &, reduce: FunctionCall */
			reduce(104), /* .., reduce: FunctionCall */
			reduce(104), /* <<, reduce: FunctionCall */
			reduce(104), /* >>, reduce: FunctionCall */
			reduce(104), /* +, reduce: FunctionCall */
			reduce(104), /* -, reduce: FunctionCall */
			reduce(104), /* *, reduce: FunctionCall */
			reduce(104), /* /, reduce: FunctionCall */
			reduce(104), /* %, reduce: FunctionCall */
			reduce(104), /* //, reduce: FunctionCall */
			nil,         /* not */
			nil,         /* # */
			reduce(104), /* ^, reduce: FunctionCall */
			reduce(104), /* [, reduce: FunctionCall */
			nil,         /* ] */
			reduce(104), /* (, reduce: FunctionCall */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(104), /* string, reduce: FunctionCall */
			reduce(104), /* {, reduce: FunctionCall */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1850
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(98), /* ,, reduce: Var */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			reduce(98), /* ., reduce: Var */
			reduce(98), /* :, reduce: Var */
			reduce(98), /* or, reduce: Var */
			reduce(98), /* and, reduce: Var */
			reduce(98), /* <, reduce: Var */
			reduce(98), /* <=, reduce: Var */
			reduce(98), /* >, reduce: Var */
			reduce(98), /* >=, reduce: Var */
			reduce(98), /* ==, reduce: Var */
			reduce(98), /* ~=, reduce: Var */
			reduce(98), /* |, reduce: Var */
			reduce(98), /* ~, reduce: Var */
			reduce(98), /* &, reduce: Var */
			reduce(98), /* .., reduce: Var */
			reduce(98), /* <<, reduce: Var */
			reduce(98), /* >>, reduce: Var */
			reduce(98), /* +, reduce: Var */
			reduce(98), /* -, reduce: Var */
			reduce(98), /* *, reduce: Var */
			reduce(98), /* /, reduce: Var */
			reduce(98), /* %, reduce: Var */
			reduce(98), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(98), /* ^, reduce: Var */
			reduce(98), /* [, reduce: Var */
			nil,        /* ] */
			reduce(98), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(98), /* string, reduce: Var */
			reduce(98), /* {, reduce: Var */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1851
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(116), /* ,, reduce: Args */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(116), /* ., reduce: Args */
			reduce(116), /* :, reduce: Args */
			reduce(116), /* or, reduce: Args */
			reduce(116), /* and, reduce: Args */
			reduce(116), /* <, reduce: Args */
			reduce(116), /* <=, reduce: Args */
			reduce(116), /* >, reduce: Args */
			reduce(116), /* >=, reduce: Args */
			reduce(116), /* ==, reduce: Args */
			reduce(116), /* ~=, reduce: Args */
			reduce(116), /* |, reduce: Args */
			reduce(116), /* ~, reduce: Args */
			reduce(116), /* &, reduce: Args */
			reduce(116), /* .., reduce: Args */
			reduce(116), /* <<, reduce: Args */
			reduce(116), /* >>, reduce: Args */
			reduce(116), /* +, reduce: Args */
			reduce(116), /* -, reduce: Args */
			reduce(116), /* *, reduce: Args */
			reduce(116), /* /, reduce: Args */
			reduce(116), /* %, reduce: Args */
			reduce(116), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(116), /* ^, reduce: Args */
			reduce(116), /* [, reduce: Args */
			nil,         /* ] */
			reduce(116), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(116), /* string, reduce: Args */
			reduce(116), /* {, reduce: Args */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1852
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(125), /* ,, reduce: TableConstructor */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(125), /* ., reduce: TableConstructor */
			reduce(125), /* :, reduce: TableConstructor */
			reduce(125), /* or, reduce: TableConstructor */
			reduce(125), /* and, reduce: TableConstructor */
			reduce(125), /* <, reduce: TableConstructor */
			reduce(125), /* <=, reduce: TableConstructor */
			reduce(125), /* >, reduce: TableConstructor */
			reduce(125), /* >=, reduce: TableConstructor */
			reduce(125), /* ==, reduce: TableConstructor */
			reduce(125), /* ~=, reduce: TableConstructor */
			reduce(125), /* |, reduce: TableConstructor */
			reduce(125), /* ~, reduce: TableConstructor */
			reduce(125), /* &, reduce: TableConstructor */
			reduce(125), /* .., reduce: TableConstructor */
			reduce(125), /* <<, reduce: TableConstructor */
			reduce(125), /* >>, reduce: TableConstructor */
			reduce(125), /* +, reduce: TableConstructor */
			reduce(125), /* -, reduce: TableConstructor */
			reduce(125), /* *, reduce: TableConstructor */
			reduce(125), /* /, reduce: TableConstructor */
			reduce(125), /* %, reduce: TableConstructor */
			reduce(125), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(125), /* ^, reduce: TableConstructor */
			reduce(125), /* [, reduce: TableConstructor */
			nil,         /* ] */
			reduce(125), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(125), /* string, reduce: TableConstructor */
			reduce(125), /* {, reduce: TableConstructor */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1853
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(238),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			shift(254),  /* [ */
			nil,         /* ] */
			shift(255),  /* ( */
			nil,         /* ) */
			shift(256),  /* nil */
			shift(257),  /* true */
			shift(258),  /* false */
			shift(259),  /* ... */
			shift(260),  /* numdec */
			shift(261),  /* numhex */
			shift(262),  /* string */
			shift(265),  /* { */
			shift(2034), /* } */
			shift(268),  /* ident */
		},
	},
	actionRow{ // S1854
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(126), /* ,, reduce: TableConstructor */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(126), /* or, reduce: TableConstructor */
			reduce(126), /* and, reduce: TableConstructor */
			reduce(126), /* <, reduce: TableConstructor */
			reduce(126), /* <=, reduce: TableConstructor */
			reduce(126), /* >, reduce: TableConstructor */
			reduce(126), /* >=, reduce: TableConstructor */
			reduce(126), /* ==, reduce: TableConstructor */
			reduce(126), /* ~=, reduce: TableConstructor */
			reduce(126), /* |, reduce: TableConstructor */
			reduce(126), /* ~, reduce: TableConstructor */
			reduce(126), /* &, reduce: TableConstructor */
			reduce(126), /* .., reduce: TableConstructor */
			reduce(126), /* <<, reduce: TableConstructor */
			reduce(126), /* >>, reduce: TableConstructor */
			reduce(126), /* +, reduce: TableConstructor */
			reduce(126), /* -, reduce: TableConstructor */
			reduce(126), /* *, reduce: TableConstructor */
			reduce(126), /* /, reduce: TableConstructor */
			reduce(126), /* %, reduce: TableConstructor */
			reduce(126), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(126), /* ^, reduce: TableConstructor */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1855
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(39), /* $, reduce: ForInStat */
			reduce(39), /* return, reduce: ForInStat */
			reduce(39), /* ;, reduce: ForInStat */
			nil,        /* empty */
			nil,        /* = */
			reduce(39), /* break, reduce: ForInStat */
			reduce(39), /* goto, reduce: ForInStat */
			reduce(39), /* do, reduce: ForInStat */
			nil,        /* end */
			reduce(39), /* while, reduce: ForInStat */
			reduce(39), /* repeat, reduce: ForInStat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(39), /* if, reduce: ForInStat */
			nil,        /* , */
			reduce(39), /* for, reduce: ForInStat */
			nil,        /* in */
			reduce(39), /* function, reduce: ForInStat */
			reduce(39), /* local, reduce: ForInStat */
			reduce(39), /* ::, reduce: ForInStat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(39), /* (, reduce: ForInStat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(39), /* ident, reduce: ForInStat */
		},
	},
	actionRow{ // S1856
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S1857
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(104), /* do, reduce: FunctionCall */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(104), /* ,, reduce: FunctionCall */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(104), /* ., reduce: FunctionCall */
			reduce(104), /* :, reduce: FunctionCall */
			reduce(104), /* or, reduce: FunctionCall */
			reduce(104), /* and, reduce: FunctionCall */
			reduce(104), /* <, reduce: FunctionCall */
			reduce(104), /* <=, reduce: FunctionCall */
			reduce(104), /* >, reduce: FunctionCall */
			reduce(104), /* >=, reduce: FunctionCall */
			reduce(104), /* ==, reduce: FunctionCall */
			reduce(104), /* ~=, reduce: FunctionCall */
			reduce(104), /* |, reduce: FunctionCall */
			reduce(104), /* ~, reduce: FunctionCall */
			reduce(104), /* &, reduce: FunctionCall */
			reduce(104), /* .., reduce: FunctionCall */
			reduce(104), /* <<, reduce: FunctionCall */
			reduce(104), /* >>, reduce: FunctionCall */
			reduce(104), /* +, reduce: FunctionCall */
			reduce(104), /* -, reduce: FunctionCall */
			reduce(104), /* *, reduce: FunctionCall */
			reduce(104), /* /, reduce: FunctionCall */
			reduce(104), /* %, reduce: FunctionCall */
			reduce(104), /* //, reduce: FunctionCall */
			nil,         /* not */
			nil,         /* # */
			reduce(104), /* ^, reduce: FunctionCall */
			reduce(104), /* [, reduce: FunctionCall */
			nil,         /* ] */
			reduce(104), /* (, reduce: FunctionCall */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(104), /* string, reduce: FunctionCall */
			reduce(104), /* {, reduce: FunctionCall */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1858
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			reduce(98), /* do, reduce: Var */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			reduce(98), /* ,, reduce: Var */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			reduce(98), /* ., reduce: Var */
			reduce(98), /* :, reduce: Var */
			reduce(98), /* or, reduce: Var */
			reduce(98), /* and, reduce: Var */
			reduce(98), /* <, reduce: Var */
			reduce(98), /* <=, reduce: Var */
			reduce(98), /* >, reduce: Var */
			reduce(98), /* >=, reduce: Var */
			reduce(98), /* ==, reduce: Var */
			reduce(98), /* ~=, reduce: Var */
			reduce(98), /* |, reduce: Var */
			reduce(98), /* ~, reduce: Var */
			reduce(98), /* &, reduce: Var */
			reduce(98), /* .., reduce: Var */
			reduce(98), /* <<, reduce: Var */
			reduce(98), /* >>, reduce: Var */
			reduce(98), /* +, reduce: Var */
			reduce(98), /* -, reduce: Var */
			reduce(98), /* *, reduce: Var */
			reduce(98), /* /, reduce: Var */
			reduce(98), /* %, reduce: Var */
			reduce(98), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(98), /* ^, reduce: Var */
			reduce(98), /* [, reduce: Var */
			nil,        /* ] */
			reduce(98), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(98), /* string, reduce: Var */
			reduce(98), /* {, reduce: Var */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1859
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(116), /* do, reduce: Args */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(116), /* ,, reduce: Args */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(116), /* ., reduce: Args */
			reduce(116), /* :, reduce: Args */
			reduce(116), /* or, reduce: Args */
			reduce(116), /* and, reduce: Args */
			reduce(116), /* <, reduce: Args */
			reduce(116), /* <=, reduce: Args */
			reduce(116), /* >, reduce: Args */
			reduce(116), /* >=, reduce: Args */
			reduce(116), /* ==, reduce: Args */
			reduce(116), /* ~=, reduce: Args */
			reduce(116), /* |, reduce: Args */
			reduce(116), /* ~, reduce: Args */
			reduce(116), /* &, reduce: Args */
			reduce(116), /* .., reduce: Args */
			reduce(116), /* <<, reduce: Args */
			reduce(116), /* >>, reduce: Args */
			reduce(116), /* +, reduce: Args */
			reduce(116), /* -, reduce: Args */
			reduce(116), /* *, reduce: Args */
			reduce(116), /* /, reduce: Args */
			reduce(116), /* %, reduce: Args */
			reduce(116), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(116), /* ^, reduce: Args */
			reduce(116), /* [, reduce: Args */
			nil,         /* ] */
			reduce(116), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(116), /* string, reduce: Args */
			reduce(116), /* {, reduce: Args */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1860
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(125), /* do, reduce: TableConstructor */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(125), /* ,, reduce: TableConstructor */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(125), /* ., reduce: TableConstructor */
			reduce(125), /* :, reduce: TableConstructor */
			reduce(125), /* or, reduce: TableConstructor */
			reduce(125), /* and, reduce: TableConstructor */
			reduce(125), /* <, reduce: TableConstructor */
			reduce(125), /* <=, reduce: TableConstructor */
			reduce(125), /* >, reduce: TableConstructor */
			reduce(125), /* >=, reduce: TableConstructor */
			reduce(125), /* ==, reduce: TableConstructor */
			reduce(125), /* ~=, reduce: TableConstructor */
			reduce(125), /* |, reduce: TableConstructor */
			reduce(125), /* ~, reduce: TableConstructor */
			reduce(125), /* &, reduce: TableConstructor */
			reduce(125), /* .., reduce: TableConstructor */
			reduce(125), /* <<, reduce: TableConstructor */
			reduce(125), /* >>, reduce: TableConstructor */
			reduce(125), /* +, reduce: TableConstructor */
			reduce(125), /* -, reduce: TableConstructor */
			reduce(125), /* *, reduce: TableConstructor */
			reduce(125), /* /, reduce: TableConstructor */
			reduce(125), /* %, reduce: TableConstructor */
			reduce(125), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(125), /* ^, reduce: TableConstructor */
			reduce(125), /* [, reduce: TableConstructor */
			nil,         /* ] */
			reduce(125), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(125), /* string, reduce: TableConstructor */
			reduce(125), /* {, reduce: TableConstructor */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1861
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(238),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			shift(254),  /* [ */
			nil,         /* ] */
			shift(255),  /* ( */
			nil,         /* ) */
			shift(256),  /* nil */
			shift(257),  /* true */
			shift(258),  /* false */
			shift(259),  /* ... */
			shift(260),  /* numdec */
			shift(261),  /* numhex */
			shift(262),  /* string */
			shift(265),  /* { */
			shift(2036), /* } */
			shift(268),  /* ident */
		},
	},
	actionRow{ // S1862
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(126), /* do, reduce: TableConstructor */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(126), /* ,, reduce: TableConstructor */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(126), /* or, reduce: TableConstructor */
			reduce(126), /* and, reduce: TableConstructor */
			reduce(126), /* <, reduce: TableConstructor */
			reduce(126), /* <=, reduce: TableConstructor */
			reduce(126), /* >, reduce: TableConstructor */
			reduce(126), /* >=, reduce: TableConstructor */
			reduce(126), /* ==, reduce: TableConstructor */
			reduce(126), /* ~=, reduce: TableConstructor */
			reduce(126), /* |, reduce: TableConstructor */
			reduce(126), /* ~, reduce: TableConstructor */
			reduce(126), /* &, reduce: TableConstructor */
			reduce(126), /* .., reduce: TableConstructor */
			reduce(126), /* <<, reduce: TableConstructor */
			reduce(126), /* >>, reduce: TableConstructor */
			reduce(126), /* +, reduce: TableConstructor */
			reduce(126), /* -, reduce: TableConstructor */
			reduce(126), /* *, reduce: TableConstructor */
			reduce(126), /* /, reduce: TableConstructor */
			reduce(126), /* %, reduce: TableConstructor */
			reduce(126), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(126), /* ^, reduce: TableConstructor */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1863
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(124), /* $, reduce: FuncBody */
			reduce(124), /* return, reduce: FuncBody */
			reduce(124), /* ;, reduce: FuncBody */
			nil,         /* empty */
			nil,         /* = */
			reduce(124), /* break, reduce: FuncBody */
			reduce(124), /* goto, reduce: FuncBody */
			reduce(124), /* do, reduce: FuncBody */
			nil,         /* end */
			reduce(124), /* while, reduce: FuncBody */
			reduce(124), /* repeat, reduce: FuncBody */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(124), /* if, reduce: FuncBody */
			nil,         /* , */
			reduce(124), /* for, reduce: FuncBody */
			nil,         /* in */
			reduce(124), /* function, reduce: FuncBody */
			reduce(124), /* local, reduce: FuncBody */
			reduce(124), /* ::, reduce: FuncBody */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(124), /* (, reduce: FuncBody */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(124), /* ident, reduce: FuncBody */
		},
	},
	actionRow{ // S1864
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(2037), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1865
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(126), /* ., reduce: TableConstructor */
			reduce(126), /* :, reduce: TableConstructor */
			reduce(126), /* or, reduce: TableConstructor */
			reduce(126), /* and, reduce: TableConstructor */
			reduce(126), /* <, reduce: TableConstructor */
			reduce(126), /* <=, reduce: TableConstructor */
			reduce(126), /* >, reduce: TableConstructor */
			reduce(126), /* >=, reduce: TableConstructor */
			reduce(126), /* ==, reduce: TableConstructor */
			reduce(126), /* ~=, reduce: TableConstructor */
			reduce(126), /* |, reduce: TableConstructor */
			reduce(126), /* ~, reduce: TableConstructor */
			reduce(126), /* &, reduce: TableConstructor */
			reduce(126), /* .., reduce: TableConstructor */
			reduce(126), /* <<, reduce: TableConstructor */
			reduce(126), /* >>, reduce: TableConstructor */
			reduce(126), /* +, reduce: TableConstructor */
			reduce(126), /* -, reduce: TableConstructor */
			reduce(126), /* *, reduce: TableConstructor */
			reduce(126), /* /, reduce: TableConstructor */
			reduce(126), /* %, reduce: TableConstructor */
			reduce(126), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(126), /* ^, reduce: TableConstructor */
			reduce(126), /* [, reduce: TableConstructor */
			reduce(126), /* ], reduce: TableConstructor */
			reduce(126), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(126), /* string, reduce: TableConstructor */
			reduce(126), /* {, reduce: TableConstructor */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1866
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(2038), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1867
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(126), /* ,, reduce: TableConstructor */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(126), /* ., reduce: TableConstructor */
			reduce(126), /* :, reduce: TableConstructor */
			reduce(126), /* or, reduce: TableConstructor */
			reduce(126), /* and, reduce: TableConstructor */
			reduce(126), /* <, reduce: TableConstructor */
			reduce(126), /* <=, reduce: TableConstructor */
			reduce(126), /* >, reduce: TableConstructor */
			reduce(126), /* >=, reduce: TableConstructor */
			reduce(126), /* ==, reduce: TableConstructor */
			reduce(126), /* ~=, reduce: TableConstructor */
			reduce(126), /* |, reduce: TableConstructor */
			reduce(126), /* ~, reduce: TableConstructor */
			reduce(126), /* &, reduce: TableConstructor */
			reduce(126), /* .., reduce: TableConstructor */
			reduce(126), /* <<, reduce: TableConstructor */
			reduce(126), /* >>, reduce: TableConstructor */
			reduce(126), /* +, reduce: TableConstructor */
			reduce(126), /* -, reduce: TableConstructor */
			reduce(126), /* *, reduce: TableConstructor */
			reduce(126), /* /, reduce: TableConstructor */
			reduce(126), /* %, reduce: TableConstructor */
			reduce(126), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(126), /* ^, reduce: TableConstructor */
			reduce(126), /* [, reduce: TableConstructor */
			nil,         /* ] */
			reduce(126), /* (, reduce: TableConstructor */
			reduce(126), /* ), reduce: TableConstructor */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(126), /* string, reduce: TableConstructor */
			reduce(126), /* {, reduce: TableConstructor */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1868
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(124), /* or, reduce: FuncBody */
			reduce(124), /* and, reduce: FuncBody */
			reduce(124), /* <, reduce: FuncBody */
			reduce(124), /* <=, reduce: FuncBody */
			reduce(124), /* >, reduce: FuncBody */
			reduce(124), /* >=, reduce: FuncBody */
			reduce(124), /* ==, reduce: FuncBody */
			reduce(124), /* ~=, reduce: FuncBody */
			reduce(124), /* |, reduce: FuncBody */
			reduce(124), /* ~, reduce: FuncBody */
			reduce(124), /* &, reduce: FuncBody */
			reduce(124), /* .., reduce: FuncBody */
			reduce(124), /* <<, reduce: FuncBody */
			reduce(124), /* >>, reduce: FuncBody */
			reduce(124), /* +, reduce: FuncBody */
			reduce(124), /* -, reduce: FuncBody */
			reduce(124), /* *, reduce: FuncBody */
			reduce(124), /* /, reduce: FuncBody */
			reduce(124), /* %, reduce: FuncBody */
			reduce(124), /* //, reduce: FuncBody */
			nil,         /* not */
			nil,         /* # */
			reduce(124), /* ^, reduce: FuncBody */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(124), /* ), reduce: FuncBody */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1869
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(124), /* ;, reduce: FuncBody */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(124), /* ,, reduce: FuncBody */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(124), /* or, reduce: FuncBody */
			reduce(124), /* and, reduce: FuncBody */
			reduce(124), /* <, reduce: FuncBody */
			reduce(124), /* <=, reduce: FuncBody */
			reduce(124), /* >, reduce: FuncBody */
			reduce(124), /* >=, reduce: FuncBody */
			reduce(124), /* ==, reduce: FuncBody */
			reduce(124), /* ~=, reduce: FuncBody */
			reduce(124), /* |, reduce: FuncBody */
			reduce(124), /* ~, reduce: FuncBody */
			reduce(124), /* &, reduce: FuncBody */
			reduce(124), /* .., reduce: FuncBody */
			reduce(124), /* <<, reduce: FuncBody */
			reduce(124), /* >>, reduce: FuncBody */
			reduce(124), /* +, reduce: FuncBody */
			reduce(124), /* -, reduce: FuncBody */
			reduce(124), /* *, reduce: FuncBody */
			reduce(124), /* /, reduce: FuncBody */
			reduce(124), /* %, reduce: FuncBody */
			reduce(124), /* //, reduce: FuncBody */
			nil,         /* not */
			nil,         /* # */
			reduce(124), /* ^, reduce: FuncBody */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			reduce(124), /* }, reduce: FuncBody */
			nil,         /* ident */
		},
	},
	actionRow{ // S1870
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(124), /* $, reduce: FuncBody */
			reduce(124), /* return, reduce: FuncBody */
			reduce(124), /* ;, reduce: FuncBody */
			nil,         /* empty */
			nil,         /* = */
			reduce(124), /* break, reduce: FuncBody */
			reduce(124), /* goto, reduce: FuncBody */
			reduce(124), /* do, reduce: FuncBody */
			nil,         /* end */
			reduce(124), /* while, reduce: FuncBody */
			reduce(124), /* repeat, reduce: FuncBody */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(124), /* if, reduce: FuncBody */
			reduce(124), /* ,, reduce: FuncBody */
			reduce(124), /* for, reduce: FuncBody */
			nil,         /* in */
			reduce(124), /* function, reduce: FuncBody */
			reduce(124), /* local, reduce: FuncBody */
			reduce(124), /* ::, reduce: FuncBody */
			nil,         /* . */
			nil,         /* : */
			reduce(124), /* or, reduce: FuncBody */
			reduce(124), /* and, reduce: FuncBody */
			reduce(124), /* <, reduce: FuncBody */
			reduce(124), /* <=, reduce: FuncBody */
			reduce(124), /* >, reduce: FuncBody */
			reduce(124), /* >=, reduce: FuncBody */
			reduce(124), /* ==, reduce: FuncBody */
			reduce(124), /* ~=, reduce: FuncBody */
			reduce(124), /* |, reduce: FuncBody */
			reduce(124), /* ~, reduce: FuncBody */
			reduce(124), /* &, reduce: FuncBody */
			reduce(124), /* .., reduce: FuncBody */
			reduce(124), /* <<, reduce: FuncBody */
			reduce(124), /* >>, reduce: FuncBody */
			reduce(124), /* +, reduce: FuncBody */
			reduce(124), /* -, reduce: FuncBody */
			reduce(124), /* *, reduce: FuncBody */
			reduce(124), /* /, reduce: FuncBody */
			reduce(124), /* %, reduce: FuncBody */
			reduce(124), /* //, reduce: FuncBody */
			nil,         /* not */
			nil,         /* # */
			reduce(124), /* ^, reduce: FuncBody */
			nil,         /* [ */
			nil,         /* ] */
			reduce(124), /* (, reduce: FuncBody */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(124), /* ident, reduce: FuncBody */
		},
	},
	actionRow{ // S1871
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(2039), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1872
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(126), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(126), /* end, reduce: TableConstructor */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(126), /* ,, reduce: TableConstructor */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(126), /* ., reduce: TableConstructor */
			reduce(126), /* :, reduce: TableConstructor */
			reduce(126), /* or, reduce: TableConstructor */
			reduce(126), /* and, reduce: TableConstructor */
			reduce(126), /* <, reduce: TableConstructor */
			reduce(126), /* <=, reduce: TableConstructor */
			reduce(126), /* >, reduce: TableConstructor */
			reduce(126), /* >=, reduce: TableConstructor */
			reduce(126), /* ==, reduce: TableConstructor */
			reduce(126), /* ~=, reduce: TableConstructor */
			reduce(126), /* |, reduce: TableConstructor */
			reduce(126), /* ~, reduce: TableConstructor */
			reduce(126), /* &, reduce: TableConstructor */
			reduce(126), /* .., reduce: TableConstructor */
			reduce(126), /* <<, reduce: TableConstructor */
			reduce(126), /* >>, reduce: TableConstructor */
			reduce(126), /* +, reduce: TableConstructor */
			reduce(126), /* -, reduce: TableConstructor */
			reduce(126), /* *, reduce: TableConstructor */
			reduce(126), /* /, reduce: TableConstructor */
			reduce(126), /* %, reduce: TableConstructor */
			reduce(126), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(126), /* ^, reduce: TableConstructor */
			reduce(126), /* [, reduce: TableConstructor */
			nil,         /* ] */
			reduce(126), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(126), /* string, reduce: TableConstructor */
			reduce(126), /* {, reduce: TableConstructor */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1873
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S1874
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(104), /* return, reduce: FunctionCall */
			reduce(104), /* ;, reduce: FunctionCall */
			nil,         /* empty */
			nil,         /* = */
			reduce(104), /* break, reduce: FunctionCall */
			reduce(104), /* goto, reduce: FunctionCall */
			reduce(104), /* do, reduce: FunctionCall */
			reduce(104), /* end, reduce: FunctionCall */
			reduce(104), /* while, reduce: FunctionCall */
			reduce(104), /* repeat, reduce: FunctionCall */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(104), /* if, reduce: FunctionCall */
			reduce(104), /* ,, reduce: FunctionCall */
			reduce(104), /* for, reduce: FunctionCall */
			nil,         /* in */
			reduce(104), /* function, reduce: FunctionCall */
			reduce(104), /* local, reduce: FunctionCall */
			reduce(104), /* ::, reduce: FunctionCall */
			reduce(104), /* ., reduce: FunctionCall */
			reduce(104), /* :, reduce: FunctionCall */
			reduce(104), /* or, reduce: FunctionCall */
			reduce(104), /* and, reduce: FunctionCall */
			reduce(104), /* <, reduce: FunctionCall */
			reduce(104), /* <=, reduce: FunctionCall */
			reduce(104), /* >, reduce: FunctionCall */
			reduce(104), /* >=, reduce: FunctionCall */
			reduce(104), /* ==, reduce: FunctionCall */
			reduce(104), /* ~=, reduce: FunctionCall */
			reduce(104), /* |, reduce: FunctionCall */
			reduce(104), /* ~, reduce: FunctionCall */
			reduce(104), /* &, reduce: FunctionCall */
			reduce(104), /* .., reduce: FunctionCall */
			reduce(104), /* <<, reduce: FunctionCall */
			reduce(104), /* >>, reduce: FunctionCall */
			reduce(104), /* +, reduce: FunctionCall */
			reduce(104), /* -, reduce: FunctionCall */
			reduce(104), /* *, reduce: FunctionCall */
			reduce(104), /* /, reduce: FunctionCall */
			reduce(104), /* %, reduce: FunctionCall */
			reduce(104), /* //, reduce: FunctionCall */
			nil,         /* not */
			nil,         /* # */
			reduce(104), /* ^, reduce: FunctionCall */
			reduce(104), /* [, reduce: FunctionCall */
			nil,         /* ] */
			reduce(104), /* (, reduce: FunctionCall */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(104), /* string, reduce: FunctionCall */
			reduce(104), /* {, reduce: FunctionCall */
			nil,         /* } */
			reduce(104), /* ident, reduce: FunctionCall */
		},
	},
	actionRow{ // S1875
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(98), /* return, reduce: Var */
			reduce(98), /* ;, reduce: Var */
			nil,        /* empty */
			nil,        /* = */
			reduce(98), /* break, reduce: Var */
			reduce(98), /* goto, reduce: Var */
			reduce(98), /* do, reduce: Var */
			reduce(98), /* end, reduce: Var */
			reduce(98), /* while, reduce: Var */
			reduce(98), /* repeat, reduce: Var */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(98), /* if, reduce: Var */
			reduce(98), /* ,, reduce: Var */
			reduce(98), /* for, reduce: Var */
			nil,        /* in */
			reduce(98), /* function, reduce: Var */
			reduce(98), /* local, reduce: Var */
			reduce(98), /* ::, reduce: Var */
			reduce(98), /* ., reduce: Var */
			reduce(98), /* :, reduce: Var */
			reduce(98), /* or, reduce: Var */
			reduce(98), /* and, reduce: Var */
			reduce(98), /* <, reduce: Var */
			reduce(98), /* <=, reduce: Var */
			reduce(98), /* >, reduce: Var */
			reduce(98), /* >=, reduce: Var */
			reduce(98), /* ==, reduce: Var */
			reduce(98), /* ~=, reduce: Var */
			reduce(98), /* |, reduce: Var */
			reduce(98), /* ~, reduce: Var */
			reduce(98), /* &, reduce: Var */
			reduce(98), /* .., reduce: Var */
			reduce(98), /* <<, reduce: Var */
			reduce(98), /* >>, reduce: Var */
			reduce(98), /* +, reduce: Var */
			reduce(98), /* -, reduce: Var */
			reduce(98), /* *, reduce: Var */
			reduce(98), /* /, reduce: Var */
			reduce(98), /* %, reduce: Var */
			reduce(98), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(98), /* ^, reduce: Var */
			reduce(98), /* [, reduce: Var */
			nil,        /* ] */
			reduce(98), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(98), /* string, reduce: Var */
			reduce(98), /* {, reduce: Var */
			nil,        /* } */
			reduce(98), /* ident, reduce: Var */
		},
	},
	actionRow{ // S1876
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(116), /* return, reduce: Args */
			reduce(116), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			reduce(116), /* break, reduce: Args */
			reduce(116), /* goto, reduce: Args */
			reduce(116), /* do, reduce: Args */
			reduce(116), /* end, reduce: Args */
			reduce(116), /* while, reduce: Args */
			reduce(116), /* repeat, reduce: Args */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(116), /* if, reduce: Args */
			reduce(116), /* ,, reduce: Args */
			reduce(116), /* for, reduce: Args */
			nil,         /* in */
			reduce(116), /* function, reduce: Args */
			reduce(116), /* local, reduce: Args */
			reduce(116), /* ::, reduce: Args */
			reduce(116), /* ., reduce: Args */
			reduce(116), /* :, reduce: Args */
			reduce(116), /* or, reduce: Args */
			reduce(116), /* and, reduce: Args */
			reduce(116), /* <, reduce: Args */
			reduce(116), /* <=, reduce: Args */
			reduce(116), /* >, reduce: Args */
			reduce(116), /* >=, reduce: Args */
			reduce(116), /* ==, reduce: Args */
			reduce(116), /* ~=, reduce: Args */
			reduce(116), /* |, reduce: Args */
			reduce(116), /* ~, reduce: Args */
			reduce(116), /* &, reduce: Args */
			reduce(116), /* .., reduce: Args */
			reduce(116), /* <<, reduce: Args */
			reduce(116), /* >>, reduce: Args */
			reduce(116), /* +, reduce: Args */
			reduce(116), /* -, reduce: Args */
			reduce(116), /* *, reduce: Args */
			reduce(116), /* /, reduce: Args */
			reduce(116), /* %, reduce: Args */
			reduce(116), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(116), /* ^, reduce: Args */
			reduce(116), /* [, reduce: Args */
			nil,         /* ] */
			reduce(116), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(116), /* string, reduce: Args */
			reduce(116), /* {, reduce: Args */
			nil,         /* } */
			reduce(116), /* ident, reduce: Args */
		},
	},
	actionRow{ // S1877
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(125), /* return, reduce: TableConstructor */
			reduce(125), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			reduce(125), /* break, reduce: TableConstructor */
			reduce(125), /* goto, reduce: TableConstructor */
			reduce(125), /* do, reduce: TableConstructor */
			reduce(125), /* end, reduce: TableConstructor */
			reduce(125), /* while, reduce: TableConstructor */
			reduce(125), /* repeat, reduce: TableConstructor */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(125), /* if, reduce: TableConstructor */
			reduce(125), /* ,, reduce: TableConstructor */
			reduce(125), /* for, reduce: TableConstructor */
			nil,         /* in */
			reduce(125), /* function, reduce: TableConstructor */
			reduce(125), /* local, reduce: TableConstructor */
			reduce(125), /* ::, reduce: TableConstructor */
			reduce(125), /* ., reduce: TableConstructor */
			reduce(125), /* :, reduce: TableConstructor */
			reduce(125), /* or, reduce: TableConstructor */
			reduce(125), /* and, reduce: TableConstructor */
			reduce(125), /* <, reduce: TableConstructor */
			reduce(125), /* <=, reduce: TableConstructor */
			reduce(125), /* >, reduce: TableConstructor */
			reduce(125), /* >=, reduce: TableConstructor */
			reduce(125), /* ==, reduce: TableConstructor */
			reduce(125), /* ~=, reduce: TableConstructor */
			reduce(125), /* |, reduce: TableConstructor */
			reduce(125), /* ~, reduce: TableConstructor */
			reduce(125), /* &, reduce: TableConstructor */
			reduce(125), /* .., reduce: TableConstructor */
			reduce(125), /* <<, reduce: TableConstructor */
			reduce(125), /* >>, reduce: TableConstructor */
			reduce(125), /* +, reduce: TableConstructor */
			reduce(125), /* -, reduce: TableConstructor */
			reduce(125), /* *, reduce: TableConstructor */
			reduce(125), /* /, reduce: TableConstructor */
			reduce(125), /* %, reduce: TableConstructor */
			reduce(125), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(125), /* ^, reduce: TableConstructor */
			reduce(125), /* [, reduce: TableConstructor */
			nil,         /* ] */
			reduce(125), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(125), /* string, reduce: TableConstructor */
			reduce(125), /* {, reduce: TableConstructor */
			nil,         /* } */
			reduce(125), /* ident, reduce: TableConstructor */
		},
	},
	actionRow{ // S1878
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(238),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			shift(254),  /* [ */
			nil,         /* ] */
			shift(255),  /* ( */
			nil,         /* ) */
			shift(256),  /* nil */
			shift(257),  /* true */
			shift(258),  /* false */
			shift(259),  /* ... */
			shift(260),  /* numdec */
			shift(261),  /* numhex */
			shift(262),  /* string */
			shift(265),  /* { */
			shift(2041), /* } */
			shift(268),  /* ident */
		},
	},
	actionRow{ // S1879
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(126), /* return, reduce: TableConstructor */
			reduce(126), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			reduce(126), /* break, reduce: TableConstructor */
			reduce(126), /* goto, reduce: TableConstructor */
			reduce(126), /* do, reduce: TableConstructor */
			reduce(126), /* end, reduce: TableConstructor */
			reduce(126), /* while, reduce: TableConstructor */
			reduce(126), /* repeat, reduce: TableConstructor */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(126), /* if, reduce: TableConstructor */
			reduce(126), /* ,, reduce: TableConstructor */
			reduce(126), /* for, reduce: TableConstructor */
			nil,         /* in */
			reduce(126), /* function, reduce: TableConstructor */
			reduce(126), /* local, reduce: TableConstructor */
			reduce(126), /* ::, reduce: TableConstructor */
			nil,         /* . */
			nil,         /* : */
			reduce(126), /* or, reduce: TableConstructor */
			reduce(126), /* and, reduce: TableConstructor */
			reduce(126), /* <, reduce: TableConstructor */
			reduce(126), /* <=, reduce: TableConstructor */
			reduce(126), /* >, reduce: TableConstructor */
			reduce(126), /* >=, reduce: TableConstructor */
			reduce(126), /* ==, reduce: TableConstructor */
			reduce(126), /* ~=, reduce: TableConstructor */
			reduce(126), /* |, reduce: TableConstructor */
			reduce(126), /* ~, reduce: TableConstructor */
			reduce(126), /* &, reduce: TableConstructor */
			reduce(126), /* .., reduce: TableConstructor */
			reduce(126), /* <<, reduce: TableConstructor */
			reduce(126), /* >>, reduce: TableConstructor */
			reduce(126), /* +, reduce: TableConstructor */
			reduce(126), /* -, reduce: TableConstructor */
			reduce(126), /* *, reduce: TableConstructor */
			reduce(126), /* /, reduce: TableConstructor */
			reduce(126), /* %, reduce: TableConstructor */
			reduce(126), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(126), /* ^, reduce: TableConstructor */
			nil,         /* [ */
			nil,         /* ] */
			reduce(126), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(126), /* ident, reduce: TableConstructor */
		},
	},
	actionRow{ // S1880
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(56),  /* return, reduce: Exp */
			reduce(56),  /* ;, reduce: Exp */
			nil,         /* empty */
			nil,         /* = */
			reduce(56),  /* break, reduce: Exp */
			reduce(56),  /* goto, reduce: Exp */
			reduce(56),  /* do, reduce: Exp */
			reduce(56),  /* end, reduce: Exp */
			reduce(56),  /* while, reduce: Exp */
			reduce(56),  /* repeat, reduce: Exp */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(56),  /* if, reduce: Exp */
			nil,         /* , */
			reduce(56),  /* for, reduce: Exp */
			nil,         /* in */
			reduce(56),  /* function, reduce: Exp */
			reduce(56),  /* local, reduce: Exp */
			reduce(56),  /* ::, reduce: Exp */
			nil,         /* . */
			nil,         /* : */
			reduce(56),  /* or, reduce: Exp */
			shift(1673), /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(56),  /* (, reduce: Exp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(56),  /* ident, reduce: Exp */
		},
	},
	actionRow{ // S1881
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(2042), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1882
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(58), /* return, reduce: AndExp */
			reduce(58), /* ;, reduce: AndExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(58), /* break, reduce: AndExp */
			reduce(58), /* goto, reduce: AndExp */
			reduce(58), /* do, reduce: AndExp */
			reduce(58), /* end, reduce: AndExp */
			reduce(58), /* while, reduce: AndExp */
			reduce(58), /* repeat, reduce: AndExp */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(58), /* if, reduce: AndExp */
			nil,        /* , */
			reduce(58), /* for, reduce: AndExp */
			nil,        /* in */
			reduce(58), /* function, reduce: AndExp */
			reduce(58), /* local, reduce: AndExp */
			reduce(58), /* ::, reduce: AndExp */
			nil,        /* . */
			nil,        /* : */
			reduce(58), /* or, reduce: AndExp */
			reduce(58), /* and, reduce: AndExp */
			shift(203), /* < */
			shift(204), /* <= */
			shift(205), /* > */
			shift(206), /* >= */
			shift(207), /* == */
			shift(208), /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(58), /* (, reduce: AndExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(58), /* ident, reduce: AndExp */
		},
	},
	actionRow{ // S1883
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(66),  /* return, reduce: CompExp */
			reduce(66),  /* ;, reduce: CompExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(66),  /* break, reduce: CompExp */
			reduce(66),  /* goto, reduce: CompExp */
			reduce(66),  /* do, reduce: CompExp */
			reduce(66),  /* end, reduce: CompExp */
			reduce(66),  /* while, reduce: CompExp */
			reduce(66),  /* repeat, reduce: CompExp */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(66),  /* if, reduce: CompExp */
			nil,         /* , */
			reduce(66),  /* for, reduce: CompExp */
			nil,         /* in */
			reduce(66),  /* function, reduce: CompExp */
			reduce(66),  /* local, reduce: CompExp */
			reduce(66),  /* ::, reduce: CompExp */
			nil,         /* . */
			nil,         /* : */
			reduce(66),  /* or, reduce: CompExp */
			reduce(66),  /* and, reduce: CompExp */
			reduce(66),  /* <, reduce: CompExp */
			reduce(66),  /* <=, reduce: CompExp */
			reduce(66),  /* >, reduce: CompExp */
			reduce(66),  /* >=, reduce: CompExp */
			reduce(66),  /* ==, reduce: CompExp */
			reduce(66),  /* ~=, reduce: CompExp */
			shift(1675), /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(66),  /* (, reduce: CompExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(66),  /* ident, reduce: CompExp */
		},
	},
	actionRow{ // S1884
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(68),  /* return, reduce: BitOrExp */
			reduce(68),  /* ;, reduce: BitOrExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(68),  /* break, reduce: BitOrExp */
			reduce(68),  /* goto, reduce: BitOrExp */
			reduce(68),  /* do, reduce: BitOrExp */
			reduce(68),  /* end, reduce: BitOrExp */
			reduce(68),  /* while, reduce: BitOrExp */
			reduce(68),  /* repeat, reduce: BitOrExp */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(68),  /* if, reduce: BitOrExp */
			nil,         /* , */
			reduce(68),  /* for, reduce: BitOrExp */
			nil,         /* in */
			reduce(68),  /* function, reduce: BitOrExp */
			reduce(68),  /* local, reduce: BitOrExp */
			reduce(68),  /* ::, reduce: BitOrExp */
			nil,         /* . */
			nil,         /* : */
			reduce(68),  /* or, reduce: BitOrExp */
			reduce(68),  /* and, reduce: BitOrExp */
			reduce(68),  /* <, reduce: BitOrExp */
			reduce(68),  /* <=, reduce: BitOrExp */
			reduce(68),  /* >, reduce: BitOrExp */
			reduce(68),  /* >=, reduce: BitOrExp */
			reduce(68),  /* ==, reduce: BitOrExp */
			reduce(68),  /* ~=, reduce: BitOrExp */
			reduce(68),  /* |, reduce: BitOrExp */
			shift(1676), /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(68),  /* (, reduce: BitOrExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(68),  /* ident, reduce: BitOrExp */
		},
	},
	actionRow{ // S1885
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(70),  /* return, reduce: BitXorExp */
			reduce(70),  /* ;, reduce: BitXorExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(70),  /* break, reduce: BitXorExp */
			reduce(70),  /* goto, reduce: BitXorExp */
			reduce(70),  /* do, reduce: BitXorExp */
			reduce(70),  /* end, reduce: BitXorExp */
			reduce(70),  /* while, reduce: BitXorExp */
			reduce(70),  /* repeat, reduce: BitXorExp */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(70),  /* if, reduce: BitXorExp */
			nil,         /* , */
			reduce(70),  /* for, reduce: BitXorExp */
			nil,         /* in */
			reduce(70),  /* function, reduce: BitXorExp */
			reduce(70),  /* local, reduce: BitXorExp */
			reduce(70),  /* ::, reduce: BitXorExp */
			nil,         /* . */
			nil,         /* : */
			reduce(70),  /* or, reduce: BitXorExp */
			reduce(70),  /* and, reduce: BitXorExp */
			reduce(70),  /* <, reduce: BitXorExp */
			reduce(70),  /* <=, reduce: BitXorExp */
			reduce(70),  /* >, reduce: BitXorExp */
			reduce(70),  /* >=, reduce: BitXorExp */
			reduce(70),  /* ==, reduce: BitXorExp */
			reduce(70),  /* ~=, reduce: BitXorExp */
			reduce(70),  /* |, reduce: BitXorExp */
			reduce(70),  /* ~, reduce: BitXorExp */
			shift(1677), /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(70),  /* (, reduce: BitXorExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(70),  /* ident, reduce: BitXorExp */
		},
	},
	actionRow{ // S1886
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(72),  /* return, reduce: BitAndExp */
			reduce(72),  /* ;, reduce: BitAndExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(72),  /* break, reduce: BitAndExp */
			reduce(72),  /* goto, reduce: BitAndExp */
			reduce(72),  /* do, reduce: BitAndExp */
			reduce(72),  /* end, reduce: BitAndExp */
			reduce(72),  /* while, reduce: BitAndExp */
			reduce(72),  /* repeat, reduce: BitAndExp */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(72),  /* if, reduce: BitAndExp */
			nil,         /* , */
			reduce(72),  /* for, reduce: BitAndExp */
			nil,         /* in */
			reduce(72),  /* function, reduce: BitAndExp */
			reduce(72),  /* local, reduce: BitAndExp */
			reduce(72),  /* ::, reduce: BitAndExp */
			nil,         /* . */
			nil,         /* : */
			reduce(72),  /* or, reduce: BitAndExp */
			reduce(72),  /* and, reduce: BitAndExp */
			reduce(72),  /* <, reduce: BitAndExp */
			reduce(72),  /* <=, reduce: BitAndExp */
			reduce(72),  /* >, reduce: BitAndExp */
			reduce(72),  /* >=, reduce: BitAndExp */
			reduce(72),  /* ==, reduce: BitAndExp */
			reduce(72),  /* ~=, reduce: BitAndExp */
			reduce(72),  /* |, reduce: BitAndExp */
			reduce(72),  /* ~, reduce: BitAndExp */
			reduce(72),  /* &, reduce: BitAndExp */
			shift(1678), /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(72),  /* (, reduce: BitAndExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(72),  /* ident, reduce: BitAndExp */
		},
	},
	actionRow{ // S1887
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(74), /* return, reduce: ConcatExp */
			reduce(74), /* ;, reduce: ConcatExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(74), /* break, reduce: ConcatExp */
			reduce(74), /* goto, reduce: ConcatExp */
			reduce(74), /* do, reduce: ConcatExp */
			reduce(74), /* end, reduce: ConcatExp */
			reduce(74), /* while, reduce: ConcatExp */
			reduce(74), /* repeat, reduce: ConcatExp */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(74), /* if, reduce: ConcatExp */
			nil,        /* , */
			reduce(74), /* for, reduce: ConcatExp */
			nil,        /* in */
			reduce(74), /* function, reduce: ConcatExp */
			reduce(74), /* local, reduce: ConcatExp */
			reduce(74), /* ::, reduce: ConcatExp */
			nil,        /* . */
			nil,        /* : */
			reduce(74), /* or, reduce: ConcatExp */
			reduce(74), /* and, reduce: ConcatExp */
			reduce(74), /* <, reduce: ConcatExp */
			reduce(74), /* <=, reduce: ConcatExp */
			reduce(74), /* >, reduce: ConcatExp */
			reduce(74), /* >=, reduce: ConcatExp */
			reduce(74), /* ==, reduce: ConcatExp */
			reduce(74), /* ~=, reduce: ConcatExp */
			reduce(74), /* |, reduce: ConcatExp */
			reduce(74), /* ~, reduce: ConcatExp */
			reduce(74), /* &, reduce: ConcatExp */
			reduce(74), /* .., reduce: ConcatExp */
			shift(214), /* << */
			shift(215), /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(74), /* (, reduce: ConcatExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(74), /* ident, reduce: ConcatExp */
		},
	},
	actionRow{ // S1888
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(78), /* return, reduce: ShiftExp */
			reduce(78), /* ;, reduce: ShiftExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(78), /* break, reduce: ShiftExp */
			reduce(78), /* goto, reduce: ShiftExp */
			reduce(78), /* do, reduce: ShiftExp */
			reduce(78), /* end, reduce: ShiftExp */
			reduce(78), /* while, reduce: ShiftExp */
			reduce(78), /* repeat, reduce: ShiftExp */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(78), /* if, reduce: ShiftExp */
			nil,        /* , */
			reduce(78), /* for, reduce: ShiftExp */
			nil,        /* in */
			reduce(78), /* function, reduce: ShiftExp */
			reduce(78), /* local, reduce: ShiftExp */
			reduce(78), /* ::, reduce: ShiftExp */
			nil,        /* . */
			nil,        /* : */
			reduce(78), /* or, reduce: ShiftExp */
			reduce(78), /* and, reduce: ShiftExp */
			reduce(78), /* <, reduce: ShiftExp */
			reduce(78), /* <=, reduce: ShiftExp */
			reduce(78), /* >, reduce: ShiftExp */
			reduce(78), /* >=, reduce: ShiftExp */
			reduce(78), /* ==, reduce: ShiftExp */
			reduce(78), /* ~=, reduce: ShiftExp */
			reduce(78), /* |, reduce: ShiftExp */
			reduce(78), /* ~, reduce: ShiftExp */
			reduce(78), /* &, reduce: ShiftExp */
			reduce(78), /* .., reduce: ShiftExp */
			reduce(78), /* <<, reduce: ShiftExp */
			reduce(78), /* >>, reduce: ShiftExp */
			shift(217), /* + */
			shift(218), /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(78), /* (, reduce: ShiftExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(78), /* ident, reduce: ShiftExp */
		},
	},
	actionRow{ // S1889
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(82), /* return, reduce: Sum */
			reduce(82), /* ;, reduce: Sum */
			nil,        /* empty */
			nil,        /* = */
			reduce(82), /* break, reduce: Sum */
			reduce(82), /* goto, reduce: Sum */
			reduce(82), /* do, reduce: Sum */
			reduce(82), /* end, reduce: Sum */
			reduce(82), /* while, reduce: Sum */
			reduce(82), /* repeat, reduce: Sum */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(82), /* if, reduce: Sum */
			nil,        /* , */
			reduce(82), /* for, reduce: Sum */
			nil,        /* in */
			reduce(82), /* function, reduce: Sum */
			reduce(82), /* local, reduce: Sum */
			reduce(82), /* ::, reduce: Sum */
			nil,        /* . */
			nil,        /* : */
			reduce(82), /* or, reduce: Sum */
			reduce(82), /* and, reduce: Sum */
			reduce(82), /* <, reduce: Sum */
			reduce(82), /* <=, reduce: Sum */
			reduce(82), /* >, reduce: Sum */
			reduce(82), /* >=, reduce: Sum */
			reduce(82), /* ==, reduce: Sum */
			reduce(82), /* ~=, reduce: Sum */
			reduce(82), /* |, reduce: Sum */
			reduce(82), /* ~, reduce: Sum */
			reduce(82), /* &, reduce: Sum */
			reduce(82), /* .., reduce: Sum */
			reduce(82), /* <<, reduce: Sum */
			reduce(82), /* >>, reduce: Sum */
			reduce(82), /* +, reduce: Sum */
			reduce(82), /* -, reduce: Sum */
			shift(220), /* * */
			shift(221), /* / */
			shift(222), /* % */
			shift(223), /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(82), /* (, reduce: Sum */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(82), /* ident, reduce: Sum */
		},
	},
	actionRow{ // S1890
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(88), /* return, reduce: Term */
			reduce(88), /* ;, reduce: Term */
			nil,        /* empty */
			nil,        /* = */
			reduce(88), /* break, reduce: Term */
			reduce(88), /* goto, reduce: Term */
			reduce(88), /* do, reduce: Term */
			reduce(88), /* end, reduce: Term */
			reduce(88), /* while, reduce: Term */
			reduce(88), /* repeat, reduce: Term */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(88), /* if, reduce: Term */
			nil,        /* , */
			reduce(88), /* for, reduce: Term */
			nil,        /* in */
			reduce(88), /* function, reduce: Term */
			reduce(88), /* local, reduce: Term */
			reduce(88), /* ::, reduce: Term */
			nil,        /* . */
			nil,        /* : */
			reduce(88), /* or, reduce: Term */
			reduce(88), /* and, reduce: Term */
			reduce(88), /* <, reduce: Term */
			reduce(88), /* <=, reduce: Term */
			reduce(88), /* >, reduce: Term */
			reduce(88), /* >=, reduce: Term */
			reduce(88), /* ==, reduce: Term */
			reduce(88), /* ~=, reduce: Term */
			reduce(88), /* |, reduce: Term */
			reduce(88), /* ~, reduce: Term */
			reduce(88), /* &, reduce: Term */
			reduce(88), /* .., reduce: Term */
			reduce(88), /* <<, reduce: Term */
			reduce(88), /* >>, reduce: Term */
			reduce(88), /* +, reduce: Term */
			reduce(88), /* -, reduce: Term */
			reduce(88), /* *, reduce: Term */
			reduce(88), /* /, reduce: Term */
			reduce(88), /* %, reduce: Term */
			reduce(88), /* //, reduce: Term */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(88), /* (, reduce: Term */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(88), /* ident, reduce: Term */
		},
	},
	actionRow{ // S1891
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(96), /* return, reduce: Power */
			reduce(96), /* ;, reduce: Power */
			nil,        /* empty */
			nil,        /* = */
			reduce(96), /* break, reduce: Power */
			reduce(96), /* goto, reduce: Power */
			reduce(96), /* do, reduce: Power */
			reduce(96), /* end, reduce: Power */
			reduce(96), /* while, reduce: Power */
			reduce(96), /* repeat, reduce: Power */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(96), /* if, reduce: Power */
			nil,        /* , */
			reduce(96), /* for, reduce: Power */
			nil,        /* in */
			reduce(96), /* function, reduce: Power */
			reduce(96), /* local, reduce: Power */
			reduce(96), /* ::, reduce: Power */
			nil,        /* . */
			nil,        /* : */
			reduce(96), /* or, reduce: Power */
			reduce(96), /* and, reduce: Power */
			reduce(96), /* <, reduce: Power */
			reduce(96), /* <=, reduce: Power */
			reduce(96), /* >, reduce: Power */
			reduce(96), /* >=, reduce: Power */
			reduce(96), /* ==, reduce: Power */
			reduce(96), /* ~=, reduce: Power */
			reduce(96), /* |, reduce: Power */
			reduce(96), /* ~, reduce: Power */
			reduce(96), /* &, reduce: Power */
			reduce(96), /* .., reduce: Power */
			reduce(96), /* <<, reduce: Power */
			reduce(96), /* >>, reduce: Power */
			reduce(96), /* +, reduce: Power */
			reduce(96), /* -, reduce: Power */
			reduce(96), /* *, reduce: Power */
			reduce(96), /* /, reduce: Power */
			reduce(96), /* %, reduce: Power */
			reduce(96), /* //, reduce: Power */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(96), /* (, reduce: Power */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(96), /* ident, reduce: Power */
		},
	},
	actionRow{ // S1892
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(99), /* return, reduce: Var */
			reduce(99), /* ;, reduce: Var */
			nil,        /* empty */
			nil,        /* = */
			reduce(99), /* break, reduce: Var */
			reduce(99), /* goto, reduce: Var */
			reduce(99), /* do, reduce: Var */
			reduce(99), /* end, reduce: Var */
			reduce(99), /* while, reduce: Var */
			reduce(99), /* repeat, reduce: Var */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(99), /* if, reduce: Var */
			nil,        /* , */
			reduce(99), /* for, reduce: Var */
			nil,        /* in */
			reduce(99), /* function, reduce: Var */
			reduce(99), /* local, reduce: Var */
			reduce(99), /* ::, reduce: Var */
			reduce(99), /* ., reduce: Var */
			reduce(99), /* :, reduce: Var */
			reduce(99), /* or, reduce: Var */
			reduce(99), /* and, reduce: Var */
			reduce(99), /* <, reduce: Var */
			reduce(99), /* <=, reduce: Var */
			reduce(99), /* >, reduce: Var */
			reduce(99), /* >=, reduce: Var */
			reduce(99), /* ==, reduce: Var */
			reduce(99), /* ~=, reduce: Var */
			reduce(99), /* |, reduce: Var */
			reduce(99), /* ~, reduce: Var */
			reduce(99), /* &, reduce: Var */
			reduce(99), /* .., reduce: Var */
			reduce(99), /* <<, reduce: Var */
			reduce(99), /* >>, reduce: Var */
			reduce(99), /* +, reduce: Var */
			reduce(99), /* -, reduce: Var */
			reduce(99), /* *, reduce: Var */
			reduce(99), /* /, reduce: Var */
			reduce(99), /* %, reduce: Var */
			reduce(99), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(99), /* ^, reduce: Var */
			reduce(99), /* [, reduce: Var */
			nil,        /* ] */
			reduce(99), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(99), /* string, reduce: Var */
			reduce(99), /* {, reduce: Var */
			nil,        /* } */
			reduce(99), /* ident, reduce: Var */
		},
	},
	actionRow{ // S1893
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1687), /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			shift(1689), /* string */
			shift(1691), /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1894
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			shift(851),  /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			shift(2044), /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1895
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(876),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(2045), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1896
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(115), /* return, reduce: Args */
			reduce(115), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			reduce(115), /* break, reduce: Args */
			reduce(115), /* goto, reduce: Args */
			reduce(115), /* do, reduce: Args */
			reduce(115), /* end, reduce: Args */
			reduce(115), /* while, reduce: Args */
			reduce(115), /* repeat, reduce: Args */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(115), /* if, reduce: Args */
			nil,         /* , */
			reduce(115), /* for, reduce: Args */
			nil,         /* in */
			reduce(115), /* function, reduce: Args */
			reduce(115), /* local, reduce: Args */
			reduce(115), /* ::, reduce: Args */
			reduce(115), /* ., reduce: Args */
			reduce(115), /* :, reduce: Args */
			reduce(115), /* or, reduce: Args */
			reduce(115), /* and, reduce: Args */
			reduce(115), /* <, reduce: Args */
			reduce(115), /* <=, reduce: Args */
			reduce(115), /* >, reduce: Args */
			reduce(115), /* >=, reduce: Args */
			reduce(115), /* ==, reduce: Args */
			reduce(115), /* ~=, reduce: Args */
			reduce(115), /* |, reduce: Args */
			reduce(115), /* ~, reduce: Args */
			reduce(115), /* &, reduce: Args */
			reduce(115), /* .., reduce: Args */
			reduce(115), /* <<, reduce: Args */
			reduce(115), /* >>, reduce: Args */
			reduce(115), /* +, reduce: Args */
			reduce(115), /* -, reduce: Args */
			reduce(115), /* *, reduce: Args */
			reduce(115), /* /, reduce: Args */
			reduce(115), /* %, reduce: Args */
			reduce(115), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(115), /* ^, reduce: Args */
			reduce(115), /* [, reduce: Args */
			nil,         /* ] */
			reduce(115), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(115), /* string, reduce: Args */
			reduce(115), /* {, reduce: Args */
			nil,         /* } */
			reduce(115), /* ident, reduce: Args */
		},
	},
	actionRow{ // S1897
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			shift(569),  /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(570),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			shift(2046), /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1898
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(102), /* return, reduce: PrefixExp */
			reduce(102), /* ;, reduce: PrefixExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(102), /* break, reduce: PrefixExp */
			reduce(102), /* goto, reduce: PrefixExp */
			reduce(102), /* do, reduce: PrefixExp */
			reduce(102), /* end, reduce: PrefixExp */
			reduce(102), /* while, reduce: PrefixExp */
			reduce(102), /* repeat, reduce: PrefixExp */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(102), /* if, reduce: PrefixExp */
			nil,         /* , */
			reduce(102), /* for, reduce: PrefixExp */
			nil,         /* in */
			reduce(102), /* function, reduce: PrefixExp */
			reduce(102), /* local, reduce: PrefixExp */
			reduce(102), /* ::, reduce: PrefixExp */
			reduce(102), /* ., reduce: PrefixExp */
			reduce(102), /* :, reduce: PrefixExp */
			reduce(102), /* or, reduce: PrefixExp */
			reduce(102), /* and, reduce: PrefixExp */
			reduce(102), /* <, reduce: PrefixExp */
			reduce(102), /* <=, reduce: PrefixExp */
			reduce(102), /* >, reduce: PrefixExp */
			reduce(102), /* >=, reduce: PrefixExp */
			reduce(102), /* ==, reduce: PrefixExp */
			reduce(102), /* ~=, reduce: PrefixExp */
			reduce(102), /* |, reduce: PrefixExp */
			reduce(102), /* ~, reduce: PrefixExp */
			reduce(102), /* &, reduce: PrefixExp */
			reduce(102), /* .., reduce: PrefixExp */
			reduce(102), /* <<, reduce: PrefixExp */
			reduce(102), /* >>, reduce: PrefixExp */
			reduce(102), /* +, reduce: PrefixExp */
			reduce(102), /* -, reduce: PrefixExp */
			reduce(102), /* *, reduce: PrefixExp */
			reduce(102), /* /, reduce: PrefixExp */
			reduce(102), /* %, reduce: PrefixExp */
			reduce(102), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(102), /* ^, reduce: PrefixExp */
			reduce(102), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(102), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(102), /* string, reduce: PrefixExp */
			reduce(102), /* {, reduce: PrefixExp */
			nil,         /* } */
			reduce(102), /* ident, reduce: PrefixExp */
		},
	},
	actionRow{ // S1899
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(125), /* return, reduce: TableConstructor */
			reduce(125), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			reduce(125), /* break, reduce: TableConstructor */
			reduce(125), /* goto, reduce: TableConstructor */
			reduce(125), /* do, reduce: TableConstructor */
			reduce(125), /* end, reduce: TableConstructor */
			reduce(125), /* while, reduce: TableConstructor */
			reduce(125), /* repeat, reduce: TableConstructor */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(125), /* if, reduce: TableConstructor */
			nil,         /* , */
			reduce(125), /* for, reduce: TableConstructor */
			nil,         /* in */
			reduce(125), /* function, reduce: TableConstructor */
			reduce(125), /* local, reduce: TableConstructor */
			reduce(125), /* ::, reduce: TableConstructor */
			nil,         /* . */
			nil,         /* : */
			reduce(125), /* or, reduce: TableConstructor */
			reduce(125), /* and, reduce: TableConstructor */
			reduce(125), /* <, reduce: TableConstructor */
			reduce(125), /* <=, reduce: TableConstructor */
			reduce(125), /* >, reduce: TableConstructor */
			reduce(125), /* >=, reduce: TableConstructor */
			reduce(125), /* ==, reduce: TableConstructor */
			reduce(125), /* ~=, reduce: TableConstructor */
			reduce(125), /* |, reduce: TableConstructor */
			reduce(125), /* ~, reduce: TableConstructor */
			reduce(125), /* &, reduce: TableConstructor */
			reduce(125), /* .., reduce: TableConstructor */
			reduce(125), /* <<, reduce: TableConstructor */
			reduce(125), /* >>, reduce: TableConstructor */
			reduce(125), /* +, reduce: TableConstructor */
			reduce(125), /* -, reduce: TableConstructor */
			reduce(125), /* *, reduce: TableConstructor */
			reduce(125), /* /, reduce: TableConstructor */
			reduce(125), /* %, reduce: TableConstructor */
			reduce(125), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(125), /* ^, reduce: TableConstructor */
			nil,         /* [ */
			nil,         /* ] */
			reduce(125), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(125), /* ident, reduce: TableConstructor */
		},
	},
	actionRow{ // S1900
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(238),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			shift(254),  /* [ */
			nil,         /* ] */
			shift(255),  /* ( */
			nil,         /* ) */
			shift(256),  /* nil */
			shift(257),  /* true */
			shift(258),  /* false */
			shift(259),  /* ... */
			shift(260),  /* numdec */
			shift(261),  /* numhex */
			shift(262),  /* string */
			shift(265),  /* { */
			shift(2048), /* } */
			shift(268),  /* ident */
		},
	},
	actionRow{ // S1901
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(2049), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			shift(1772), /* elseif */
			shift(2050), /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1902
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(2051), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1903
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(2052), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1904
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(2053), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1905
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(2054), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1906
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(2055), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1907
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(126), /* $, reduce: TableConstructor */
			reduce(126), /* return, reduce: TableConstructor */
			reduce(126), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			reduce(126), /* break, reduce: TableConstructor */
			reduce(126), /* goto, reduce: TableConstructor */
			reduce(126), /* do, reduce: TableConstructor */
			nil,         /* end */
			reduce(126), /* while, reduce: TableConstructor */
			reduce(126), /* repeat, reduce: TableConstructor */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(126), /* if, reduce: TableConstructor */
			nil,         /* , */
			reduce(126), /* for, reduce: TableConstructor */
			nil,         /* in */
			reduce(126), /* function, reduce: TableConstructor */
			reduce(126), /* local, reduce: TableConstructor */
			reduce(126), /* ::, reduce: TableConstructor */
			reduce(126), /* ., reduce: TableConstructor */
			reduce(126), /* :, reduce: TableConstructor */
			reduce(126), /* or, reduce: TableConstructor */
			reduce(126), /* and, reduce: TableConstructor */
			reduce(126), /* <, reduce: TableConstructor */
			reduce(126), /* <=, reduce: TableConstructor */
			reduce(126), /* >, reduce: TableConstructor */
			reduce(126), /* >=, reduce: TableConstructor */
			reduce(126), /* ==, reduce: TableConstructor */
			reduce(126), /* ~=, reduce: TableConstructor */
			reduce(126), /* |, reduce: TableConstructor */
			reduce(126), /* ~, reduce: TableConstructor */
			reduce(126), /* &, reduce: TableConstructor */
			reduce(126), /* .., reduce: TableConstructor */
			reduce(126), /* <<, reduce: TableConstructor */
			reduce(126), /* >>, reduce: TableConstructor */
			reduce(126), /* +, reduce: TableConstructor */
			reduce(126), /* -, reduce: TableConstructor */
			reduce(126), /* *, reduce: TableConstructor */
			reduce(126), /* /, reduce: TableConstructor */
			reduce(126), /* %, reduce: TableConstructor */
			reduce(126), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(126), /* ^, reduce: TableConstructor */
			reduce(126), /* [, reduce: TableConstructor */
			nil,         /* ] */
			reduce(126), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(126), /* string, reduce: TableConstructor */
			reduce(126), /* {, reduce: TableConstructor */
			nil,         /* } */
			reduce(126), /* ident, reduce: TableConstructor */
		},
	},
	actionRow{ // S1908
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(2056), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1909
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(126), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			reduce(126), /* until, reduce: TableConstructor */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(126), /* ,, reduce: TableConstructor */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(126), /* ., reduce: TableConstructor */
			reduce(126), /* :, reduce: TableConstructor */
			reduce(126), /* or, reduce: TableConstructor */
			reduce(126), /* and, reduce: TableConstructor */
			reduce(126), /* <, reduce: TableConstructor */
			reduce(126), /* <=, reduce: TableConstructor */
			reduce(126), /* >, reduce: TableConstructor */
			reduce(126), /* >=, reduce: TableConstructor */
			reduce(126), /* ==, reduce: TableConstructor */
			reduce(126), /* ~=, reduce: TableConstructor */
			reduce(126), /* |, reduce: TableConstructor */
			reduce(126), /* ~, reduce: TableConstructor */
			reduce(126), /* &, reduce: TableConstructor */
			reduce(126), /* .., reduce: TableConstructor */
			reduce(126), /* <<, reduce: TableConstructor */
			reduce(126), /* >>, reduce: TableConstructor */
			reduce(126), /* +, reduce: TableConstructor */
			reduce(126), /* -, reduce: TableConstructor */
			reduce(126), /* *, reduce: TableConstructor */
			reduce(126), /* /, reduce: TableConstructor */
			reduce(126), /* %, reduce: TableConstructor */
			reduce(126), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(126), /* ^, reduce: TableConstructor */
			reduce(126), /* [, reduce: TableConstructor */
			nil,         /* ] */
			reduce(126), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(126), /* string, reduce: TableConstructor */
			reduce(126), /* {, reduce: TableConstructor */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1910
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S1911
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(104), /* return, reduce: FunctionCall */
			reduce(104), /* ;, reduce: FunctionCall */
			nil,         /* empty */
			nil,         /* = */
			reduce(104), /* break, reduce: FunctionCall */
			reduce(104), /* goto, reduce: FunctionCall */
			reduce(104), /* do, reduce: FunctionCall */
			nil,         /* end */
			reduce(104), /* while, reduce: FunctionCall */
			reduce(104), /* repeat, reduce: FunctionCall */
			reduce(104), /* until, reduce: FunctionCall */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(104), /* if, reduce: FunctionCall */
			reduce(104), /* ,, reduce: FunctionCall */
			reduce(104), /* for, reduce: FunctionCall */
			nil,         /* in */
			reduce(104), /* function, reduce: FunctionCall */
			reduce(104), /* local, reduce: FunctionCall */
			reduce(104), /* ::, reduce: FunctionCall */
			reduce(104), /* ., reduce: FunctionCall */
			reduce(104), /* :, reduce: FunctionCall */
			reduce(104), /* or, reduce: FunctionCall */
			reduce(104), /* and, reduce: FunctionCall */
			reduce(104), /* <, reduce: FunctionCall */
			reduce(104), /* <=, reduce: FunctionCall */
			reduce(104), /* >, reduce: FunctionCall */
			reduce(104), /* >=, reduce: FunctionCall */
			reduce(104), /* ==, reduce: FunctionCall */
			reduce(104), /* ~=, reduce: FunctionCall */
			reduce(104), /* |, reduce: FunctionCall */
			reduce(104), /* ~, reduce: FunctionCall */
			reduce(104), /* &, reduce: FunctionCall */
			reduce(104), /* .., reduce: FunctionCall */
			reduce(104), /* <<, reduce: FunctionCall */
			reduce(104), /* >>, reduce: FunctionCall */
			reduce(104), /* +, reduce: FunctionCall */
			reduce(104), /* -, reduce: FunctionCall */
			reduce(104), /* *, reduce: FunctionCall */
			reduce(104), /* /, reduce: FunctionCall */
			reduce(104), /* %, reduce: FunctionCall */
			reduce(104), /* //, reduce: FunctionCall */
			nil,         /* not */
			nil,         /* # */
			reduce(104), /* ^, reduce: FunctionCall */
			reduce(104), /* [, reduce: FunctionCall */
			nil,         /* ] */
			reduce(104), /* (, reduce: FunctionCall */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(104), /* string, reduce: FunctionCall */
			reduce(104), /* {, reduce: FunctionCall */
			nil,         /* } */
			reduce(104), /* ident, reduce: FunctionCall */
		},
	},
	actionRow{ // S1912
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(98), /* return, reduce: Var */
			reduce(98), /* ;, reduce: Var */
			nil,        /* empty */
			nil,        /* = */
			reduce(98), /* break, reduce: Var */
			reduce(98), /* goto, reduce: Var */
			reduce(98), /* do, reduce: Var */
			nil,        /* end */
			reduce(98), /* while, reduce: Var */
			reduce(98), /* repeat, reduce: Var */
			reduce(98), /* until, reduce: Var */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(98), /* if, reduce: Var */
			reduce(98), /* ,, reduce: Var */
			reduce(98), /* for, reduce: Var */
			nil,        /* in */
			reduce(98), /* function, reduce: Var */
			reduce(98), /* local, reduce: Var */
			reduce(98), /* ::, reduce: Var */
			reduce(98), /* ., reduce: Var */
			reduce(98), /* :, reduce: Var */
			reduce(98), /* or, reduce: Var */
			reduce(98), /* and, reduce: Var */
			reduce(98), /* <, reduce: Var */
			reduce(98), /* <=, reduce: Var */
			reduce(98), /* >, reduce: Var */
			reduce(98), /* >=, reduce: Var */
			reduce(98), /* ==, reduce: Var */
			reduce(98), /* ~=, reduce: Var */
			reduce(98), /* |, reduce: Var */
			reduce(98), /* ~, reduce: Var */
			reduce(98), /* &, reduce: Var */
			reduce(98), /* .., reduce: Var */
			reduce(98), /* <<, reduce: Var */
			reduce(98), /* >>, reduce: Var */
			reduce(98), /* +, reduce: Var */
			reduce(98), /* -, reduce: Var */
			reduce(98), /* *, reduce: Var */
			reduce(98), /* /, reduce: Var */
			reduce(98), /* %, reduce: Var */
			reduce(98), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(98), /* ^, reduce: Var */
			reduce(98), /* [, reduce: Var */
			nil,        /* ] */
			reduce(98), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(98), /* string, reduce: Var */
			reduce(98), /* {, reduce: Var */
			nil,        /* } */
			reduce(98), /* ident, reduce: Var */
		},
	},
	actionRow{ // S1913
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(116), /* return, reduce: Args */
			reduce(116), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			reduce(116), /* break, reduce: Args */
			reduce(116), /* goto, reduce: Args */
			reduce(116), /* do, reduce: Args */
			nil,         /* end */
			reduce(116), /* while, reduce: Args */
			reduce(116), /* repeat, reduce: Args */
			reduce(116), /* until, reduce: Args */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(116), /* if, reduce: Args */
			reduce(116), /* ,, reduce: Args */
			reduce(116), /* for, reduce: Args */
			nil,         /* in */
			reduce(116), /* function, reduce: Args */
			reduce(116), /* local, reduce: Args */
			reduce(116), /* ::, reduce: Args */
			reduce(116), /* ., reduce: Args */
			reduce(116), /* :, reduce: Args */
			reduce(116), /* or, reduce: Args */
			reduce(116), /* and, reduce: Args */
			reduce(116), /* <, reduce: Args */
			reduce(116), /* <=, reduce: Args */
			reduce(116), /* >, reduce: Args */
			reduce(116), /* >=, reduce: Args */
			reduce(116), /* ==, reduce: Args */
			reduce(116), /* ~=, reduce: Args */
			reduce(116), /* |, reduce: Args */
			reduce(116), /* ~, reduce: Args */
			reduce(116), /* &, reduce: Args */
			reduce(116), /* .., reduce: Args */
			reduce(116), /* <<, reduce: Args */
			reduce(116), /* >>, reduce: Args */
			reduce(116), /* +, reduce: Args */
			reduce(116), /* -, reduce: Args */
			reduce(116), /* *, reduce: Args */
			reduce(116), /* /, reduce: Args */
			reduce(116), /* %, reduce: Args */
			reduce(116), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(116), /* ^, reduce: Args */
			reduce(116), /* [, reduce: Args */
			nil,         /* ] */
			reduce(116), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(116), /* string, reduce: Args */
			reduce(116), /* {, reduce: Args */
			nil,         /* } */
			reduce(116), /* ident, reduce: Args */
		},
	},
	actionRow{ // S1914
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(125), /* return, reduce: TableConstructor */
			reduce(125), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			reduce(125), /* break, reduce: TableConstructor */
			reduce(125), /* goto, reduce: TableConstructor */
			reduce(125), /* do, reduce: TableConstructor */
			nil,         /* end */
			reduce(125), /* while, reduce: TableConstructor */
			reduce(125), /* repeat, reduce: TableConstructor */
			reduce(125), /* until, reduce: TableConstructor */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(125), /* if, reduce: TableConstructor */
			reduce(125), /* ,, reduce: TableConstructor */
			reduce(125), /* for, reduce: TableConstructor */
			nil,         /* in */
			reduce(125), /* function, reduce: TableConstructor */
			reduce(125), /* local, reduce: TableConstructor */
			reduce(125), /* ::, reduce: TableConstructor */
			reduce(125), /* ., reduce: TableConstructor */
			reduce(125), /* :, reduce: TableConstructor */
			reduce(125), /* or, reduce: TableConstructor */
			reduce(125), /* and, reduce: TableConstructor */
			reduce(125), /* <, reduce: TableConstructor */
			reduce(125), /* <=, reduce: TableConstructor */
			reduce(125), /* >, reduce: TableConstructor */
			reduce(125), /* >=, reduce: TableConstructor */
			reduce(125), /* ==, reduce: TableConstructor */
			reduce(125), /* ~=, reduce: TableConstructor */
			reduce(125), /* |, reduce: TableConstructor */
			reduce(125), /* ~, reduce: TableConstructor */
			reduce(125), /* &, reduce: TableConstructor */
			reduce(125), /* .., reduce: TableConstructor */
			reduce(125), /* <<, reduce: TableConstructor */
			reduce(125), /* >>, reduce: TableConstructor */
			reduce(125), /* +, reduce: TableConstructor */
			reduce(125), /* -, reduce: TableConstructor */
			reduce(125), /* *, reduce: TableConstructor */
			reduce(125), /* /, reduce: TableConstructor */
			reduce(125), /* %, reduce: TableConstructor */
			reduce(125), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(125), /* ^, reduce: TableConstructor */
			reduce(125), /* [, reduce: TableConstructor */
			nil,         /* ] */
			reduce(125), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(125), /* string, reduce: TableConstructor */
			reduce(125), /* {, reduce: TableConstructor */
			nil,         /* } */
			reduce(125), /* ident, reduce: TableConstructor */
		},
	},
	actionRow{ // S1915
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(238),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			shift(254),  /* [ */
			nil,         /* ] */
			shift(255),  /* ( */
			nil,         /* ) */
			shift(256),  /* nil */
			shift(257),  /* true */
			shift(258),  /* false */
			shift(259),  /* ... */
			shift(260),  /* numdec */
			shift(261),  /* numhex */
			shift(262),  /* string */
			shift(265),  /* { */
			shift(2058), /* } */
			shift(268),  /* ident */
		},
	},
	actionRow{ // S1916
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(126), /* return, reduce: TableConstructor */
			reduce(126), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			reduce(126), /* break, reduce: TableConstructor */
			reduce(126), /* goto, reduce: TableConstructor */
			reduce(126), /* do, reduce: TableConstructor */
			nil,         /* end */
			reduce(126), /* while, reduce: TableConstructor */
			reduce(126), /* repeat, reduce: TableConstructor */
			reduce(126), /* until, reduce: TableConstructor */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(126), /* if, reduce: TableConstructor */
			reduce(126), /* ,, reduce: TableConstructor */
			reduce(126), /* for, reduce: TableConstructor */
			nil,         /* in */
			reduce(126), /* function, reduce: TableConstructor */
			reduce(126), /* local, reduce: TableConstructor */
			reduce(126), /* ::, reduce: TableConstructor */
			nil,         /* . */
			nil,         /* : */
			reduce(126), /* or, reduce: TableConstructor */
			reduce(126), /* and, reduce: TableConstructor */
			reduce(126), /* <, reduce: TableConstructor */
			reduce(126), /* <=, reduce: TableConstructor */
			reduce(126), /* >, reduce: TableConstructor */
			reduce(126), /* >=, reduce: TableConstructor */
			reduce(126), /* ==, reduce: TableConstructor */
			reduce(126), /* ~=, reduce: TableConstructor */
			reduce(126), /* |, reduce: TableConstructor */
			reduce(126), /* ~, reduce: TableConstructor */
			reduce(126), /* &, reduce: TableConstructor */
			reduce(126), /* .., reduce: TableConstructor */
			reduce(126), /* <<, reduce: TableConstructor */
			reduce(126), /* >>, reduce: TableConstructor */
			reduce(126), /* +, reduce: TableConstructor */
			reduce(126), /* -, reduce: TableConstructor */
			reduce(126), /* *, reduce: TableConstructor */
			reduce(126), /* /, reduce: TableConstructor */
			reduce(126), /* %, reduce: TableConstructor */
			reduce(126), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(126), /* ^, reduce: TableConstructor */
			nil,         /* [ */
			nil,         /* ] */
			reduce(126), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(126), /* ident, reduce: TableConstructor */
		},
	},
	actionRow{ // S1917
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(56),  /* return, reduce: Exp */
			reduce(56),  /* ;, reduce: Exp */
			nil,         /* empty */
			nil,         /* = */
			reduce(56),  /* break, reduce: Exp */
			reduce(56),  /* goto, reduce: Exp */
			reduce(56),  /* do, reduce: Exp */
			nil,         /* end */
			reduce(56),  /* while, reduce: Exp */
			reduce(56),  /* repeat, reduce: Exp */
			reduce(56),  /* until, reduce: Exp */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(56),  /* if, reduce: Exp */
			nil,         /* , */
			reduce(56),  /* for, reduce: Exp */
			nil,         /* in */
			reduce(56),  /* function, reduce: Exp */
			reduce(56),  /* local, reduce: Exp */
			reduce(56),  /* ::, reduce: Exp */
			nil,         /* . */
			nil,         /* : */
			reduce(56),  /* or, reduce: Exp */
			shift(1742), /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(56),  /* (, reduce: Exp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(56),  /* ident, reduce: Exp */
		},
	},
	actionRow{ // S1918
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(2059), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1919
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(58), /* return, reduce: AndExp */
			reduce(58), /* ;, reduce: AndExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(58), /* break, reduce: AndExp */
			reduce(58), /* goto, reduce: AndExp */
			reduce(58), /* do, reduce: AndExp */
			nil,        /* end */
			reduce(58), /* while, reduce: AndExp */
			reduce(58), /* repeat, reduce: AndExp */
			reduce(58), /* until, reduce: AndExp */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(58), /* if, reduce: AndExp */
			nil,        /* , */
			reduce(58), /* for, reduce: AndExp */
			nil,        /* in */
			reduce(58), /* function, reduce: AndExp */
			reduce(58), /* local, reduce: AndExp */
			reduce(58), /* ::, reduce: AndExp */
			nil,        /* . */
			nil,        /* : */
			reduce(58), /* or, reduce: AndExp */
			reduce(58), /* and, reduce: AndExp */
			shift(203), /* < */
			shift(204), /* <= */
			shift(205), /* > */
			shift(206), /* >= */
			shift(207), /* == */
			shift(208), /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(58), /* (, reduce: AndExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(58), /* ident, reduce: AndExp */
		},
	},
	actionRow{ // S1920
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(66),  /* return, reduce: CompExp */
			reduce(66),  /* ;, reduce: CompExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(66),  /* break, reduce: CompExp */
			reduce(66),  /* goto, reduce: CompExp */
			reduce(66),  /* do, reduce: CompExp */
			nil,         /* end */
			reduce(66),  /* while, reduce: CompExp */
			reduce(66),  /* repeat, reduce: CompExp */
			reduce(66),  /* until, reduce: CompExp */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(66),  /* if, reduce: CompExp */
			nil,         /* , */
			reduce(66),  /* for, reduce: CompExp */
			nil,         /* in */
			reduce(66),  /* function, reduce: CompExp */
			reduce(66),  /* local, reduce: CompExp */
			reduce(66),  /* ::, reduce: CompExp */
			nil,         /* . */
			nil,         /* : */
			reduce(66),  /* or, reduce: CompExp */
			reduce(66),  /* and, reduce: CompExp */
			reduce(66),  /* <, reduce: CompExp */
			reduce(66),  /* <=, reduce: CompExp */
			reduce(66),  /* >, reduce: CompExp */
			reduce(66),  /* >=, reduce: CompExp */
			reduce(66),  /* ==, reduce: CompExp */
			reduce(66),  /* ~=, reduce: CompExp */
			shift(1744), /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(66),  /* (, reduce: CompExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(66),  /* ident, reduce: CompExp */
		},
	},
	actionRow{ // S1921
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(68),  /* return, reduce: BitOrExp */
			reduce(68),  /* ;, reduce: BitOrExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(68),  /* break, reduce: BitOrExp */
			reduce(68),  /* goto, reduce: BitOrExp */
			reduce(68),  /* do, reduce: BitOrExp */
			nil,         /* end */
			reduce(68),  /* while, reduce: BitOrExp */
			reduce(68),  /* repeat, reduce: BitOrExp */
			reduce(68),  /* until, reduce: BitOrExp */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(68),  /* if, reduce: BitOrExp */
			nil,         /* , */
			reduce(68),  /* for, reduce: BitOrExp */
			nil,         /* in */
			reduce(68),  /* function, reduce: BitOrExp */
			reduce(68),  /* local, reduce: BitOrExp */
			reduce(68),  /* ::, reduce: BitOrExp */
			nil,         /* . */
			nil,         /* : */
			reduce(68),  /* or, reduce: BitOrExp */
			reduce(68),  /* and, reduce: BitOrExp */
			reduce(68),  /* <, reduce: BitOrExp */
			reduce(68),  /* <=, reduce: BitOrExp */
			reduce(68),  /* >, reduce: BitOrExp */
			reduce(68),  /* >=, reduce: BitOrExp */
			reduce(68),  /* ==, reduce: BitOrExp */
			reduce(68),  /* ~=, reduce: BitOrExp */
			reduce(68),  /* |, reduce: BitOrExp */
			shift(1745), /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(68),  /* (, reduce: BitOrExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(68),  /* ident, reduce: BitOrExp */
		},
	},
	actionRow{ // S1922
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(70),  /* return, reduce: BitXorExp */
			reduce(70),  /* ;, reduce: BitXorExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(70),  /* break, reduce: BitXorExp */
			reduce(70),  /* goto, reduce: BitXorExp */
			reduce(70),  /* do, reduce: BitXorExp */
			nil,         /* end */
			reduce(70),  /* while, reduce: BitXorExp */
			reduce(70),  /* repeat, reduce: BitXorExp */
			reduce(70),  /* until, reduce: BitXorExp */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(70),  /* if, reduce: BitXorExp */
			nil,         /* , */
			reduce(70),  /* for, reduce: BitXorExp */
			nil,         /* in */
			reduce(70),  /* function, reduce: BitXorExp */
			reduce(70),  /* local, reduce: BitXorExp */
			reduce(70),  /* ::, reduce: BitXorExp */
			nil,         /* . */
			nil,         /* : */
			reduce(70),  /* or, reduce: BitXorExp */
			reduce(70),  /* and, reduce: BitXorExp */
			reduce(70),  /* <, reduce: BitXorExp */
			reduce(70),  /* <=, reduce: BitXorExp */
			reduce(70),  /* >, reduce: BitXorExp */
			reduce(70),  /* >=, reduce: BitXorExp */
			reduce(70),  /* ==, reduce: BitXorExp */
			reduce(70),  /* ~=, reduce: BitXorExp */
			reduce(70),  /* |, reduce: BitXorExp */
			reduce(70),  /* ~, reduce: BitXorExp */
			shift(1746), /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(70),  /* (, reduce: BitXorExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(70),  /* ident, reduce: BitXorExp */
		},
	},
	actionRow{ // S1923
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(72),  /* return, reduce: BitAndExp */
			reduce(72),  /* ;, reduce: BitAndExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(72),  /* break, reduce: BitAndExp */
			reduce(72),  /* goto, reduce: BitAndExp */
			reduce(72),  /* do, reduce: BitAndExp */
			nil,         /* end */
			reduce(72),  /* while, reduce: BitAndExp */
			reduce(72),  /* repeat, reduce: BitAndExp */
			reduce(72),  /* until, reduce: BitAndExp */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(72),  /* if, reduce: BitAndExp */
			nil,         /* , */
			reduce(72),  /* for, reduce: BitAndExp */
			nil,         /* in */
			reduce(72),  /* function, reduce: BitAndExp */
			reduce(72),  /* local, reduce: BitAndExp */
			reduce(72),  /* ::, reduce: BitAndExp */
			nil,         /* . */
			nil,         /* : */
			reduce(72),  /* or, reduce: BitAndExp */
			reduce(72),  /* and, reduce: BitAndExp */
			reduce(72),  /* <, reduce: BitAndExp */
			reduce(72),  /* <=, reduce: BitAndExp */
			reduce(72),  /* >, reduce: BitAndExp */
			reduce(72),  /* >=, reduce: BitAndExp */
			reduce(72),  /* ==, reduce: BitAndExp */
			reduce(72),  /* ~=, reduce: BitAndExp */
			reduce(72),  /* |, reduce: BitAndExp */
			reduce(72),  /* ~, reduce: BitAndExp */
			reduce(72),  /* &, reduce: BitAndExp */
			shift(1747), /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(72),  /* (, reduce: BitAndExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(72),  /* ident, reduce: BitAndExp */
		},
	},
	actionRow{ // S1924
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(74), /* return, reduce: ConcatExp */
			reduce(74), /* ;, reduce: ConcatExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(74), /* break, reduce: ConcatExp */
			reduce(74), /* goto, reduce: ConcatExp */
			reduce(74), /* do, reduce: ConcatExp */
			nil,        /* end */
			reduce(74), /* while, reduce: ConcatExp */
			reduce(74), /* repeat, reduce: ConcatExp */
			reduce(74), /* until, reduce: ConcatExp */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(74), /* if, reduce: ConcatExp */
			nil,        /* , */
			reduce(74), /* for, reduce: ConcatExp */
			nil,        /* in */
			reduce(74), /* function, reduce: ConcatExp */
			reduce(74), /* local, reduce: ConcatExp */
			reduce(74), /* ::, reduce: ConcatExp */
			nil,        /* . */
			nil,        /* : */
			reduce(74), /* or, reduce: ConcatExp */
			reduce(74), /* and, reduce: ConcatExp */
			reduce(74), /* <, reduce: ConcatExp */
			reduce(74), /* <=, reduce: ConcatExp */
			reduce(74), /* >, reduce: ConcatExp */
			reduce(74), /* >=, reduce: ConcatExp */
			reduce(74), /* ==, reduce: ConcatExp */
			reduce(74), /* ~=, reduce: ConcatExp */
			reduce(74), /* |, reduce: ConcatExp */
			reduce(74), /* ~, reduce: ConcatExp */
			reduce(74), /* &, reduce: ConcatExp */
			reduce(74), /* .., reduce: ConcatExp */
			shift(214), /* << */
			shift(215), /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(74), /* (, reduce: ConcatExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(74), /* ident, reduce: ConcatExp */
		},
	},
	actionRow{ // S1925
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(78), /* return, reduce: ShiftExp */
			reduce(78), /* ;, reduce: ShiftExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(78), /* break, reduce: ShiftExp */
			reduce(78), /* goto, reduce: ShiftExp */
			reduce(78), /* do, reduce: ShiftExp */
			nil,        /* end */
			reduce(78), /* while, reduce: ShiftExp */
			reduce(78), /* repeat, reduce: ShiftExp */
			reduce(78), /* until, reduce: ShiftExp */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(78), /* if, reduce: ShiftExp */
			nil,        /* , */
			reduce(78), /* for, reduce: ShiftExp */
			nil,        /* in */
			reduce(78), /* function, reduce: ShiftExp */
			reduce(78), /* local, reduce: ShiftExp */
			reduce(78), /* ::, reduce: ShiftExp */
			nil,        /* . */
			nil,        /* : */
			reduce(78), /* or, reduce: ShiftExp */
			reduce(78), /* and, reduce: ShiftExp */
			reduce(78), /* <, reduce: ShiftExp */
			reduce(78), /* <=, reduce: ShiftExp */
			reduce(78), /* >, reduce: ShiftExp */
			reduce(78), /* >=, reduce: ShiftExp */
			reduce(78), /* ==, reduce: ShiftExp */
			reduce(78), /* ~=, reduce: ShiftExp */
			reduce(78), /* |, reduce: ShiftExp */
			reduce(78), /* ~, reduce: ShiftExp */
			reduce(78), /* &, reduce: ShiftExp */
			reduce(78), /* .., reduce: ShiftExp */
			reduce(78), /* <<, reduce: ShiftExp */
			reduce(78), /* >>, reduce: ShiftExp */
			shift(217), /* + */
			shift(218), /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(78), /* (, reduce: ShiftExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(78), /* ident, reduce: ShiftExp */
		},
	},
	actionRow{ // S1926
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(82), /* return, reduce: Sum */
			reduce(82), /* ;, reduce: Sum */
			nil,        /* empty */
			nil,        /* = */
			reduce(82), /* break, reduce: Sum */
			reduce(82), /* goto, reduce: Sum */
			reduce(82), /* do, reduce: Sum */
			nil,        /* end */
			reduce(82), /* while, reduce: Sum */
			reduce(82), /* repeat, reduce: Sum */
			reduce(82), /* until, reduce: Sum */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(82), /* if, reduce: Sum */
			nil,        /* , */
			reduce(82), /* for, reduce: Sum */
			nil,        /* in */
			reduce(82), /* function, reduce: Sum */
			reduce(82), /* local, reduce: Sum */
			reduce(82), /* ::, reduce: Sum */
			nil,        /* . */
			nil,        /* : */
			reduce(82), /* or, reduce: Sum */
			reduce(82), /* and, reduce: Sum */
			reduce(82), /* <, reduce: Sum */
			reduce(82), /* <=, reduce: Sum */
			reduce(82), /* >, reduce: Sum */
			reduce(82), /* >=, reduce: Sum */
			reduce(82), /* ==, reduce: Sum */
			reduce(82), /* ~=, reduce: Sum */
			reduce(82), /* |, reduce: Sum */
			reduce(82), /* ~, reduce: Sum */
			reduce(82), /* &, reduce: Sum */
			reduce(82), /* .., reduce: Sum */
			reduce(82), /* <<, reduce: Sum */
			reduce(82), /* >>, reduce: Sum */
			reduce(82), /* +, reduce: Sum */
			reduce(82), /* -, reduce: Sum */
			shift(220), /* * */
			shift(221), /* / */
			shift(222), /* % */
			shift(223), /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(82), /* (, reduce: Sum */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(82), /* ident, reduce: Sum */
		},
	},
	actionRow{ // S1927
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(88), /* return, reduce: Term */
			reduce(88), /* ;, reduce: Term */
			nil,        /* empty */
			nil,        /* = */
			reduce(88), /* break, reduce: Term */
			reduce(88), /* goto, reduce: Term */
			reduce(88), /* do, reduce: Term */
			nil,        /* end */
			reduce(88), /* while, reduce: Term */
			reduce(88), /* repeat, reduce: Term */
			reduce(88), /* until, reduce: Term */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(88), /* if, reduce: Term */
			nil,        /* , */
			reduce(88), /* for, reduce: Term */
			nil,        /* in */
			reduce(88), /* function, reduce: Term */
			reduce(88), /* local, reduce: Term */
			reduce(88), /* ::, reduce: Term */
			nil,        /* . */
			nil,        /* : */
			reduce(88), /* or, reduce: Term */
			reduce(88), /* and, reduce: Term */
			reduce(88), /* <, reduce: Term */
			reduce(88), /* <=, reduce: Term */
			reduce(88), /* >, reduce: Term */
			reduce(88), /* >=, reduce: Term */
			reduce(88), /* ==, reduce: Term */
			reduce(88), /* ~=, reduce: Term */
			reduce(88), /* |, reduce: Term */
			reduce(88), /* ~, reduce: Term */
			reduce(88), /* &, reduce: Term */
			reduce(88), /* .., reduce: Term */
			reduce(88), /* <<, reduce: Term */
			reduce(88), /* >>, reduce: Term */
			reduce(88), /* +, reduce: Term */
			reduce(88), /* -, reduce: Term */
			reduce(88), /* *, reduce: Term */
			reduce(88), /* /, reduce: Term */
			reduce(88), /* %, reduce: Term */
			reduce(88), /* //, reduce: Term */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(88), /* (, reduce: Term */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(88), /* ident, reduce: Term */
		},
	},
	actionRow{ // S1928
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(96), /* return, reduce: Power */
			reduce(96), /* ;, reduce: Power */
			nil,        /* empty */
			nil,        /* = */
			reduce(96), /* break, reduce: Power */
			reduce(96), /* goto, reduce: Power */
			reduce(96), /* do, reduce: Power */
			nil,        /* end */
			reduce(96), /* while, reduce: Power */
			reduce(96), /* repeat, reduce: Power */
			reduce(96), /* until, reduce: Power */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(96), /* if, reduce: Power */
			nil,        /* , */
			reduce(96), /* for, reduce: Power */
			nil,        /* in */
			reduce(96), /* function, reduce: Power */
			reduce(96), /* local, reduce: Power */
			reduce(96), /* ::, reduce: Power */
			nil,        /* . */
			nil,        /* : */
			reduce(96), /* or, reduce: Power */
			reduce(96), /* and, reduce: Power */
			reduce(96), /* <, reduce: Power */
			reduce(96), /* <=, reduce: Power */
			reduce(96), /* >, reduce: Power */
			reduce(96), /* >=, reduce: Power */
			reduce(96), /* ==, reduce: Power */
			reduce(96), /* ~=, reduce: Power */
			reduce(96), /* |, reduce: Power */
			reduce(96), /* ~, reduce: Power */
			reduce(96), /* &, reduce: Power */
			reduce(96), /* .., reduce: Power */
			reduce(96), /* <<, reduce: Power */
			reduce(96), /* >>, reduce: Power */
			reduce(96), /* +, reduce: Power */
			reduce(96), /* -, reduce: Power */
			reduce(96), /* *, reduce: Power */
			reduce(96), /* /, reduce: Power */
			reduce(96), /* %, reduce: Power */
			reduce(96), /* //, reduce: Power */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(96), /* (, reduce: Power */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(96), /* ident, reduce: Power */
		},
	},
	actionRow{ // S1929
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(99), /* return, reduce: Var */
			reduce(99), /* ;, reduce: Var */
			nil,        /* empty */
			nil,        /* = */
			reduce(99), /* break, reduce: Var */
			reduce(99), /* goto, reduce: Var */
			reduce(99), /* do, reduce: Var */
			nil,        /* end */
			reduce(99), /* while, reduce: Var */
			reduce(99), /* repeat, reduce: Var */
			reduce(99), /* until, reduce: Var */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(99), /* if, reduce: Var */
			nil,        /* , */
			reduce(99), /* for, reduce: Var */
			nil,        /* in */
			reduce(99), /* function, reduce: Var */
			reduce(99), /* local, reduce: Var */
			reduce(99), /* ::, reduce: Var */
			reduce(99), /* ., reduce: Var */
			reduce(99), /* :, reduce: Var */
			reduce(99), /* or, reduce: Var */
			reduce(99), /* and, reduce: Var */
			reduce(99), /* <, reduce: Var */
			reduce(99), /* <=, reduce: Var */
			reduce(99), /* >, reduce: Var */
			reduce(99), /* >=, reduce: Var */
			reduce(99), /* ==, reduce: Var */
			reduce(99), /* ~=, reduce: Var */
			reduce(99), /* |, reduce: Var */
			reduce(99), /* ~, reduce: Var */
			reduce(99), /* &, reduce: Var */
			reduce(99), /* .., reduce: Var */
			reduce(99), /* <<, reduce: Var */
			reduce(99), /* >>, reduce: Var */
			reduce(99), /* +, reduce: Var */
			reduce(99), /* -, reduce: Var */
			reduce(99), /* *, reduce: Var */
			reduce(99), /* /, reduce: Var */
			reduce(99), /* %, reduce: Var */
			reduce(99), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(99), /* ^, reduce: Var */
			reduce(99), /* [, reduce: Var */
			nil,        /* ] */
			reduce(99), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(99), /* string, reduce: Var */
			reduce(99), /* {, reduce: Var */
			nil,        /* } */
			reduce(99), /* ident, reduce: Var */
		},
	},
	actionRow{ // S1930
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1756), /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			shift(1758), /* string */
			shift(1760), /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1931
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			shift(851),  /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			shift(2061), /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1932
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(876),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(2062), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1933
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(115), /* return, reduce: Args */
			reduce(115), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			reduce(115), /* break, reduce: Args */
			reduce(115), /* goto, reduce: Args */
			reduce(115), /* do, reduce: Args */
			nil,         /* end */
			reduce(115), /* while, reduce: Args */
			reduce(115), /* repeat, reduce: Args */
			reduce(115), /* until, reduce: Args */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(115), /* if, reduce: Args */
			nil,         /* , */
			reduce(115), /* for, reduce: Args */
			nil,         /* in */
			reduce(115), /* function, reduce: Args */
			reduce(115), /* local, reduce: Args */
			reduce(115), /* ::, reduce: Args */
			reduce(115), /* ., reduce: Args */
			reduce(115), /* :, reduce: Args */
			reduce(115), /* or, reduce: Args */
			reduce(115), /* and, reduce: Args */
			reduce(115), /* <, reduce: Args */
			reduce(115), /* <=, reduce: Args */
			reduce(115), /* >, reduce: Args */
			reduce(115), /* >=, reduce: Args */
			reduce(115), /* ==, reduce: Args */
			reduce(115), /* ~=, reduce: Args */
			reduce(115), /* |, reduce: Args */
			reduce(115), /* ~, reduce: Args */
			reduce(115), /* &, reduce: Args */
			reduce(115), /* .., reduce: Args */
			reduce(115), /* <<, reduce: Args */
			reduce(115), /* >>, reduce: Args */
			reduce(115), /* +, reduce: Args */
			reduce(115), /* -, reduce: Args */
			reduce(115), /* *, reduce: Args */
			reduce(115), /* /, reduce: Args */
			reduce(115), /* %, reduce: Args */
			reduce(115), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(115), /* ^, reduce: Args */
			reduce(115), /* [, reduce: Args */
			nil,         /* ] */
			reduce(115), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(115), /* string, reduce: Args */
			reduce(115), /* {, reduce: Args */
			nil,         /* } */
			reduce(115), /* ident, reduce: Args */
		},
	},
	actionRow{ // S1934
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			shift(569),  /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(570),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			shift(2063), /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1935
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(102), /* return, reduce: PrefixExp */
			reduce(102), /* ;, reduce: PrefixExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(102), /* break, reduce: PrefixExp */
			reduce(102), /* goto, reduce: PrefixExp */
			reduce(102), /* do, reduce: PrefixExp */
			nil,         /* end */
			reduce(102), /* while, reduce: PrefixExp */
			reduce(102), /* repeat, reduce: PrefixExp */
			reduce(102), /* until, reduce: PrefixExp */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(102), /* if, reduce: PrefixExp */
			nil,         /* , */
			reduce(102), /* for, reduce: PrefixExp */
			nil,         /* in */
			reduce(102), /* function, reduce: PrefixExp */
			reduce(102), /* local, reduce: PrefixExp */
			reduce(102), /* ::, reduce: PrefixExp */
			reduce(102), /* ., reduce: PrefixExp */
			reduce(102), /* :, reduce: PrefixExp */
			reduce(102), /* or, reduce: PrefixExp */
			reduce(102), /* and, reduce: PrefixExp */
			reduce(102), /* <, reduce: PrefixExp */
			reduce(102), /* <=, reduce: PrefixExp */
			reduce(102), /* >, reduce: PrefixExp */
			reduce(102), /* >=, reduce: PrefixExp */
			reduce(102), /* ==, reduce: PrefixExp */
			reduce(102), /* ~=, reduce: PrefixExp */
			reduce(102), /* |, reduce: PrefixExp */
			reduce(102), /* ~, reduce: PrefixExp */
			reduce(102), /* &, reduce: PrefixExp */
			reduce(102), /* .., reduce: PrefixExp */
			reduce(102), /* <<, reduce: PrefixExp */
			reduce(102), /* >>, reduce: PrefixExp */
			reduce(102), /* +, reduce: PrefixExp */
			reduce(102), /* -, reduce: PrefixExp */
			reduce(102), /* *, reduce: PrefixExp */
			reduce(102), /* /, reduce: PrefixExp */
			reduce(102), /* %, reduce: PrefixExp */
			reduce(102), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(102), /* ^, reduce: PrefixExp */
			reduce(102), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(102), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(102), /* string, reduce: PrefixExp */
			reduce(102), /* {, reduce: PrefixExp */
			nil,         /* } */
			reduce(102), /* ident, reduce: PrefixExp */
		},
	},
	actionRow{ // S1936
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(125), /* return, reduce: TableConstructor */
			reduce(125), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			reduce(125), /* break, reduce: TableConstructor */
			reduce(125), /* goto, reduce: TableConstructor */
			reduce(125), /* do, reduce: TableConstructor */
			nil,         /* end */
			reduce(125), /* while, reduce: TableConstructor */
			reduce(125), /* repeat, reduce: TableConstructor */
			reduce(125), /* until, reduce: TableConstructor */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(125), /* if, reduce: TableConstructor */
			nil,         /* , */
			reduce(125), /* for, reduce: TableConstructor */
			nil,         /* in */
			reduce(125), /* function, reduce: TableConstructor */
			reduce(125), /* local, reduce: TableConstructor */
			reduce(125), /* ::, reduce: TableConstructor */
			nil,         /* . */
			nil,         /* : */
			reduce(125), /* or, reduce: TableConstructor */
			reduce(125), /* and, reduce: TableConstructor */
			reduce(125), /* <, reduce: TableConstructor */
			reduce(125), /* <=, reduce: TableConstructor */
			reduce(125), /* >, reduce: TableConstructor */
			reduce(125), /* >=, reduce: TableConstructor */
			reduce(125), /* ==, reduce: TableConstructor */
			reduce(125), /* ~=, reduce: TableConstructor */
			reduce(125), /* |, reduce: TableConstructor */
			reduce(125), /* ~, reduce: TableConstructor */
			reduce(125), /* &, reduce: TableConstructor */
			reduce(125), /* .., reduce: TableConstructor */
			reduce(125), /* <<, reduce: TableConstructor */
			reduce(125), /* >>, reduce: TableConstructor */
			reduce(125), /* +, reduce: TableConstructor */
			reduce(125), /* -, reduce: TableConstructor */
			reduce(125), /* *, reduce: TableConstructor */
			reduce(125), /* /, reduce: TableConstructor */
			reduce(125), /* %, reduce: TableConstructor */
			reduce(125), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(125), /* ^, reduce: TableConstructor */
			nil,         /* [ */
			nil,         /* ] */
			reduce(125), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(125), /* ident, reduce: TableConstructor */
		},
	},
	actionRow{ // S1937
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(238),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			shift(254),  /* [ */
			nil,         /* ] */
			shift(255),  /* ( */
			nil,         /* ) */
			shift(256),  /* nil */
			shift(257),  /* true */
			shift(258),  /* false */
			shift(259),  /* ... */
			shift(260),  /* numdec */
			shift(261),  /* numhex */
			shift(262),  /* string */
			shift(265),  /* { */
			shift(2065), /* } */
			shift(268),  /* ident */
		},
	},
	actionRow{ // S1938
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(2066), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			shift(1772), /* elseif */
			shift(2067), /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1939
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(2068), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1940
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(2069), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1941
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(2070), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1942
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(2071), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1943
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			reduce(29), /* end, reduce: ElseIf */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			reduce(29), /* elseif, reduce: ElseIf */
			reduce(29), /* else, reduce: ElseIf */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1944
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			shift(2072), /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			shift(388),  /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1945
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(2073), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1946
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(54),  /* ;, reduce: ExpList */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(54),  /* end, reduce: ExpList */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			reduce(54),  /* elseif, reduce: ExpList */
			reduce(54),  /* else, reduce: ExpList */
			nil,         /* if */
			reduce(54),  /* ,, reduce: ExpList */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			shift(1777), /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1947
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(56),  /* ;, reduce: Exp */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(56),  /* end, reduce: Exp */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			reduce(56),  /* elseif, reduce: Exp */
			reduce(56),  /* else, reduce: Exp */
			nil,         /* if */
			reduce(56),  /* ,, reduce: Exp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(56),  /* or, reduce: Exp */
			shift(1780), /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1948
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(2074), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1949
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(58), /* ;, reduce: AndExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			reduce(58), /* end, reduce: AndExp */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			reduce(58), /* elseif, reduce: AndExp */
			reduce(58), /* else, reduce: AndExp */
			nil,        /* if */
			reduce(58), /* ,, reduce: AndExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(58), /* or, reduce: AndExp */
			reduce(58), /* and, reduce: AndExp */
			shift(203), /* < */
			shift(204), /* <= */
			shift(205), /* > */
			shift(206), /* >= */
			shift(207), /* == */
			shift(208), /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1950
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(66),  /* ;, reduce: CompExp */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(66),  /* end, reduce: CompExp */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			reduce(66),  /* elseif, reduce: CompExp */
			reduce(66),  /* else, reduce: CompExp */
			nil,         /* if */
			reduce(66),  /* ,, reduce: CompExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(66),  /* or, reduce: CompExp */
			reduce(66),  /* and, reduce: CompExp */
			reduce(66),  /* <, reduce: CompExp */
			reduce(66),  /* <=, reduce: CompExp */
			reduce(66),  /* >, reduce: CompExp */
			reduce(66),  /* >=, reduce: CompExp */
			reduce(66),  /* ==, reduce: CompExp */
			reduce(66),  /* ~=, reduce: CompExp */
			shift(1782), /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1951
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(68),  /* ;, reduce: BitOrExp */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(68),  /* end, reduce: BitOrExp */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			reduce(68),  /* elseif, reduce: BitOrExp */
			reduce(68),  /* else, reduce: BitOrExp */
			nil,         /* if */
			reduce(68),  /* ,, reduce: BitOrExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(68),  /* or, reduce: BitOrExp */
			reduce(68),  /* and, reduce: BitOrExp */
			reduce(68),  /* <, reduce: BitOrExp */
			reduce(68),  /* <=, reduce: BitOrExp */
			reduce(68),  /* >, reduce: BitOrExp */
			reduce(68),  /* >=, reduce: BitOrExp */
			reduce(68),  /* ==, reduce: BitOrExp */
			reduce(68),  /* ~=, reduce: BitOrExp */
			reduce(68),  /* |, reduce: BitOrExp */
			shift(1783), /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1952
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(70),  /* ;, reduce: BitXorExp */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(70),  /* end, reduce: BitXorExp */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			reduce(70),  /* elseif, reduce: BitXorExp */
			reduce(70),  /* else, reduce: BitXorExp */
			nil,         /* if */
			reduce(70),  /* ,, reduce: BitXorExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(70),  /* or, reduce: BitXorExp */
			reduce(70),  /* and, reduce: BitXorExp */
			reduce(70),  /* <, reduce: BitXorExp */
			reduce(70),  /* <=, reduce: BitXorExp */
			reduce(70),  /* >, reduce: BitXorExp */
			reduce(70),  /* >=, reduce: BitXorExp */
			reduce(70),  /* ==, reduce: BitXorExp */
			reduce(70),  /* ~=, reduce: BitXorExp */
			reduce(70),  /* |, reduce: BitXorExp */
			reduce(70),  /* ~, reduce: BitXorExp */
			shift(1784), /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1953
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(72),  /* ;, reduce: BitAndExp */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(72),  /* end, reduce: BitAndExp */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			reduce(72),  /* elseif, reduce: BitAndExp */
			reduce(72),  /* else, reduce: BitAndExp */
			nil,         /* if */
			reduce(72),  /* ,, reduce: BitAndExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(72),  /* or, reduce: BitAndExp */
			reduce(72),  /* and, reduce: BitAndExp */
			reduce(72),  /* <, reduce: BitAndExp */
			reduce(72),  /* <=, reduce: BitAndExp */
			reduce(72),  /* >, reduce: BitAndExp */
			reduce(72),  /* >=, reduce: BitAndExp */
			reduce(72),  /* ==, reduce: BitAndExp */
			reduce(72),  /* ~=, reduce: BitAndExp */
			reduce(72),  /* |, reduce: BitAndExp */
			reduce(72),  /* ~, reduce: BitAndExp */
			reduce(72),  /* &, reduce: BitAndExp */
			shift(1785), /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1954
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(74), /* ;, reduce: ConcatExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			reduce(74), /* end, reduce: ConcatExp */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			reduce(74), /* elseif, reduce: ConcatExp */
			reduce(74), /* else, reduce: ConcatExp */
			nil,        /* if */
			reduce(74), /* ,, reduce: ConcatExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(74), /* or, reduce: ConcatExp */
			reduce(74), /* and, reduce: ConcatExp */
			reduce(74), /* <, reduce: ConcatExp */
			reduce(74), /* <=, reduce: ConcatExp */
			reduce(74), /* >, reduce: ConcatExp */
			reduce(74), /* >=, reduce: ConcatExp */
			reduce(74), /* ==, reduce: ConcatExp */
			reduce(74), /* ~=, reduce: ConcatExp */
			reduce(74), /* |, reduce: ConcatExp */
			reduce(74), /* ~, reduce: ConcatExp */
			reduce(74), /* &, reduce: ConcatExp */
			reduce(74), /* .., reduce: ConcatExp */
			shift(214), /* << */
			shift(215), /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1955
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(78), /* ;, reduce: ShiftExp */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			reduce(78), /* end, reduce: ShiftExp */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			reduce(78), /* elseif, reduce: ShiftExp */
			reduce(78), /* else, reduce: ShiftExp */
			nil,        /* if */
			reduce(78), /* ,, reduce: ShiftExp */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(78), /* or, reduce: ShiftExp */
			reduce(78), /* and, reduce: ShiftExp */
			reduce(78), /* <, reduce: ShiftExp */
			reduce(78), /* <=, reduce: ShiftExp */
			reduce(78), /* >, reduce: ShiftExp */
			reduce(78), /* >=, reduce: ShiftExp */
			reduce(78), /* ==, reduce: ShiftExp */
			reduce(78), /* ~=, reduce: ShiftExp */
			reduce(78), /* |, reduce: ShiftExp */
			reduce(78), /* ~, reduce: ShiftExp */
			reduce(78), /* &, reduce: ShiftExp */
			reduce(78), /* .., reduce: ShiftExp */
			reduce(78), /* <<, reduce: ShiftExp */
			reduce(78), /* >>, reduce: ShiftExp */
			shift(217), /* + */
			shift(218), /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1956
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(82), /* ;, reduce: Sum */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			reduce(82), /* end, reduce: Sum */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			reduce(82), /* elseif, reduce: Sum */
			reduce(82), /* else, reduce: Sum */
			nil,        /* if */
			reduce(82), /* ,, reduce: Sum */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(82), /* or, reduce: Sum */
			reduce(82), /* and, reduce: Sum */
			reduce(82), /* <, reduce: Sum */
			reduce(82), /* <=, reduce: Sum */
			reduce(82), /* >, reduce: Sum */
			reduce(82), /* >=, reduce: Sum */
			reduce(82), /* ==, reduce: Sum */
			reduce(82), /* ~=, reduce: Sum */
			reduce(82), /* |, reduce: Sum */
			reduce(82), /* ~, reduce: Sum */
			reduce(82), /* &, reduce: Sum */
			reduce(82), /* .., reduce: Sum */
			reduce(82), /* <<, reduce: Sum */
			reduce(82), /* >>, reduce: Sum */
			reduce(82), /* +, reduce: Sum */
			reduce(82), /* -, reduce: Sum */
			shift(220), /* * */
			shift(221), /* / */
			shift(222), /* % */
			shift(223), /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1957
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(88), /* ;, reduce: Term */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			reduce(88), /* end, reduce: Term */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			reduce(88), /* elseif, reduce: Term */
			reduce(88), /* else, reduce: Term */
			nil,        /* if */
			reduce(88), /* ,, reduce: Term */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(88), /* or, reduce: Term */
			reduce(88), /* and, reduce: Term */
			reduce(88), /* <, reduce: Term */
			reduce(88), /* <=, reduce: Term */
			reduce(88), /* >, reduce: Term */
			reduce(88), /* >=, reduce: Term */
			reduce(88), /* ==, reduce: Term */
			reduce(88), /* ~=, reduce: Term */
			reduce(88), /* |, reduce: Term */
			reduce(88), /* ~, reduce: Term */
			reduce(88), /* &, reduce: Term */
			reduce(88), /* .., reduce: Term */
			reduce(88), /* <<, reduce: Term */
			reduce(88), /* >>, reduce: Term */
			reduce(88), /* +, reduce: Term */
			reduce(88), /* -, reduce: Term */
			reduce(88), /* *, reduce: Term */
			reduce(88), /* /, reduce: Term */
			reduce(88), /* %, reduce: Term */
			reduce(88), /* //, reduce: Term */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1958
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(96), /* ;, reduce: Power */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			reduce(96), /* end, reduce: Power */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			reduce(96), /* elseif, reduce: Power */
			reduce(96), /* else, reduce: Power */
			nil,        /* if */
			reduce(96), /* ,, reduce: Power */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			reduce(96), /* or, reduce: Power */
			reduce(96), /* and, reduce: Power */
			reduce(96), /* <, reduce: Power */
			reduce(96), /* <=, reduce: Power */
			reduce(96), /* >, reduce: Power */
			reduce(96), /* >=, reduce: Power */
			reduce(96), /* ==, reduce: Power */
			reduce(96), /* ~=, reduce: Power */
			reduce(96), /* |, reduce: Power */
			reduce(96), /* ~, reduce: Power */
			reduce(96), /* &, reduce: Power */
			reduce(96), /* .., reduce: Power */
			reduce(96), /* <<, reduce: Power */
			reduce(96), /* >>, reduce: Power */
			reduce(96), /* +, reduce: Power */
			reduce(96), /* -, reduce: Power */
			reduce(96), /* *, reduce: Power */
			reduce(96), /* /, reduce: Power */
			reduce(96), /* %, reduce: Power */
			reduce(96), /* //, reduce: Power */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1959
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(99), /* ;, reduce: Var */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			reduce(99), /* end, reduce: Var */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			reduce(99), /* elseif, reduce: Var */
			reduce(99), /* else, reduce: Var */
			nil,        /* if */
			reduce(99), /* ,, reduce: Var */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			reduce(99), /* ., reduce: Var */
			reduce(99), /* :, reduce: Var */
			reduce(99), /* or, reduce: Var */
			reduce(99), /* and, reduce: Var */
			reduce(99), /* <, reduce: Var */
			reduce(99), /* <=, reduce: Var */
			reduce(99), /* >, reduce: Var */
			reduce(99), /* >=, reduce: Var */
			reduce(99), /* ==, reduce: Var */
			reduce(99), /* ~=, reduce: Var */
			reduce(99), /* |, reduce: Var */
			reduce(99), /* ~, reduce: Var */
			reduce(99), /* &, reduce: Var */
			reduce(99), /* .., reduce: Var */
			reduce(99), /* <<, reduce: Var */
			reduce(99), /* >>, reduce: Var */
			reduce(99), /* +, reduce: Var */
			reduce(99), /* -, reduce: Var */
			reduce(99), /* *, reduce: Var */
			reduce(99), /* /, reduce: Var */
			reduce(99), /* %, reduce: Var */
			reduce(99), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(99), /* ^, reduce: Var */
			reduce(99), /* [, reduce: Var */
			nil,        /* ] */
			reduce(99), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(99), /* string, reduce: Var */
			reduce(99), /* {, reduce: Var */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S1960
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1794), /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			shift(1796), /* string */
			shift(1798), /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1961
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			shift(851),  /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			shift(2076), /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1962
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(876),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(2077), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1963
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(115), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(115), /* end, reduce: Args */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			reduce(115), /* elseif, reduce: Args */
			reduce(115), /* else, reduce: Args */
			nil,         /* if */
			reduce(115), /* ,, reduce: Args */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(115), /* ., reduce: Args */
			reduce(115), /* :, reduce: Args */
			reduce(115), /* or, reduce: Args */
			reduce(115), /* and, reduce: Args */
			reduce(115), /* <, reduce: Args */
			reduce(115), /* <=, reduce: Args */
			reduce(115), /* >, reduce: Args */
			reduce(115), /* >=, reduce: Args */
			reduce(115), /* ==, reduce: Args */
			reduce(115), /* ~=, reduce: Args */
			reduce(115), /* |, reduce: Args */
			reduce(115), /* ~, reduce: Args */
			reduce(115), /* &, reduce: Args */
			reduce(115), /* .., reduce: Args */
			reduce(115), /* <<, reduce: Args */
			reduce(115), /* >>, reduce: Args */
			reduce(115), /* +, reduce: Args */
			reduce(115), /* -, reduce: Args */
			reduce(115), /* *, reduce: Args */
			reduce(115), /* /, reduce: Args */
			reduce(115), /* %, reduce: Args */
			reduce(115), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(115), /* ^, reduce: Args */
			reduce(115), /* [, reduce: Args */
			nil,         /* ] */
			reduce(115), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(115), /* string, reduce: Args */
			reduce(115), /* {, reduce: Args */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1964
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			shift(569),  /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(570),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			shift(2078), /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1965
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(102), /* ;, reduce: PrefixExp */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(102), /* end, reduce: PrefixExp */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			reduce(102), /* elseif, reduce: PrefixExp */
			reduce(102), /* else, reduce: PrefixExp */
			nil,         /* if */
			reduce(102), /* ,, reduce: PrefixExp */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(102), /* ., reduce: PrefixExp */
			reduce(102), /* :, reduce: PrefixExp */
			reduce(102), /* or, reduce: PrefixExp */
			reduce(102), /* and, reduce: PrefixExp */
			reduce(102), /* <, reduce: PrefixExp */
			reduce(102), /* <=, reduce: PrefixExp */
			reduce(102), /* >, reduce: PrefixExp */
			reduce(102), /* >=, reduce: PrefixExp */
			reduce(102), /* ==, reduce: PrefixExp */
			reduce(102), /* ~=, reduce: PrefixExp */
			reduce(102), /* |, reduce: PrefixExp */
			reduce(102), /* ~, reduce: PrefixExp */
			reduce(102), /* &, reduce: PrefixExp */
			reduce(102), /* .., reduce: PrefixExp */
			reduce(102), /* <<, reduce: PrefixExp */
			reduce(102), /* >>, reduce: PrefixExp */
			reduce(102), /* +, reduce: PrefixExp */
			reduce(102), /* -, reduce: PrefixExp */
			reduce(102), /* *, reduce: PrefixExp */
			reduce(102), /* /, reduce: PrefixExp */
			reduce(102), /* %, reduce: PrefixExp */
			reduce(102), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(102), /* ^, reduce: PrefixExp */
			reduce(102), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(102), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(102), /* string, reduce: PrefixExp */
			reduce(102), /* {, reduce: PrefixExp */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1966
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(125), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(125), /* end, reduce: TableConstructor */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			reduce(125), /* elseif, reduce: TableConstructor */
			reduce(125), /* else, reduce: TableConstructor */
			nil,         /* if */
			reduce(125), /* ,, reduce: TableConstructor */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(125), /* or, reduce: TableConstructor */
			reduce(125), /* and, reduce: TableConstructor */
			reduce(125), /* <, reduce: TableConstructor */
			reduce(125), /* <=, reduce: TableConstructor */
			reduce(125), /* >, reduce: TableConstructor */
			reduce(125), /* >=, reduce: TableConstructor */
			reduce(125), /* ==, reduce: TableConstructor */
			reduce(125), /* ~=, reduce: TableConstructor */
			reduce(125), /* |, reduce: TableConstructor */
			reduce(125), /* ~, reduce: TableConstructor */
			reduce(125), /* &, reduce: TableConstructor */
			reduce(125), /* .., reduce: TableConstructor */
			reduce(125), /* <<, reduce: TableConstructor */
			reduce(125), /* >>, reduce: TableConstructor */
			reduce(125), /* +, reduce: TableConstructor */
			reduce(125), /* -, reduce: TableConstructor */
			reduce(125), /* *, reduce: TableConstructor */
			reduce(125), /* /, reduce: TableConstructor */
			reduce(125), /* %, reduce: TableConstructor */
			reduce(125), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(125), /* ^, reduce: TableConstructor */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1967
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(238),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			shift(254),  /* [ */
			nil,         /* ] */
			shift(255),  /* ( */
			nil,         /* ) */
			shift(256),  /* nil */
			shift(257),  /* true */
			shift(258),  /* false */
			shift(259),  /* ... */
			shift(260),  /* numdec */
			shift(261),  /* numhex */
			shift(262),  /* string */
			shift(265),  /* { */
			shift(2080), /* } */
			shift(268),  /* ident */
		},
	},
	actionRow{ // S1968
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1805), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1821), /* ( */
			nil,         /* ) */
			shift(1822), /* nil */
			shift(1823), /* true */
			shift(1824), /* false */
			shift(1825), /* ... */
			shift(1826), /* numdec */
			shift(1827), /* numhex */
			shift(1828), /* string */
			shift(1831), /* { */
			nil,         /* } */
			shift(1832), /* ident */
		},
	},
	actionRow{ // S1969
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1805), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1821), /* ( */
			nil,         /* ) */
			shift(1822), /* nil */
			shift(1823), /* true */
			shift(1824), /* false */
			shift(1825), /* ... */
			shift(1826), /* numdec */
			shift(1827), /* numhex */
			shift(1828), /* string */
			shift(1831), /* { */
			nil,         /* } */
			shift(1832), /* ident */
		},
	},
	actionRow{ // S1970
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(119), /* return, reduce: FunctionDef */
			reduce(119), /* ;, reduce: FunctionDef */
			nil,         /* empty */
			nil,         /* = */
			reduce(119), /* break, reduce: FunctionDef */
			reduce(119), /* goto, reduce: FunctionDef */
			reduce(119), /* do, reduce: FunctionDef */
			reduce(119), /* end, reduce: FunctionDef */
			reduce(119), /* while, reduce: FunctionDef */
			reduce(119), /* repeat, reduce: FunctionDef */
			nil,         /* until */
			nil,         /* then */
			reduce(119), /* elseif, reduce: FunctionDef */
			reduce(119), /* else, reduce: FunctionDef */
			reduce(119), /* if, reduce: FunctionDef */
			reduce(119), /* ,, reduce: FunctionDef */
			reduce(119), /* for, reduce: FunctionDef */
			nil,         /* in */
			reduce(119), /* function, reduce: FunctionDef */
			reduce(119), /* local, reduce: FunctionDef */
			reduce(119), /* ::, reduce: FunctionDef */
			nil,         /* . */
			nil,         /* : */
			reduce(119), /* or, reduce: FunctionDef */
			reduce(119), /* and, reduce: FunctionDef */
			reduce(119), /* <, reduce: FunctionDef */
			reduce(119), /* <=, reduce: FunctionDef */
			reduce(119), /* >, reduce: FunctionDef */
			reduce(119), /* >=, reduce: FunctionDef */
			reduce(119), /* ==, reduce: FunctionDef */
			reduce(119), /* ~=, reduce: FunctionDef */
			reduce(119), /* |, reduce: FunctionDef */
			reduce(119), /* ~, reduce: FunctionDef */
			reduce(119), /* &, reduce: FunctionDef */
			reduce(119), /* .., reduce: FunctionDef */
			reduce(119), /* <<, reduce: FunctionDef */
			reduce(119), /* >>, reduce: FunctionDef */
			reduce(119), /* +, reduce: FunctionDef */
			reduce(119), /* -, reduce: FunctionDef */
			reduce(119), /* *, reduce: FunctionDef */
			reduce(119), /* /, reduce: FunctionDef */
			reduce(119), /* %, reduce: FunctionDef */
			reduce(119), /* //, reduce: FunctionDef */
			nil,         /* not */
			nil,         /* # */
			reduce(119), /* ^, reduce: FunctionDef */
			nil,         /* [ */
			nil,         /* ] */
			reduce(119), /* (, reduce: FunctionDef */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(119), /* ident, reduce: FunctionDef */
		},
	},
	actionRow{ // S1971
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(123), /* ), reduce: ParList */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			shift(521),  /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			shift(523),  /* ident */
		},
	},
	actionRow{ // S1972
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1805), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1821), /* ( */
			nil,         /* ) */
			shift(1822), /* nil */
			shift(1823), /* true */
			shift(1824), /* false */
			shift(1825), /* ... */
			shift(1826), /* numdec */
			shift(1827), /* numhex */
			shift(1828), /* string */
			shift(1831), /* { */
			nil,         /* } */
			shift(1832), /* ident */
		},
	},
	actionRow{ // S1973
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1805), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1821), /* ( */
			nil,         /* ) */
			shift(1822), /* nil */
			shift(1823), /* true */
			shift(1824), /* false */
			shift(1825), /* ... */
			shift(1826), /* numdec */
			shift(1827), /* numhex */
			shift(1828), /* string */
			shift(1831), /* { */
			nil,         /* } */
			shift(1832), /* ident */
		},
	},
	actionRow{ // S1974
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1805), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1821), /* ( */
			nil,         /* ) */
			shift(1822), /* nil */
			shift(1823), /* true */
			shift(1824), /* false */
			shift(1825), /* ... */
			shift(1826), /* numdec */
			shift(1827), /* numhex */
			shift(1828), /* string */
			shift(1831), /* { */
			nil,         /* } */
			shift(1832), /* ident */
		},
	},
	actionRow{ // S1975
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1805), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1821), /* ( */
			nil,         /* ) */
			shift(1822), /* nil */
			shift(1823), /* true */
			shift(1824), /* false */
			shift(1825), /* ... */
			shift(1826), /* numdec */
			shift(1827), /* numhex */
			shift(1828), /* string */
			shift(1831), /* { */
			nil,         /* } */
			shift(1832), /* ident */
		},
	},
	actionRow{ // S1976
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1805), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1821), /* ( */
			nil,         /* ) */
			shift(1822), /* nil */
			shift(1823), /* true */
			shift(1824), /* false */
			shift(1825), /* ... */
			shift(1826), /* numdec */
			shift(1827), /* numhex */
			shift(1828), /* string */
			shift(1831), /* { */
			nil,         /* } */
			shift(1832), /* ident */
		},
	},
	actionRow{ // S1977
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1805), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1821), /* ( */
			nil,         /* ) */
			shift(1822), /* nil */
			shift(1823), /* true */
			shift(1824), /* false */
			shift(1825), /* ... */
			shift(1826), /* numdec */
			shift(1827), /* numhex */
			shift(1828), /* string */
			shift(1831), /* { */
			nil,         /* } */
			shift(1832), /* ident */
		},
	},
	actionRow{ // S1978
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1805), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1821), /* ( */
			nil,         /* ) */
			shift(1822), /* nil */
			shift(1823), /* true */
			shift(1824), /* false */
			shift(1825), /* ... */
			shift(1826), /* numdec */
			shift(1827), /* numhex */
			shift(1828), /* string */
			shift(1831), /* { */
			nil,         /* } */
			shift(1832), /* ident */
		},
	},
	actionRow{ // S1979
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1805), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1821), /* ( */
			nil,         /* ) */
			shift(1822), /* nil */
			shift(1823), /* true */
			shift(1824), /* false */
			shift(1825), /* ... */
			shift(1826), /* numdec */
			shift(1827), /* numhex */
			shift(1828), /* string */
			shift(1831), /* { */
			nil,         /* } */
			shift(1832), /* ident */
		},
	},
	actionRow{ // S1980
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1805), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1821), /* ( */
			nil,         /* ) */
			shift(1822), /* nil */
			shift(1823), /* true */
			shift(1824), /* false */
			shift(1825), /* ... */
			shift(1826), /* numdec */
			shift(1827), /* numhex */
			shift(1828), /* string */
			shift(1831), /* { */
			nil,         /* } */
			shift(1832), /* ident */
		},
	},
	actionRow{ // S1981
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(93), /* return, reduce: Factor */
			reduce(93), /* ;, reduce: Factor */
			nil,        /* empty */
			nil,        /* = */
			reduce(93), /* break, reduce: Factor */
			reduce(93), /* goto, reduce: Factor */
			reduce(93), /* do, reduce: Factor */
			reduce(93), /* end, reduce: Factor */
			reduce(93), /* while, reduce: Factor */
			reduce(93), /* repeat, reduce: Factor */
			nil,        /* until */
			nil,        /* then */
			reduce(93), /* elseif, reduce: Factor */
			reduce(93), /* else, reduce: Factor */
			reduce(93), /* if, reduce: Factor */
			reduce(93), /* ,, reduce: Factor */
			reduce(93), /* for, reduce: Factor */
			nil,        /* in */
			reduce(93), /* function, reduce: Factor */
			reduce(93), /* local, reduce: Factor */
			reduce(93), /* ::, reduce: Factor */
			nil,        /* . */
			nil,        /* : */
			reduce(93), /* or, reduce: Factor */
			reduce(93), /* and, reduce: Factor */
			reduce(93), /* <, reduce: Factor */
			reduce(93), /* <=, reduce: Factor */
			reduce(93), /* >, reduce: Factor */
			reduce(93), /* >=, reduce: Factor */
			reduce(93), /* ==, reduce: Factor */
			reduce(93), /* ~=, reduce: Factor */
			reduce(93), /* |, reduce: Factor */
			reduce(93), /* ~, reduce: Factor */
			reduce(93), /* &, reduce: Factor */
			reduce(93), /* .., reduce: Factor */
			reduce(93), /* <<, reduce: Factor */
			reduce(93), /* >>, reduce: Factor */
			reduce(93), /* +, reduce: Factor */
			reduce(93), /* -, reduce: Factor */
			reduce(93), /* *, reduce: Factor */
			reduce(93), /* /, reduce: Factor */
			reduce(93), /* %, reduce: Factor */
			reduce(93), /* //, reduce: Factor */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(93), /* (, reduce: Factor */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(93), /* ident, reduce: Factor */
		},
	},
	actionRow{ // S1982
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1805), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1821), /* ( */
			nil,         /* ) */
			shift(1822), /* nil */
			shift(1823), /* true */
			shift(1824), /* false */
			shift(1825), /* ... */
			shift(1826), /* numdec */
			shift(1827), /* numhex */
			shift(1828), /* string */
			shift(1831), /* { */
			nil,         /* } */
			shift(1832), /* ident */
		},
	},
	actionRow{ // S1983
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			shift(1832), /* ident */
		},
	},
	actionRow{ // S1984
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(426), /* ident */
		},
	},
	actionRow{ // S1985
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(430), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(446), /* ( */
			nil,        /* ) */
			shift(447), /* nil */
			shift(448), /* true */
			shift(449), /* false */
			shift(450), /* ... */
			shift(451), /* numdec */
			shift(452), /* numhex */
			shift(453), /* string */
			shift(456), /* { */
			nil,        /* } */
			shift(457), /* ident */
		},
	},
	actionRow{ // S1986
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(462),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(478),  /* ( */
			shift(2098), /* ) */
			shift(480),  /* nil */
			shift(481),  /* true */
			shift(482),  /* false */
			shift(483),  /* ... */
			shift(484),  /* numdec */
			shift(485),  /* numhex */
			shift(486),  /* string */
			shift(489),  /* { */
			nil,         /* } */
			shift(490),  /* ident */
		},
	},
	actionRow{ // S1987
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(103), /* return, reduce: FunctionCall */
			reduce(103), /* ;, reduce: FunctionCall */
			nil,         /* empty */
			nil,         /* = */
			reduce(103), /* break, reduce: FunctionCall */
			reduce(103), /* goto, reduce: FunctionCall */
			reduce(103), /* do, reduce: FunctionCall */
			reduce(103), /* end, reduce: FunctionCall */
			reduce(103), /* while, reduce: FunctionCall */
			reduce(103), /* repeat, reduce: FunctionCall */
			nil,         /* until */
			nil,         /* then */
			reduce(103), /* elseif, reduce: FunctionCall */
			reduce(103), /* else, reduce: FunctionCall */
			reduce(103), /* if, reduce: FunctionCall */
			reduce(103), /* ,, reduce: FunctionCall */
			reduce(103), /* for, reduce: FunctionCall */
			nil,         /* in */
			reduce(103), /* function, reduce: FunctionCall */
			reduce(103), /* local, reduce: FunctionCall */
			reduce(103), /* ::, reduce: FunctionCall */
			reduce(103), /* ., reduce: FunctionCall */
			reduce(103), /* :, reduce: FunctionCall */
			reduce(103), /* or, reduce: FunctionCall */
			reduce(103), /* and, reduce: FunctionCall */
			reduce(103), /* <, reduce: FunctionCall */
			reduce(103), /* <=, reduce: FunctionCall */
			reduce(103), /* >, reduce: FunctionCall */
			reduce(103), /* >=, reduce: FunctionCall */
			reduce(103), /* ==, reduce: FunctionCall */
			reduce(103), /* ~=, reduce: FunctionCall */
			reduce(103), /* |, reduce: FunctionCall */
			reduce(103), /* ~, reduce: FunctionCall */
			reduce(103), /* &, reduce: FunctionCall */
			reduce(103), /* .., reduce: FunctionCall */
			reduce(103), /* <<, reduce: FunctionCall */
			reduce(103), /* >>, reduce: FunctionCall */
			reduce(103), /* +, reduce: FunctionCall */
			reduce(103), /* -, reduce: FunctionCall */
			reduce(103), /* *, reduce: FunctionCall */
			reduce(103), /* /, reduce: FunctionCall */
			reduce(103), /* %, reduce: FunctionCall */
			reduce(103), /* //, reduce: FunctionCall */
			nil,         /* not */
			nil,         /* # */
			reduce(103), /* ^, reduce: FunctionCall */
			reduce(103), /* [, reduce: FunctionCall */
			nil,         /* ] */
			reduce(103), /* (, reduce: FunctionCall */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(103), /* string, reduce: FunctionCall */
			reduce(103), /* {, reduce: FunctionCall */
			nil,         /* } */
			reduce(103), /* ident, reduce: FunctionCall */
		},
	},
	actionRow{ // S1988
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(118), /* return, reduce: Args */
			reduce(118), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			reduce(118), /* break, reduce: Args */
			reduce(118), /* goto, reduce: Args */
			reduce(118), /* do, reduce: Args */
			reduce(118), /* end, reduce: Args */
			reduce(118), /* while, reduce: Args */
			reduce(118), /* repeat, reduce: Args */
			nil,         /* until */
			nil,         /* then */
			reduce(118), /* elseif, reduce: Args */
			reduce(118), /* else, reduce: Args */
			reduce(118), /* if, reduce: Args */
			reduce(118), /* ,, reduce: Args */
			reduce(118), /* for, reduce: Args */
			nil,         /* in */
			reduce(118), /* function, reduce: Args */
			reduce(118), /* local, reduce: Args */
			reduce(118), /* ::, reduce: Args */
			reduce(118), /* ., reduce: Args */
			reduce(118), /* :, reduce: Args */
			reduce(118), /* or, reduce: Args */
			reduce(118), /* and, reduce: Args */
			reduce(118), /* <, reduce: Args */
			reduce(118), /* <=, reduce: Args */
			reduce(118), /* >, reduce: Args */
			reduce(118), /* >=, reduce: Args */
			reduce(118), /* ==, reduce: Args */
			reduce(118), /* ~=, reduce: Args */
			reduce(118), /* |, reduce: Args */
			reduce(118), /* ~, reduce: Args */
			reduce(118), /* &, reduce: Args */
			reduce(118), /* .., reduce: Args */
			reduce(118), /* <<, reduce: Args */
			reduce(118), /* >>, reduce: Args */
			reduce(118), /* +, reduce: Args */
			reduce(118), /* -, reduce: Args */
			reduce(118), /* *, reduce: Args */
			reduce(118), /* /, reduce: Args */
			reduce(118), /* %, reduce: Args */
			reduce(118), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(118), /* ^, reduce: Args */
			reduce(118), /* [, reduce: Args */
			nil,         /* ] */
			reduce(118), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(118), /* string, reduce: Args */
			reduce(118), /* {, reduce: Args */
			nil,         /* } */
			reduce(118), /* ident, reduce: Args */
		},
	},
	actionRow{ // S1989
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(117), /* return, reduce: Args */
			reduce(117), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			reduce(117), /* break, reduce: Args */
			reduce(117), /* goto, reduce: Args */
			reduce(117), /* do, reduce: Args */
			reduce(117), /* end, reduce: Args */
			reduce(117), /* while, reduce: Args */
			reduce(117), /* repeat, reduce: Args */
			nil,         /* until */
			nil,         /* then */
			reduce(117), /* elseif, reduce: Args */
			reduce(117), /* else, reduce: Args */
			reduce(117), /* if, reduce: Args */
			reduce(117), /* ,, reduce: Args */
			reduce(117), /* for, reduce: Args */
			nil,         /* in */
			reduce(117), /* function, reduce: Args */
			reduce(117), /* local, reduce: Args */
			reduce(117), /* ::, reduce: Args */
			reduce(117), /* ., reduce: Args */
			reduce(117), /* :, reduce: Args */
			reduce(117), /* or, reduce: Args */
			reduce(117), /* and, reduce: Args */
			reduce(117), /* <, reduce: Args */
			reduce(117), /* <=, reduce: Args */
			reduce(117), /* >, reduce: Args */
			reduce(117), /* >=, reduce: Args */
			reduce(117), /* ==, reduce: Args */
			reduce(117), /* ~=, reduce: Args */
			reduce(117), /* |, reduce: Args */
			reduce(117), /* ~, reduce: Args */
			reduce(117), /* &, reduce: Args */
			reduce(117), /* .., reduce: Args */
			reduce(117), /* <<, reduce: Args */
			reduce(117), /* >>, reduce: Args */
			reduce(117), /* +, reduce: Args */
			reduce(117), /* -, reduce: Args */
			reduce(117), /* *, reduce: Args */
			reduce(117), /* /, reduce: Args */
			reduce(117), /* %, reduce: Args */
			reduce(117), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(117), /* ^, reduce: Args */
			reduce(117), /* [, reduce: Args */
			nil,         /* ] */
			reduce(117), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(117), /* string, reduce: Args */
			reduce(117), /* {, reduce: Args */
			nil,         /* } */
			reduce(117), /* ident, reduce: Args */
		},
	},
	actionRow{ // S1990
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			shift(254), /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(268), /* ident */
		},
	},
	actionRow{ // S1991
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			shift(492),  /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(2100), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1992
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			shift(569),  /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(570),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			shift(2101), /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1993
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(2103), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1994
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(101), /* return, reduce: PrefixExp */
			reduce(101), /* ;, reduce: PrefixExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(101), /* break, reduce: PrefixExp */
			reduce(101), /* goto, reduce: PrefixExp */
			reduce(101), /* do, reduce: PrefixExp */
			reduce(101), /* end, reduce: PrefixExp */
			reduce(101), /* while, reduce: PrefixExp */
			reduce(101), /* repeat, reduce: PrefixExp */
			nil,         /* until */
			nil,         /* then */
			reduce(101), /* elseif, reduce: PrefixExp */
			reduce(101), /* else, reduce: PrefixExp */
			reduce(101), /* if, reduce: PrefixExp */
			nil,         /* , */
			reduce(101), /* for, reduce: PrefixExp */
			nil,         /* in */
			reduce(101), /* function, reduce: PrefixExp */
			reduce(101), /* local, reduce: PrefixExp */
			reduce(101), /* ::, reduce: PrefixExp */
			reduce(101), /* ., reduce: PrefixExp */
			reduce(101), /* :, reduce: PrefixExp */
			reduce(101), /* or, reduce: PrefixExp */
			reduce(101), /* and, reduce: PrefixExp */
			reduce(101), /* <, reduce: PrefixExp */
			reduce(101), /* <=, reduce: PrefixExp */
			reduce(101), /* >, reduce: PrefixExp */
			reduce(101), /* >=, reduce: PrefixExp */
			reduce(101), /* ==, reduce: PrefixExp */
			reduce(101), /* ~=, reduce: PrefixExp */
			reduce(101), /* |, reduce: PrefixExp */
			reduce(101), /* ~, reduce: PrefixExp */
			reduce(101), /* &, reduce: PrefixExp */
			reduce(101), /* .., reduce: PrefixExp */
			reduce(101), /* <<, reduce: PrefixExp */
			reduce(101), /* >>, reduce: PrefixExp */
			reduce(101), /* +, reduce: PrefixExp */
			reduce(101), /* -, reduce: PrefixExp */
			reduce(101), /* *, reduce: PrefixExp */
			reduce(101), /* /, reduce: PrefixExp */
			reduce(101), /* %, reduce: PrefixExp */
			reduce(101), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(101), /* ^, reduce: PrefixExp */
			reduce(101), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(101), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(101), /* string, reduce: PrefixExp */
			reduce(101), /* {, reduce: PrefixExp */
			nil,         /* } */
			reduce(101), /* ident, reduce: PrefixExp */
		},
	},
	actionRow{ // S1995
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(97), /* return, reduce: Var */
			reduce(97), /* ;, reduce: Var */
			nil,        /* empty */
			nil,        /* = */
			reduce(97), /* break, reduce: Var */
			reduce(97), /* goto, reduce: Var */
			reduce(97), /* do, reduce: Var */
			reduce(97), /* end, reduce: Var */
			reduce(97), /* while, reduce: Var */
			reduce(97), /* repeat, reduce: Var */
			nil,        /* until */
			nil,        /* then */
			reduce(97), /* elseif, reduce: Var */
			reduce(97), /* else, reduce: Var */
			reduce(97), /* if, reduce: Var */
			nil,        /* , */
			reduce(97), /* for, reduce: Var */
			nil,        /* in */
			reduce(97), /* function, reduce: Var */
			reduce(97), /* local, reduce: Var */
			reduce(97), /* ::, reduce: Var */
			reduce(97), /* ., reduce: Var */
			reduce(97), /* :, reduce: Var */
			reduce(97), /* or, reduce: Var */
			reduce(97), /* and, reduce: Var */
			reduce(97), /* <, reduce: Var */
			reduce(97), /* <=, reduce: Var */
			reduce(97), /* >, reduce: Var */
			reduce(97), /* >=, reduce: Var */
			reduce(97), /* ==, reduce: Var */
			reduce(97), /* ~=, reduce: Var */
			reduce(97), /* |, reduce: Var */
			reduce(97), /* ~, reduce: Var */
			reduce(97), /* &, reduce: Var */
			reduce(97), /* .., reduce: Var */
			reduce(97), /* <<, reduce: Var */
			reduce(97), /* >>, reduce: Var */
			reduce(97), /* +, reduce: Var */
			reduce(97), /* -, reduce: Var */
			reduce(97), /* *, reduce: Var */
			reduce(97), /* /, reduce: Var */
			reduce(97), /* %, reduce: Var */
			reduce(97), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(97), /* ^, reduce: Var */
			reduce(97), /* [, reduce: Var */
			nil,        /* ] */
			reduce(97), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(97), /* string, reduce: Var */
			reduce(97), /* {, reduce: Var */
			nil,        /* } */
			reduce(97), /* ident, reduce: Var */
		},
	},
	actionRow{ // S1996
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(28),  /* return, reduce: RepeatStat */
			reduce(28),  /* ;, reduce: RepeatStat */
			nil,         /* empty */
			nil,         /* = */
			reduce(28),  /* break, reduce: RepeatStat */
			reduce(28),  /* goto, reduce: RepeatStat */
			reduce(28),  /* do, reduce: RepeatStat */
			reduce(28),  /* end, reduce: RepeatStat */
			reduce(28),  /* while, reduce: RepeatStat */
			reduce(28),  /* repeat, reduce: RepeatStat */
			nil,         /* until */
			nil,         /* then */
			reduce(28),  /* elseif, reduce: RepeatStat */
			reduce(28),  /* else, reduce: RepeatStat */
			reduce(28),  /* if, reduce: RepeatStat */
			nil,         /* , */
			reduce(28),  /* for, reduce: RepeatStat */
			nil,         /* in */
			reduce(28),  /* function, reduce: RepeatStat */
			reduce(28),  /* local, reduce: RepeatStat */
			reduce(28),  /* ::, reduce: RepeatStat */
			nil,         /* . */
			nil,         /* : */
			shift(2104), /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(28),  /* (, reduce: RepeatStat */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(28),  /* ident, reduce: RepeatStat */
		},
	},
	actionRow{ // S1997
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(2106), /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S1998
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(100), /* return, reduce: PrefixExp */
			reduce(100), /* ;, reduce: PrefixExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(100), /* break, reduce: PrefixExp */
			reduce(100), /* goto, reduce: PrefixExp */
			reduce(100), /* do, reduce: PrefixExp */
			reduce(100), /* end, reduce: PrefixExp */
			reduce(100), /* while, reduce: PrefixExp */
			reduce(100), /* repeat, reduce: PrefixExp */
			nil,         /* until */
			nil,         /* then */
			reduce(100), /* elseif, reduce: PrefixExp */
			reduce(100), /* else, reduce: PrefixExp */
			reduce(100), /* if, reduce: PrefixExp */
			nil,         /* , */
			reduce(100), /* for, reduce: PrefixExp */
			nil,         /* in */
			reduce(100), /* function, reduce: PrefixExp */
			reduce(100), /* local, reduce: PrefixExp */
			reduce(100), /* ::, reduce: PrefixExp */
			reduce(100), /* ., reduce: PrefixExp */
			reduce(100), /* :, reduce: PrefixExp */
			reduce(100), /* or, reduce: PrefixExp */
			reduce(100), /* and, reduce: PrefixExp */
			reduce(100), /* <, reduce: PrefixExp */
			reduce(100), /* <=, reduce: PrefixExp */
			reduce(100), /* >, reduce: PrefixExp */
			reduce(100), /* >=, reduce: PrefixExp */
			reduce(100), /* ==, reduce: PrefixExp */
			reduce(100), /* ~=, reduce: PrefixExp */
			reduce(100), /* |, reduce: PrefixExp */
			reduce(100), /* ~, reduce: PrefixExp */
			reduce(100), /* &, reduce: PrefixExp */
			reduce(100), /* .., reduce: PrefixExp */
			reduce(100), /* <<, reduce: PrefixExp */
			reduce(100), /* >>, reduce: PrefixExp */
			reduce(100), /* +, reduce: PrefixExp */
			reduce(100), /* -, reduce: PrefixExp */
			reduce(100), /* *, reduce: PrefixExp */
			reduce(100), /* /, reduce: PrefixExp */
			reduce(100), /* %, reduce: PrefixExp */
			reduce(100), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(100), /* ^, reduce: PrefixExp */
			reduce(100), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(100), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(100), /* string, reduce: PrefixExp */
			reduce(100), /* {, reduce: PrefixExp */
			nil,         /* } */
			reduce(100), /* ident, reduce: PrefixExp */
		},
	},
	actionRow{ // S1999
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(55),  /* return, reduce: Exp */
			reduce(55),  /* ;, reduce: Exp */
			nil,         /* empty */
			nil,         /* = */
			reduce(55),  /* break, reduce: Exp */
			reduce(55),  /* goto, reduce: Exp */
			reduce(55),  /* do, reduce: Exp */
			reduce(55),  /* end, reduce: Exp */
			reduce(55),  /* while, reduce: Exp */
			reduce(55),  /* repeat, reduce: Exp */
			nil,         /* until */
			nil,         /* then */
			reduce(55),  /* elseif, reduce: Exp */
			reduce(55),  /* else, reduce: Exp */
			reduce(55),  /* if, reduce: Exp */
			nil,         /* , */
			reduce(55),  /* for, reduce: Exp */
			nil,         /* in */
			reduce(55),  /* function, reduce: Exp */
			reduce(55),  /* local, reduce: Exp */
			reduce(55),  /* ::, reduce: Exp */
			nil,         /* . */
			nil,         /* : */
			reduce(55),  /* or, reduce: Exp */
			shift(2107), /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(55),  /* (, reduce: Exp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(55),  /* ident, reduce: Exp */
		},
	},
	actionRow{ // S2000
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(57), /* return, reduce: AndExp */
			reduce(57), /* ;, reduce: AndExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(57), /* break, reduce: AndExp */
			reduce(57), /* goto, reduce: AndExp */
			reduce(57), /* do, reduce: AndExp */
			reduce(57), /* end, reduce: AndExp */
			reduce(57), /* while, reduce: AndExp */
			reduce(57), /* repeat, reduce: AndExp */
			nil,        /* until */
			nil,        /* then */
			reduce(57), /* elseif, reduce: AndExp */
			reduce(57), /* else, reduce: AndExp */
			reduce(57), /* if, reduce: AndExp */
			nil,        /* , */
			reduce(57), /* for, reduce: AndExp */
			nil,        /* in */
			reduce(57), /* function, reduce: AndExp */
			reduce(57), /* local, reduce: AndExp */
			reduce(57), /* ::, reduce: AndExp */
			nil,        /* . */
			nil,        /* : */
			reduce(57), /* or, reduce: AndExp */
			reduce(57), /* and, reduce: AndExp */
			shift(203), /* < */
			shift(204), /* <= */
			shift(205), /* > */
			shift(206), /* >= */
			shift(207), /* == */
			shift(208), /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(57), /* (, reduce: AndExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(57), /* ident, reduce: AndExp */
		},
	},
	actionRow{ // S2001
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(65),  /* return, reduce: CompExp */
			reduce(65),  /* ;, reduce: CompExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(65),  /* break, reduce: CompExp */
			reduce(65),  /* goto, reduce: CompExp */
			reduce(65),  /* do, reduce: CompExp */
			reduce(65),  /* end, reduce: CompExp */
			reduce(65),  /* while, reduce: CompExp */
			reduce(65),  /* repeat, reduce: CompExp */
			nil,         /* until */
			nil,         /* then */
			reduce(65),  /* elseif, reduce: CompExp */
			reduce(65),  /* else, reduce: CompExp */
			reduce(65),  /* if, reduce: CompExp */
			nil,         /* , */
			reduce(65),  /* for, reduce: CompExp */
			nil,         /* in */
			reduce(65),  /* function, reduce: CompExp */
			reduce(65),  /* local, reduce: CompExp */
			reduce(65),  /* ::, reduce: CompExp */
			nil,         /* . */
			nil,         /* : */
			reduce(65),  /* or, reduce: CompExp */
			reduce(65),  /* and, reduce: CompExp */
			reduce(65),  /* <, reduce: CompExp */
			reduce(65),  /* <=, reduce: CompExp */
			reduce(65),  /* >, reduce: CompExp */
			reduce(65),  /* >=, reduce: CompExp */
			reduce(65),  /* ==, reduce: CompExp */
			reduce(65),  /* ~=, reduce: CompExp */
			shift(2109), /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(65),  /* (, reduce: CompExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(65),  /* ident, reduce: CompExp */
		},
	},
	actionRow{ // S2002
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(67),  /* return, reduce: BitOrExp */
			reduce(67),  /* ;, reduce: BitOrExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(67),  /* break, reduce: BitOrExp */
			reduce(67),  /* goto, reduce: BitOrExp */
			reduce(67),  /* do, reduce: BitOrExp */
			reduce(67),  /* end, reduce: BitOrExp */
			reduce(67),  /* while, reduce: BitOrExp */
			reduce(67),  /* repeat, reduce: BitOrExp */
			nil,         /* until */
			nil,         /* then */
			reduce(67),  /* elseif, reduce: BitOrExp */
			reduce(67),  /* else, reduce: BitOrExp */
			reduce(67),  /* if, reduce: BitOrExp */
			nil,         /* , */
			reduce(67),  /* for, reduce: BitOrExp */
			nil,         /* in */
			reduce(67),  /* function, reduce: BitOrExp */
			reduce(67),  /* local, reduce: BitOrExp */
			reduce(67),  /* ::, reduce: BitOrExp */
			nil,         /* . */
			nil,         /* : */
			reduce(67),  /* or, reduce: BitOrExp */
			reduce(67),  /* and, reduce: BitOrExp */
			reduce(67),  /* <, reduce: BitOrExp */
			reduce(67),  /* <=, reduce: BitOrExp */
			reduce(67),  /* >, reduce: BitOrExp */
			reduce(67),  /* >=, reduce: BitOrExp */
			reduce(67),  /* ==, reduce: BitOrExp */
			reduce(67),  /* ~=, reduce: BitOrExp */
			reduce(67),  /* |, reduce: BitOrExp */
			shift(2110), /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(67),  /* (, reduce: BitOrExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(67),  /* ident, reduce: BitOrExp */
		},
	},
	actionRow{ // S2003
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(69),  /* return, reduce: BitXorExp */
			reduce(69),  /* ;, reduce: BitXorExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(69),  /* break, reduce: BitXorExp */
			reduce(69),  /* goto, reduce: BitXorExp */
			reduce(69),  /* do, reduce: BitXorExp */
			reduce(69),  /* end, reduce: BitXorExp */
			reduce(69),  /* while, reduce: BitXorExp */
			reduce(69),  /* repeat, reduce: BitXorExp */
			nil,         /* until */
			nil,         /* then */
			reduce(69),  /* elseif, reduce: BitXorExp */
			reduce(69),  /* else, reduce: BitXorExp */
			reduce(69),  /* if, reduce: BitXorExp */
			nil,         /* , */
			reduce(69),  /* for, reduce: BitXorExp */
			nil,         /* in */
			reduce(69),  /* function, reduce: BitXorExp */
			reduce(69),  /* local, reduce: BitXorExp */
			reduce(69),  /* ::, reduce: BitXorExp */
			nil,         /* . */
			nil,         /* : */
			reduce(69),  /* or, reduce: BitXorExp */
			reduce(69),  /* and, reduce: BitXorExp */
			reduce(69),  /* <, reduce: BitXorExp */
			reduce(69),  /* <=, reduce: BitXorExp */
			reduce(69),  /* >, reduce: BitXorExp */
			reduce(69),  /* >=, reduce: BitXorExp */
			reduce(69),  /* ==, reduce: BitXorExp */
			reduce(69),  /* ~=, reduce: BitXorExp */
			reduce(69),  /* |, reduce: BitXorExp */
			reduce(69),  /* ~, reduce: BitXorExp */
			shift(2111), /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(69),  /* (, reduce: BitXorExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(69),  /* ident, reduce: BitXorExp */
		},
	},
	actionRow{ // S2004
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(71),  /* return, reduce: BitAndExp */
			reduce(71),  /* ;, reduce: BitAndExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(71),  /* break, reduce: BitAndExp */
			reduce(71),  /* goto, reduce: BitAndExp */
			reduce(71),  /* do, reduce: BitAndExp */
			reduce(71),  /* end, reduce: BitAndExp */
			reduce(71),  /* while, reduce: BitAndExp */
			reduce(71),  /* repeat, reduce: BitAndExp */
			nil,         /* until */
			nil,         /* then */
			reduce(71),  /* elseif, reduce: BitAndExp */
			reduce(71),  /* else, reduce: BitAndExp */
			reduce(71),  /* if, reduce: BitAndExp */
			nil,         /* , */
			reduce(71),  /* for, reduce: BitAndExp */
			nil,         /* in */
			reduce(71),  /* function, reduce: BitAndExp */
			reduce(71),  /* local, reduce: BitAndExp */
			reduce(71),  /* ::, reduce: BitAndExp */
			nil,         /* . */
			nil,         /* : */
			reduce(71),  /* or, reduce: BitAndExp */
			reduce(71),  /* and, reduce: BitAndExp */
			reduce(71),  /* <, reduce: BitAndExp */
			reduce(71),  /* <=, reduce: BitAndExp */
			reduce(71),  /* >, reduce: BitAndExp */
			reduce(71),  /* >=, reduce: BitAndExp */
			reduce(71),  /* ==, reduce: BitAndExp */
			reduce(71),  /* ~=, reduce: BitAndExp */
			reduce(71),  /* |, reduce: BitAndExp */
			reduce(71),  /* ~, reduce: BitAndExp */
			reduce(71),  /* &, reduce: BitAndExp */
			shift(2112), /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(71),  /* (, reduce: BitAndExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(71),  /* ident, reduce: BitAndExp */
		},
	},
	actionRow{ // S2005
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(73), /* return, reduce: ConcatExp */
			reduce(73), /* ;, reduce: ConcatExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(73), /* break, reduce: ConcatExp */
			reduce(73), /* goto, reduce: ConcatExp */
			reduce(73), /* do, reduce: ConcatExp */
			reduce(73), /* end, reduce: ConcatExp */
			reduce(73), /* while, reduce: ConcatExp */
			reduce(73), /* repeat, reduce: ConcatExp */
			nil,        /* until */
			nil,        /* then */
			reduce(73), /* elseif, reduce: ConcatExp */
			reduce(73), /* else, reduce: ConcatExp */
			reduce(73), /* if, reduce: ConcatExp */
			nil,        /* , */
			reduce(73), /* for, reduce: ConcatExp */
			nil,        /* in */
			reduce(73), /* function, reduce: ConcatExp */
			reduce(73), /* local, reduce: ConcatExp */
			reduce(73), /* ::, reduce: ConcatExp */
			nil,        /* . */
			nil,        /* : */
			reduce(73), /* or, reduce: ConcatExp */
			reduce(73), /* and, reduce: ConcatExp */
			reduce(73), /* <, reduce: ConcatExp */
			reduce(73), /* <=, reduce: ConcatExp */
			reduce(73), /* >, reduce: ConcatExp */
			reduce(73), /* >=, reduce: ConcatExp */
			reduce(73), /* ==, reduce: ConcatExp */
			reduce(73), /* ~=, reduce: ConcatExp */
			reduce(73), /* |, reduce: ConcatExp */
			reduce(73), /* ~, reduce: ConcatExp */
			reduce(73), /* &, reduce: ConcatExp */
			reduce(73), /* .., reduce: ConcatExp */
			shift(214), /* << */
			shift(215), /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(73), /* (, reduce: ConcatExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(73), /* ident, reduce: ConcatExp */
		},
	},
	actionRow{ // S2006
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(77), /* return, reduce: ShiftExp */
			reduce(77), /* ;, reduce: ShiftExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(77), /* break, reduce: ShiftExp */
			reduce(77), /* goto, reduce: ShiftExp */
			reduce(77), /* do, reduce: ShiftExp */
			reduce(77), /* end, reduce: ShiftExp */
			reduce(77), /* while, reduce: ShiftExp */
			reduce(77), /* repeat, reduce: ShiftExp */
			nil,        /* until */
			nil,        /* then */
			reduce(77), /* elseif, reduce: ShiftExp */
			reduce(77), /* else, reduce: ShiftExp */
			reduce(77), /* if, reduce: ShiftExp */
			nil,        /* , */
			reduce(77), /* for, reduce: ShiftExp */
			nil,        /* in */
			reduce(77), /* function, reduce: ShiftExp */
			reduce(77), /* local, reduce: ShiftExp */
			reduce(77), /* ::, reduce: ShiftExp */
			nil,        /* . */
			nil,        /* : */
			reduce(77), /* or, reduce: ShiftExp */
			reduce(77), /* and, reduce: ShiftExp */
			reduce(77), /* <, reduce: ShiftExp */
			reduce(77), /* <=, reduce: ShiftExp */
			reduce(77), /* >, reduce: ShiftExp */
			reduce(77), /* >=, reduce: ShiftExp */
			reduce(77), /* ==, reduce: ShiftExp */
			reduce(77), /* ~=, reduce: ShiftExp */
			reduce(77), /* |, reduce: ShiftExp */
			reduce(77), /* ~, reduce: ShiftExp */
			reduce(77), /* &, reduce: ShiftExp */
			reduce(77), /* .., reduce: ShiftExp */
			reduce(77), /* <<, reduce: ShiftExp */
			reduce(77), /* >>, reduce: ShiftExp */
			shift(217), /* + */
			shift(218), /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(77), /* (, reduce: ShiftExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(77), /* ident, reduce: ShiftExp */
		},
	},
	actionRow{ // S2007
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(81), /* return, reduce: Sum */
			reduce(81), /* ;, reduce: Sum */
			nil,        /* empty */
			nil,        /* = */
			reduce(81), /* break, reduce: Sum */
			reduce(81), /* goto, reduce: Sum */
			reduce(81), /* do, reduce: Sum */
			reduce(81), /* end, reduce: Sum */
			reduce(81), /* while, reduce: Sum */
			reduce(81), /* repeat, reduce: Sum */
			nil,        /* until */
			nil,        /* then */
			reduce(81), /* elseif, reduce: Sum */
			reduce(81), /* else, reduce: Sum */
			reduce(81), /* if, reduce: Sum */
			nil,        /* , */
			reduce(81), /* for, reduce: Sum */
			nil,        /* in */
			reduce(81), /* function, reduce: Sum */
			reduce(81), /* local, reduce: Sum */
			reduce(81), /* ::, reduce: Sum */
			nil,        /* . */
			nil,        /* : */
			reduce(81), /* or, reduce: Sum */
			reduce(81), /* and, reduce: Sum */
			reduce(81), /* <, reduce: Sum */
			reduce(81), /* <=, reduce: Sum */
			reduce(81), /* >, reduce: Sum */
			reduce(81), /* >=, reduce: Sum */
			reduce(81), /* ==, reduce: Sum */
			reduce(81), /* ~=, reduce: Sum */
			reduce(81), /* |, reduce: Sum */
			reduce(81), /* ~, reduce: Sum */
			reduce(81), /* &, reduce: Sum */
			reduce(81), /* .., reduce: Sum */
			reduce(81), /* <<, reduce: Sum */
			reduce(81), /* >>, reduce: Sum */
			reduce(81), /* +, reduce: Sum */
			reduce(81), /* -, reduce: Sum */
			shift(220), /* * */
			shift(221), /* / */
			shift(222), /* % */
			shift(223), /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(81), /* (, reduce: Sum */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(81), /* ident, reduce: Sum */
		},
	},
	actionRow{ // S2008
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(87), /* return, reduce: Term */
			reduce(87), /* ;, reduce: Term */
			nil,        /* empty */
			nil,        /* = */
			reduce(87), /* break, reduce: Term */
			reduce(87), /* goto, reduce: Term */
			reduce(87), /* do, reduce: Term */
			reduce(87), /* end, reduce: Term */
			reduce(87), /* while, reduce: Term */
			reduce(87), /* repeat, reduce: Term */
			nil,        /* until */
			nil,        /* then */
			reduce(87), /* elseif, reduce: Term */
			reduce(87), /* else, reduce: Term */
			reduce(87), /* if, reduce: Term */
			nil,        /* , */
			reduce(87), /* for, reduce: Term */
			nil,        /* in */
			reduce(87), /* function, reduce: Term */
			reduce(87), /* local, reduce: Term */
			reduce(87), /* ::, reduce: Term */
			nil,        /* . */
			nil,        /* : */
			reduce(87), /* or, reduce: Term */
			reduce(87), /* and, reduce: Term */
			reduce(87), /* <, reduce: Term */
			reduce(87), /* <=, reduce: Term */
			reduce(87), /* >, reduce: Term */
			reduce(87), /* >=, reduce: Term */
			reduce(87), /* ==, reduce: Term */
			reduce(87), /* ~=, reduce: Term */
			reduce(87), /* |, reduce: Term */
			reduce(87), /* ~, reduce: Term */
			reduce(87), /* &, reduce: Term */
			reduce(87), /* .., reduce: Term */
			reduce(87), /* <<, reduce: Term */
			reduce(87), /* >>, reduce: Term */
			reduce(87), /* +, reduce: Term */
			reduce(87), /* -, reduce: Term */
			reduce(87), /* *, reduce: Term */
			reduce(87), /* /, reduce: Term */
			reduce(87), /* %, reduce: Term */
			reduce(87), /* //, reduce: Term */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(87), /* (, reduce: Term */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(87), /* ident, reduce: Term */
		},
	},
	actionRow{ // S2009
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1997), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(2013), /* ( */
			nil,         /* ) */
			shift(2014), /* nil */
			shift(2015), /* true */
			shift(2016), /* false */
			shift(2017), /* ... */
			shift(2018), /* numdec */
			shift(2019), /* numhex */
			shift(2020), /* string */
			shift(2023), /* { */
			nil,         /* } */
			shift(2024), /* ident */
		},
	},
	actionRow{ // S2010
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(94), /* return, reduce: Factor */
			reduce(94), /* ;, reduce: Factor */
			nil,        /* empty */
			nil,        /* = */
			reduce(94), /* break, reduce: Factor */
			reduce(94), /* goto, reduce: Factor */
			reduce(94), /* do, reduce: Factor */
			reduce(94), /* end, reduce: Factor */
			reduce(94), /* while, reduce: Factor */
			reduce(94), /* repeat, reduce: Factor */
			nil,        /* until */
			nil,        /* then */
			reduce(94), /* elseif, reduce: Factor */
			reduce(94), /* else, reduce: Factor */
			reduce(94), /* if, reduce: Factor */
			nil,        /* , */
			reduce(94), /* for, reduce: Factor */
			nil,        /* in */
			reduce(94), /* function, reduce: Factor */
			reduce(94), /* local, reduce: Factor */
			reduce(94), /* ::, reduce: Factor */
			nil,        /* . */
			nil,        /* : */
			reduce(94), /* or, reduce: Factor */
			reduce(94), /* and, reduce: Factor */
			reduce(94), /* <, reduce: Factor */
			reduce(94), /* <=, reduce: Factor */
			reduce(94), /* >, reduce: Factor */
			reduce(94), /* >=, reduce: Factor */
			reduce(94), /* ==, reduce: Factor */
			reduce(94), /* ~=, reduce: Factor */
			reduce(94), /* |, reduce: Factor */
			reduce(94), /* ~, reduce: Factor */
			reduce(94), /* &, reduce: Factor */
			reduce(94), /* .., reduce: Factor */
			reduce(94), /* <<, reduce: Factor */
			reduce(94), /* >>, reduce: Factor */
			reduce(94), /* +, reduce: Factor */
			reduce(94), /* -, reduce: Factor */
			reduce(94), /* *, reduce: Factor */
			reduce(94), /* /, reduce: Factor */
			reduce(94), /* %, reduce: Factor */
			reduce(94), /* //, reduce: Factor */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(94), /* (, reduce: Factor */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(94), /* ident, reduce: Factor */
		},
	},
	actionRow{ // S2011
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(95),  /* return, reduce: Power */
			reduce(95),  /* ;, reduce: Power */
			nil,         /* empty */
			nil,         /* = */
			reduce(95),  /* break, reduce: Power */
			reduce(95),  /* goto, reduce: Power */
			reduce(95),  /* do, reduce: Power */
			reduce(95),  /* end, reduce: Power */
			reduce(95),  /* while, reduce: Power */
			reduce(95),  /* repeat, reduce: Power */
			nil,         /* until */
			nil,         /* then */
			reduce(95),  /* elseif, reduce: Power */
			reduce(95),  /* else, reduce: Power */
			reduce(95),  /* if, reduce: Power */
			nil,         /* , */
			reduce(95),  /* for, reduce: Power */
			nil,         /* in */
			reduce(95),  /* function, reduce: Power */
			reduce(95),  /* local, reduce: Power */
			reduce(95),  /* ::, reduce: Power */
			nil,         /* . */
			nil,         /* : */
			reduce(95),  /* or, reduce: Power */
			reduce(95),  /* and, reduce: Power */
			reduce(95),  /* <, reduce: Power */
			reduce(95),  /* <=, reduce: Power */
			reduce(95),  /* >, reduce: Power */
			reduce(95),  /* >=, reduce: Power */
			reduce(95),  /* ==, reduce: Power */
			reduce(95),  /* ~=, reduce: Power */
			reduce(95),  /* |, reduce: Power */
			reduce(95),  /* ~, reduce: Power */
			reduce(95),  /* &, reduce: Power */
			reduce(95),  /* .., reduce: Power */
			reduce(95),  /* <<, reduce: Power */
			reduce(95),  /* >>, reduce: Power */
			reduce(95),  /* +, reduce: Power */
			reduce(95),  /* -, reduce: Power */
			reduce(95),  /* *, reduce: Power */
			reduce(95),  /* /, reduce: Power */
			reduce(95),  /* %, reduce: Power */
			reduce(95),  /* //, reduce: Power */
			nil,         /* not */
			nil,         /* # */
			shift(2117), /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(95),  /* (, reduce: Power */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(95),  /* ident, reduce: Power */
		},
	},
	actionRow{ // S2012
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(114), /* return, reduce: Atom */
			reduce(114), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(114), /* break, reduce: Atom */
			reduce(114), /* goto, reduce: Atom */
			reduce(114), /* do, reduce: Atom */
			reduce(114), /* end, reduce: Atom */
			reduce(114), /* while, reduce: Atom */
			reduce(114), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			reduce(114), /* elseif, reduce: Atom */
			reduce(114), /* else, reduce: Atom */
			reduce(114), /* if, reduce: Atom */
			nil,         /* , */
			reduce(114), /* for, reduce: Atom */
			nil,         /* in */
			reduce(114), /* function, reduce: Atom */
			reduce(114), /* local, reduce: Atom */
			reduce(114), /* ::, reduce: Atom */
			shift(2118), /* . */
			shift(2119), /* : */
			reduce(114), /* or, reduce: Atom */
			reduce(114), /* and, reduce: Atom */
			reduce(114), /* <, reduce: Atom */
			reduce(114), /* <=, reduce: Atom */
			reduce(114), /* >, reduce: Atom */
			reduce(114), /* >=, reduce: Atom */
			reduce(114), /* ==, reduce: Atom */
			reduce(114), /* ~=, reduce: Atom */
			reduce(114), /* |, reduce: Atom */
			reduce(114), /* ~, reduce: Atom */
			reduce(114), /* &, reduce: Atom */
			reduce(114), /* .., reduce: Atom */
			reduce(114), /* <<, reduce: Atom */
			reduce(114), /* >>, reduce: Atom */
			reduce(114), /* +, reduce: Atom */
			reduce(114), /* -, reduce: Atom */
			reduce(114), /* *, reduce: Atom */
			reduce(114), /* /, reduce: Atom */
			reduce(114), /* %, reduce: Atom */
			reduce(114), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(114), /* ^, reduce: Atom */
			shift(2120), /* [ */
			nil,         /* ] */
			shift(2121), /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			shift(2123), /* string */
			shift(2125), /* { */
			nil,         /* } */
			reduce(114), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S2013
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(168), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(184), /* ( */
			nil,        /* ) */
			shift(185), /* nil */
			shift(186), /* true */
			shift(187), /* false */
			shift(188), /* ... */
			shift(189), /* numdec */
			shift(190), /* numhex */
			shift(191), /* string */
			shift(194), /* { */
			nil,        /* } */
			shift(195), /* ident */
		},
	},
	actionRow{ // S2014
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(105), /* return, reduce: Atom */
			reduce(105), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(105), /* break, reduce: Atom */
			reduce(105), /* goto, reduce: Atom */
			reduce(105), /* do, reduce: Atom */
			reduce(105), /* end, reduce: Atom */
			reduce(105), /* while, reduce: Atom */
			reduce(105), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			reduce(105), /* elseif, reduce: Atom */
			reduce(105), /* else, reduce: Atom */
			reduce(105), /* if, reduce: Atom */
			nil,         /* , */
			reduce(105), /* for, reduce: Atom */
			nil,         /* in */
			reduce(105), /* function, reduce: Atom */
			reduce(105), /* local, reduce: Atom */
			reduce(105), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(105), /* or, reduce: Atom */
			reduce(105), /* and, reduce: Atom */
			reduce(105), /* <, reduce: Atom */
			reduce(105), /* <=, reduce: Atom */
			reduce(105), /* >, reduce: Atom */
			reduce(105), /* >=, reduce: Atom */
			reduce(105), /* ==, reduce: Atom */
			reduce(105), /* ~=, reduce: Atom */
			reduce(105), /* |, reduce: Atom */
			reduce(105), /* ~, reduce: Atom */
			reduce(105), /* &, reduce: Atom */
			reduce(105), /* .., reduce: Atom */
			reduce(105), /* <<, reduce: Atom */
			reduce(105), /* >>, reduce: Atom */
			reduce(105), /* +, reduce: Atom */
			reduce(105), /* -, reduce: Atom */
			reduce(105), /* *, reduce: Atom */
			reduce(105), /* /, reduce: Atom */
			reduce(105), /* %, reduce: Atom */
			reduce(105), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(105), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(105), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(105), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S2015
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(106), /* return, reduce: Atom */
			reduce(106), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(106), /* break, reduce: Atom */
			reduce(106), /* goto, reduce: Atom */
			reduce(106), /* do, reduce: Atom */
			reduce(106), /* end, reduce: Atom */
			reduce(106), /* while, reduce: Atom */
			reduce(106), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			reduce(106), /* elseif, reduce: Atom */
			reduce(106), /* else, reduce: Atom */
			reduce(106), /* if, reduce: Atom */
			nil,         /* , */
			reduce(106), /* for, reduce: Atom */
			nil,         /* in */
			reduce(106), /* function, reduce: Atom */
			reduce(106), /* local, reduce: Atom */
			reduce(106), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(106), /* or, reduce: Atom */
			reduce(106), /* and, reduce: Atom */
			reduce(106), /* <, reduce: Atom */
			reduce(106), /* <=, reduce: Atom */
			reduce(106), /* >, reduce: Atom */
			reduce(106), /* >=, reduce: Atom */
			reduce(106), /* ==, reduce: Atom */
			reduce(106), /* ~=, reduce: Atom */
			reduce(106), /* |, reduce: Atom */
			reduce(106), /* ~, reduce: Atom */
			reduce(106), /* &, reduce: Atom */
			reduce(106), /* .., reduce: Atom */
			reduce(106), /* <<, reduce: Atom */
			reduce(106), /* >>, reduce: Atom */
			reduce(106), /* +, reduce: Atom */
			reduce(106), /* -, reduce: Atom */
			reduce(106), /* *, reduce: Atom */
			reduce(106), /* /, reduce: Atom */
			reduce(106), /* %, reduce: Atom */
			reduce(106), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(106), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(106), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(106), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S2016
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(107), /* return, reduce: Atom */
			reduce(107), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(107), /* break, reduce: Atom */
			reduce(107), /* goto, reduce: Atom */
			reduce(107), /* do, reduce: Atom */
			reduce(107), /* end, reduce: Atom */
			reduce(107), /* while, reduce: Atom */
			reduce(107), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			reduce(107), /* elseif, reduce: Atom */
			reduce(107), /* else, reduce: Atom */
			reduce(107), /* if, reduce: Atom */
			nil,         /* , */
			reduce(107), /* for, reduce: Atom */
			nil,         /* in */
			reduce(107), /* function, reduce: Atom */
			reduce(107), /* local, reduce: Atom */
			reduce(107), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(107), /* or, reduce: Atom */
			reduce(107), /* and, reduce: Atom */
			reduce(107), /* <, reduce: Atom */
			reduce(107), /* <=, reduce: Atom */
			reduce(107), /* >, reduce: Atom */
			reduce(107), /* >=, reduce: Atom */
			reduce(107), /* ==, reduce: Atom */
			reduce(107), /* ~=, reduce: Atom */
			reduce(107), /* |, reduce: Atom */
			reduce(107), /* ~, reduce: Atom */
			reduce(107), /* &, reduce: Atom */
			reduce(107), /* .., reduce: Atom */
			reduce(107), /* <<, reduce: Atom */
			reduce(107), /* >>, reduce: Atom */
			reduce(107), /* +, reduce: Atom */
			reduce(107), /* -, reduce: Atom */
			reduce(107), /* *, reduce: Atom */
			reduce(107), /* /, reduce: Atom */
			reduce(107), /* %, reduce: Atom */
			reduce(107), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(107), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(107), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(107), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S2017
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(108), /* return, reduce: Atom */
			reduce(108), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(108), /* break, reduce: Atom */
			reduce(108), /* goto, reduce: Atom */
			reduce(108), /* do, reduce: Atom */
			reduce(108), /* end, reduce: Atom */
			reduce(108), /* while, reduce: Atom */
			reduce(108), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			reduce(108), /* elseif, reduce: Atom */
			reduce(108), /* else, reduce: Atom */
			reduce(108), /* if, reduce: Atom */
			nil,         /* , */
			reduce(108), /* for, reduce: Atom */
			nil,         /* in */
			reduce(108), /* function, reduce: Atom */
			reduce(108), /* local, reduce: Atom */
			reduce(108), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(108), /* or, reduce: Atom */
			reduce(108), /* and, reduce: Atom */
			reduce(108), /* <, reduce: Atom */
			reduce(108), /* <=, reduce: Atom */
			reduce(108), /* >, reduce: Atom */
			reduce(108), /* >=, reduce: Atom */
			reduce(108), /* ==, reduce: Atom */
			reduce(108), /* ~=, reduce: Atom */
			reduce(108), /* |, reduce: Atom */
			reduce(108), /* ~, reduce: Atom */
			reduce(108), /* &, reduce: Atom */
			reduce(108), /* .., reduce: Atom */
			reduce(108), /* <<, reduce: Atom */
			reduce(108), /* >>, reduce: Atom */
			reduce(108), /* +, reduce: Atom */
			reduce(108), /* -, reduce: Atom */
			reduce(108), /* *, reduce: Atom */
			reduce(108), /* /, reduce: Atom */
			reduce(108), /* %, reduce: Atom */
			reduce(108), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(108), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(108), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(108), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S2018
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(109), /* return, reduce: Atom */
			reduce(109), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(109), /* break, reduce: Atom */
			reduce(109), /* goto, reduce: Atom */
			reduce(109), /* do, reduce: Atom */
			reduce(109), /* end, reduce: Atom */
			reduce(109), /* while, reduce: Atom */
			reduce(109), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			reduce(109), /* elseif, reduce: Atom */
			reduce(109), /* else, reduce: Atom */
			reduce(109), /* if, reduce: Atom */
			nil,         /* , */
			reduce(109), /* for, reduce: Atom */
			nil,         /* in */
			reduce(109), /* function, reduce: Atom */
			reduce(109), /* local, reduce: Atom */
			reduce(109), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(109), /* or, reduce: Atom */
			reduce(109), /* and, reduce: Atom */
			reduce(109), /* <, reduce: Atom */
			reduce(109), /* <=, reduce: Atom */
			reduce(109), /* >, reduce: Atom */
			reduce(109), /* >=, reduce: Atom */
			reduce(109), /* ==, reduce: Atom */
			reduce(109), /* ~=, reduce: Atom */
			reduce(109), /* |, reduce: Atom */
			reduce(109), /* ~, reduce: Atom */
			reduce(109), /* &, reduce: Atom */
			reduce(109), /* .., reduce: Atom */
			reduce(109), /* <<, reduce: Atom */
			reduce(109), /* >>, reduce: Atom */
			reduce(109), /* +, reduce: Atom */
			reduce(109), /* -, reduce: Atom */
			reduce(109), /* *, reduce: Atom */
			reduce(109), /* /, reduce: Atom */
			reduce(109), /* %, reduce: Atom */
			reduce(109), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(109), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(109), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(109), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S2019
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(110), /* return, reduce: Atom */
			reduce(110), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(110), /* break, reduce: Atom */
			reduce(110), /* goto, reduce: Atom */
			reduce(110), /* do, reduce: Atom */
			reduce(110), /* end, reduce: Atom */
			reduce(110), /* while, reduce: Atom */
			reduce(110), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			reduce(110), /* elseif, reduce: Atom */
			reduce(110), /* else, reduce: Atom */
			reduce(110), /* if, reduce: Atom */
			nil,         /* , */
			reduce(110), /* for, reduce: Atom */
			nil,         /* in */
			reduce(110), /* function, reduce: Atom */
			reduce(110), /* local, reduce: Atom */
			reduce(110), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(110), /* or, reduce: Atom */
			reduce(110), /* and, reduce: Atom */
			reduce(110), /* <, reduce: Atom */
			reduce(110), /* <=, reduce: Atom */
			reduce(110), /* >, reduce: Atom */
			reduce(110), /* >=, reduce: Atom */
			reduce(110), /* ==, reduce: Atom */
			reduce(110), /* ~=, reduce: Atom */
			reduce(110), /* |, reduce: Atom */
			reduce(110), /* ~, reduce: Atom */
			reduce(110), /* &, reduce: Atom */
			reduce(110), /* .., reduce: Atom */
			reduce(110), /* <<, reduce: Atom */
			reduce(110), /* >>, reduce: Atom */
			reduce(110), /* +, reduce: Atom */
			reduce(110), /* -, reduce: Atom */
			reduce(110), /* *, reduce: Atom */
			reduce(110), /* /, reduce: Atom */
			reduce(110), /* %, reduce: Atom */
			reduce(110), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(110), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(110), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(110), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S2020
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(111), /* return, reduce: Atom */
			reduce(111), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(111), /* break, reduce: Atom */
			reduce(111), /* goto, reduce: Atom */
			reduce(111), /* do, reduce: Atom */
			reduce(111), /* end, reduce: Atom */
			reduce(111), /* while, reduce: Atom */
			reduce(111), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			reduce(111), /* elseif, reduce: Atom */
			reduce(111), /* else, reduce: Atom */
			reduce(111), /* if, reduce: Atom */
			nil,         /* , */
			reduce(111), /* for, reduce: Atom */
			nil,         /* in */
			reduce(111), /* function, reduce: Atom */
			reduce(111), /* local, reduce: Atom */
			reduce(111), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(111), /* or, reduce: Atom */
			reduce(111), /* and, reduce: Atom */
			reduce(111), /* <, reduce: Atom */
			reduce(111), /* <=, reduce: Atom */
			reduce(111), /* >, reduce: Atom */
			reduce(111), /* >=, reduce: Atom */
			reduce(111), /* ==, reduce: Atom */
			reduce(111), /* ~=, reduce: Atom */
			reduce(111), /* |, reduce: Atom */
			reduce(111), /* ~, reduce: Atom */
			reduce(111), /* &, reduce: Atom */
			reduce(111), /* .., reduce: Atom */
			reduce(111), /* <<, reduce: Atom */
			reduce(111), /* >>, reduce: Atom */
			reduce(111), /* +, reduce: Atom */
			reduce(111), /* -, reduce: Atom */
			reduce(111), /* *, reduce: Atom */
			reduce(111), /* /, reduce: Atom */
			reduce(111), /* %, reduce: Atom */
			reduce(111), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(111), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(111), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(111), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S2021
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(112), /* return, reduce: Atom */
			reduce(112), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(112), /* break, reduce: Atom */
			reduce(112), /* goto, reduce: Atom */
			reduce(112), /* do, reduce: Atom */
			reduce(112), /* end, reduce: Atom */
			reduce(112), /* while, reduce: Atom */
			reduce(112), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			reduce(112), /* elseif, reduce: Atom */
			reduce(112), /* else, reduce: Atom */
			reduce(112), /* if, reduce: Atom */
			nil,         /* , */
			reduce(112), /* for, reduce: Atom */
			nil,         /* in */
			reduce(112), /* function, reduce: Atom */
			reduce(112), /* local, reduce: Atom */
			reduce(112), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(112), /* or, reduce: Atom */
			reduce(112), /* and, reduce: Atom */
			reduce(112), /* <, reduce: Atom */
			reduce(112), /* <=, reduce: Atom */
			reduce(112), /* >, reduce: Atom */
			reduce(112), /* >=, reduce: Atom */
			reduce(112), /* ==, reduce: Atom */
			reduce(112), /* ~=, reduce: Atom */
			reduce(112), /* |, reduce: Atom */
			reduce(112), /* ~, reduce: Atom */
			reduce(112), /* &, reduce: Atom */
			reduce(112), /* .., reduce: Atom */
			reduce(112), /* <<, reduce: Atom */
			reduce(112), /* >>, reduce: Atom */
			reduce(112), /* +, reduce: Atom */
			reduce(112), /* -, reduce: Atom */
			reduce(112), /* *, reduce: Atom */
			reduce(112), /* /, reduce: Atom */
			reduce(112), /* %, reduce: Atom */
			reduce(112), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(112), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(112), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(112), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S2022
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(113), /* return, reduce: Atom */
			reduce(113), /* ;, reduce: Atom */
			nil,         /* empty */
			nil,         /* = */
			reduce(113), /* break, reduce: Atom */
			reduce(113), /* goto, reduce: Atom */
			reduce(113), /* do, reduce: Atom */
			reduce(113), /* end, reduce: Atom */
			reduce(113), /* while, reduce: Atom */
			reduce(113), /* repeat, reduce: Atom */
			nil,         /* until */
			nil,         /* then */
			reduce(113), /* elseif, reduce: Atom */
			reduce(113), /* else, reduce: Atom */
			reduce(113), /* if, reduce: Atom */
			nil,         /* , */
			reduce(113), /* for, reduce: Atom */
			nil,         /* in */
			reduce(113), /* function, reduce: Atom */
			reduce(113), /* local, reduce: Atom */
			reduce(113), /* ::, reduce: Atom */
			nil,         /* . */
			nil,         /* : */
			reduce(113), /* or, reduce: Atom */
			reduce(113), /* and, reduce: Atom */
			reduce(113), /* <, reduce: Atom */
			reduce(113), /* <=, reduce: Atom */
			reduce(113), /* >, reduce: Atom */
			reduce(113), /* >=, reduce: Atom */
			reduce(113), /* ==, reduce: Atom */
			reduce(113), /* ~=, reduce: Atom */
			reduce(113), /* |, reduce: Atom */
			reduce(113), /* ~, reduce: Atom */
			reduce(113), /* &, reduce: Atom */
			reduce(113), /* .., reduce: Atom */
			reduce(113), /* <<, reduce: Atom */
			reduce(113), /* >>, reduce: Atom */
			reduce(113), /* +, reduce: Atom */
			reduce(113), /* -, reduce: Atom */
			reduce(113), /* *, reduce: Atom */
			reduce(113), /* /, reduce: Atom */
			reduce(113), /* %, reduce: Atom */
			reduce(113), /* //, reduce: Atom */
			nil,         /* not */
			nil,         /* # */
			reduce(113), /* ^, reduce: Atom */
			nil,         /* [ */
			nil,         /* ] */
			reduce(113), /* (, reduce: Atom */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(113), /* ident, reduce: Atom */
		},
	},
	actionRow{ // S2023
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			shift(254), /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(268), /* ident */
		},
	},
	actionRow{ // S2024
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(134), /* return, reduce: Name */
			reduce(134), /* ;, reduce: Name */
			nil,         /* empty */
			nil,         /* = */
			reduce(134), /* break, reduce: Name */
			reduce(134), /* goto, reduce: Name */
			reduce(134), /* do, reduce: Name */
			reduce(134), /* end, reduce: Name */
			reduce(134), /* while, reduce: Name */
			reduce(134), /* repeat, reduce: Name */
			nil,         /* until */
			nil,         /* then */
			reduce(134), /* elseif, reduce: Name */
			reduce(134), /* else, reduce: Name */
			reduce(134), /* if, reduce: Name */
			nil,         /* , */
			reduce(134), /* for, reduce: Name */
			nil,         /* in */
			reduce(134), /* function, reduce: Name */
			reduce(134), /* local, reduce: Name */
			reduce(134), /* ::, reduce: Name */
			reduce(134), /* ., reduce: Name */
			reduce(134), /* :, reduce: Name */
			reduce(134), /* or, reduce: Name */
			reduce(134), /* and, reduce: Name */
			reduce(134), /* <, reduce: Name */
			reduce(134), /* <=, reduce: Name */
			reduce(134), /* >, reduce: Name */
			reduce(134), /* >=, reduce: Name */
			reduce(134), /* ==, reduce: Name */
			reduce(134), /* ~=, reduce: Name */
			reduce(134), /* |, reduce: Name */
			reduce(134), /* ~, reduce: Name */
			reduce(134), /* &, reduce: Name */
			reduce(134), /* .., reduce: Name */
			reduce(134), /* <<, reduce: Name */
			reduce(134), /* >>, reduce: Name */
			reduce(134), /* +, reduce: Name */
			reduce(134), /* -, reduce: Name */
			reduce(134), /* *, reduce: Name */
			reduce(134), /* /, reduce: Name */
			reduce(134), /* %, reduce: Name */
			reduce(134), /* //, reduce: Name */
			nil,         /* not */
			nil,         /* # */
			reduce(134), /* ^, reduce: Name */
			reduce(134), /* [, reduce: Name */
			nil,         /* ] */
			reduce(134), /* (, reduce: Name */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(134), /* string, reduce: Name */
			reduce(134), /* {, reduce: Name */
			nil,         /* } */
			reduce(134), /* ident, reduce: Name */
		},
	},
	actionRow{ // S2025
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(2128), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			shift(2129), /* elseif */
			shift(2131), /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S2026
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			shift(2132), /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S2027
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			shift(2133), /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(1221), /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S2028
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(2134), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S2029
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(43),  /* return, reduce: LocalStat */
			reduce(43),  /* ;, reduce: LocalStat */
			nil,         /* empty */
			nil,         /* = */
			reduce(43),  /* break, reduce: LocalStat */
			reduce(43),  /* goto, reduce: LocalStat */
			reduce(43),  /* do, reduce: LocalStat */
			reduce(43),  /* end, reduce: LocalStat */
			reduce(43),  /* while, reduce: LocalStat */
			reduce(43),  /* repeat, reduce: LocalStat */
			nil,         /* until */
			nil,         /* then */
			reduce(43),  /* elseif, reduce: LocalStat */
			reduce(43),  /* else, reduce: LocalStat */
			reduce(43),  /* if, reduce: LocalStat */
			shift(1968), /* , */
			reduce(43),  /* for, reduce: LocalStat */
			nil,         /* in */
			reduce(43),  /* function, reduce: LocalStat */
			reduce(43),  /* local, reduce: LocalStat */
			reduce(43),  /* ::, reduce: LocalStat */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(43),  /* (, reduce: LocalStat */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(43),  /* ident, reduce: LocalStat */
		},
	},
	actionRow{ // S2030
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(52), /* return, reduce: NameList */
			reduce(52), /* ;, reduce: NameList */
			nil,        /* empty */
			reduce(52), /* =, reduce: NameList */
			reduce(52), /* break, reduce: NameList */
			reduce(52), /* goto, reduce: NameList */
			reduce(52), /* do, reduce: NameList */
			reduce(52), /* end, reduce: NameList */
			reduce(52), /* while, reduce: NameList */
			reduce(52), /* repeat, reduce: NameList */
			nil,        /* until */
			nil,        /* then */
			reduce(52), /* elseif, reduce: NameList */
			reduce(52), /* else, reduce: NameList */
			reduce(52), /* if, reduce: NameList */
			reduce(52), /* ,, reduce: NameList */
			reduce(52), /* for, reduce: NameList */
			nil,        /* in */
			reduce(52), /* function, reduce: NameList */
			reduce(52), /* local, reduce: NameList */
			reduce(52), /* ::, reduce: NameList */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(52), /* (, reduce: NameList */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(52), /* ident, reduce: NameList */
		},
	},
	actionRow{ // S2031
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(41), /* return, reduce: LocalFunctionStat */
			reduce(41), /* ;, reduce: LocalFunctionStat */
			nil,        /* empty */
			nil,        /* = */
			reduce(41), /* break, reduce: LocalFunctionStat */
			reduce(41), /* goto, reduce: LocalFunctionStat */
			reduce(41), /* do, reduce: LocalFunctionStat */
			reduce(41), /* end, reduce: LocalFunctionStat */
			reduce(41), /* while, reduce: LocalFunctionStat */
			reduce(41), /* repeat, reduce: LocalFunctionStat */
			nil,        /* until */
			nil,        /* then */
			reduce(41), /* elseif, reduce: LocalFunctionStat */
			reduce(41), /* else, reduce: LocalFunctionStat */
			reduce(41), /* if, reduce: LocalFunctionStat */
			nil,        /* , */
			reduce(41), /* for, reduce: LocalFunctionStat */
			nil,        /* in */
			reduce(41), /* function, reduce: LocalFunctionStat */
			reduce(41), /* local, reduce: LocalFunctionStat */
			reduce(41), /* ::, reduce: LocalFunctionStat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(41), /* (, reduce: LocalFunctionStat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(41), /* ident, reduce: LocalFunctionStat */
		},
	},
	actionRow{ // S2032
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			reduce(37), /* do, reduce: ForList */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			shift(334), /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S2033
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(2135), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S2034
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(126), /* ,, reduce: TableConstructor */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(126), /* ., reduce: TableConstructor */
			reduce(126), /* :, reduce: TableConstructor */
			reduce(126), /* or, reduce: TableConstructor */
			reduce(126), /* and, reduce: TableConstructor */
			reduce(126), /* <, reduce: TableConstructor */
			reduce(126), /* <=, reduce: TableConstructor */
			reduce(126), /* >, reduce: TableConstructor */
			reduce(126), /* >=, reduce: TableConstructor */
			reduce(126), /* ==, reduce: TableConstructor */
			reduce(126), /* ~=, reduce: TableConstructor */
			reduce(126), /* |, reduce: TableConstructor */
			reduce(126), /* ~, reduce: TableConstructor */
			reduce(126), /* &, reduce: TableConstructor */
			reduce(126), /* .., reduce: TableConstructor */
			reduce(126), /* <<, reduce: TableConstructor */
			reduce(126), /* >>, reduce: TableConstructor */
			reduce(126), /* +, reduce: TableConstructor */
			reduce(126), /* -, reduce: TableConstructor */
			reduce(126), /* *, reduce: TableConstructor */
			reduce(126), /* /, reduce: TableConstructor */
			reduce(126), /* %, reduce: TableConstructor */
			reduce(126), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(126), /* ^, reduce: TableConstructor */
			reduce(126), /* [, reduce: TableConstructor */
			nil,         /* ] */
			reduce(126), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(126), /* string, reduce: TableConstructor */
			reduce(126), /* {, reduce: TableConstructor */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S2035
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(2136), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S2036
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(126), /* do, reduce: TableConstructor */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(126), /* ,, reduce: TableConstructor */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(126), /* ., reduce: TableConstructor */
			reduce(126), /* :, reduce: TableConstructor */
			reduce(126), /* or, reduce: TableConstructor */
			reduce(126), /* and, reduce: TableConstructor */
			reduce(126), /* <, reduce: TableConstructor */
			reduce(126), /* <=, reduce: TableConstructor */
			reduce(126), /* >, reduce: TableConstructor */
			reduce(126), /* >=, reduce: TableConstructor */
			reduce(126), /* ==, reduce: TableConstructor */
			reduce(126), /* ~=, reduce: TableConstructor */
			reduce(126), /* |, reduce: TableConstructor */
			reduce(126), /* ~, reduce: TableConstructor */
			reduce(126), /* &, reduce: TableConstructor */
			reduce(126), /* .., reduce: TableConstructor */
			reduce(126), /* <<, reduce: TableConstructor */
			reduce(126), /* >>, reduce: TableConstructor */
			reduce(126), /* +, reduce: TableConstructor */
			reduce(126), /* -, reduce: TableConstructor */
			reduce(126), /* *, reduce: TableConstructor */
			reduce(126), /* /, reduce: TableConstructor */
			reduce(126), /* %, reduce: TableConstructor */
			reduce(126), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(126), /* ^, reduce: TableConstructor */
			reduce(126), /* [, reduce: TableConstructor */
			nil,         /* ] */
			reduce(126), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(126), /* string, reduce: TableConstructor */
			reduce(126), /* {, reduce: TableConstructor */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S2037
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(124), /* or, reduce: FuncBody */
			reduce(124), /* and, reduce: FuncBody */
			reduce(124), /* <, reduce: FuncBody */
			reduce(124), /* <=, reduce: FuncBody */
			reduce(124), /* >, reduce: FuncBody */
			reduce(124), /* >=, reduce: FuncBody */
			reduce(124), /* ==, reduce: FuncBody */
			reduce(124), /* ~=, reduce: FuncBody */
			reduce(124), /* |, reduce: FuncBody */
			reduce(124), /* ~, reduce: FuncBody */
			reduce(124), /* &, reduce: FuncBody */
			reduce(124), /* .., reduce: FuncBody */
			reduce(124), /* <<, reduce: FuncBody */
			reduce(124), /* >>, reduce: FuncBody */
			reduce(124), /* +, reduce: FuncBody */
			reduce(124), /* -, reduce: FuncBody */
			reduce(124), /* *, reduce: FuncBody */
			reduce(124), /* /, reduce: FuncBody */
			reduce(124), /* %, reduce: FuncBody */
			reduce(124), /* //, reduce: FuncBody */
			nil,         /* not */
			nil,         /* # */
			reduce(124), /* ^, reduce: FuncBody */
			nil,         /* [ */
			reduce(124), /* ], reduce: FuncBody */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S2038
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(124), /* ,, reduce: FuncBody */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(124), /* or, reduce: FuncBody */
			reduce(124), /* and, reduce: FuncBody */
			reduce(124), /* <, reduce: FuncBody */
			reduce(124), /* <=, reduce: FuncBody */
			reduce(124), /* >, reduce: FuncBody */
			reduce(124), /* >=, reduce: FuncBody */
			reduce(124), /* ==, reduce: FuncBody */
			reduce(124), /* ~=, reduce: FuncBody */
			reduce(124), /* |, reduce: FuncBody */
			reduce(124), /* ~, reduce: FuncBody */
			reduce(124), /* &, reduce: FuncBody */
			reduce(124), /* .., reduce: FuncBody */
			reduce(124), /* <<, reduce: FuncBody */
			reduce(124), /* >>, reduce: FuncBody */
			reduce(124), /* +, reduce: FuncBody */
			reduce(124), /* -, reduce: FuncBody */
			reduce(124), /* *, reduce: FuncBody */
			reduce(124), /* /, reduce: FuncBody */
			reduce(124), /* %, reduce: FuncBody */
			reduce(124), /* //, reduce: FuncBody */
			nil,         /* not */
			nil,         /* # */
			reduce(124), /* ^, reduce: FuncBody */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(124), /* ), reduce: FuncBody */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S2039
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(124), /* ;, reduce: FuncBody */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(124), /* end, reduce: FuncBody */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(124), /* ,, reduce: FuncBody */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(124), /* or, reduce: FuncBody */
			reduce(124), /* and, reduce: FuncBody */
			reduce(124), /* <, reduce: FuncBody */
			reduce(124), /* <=, reduce: FuncBody */
			reduce(124), /* >, reduce: FuncBody */
			reduce(124), /* >=, reduce: FuncBody */
			reduce(124), /* ==, reduce: FuncBody */
			reduce(124), /* ~=, reduce: FuncBody */
			reduce(124), /* |, reduce: FuncBody */
			reduce(124), /* ~, reduce: FuncBody */
			reduce(124), /* &, reduce: FuncBody */
			reduce(124), /* .., reduce: FuncBody */
			reduce(124), /* <<, reduce: FuncBody */
			reduce(124), /* >>, reduce: FuncBody */
			reduce(124), /* +, reduce: FuncBody */
			reduce(124), /* -, reduce: FuncBody */
			reduce(124), /* *, reduce: FuncBody */
			reduce(124), /* /, reduce: FuncBody */
			reduce(124), /* %, reduce: FuncBody */
			reduce(124), /* //, reduce: FuncBody */
			nil,         /* not */
			nil,         /* # */
			reduce(124), /* ^, reduce: FuncBody */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S2040
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(2137), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S2041
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(126), /* return, reduce: TableConstructor */
			reduce(126), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			reduce(126), /* break, reduce: TableConstructor */
			reduce(126), /* goto, reduce: TableConstructor */
			reduce(126), /* do, reduce: TableConstructor */
			reduce(126), /* end, reduce: TableConstructor */
			reduce(126), /* while, reduce: TableConstructor */
			reduce(126), /* repeat, reduce: TableConstructor */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(126), /* if, reduce: TableConstructor */
			reduce(126), /* ,, reduce: TableConstructor */
			reduce(126), /* for, reduce: TableConstructor */
			nil,         /* in */
			reduce(126), /* function, reduce: TableConstructor */
			reduce(126), /* local, reduce: TableConstructor */
			reduce(126), /* ::, reduce: TableConstructor */
			reduce(126), /* ., reduce: TableConstructor */
			reduce(126), /* :, reduce: TableConstructor */
			reduce(126), /* or, reduce: TableConstructor */
			reduce(126), /* and, reduce: TableConstructor */
			reduce(126), /* <, reduce: TableConstructor */
			reduce(126), /* <=, reduce: TableConstructor */
			reduce(126), /* >, reduce: TableConstructor */
			reduce(126), /* >=, reduce: TableConstructor */
			reduce(126), /* ==, reduce: TableConstructor */
			reduce(126), /* ~=, reduce: TableConstructor */
			reduce(126), /* |, reduce: TableConstructor */
			reduce(126), /* ~, reduce: TableConstructor */
			reduce(126), /* &, reduce: TableConstructor */
			reduce(126), /* .., reduce: TableConstructor */
			reduce(126), /* <<, reduce: TableConstructor */
			reduce(126), /* >>, reduce: TableConstructor */
			reduce(126), /* +, reduce: TableConstructor */
			reduce(126), /* -, reduce: TableConstructor */
			reduce(126), /* *, reduce: TableConstructor */
			reduce(126), /* /, reduce: TableConstructor */
			reduce(126), /* %, reduce: TableConstructor */
			reduce(126), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(126), /* ^, reduce: TableConstructor */
			reduce(126), /* [, reduce: TableConstructor */
			nil,         /* ] */
			reduce(126), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(126), /* string, reduce: TableConstructor */
			reduce(126), /* {, reduce: TableConstructor */
			nil,         /* } */
			reduce(126), /* ident, reduce: TableConstructor */
		},
	},
	actionRow{ // S2042
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S2043
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(104), /* return, reduce: FunctionCall */
			reduce(104), /* ;, reduce: FunctionCall */
			nil,         /* empty */
			nil,         /* = */
			reduce(104), /* break, reduce: FunctionCall */
			reduce(104), /* goto, reduce: FunctionCall */
			reduce(104), /* do, reduce: FunctionCall */
			reduce(104), /* end, reduce: FunctionCall */
			reduce(104), /* while, reduce: FunctionCall */
			reduce(104), /* repeat, reduce: FunctionCall */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(104), /* if, reduce: FunctionCall */
			nil,         /* , */
			reduce(104), /* for, reduce: FunctionCall */
			nil,         /* in */
			reduce(104), /* function, reduce: FunctionCall */
			reduce(104), /* local, reduce: FunctionCall */
			reduce(104), /* ::, reduce: FunctionCall */
			reduce(104), /* ., reduce: FunctionCall */
			reduce(104), /* :, reduce: FunctionCall */
			reduce(104), /* or, reduce: FunctionCall */
			reduce(104), /* and, reduce: FunctionCall */
			reduce(104), /* <, reduce: FunctionCall */
			reduce(104), /* <=, reduce: FunctionCall */
			reduce(104), /* >, reduce: FunctionCall */
			reduce(104), /* >=, reduce: FunctionCall */
			reduce(104), /* ==, reduce: FunctionCall */
			reduce(104), /* ~=, reduce: FunctionCall */
			reduce(104), /* |, reduce: FunctionCall */
			reduce(104), /* ~, reduce: FunctionCall */
			reduce(104), /* &, reduce: FunctionCall */
			reduce(104), /* .., reduce: FunctionCall */
			reduce(104), /* <<, reduce: FunctionCall */
			reduce(104), /* >>, reduce: FunctionCall */
			reduce(104), /* +, reduce: FunctionCall */
			reduce(104), /* -, reduce: FunctionCall */
			reduce(104), /* *, reduce: FunctionCall */
			reduce(104), /* /, reduce: FunctionCall */
			reduce(104), /* %, reduce: FunctionCall */
			reduce(104), /* //, reduce: FunctionCall */
			nil,         /* not */
			nil,         /* # */
			reduce(104), /* ^, reduce: FunctionCall */
			reduce(104), /* [, reduce: FunctionCall */
			nil,         /* ] */
			reduce(104), /* (, reduce: FunctionCall */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(104), /* string, reduce: FunctionCall */
			reduce(104), /* {, reduce: FunctionCall */
			nil,         /* } */
			reduce(104), /* ident, reduce: FunctionCall */
		},
	},
	actionRow{ // S2044
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(98), /* return, reduce: Var */
			reduce(98), /* ;, reduce: Var */
			nil,        /* empty */
			nil,        /* = */
			reduce(98), /* break, reduce: Var */
			reduce(98), /* goto, reduce: Var */
			reduce(98), /* do, reduce: Var */
			reduce(98), /* end, reduce: Var */
			reduce(98), /* while, reduce: Var */
			reduce(98), /* repeat, reduce: Var */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(98), /* if, reduce: Var */
			nil,        /* , */
			reduce(98), /* for, reduce: Var */
			nil,        /* in */
			reduce(98), /* function, reduce: Var */
			reduce(98), /* local, reduce: Var */
			reduce(98), /* ::, reduce: Var */
			reduce(98), /* ., reduce: Var */
			reduce(98), /* :, reduce: Var */
			reduce(98), /* or, reduce: Var */
			reduce(98), /* and, reduce: Var */
			reduce(98), /* <, reduce: Var */
			reduce(98), /* <=, reduce: Var */
			reduce(98), /* >, reduce: Var */
			reduce(98), /* >=, reduce: Var */
			reduce(98), /* ==, reduce: Var */
			reduce(98), /* ~=, reduce: Var */
			reduce(98), /* |, reduce: Var */
			reduce(98), /* ~, reduce: Var */
			reduce(98), /* &, reduce: Var */
			reduce(98), /* .., reduce: Var */
			reduce(98), /* <<, reduce: Var */
			reduce(98), /* >>, reduce: Var */
			reduce(98), /* +, reduce: Var */
			reduce(98), /* -, reduce: Var */
			reduce(98), /* *, reduce: Var */
			reduce(98), /* /, reduce: Var */
			reduce(98), /* %, reduce: Var */
			reduce(98), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(98), /* ^, reduce: Var */
			reduce(98), /* [, reduce: Var */
			nil,        /* ] */
			reduce(98), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(98), /* string, reduce: Var */
			reduce(98), /* {, reduce: Var */
			nil,        /* } */
			reduce(98), /* ident, reduce: Var */
		},
	},
	actionRow{ // S2045
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(116), /* return, reduce: Args */
			reduce(116), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			reduce(116), /* break, reduce: Args */
			reduce(116), /* goto, reduce: Args */
			reduce(116), /* do, reduce: Args */
			reduce(116), /* end, reduce: Args */
			reduce(116), /* while, reduce: Args */
			reduce(116), /* repeat, reduce: Args */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(116), /* if, reduce: Args */
			nil,         /* , */
			reduce(116), /* for, reduce: Args */
			nil,         /* in */
			reduce(116), /* function, reduce: Args */
			reduce(116), /* local, reduce: Args */
			reduce(116), /* ::, reduce: Args */
			reduce(116), /* ., reduce: Args */
			reduce(116), /* :, reduce: Args */
			reduce(116), /* or, reduce: Args */
			reduce(116), /* and, reduce: Args */
			reduce(116), /* <, reduce: Args */
			reduce(116), /* <=, reduce: Args */
			reduce(116), /* >, reduce: Args */
			reduce(116), /* >=, reduce: Args */
			reduce(116), /* ==, reduce: Args */
			reduce(116), /* ~=, reduce: Args */
			reduce(116), /* |, reduce: Args */
			reduce(116), /* ~, reduce: Args */
			reduce(116), /* &, reduce: Args */
			reduce(116), /* .., reduce: Args */
			reduce(116), /* <<, reduce: Args */
			reduce(116), /* >>, reduce: Args */
			reduce(116), /* +, reduce: Args */
			reduce(116), /* -, reduce: Args */
			reduce(116), /* *, reduce: Args */
			reduce(116), /* /, reduce: Args */
			reduce(116), /* %, reduce: Args */
			reduce(116), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(116), /* ^, reduce: Args */
			reduce(116), /* [, reduce: Args */
			nil,         /* ] */
			reduce(116), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(116), /* string, reduce: Args */
			reduce(116), /* {, reduce: Args */
			nil,         /* } */
			reduce(116), /* ident, reduce: Args */
		},
	},
	actionRow{ // S2046
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(125), /* return, reduce: TableConstructor */
			reduce(125), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			reduce(125), /* break, reduce: TableConstructor */
			reduce(125), /* goto, reduce: TableConstructor */
			reduce(125), /* do, reduce: TableConstructor */
			reduce(125), /* end, reduce: TableConstructor */
			reduce(125), /* while, reduce: TableConstructor */
			reduce(125), /* repeat, reduce: TableConstructor */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(125), /* if, reduce: TableConstructor */
			nil,         /* , */
			reduce(125), /* for, reduce: TableConstructor */
			nil,         /* in */
			reduce(125), /* function, reduce: TableConstructor */
			reduce(125), /* local, reduce: TableConstructor */
			reduce(125), /* ::, reduce: TableConstructor */
			reduce(125), /* ., reduce: TableConstructor */
			reduce(125), /* :, reduce: TableConstructor */
			reduce(125), /* or, reduce: TableConstructor */
			reduce(125), /* and, reduce: TableConstructor */
			reduce(125), /* <, reduce: TableConstructor */
			reduce(125), /* <=, reduce: TableConstructor */
			reduce(125), /* >, reduce: TableConstructor */
			reduce(125), /* >=, reduce: TableConstructor */
			reduce(125), /* ==, reduce: TableConstructor */
			reduce(125), /* ~=, reduce: TableConstructor */
			reduce(125), /* |, reduce: TableConstructor */
			reduce(125), /* ~, reduce: TableConstructor */
			reduce(125), /* &, reduce: TableConstructor */
			reduce(125), /* .., reduce: TableConstructor */
			reduce(125), /* <<, reduce: TableConstructor */
			reduce(125), /* >>, reduce: TableConstructor */
			reduce(125), /* +, reduce: TableConstructor */
			reduce(125), /* -, reduce: TableConstructor */
			reduce(125), /* *, reduce: TableConstructor */
			reduce(125), /* /, reduce: TableConstructor */
			reduce(125), /* %, reduce: TableConstructor */
			reduce(125), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(125), /* ^, reduce: TableConstructor */
			reduce(125), /* [, reduce: TableConstructor */
			nil,         /* ] */
			reduce(125), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(125), /* string, reduce: TableConstructor */
			reduce(125), /* {, reduce: TableConstructor */
			nil,         /* } */
			reduce(125), /* ident, reduce: TableConstructor */
		},
	},
	actionRow{ // S2047
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(238),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			shift(254),  /* [ */
			nil,         /* ] */
			shift(255),  /* ( */
			nil,         /* ) */
			shift(256),  /* nil */
			shift(257),  /* true */
			shift(258),  /* false */
			shift(259),  /* ... */
			shift(260),  /* numdec */
			shift(261),  /* numhex */
			shift(262),  /* string */
			shift(265),  /* { */
			shift(2139), /* } */
			shift(268),  /* ident */
		},
	},
	actionRow{ // S2048
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(126), /* return, reduce: TableConstructor */
			reduce(126), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			reduce(126), /* break, reduce: TableConstructor */
			reduce(126), /* goto, reduce: TableConstructor */
			reduce(126), /* do, reduce: TableConstructor */
			reduce(126), /* end, reduce: TableConstructor */
			reduce(126), /* while, reduce: TableConstructor */
			reduce(126), /* repeat, reduce: TableConstructor */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(126), /* if, reduce: TableConstructor */
			nil,         /* , */
			reduce(126), /* for, reduce: TableConstructor */
			nil,         /* in */
			reduce(126), /* function, reduce: TableConstructor */
			reduce(126), /* local, reduce: TableConstructor */
			reduce(126), /* ::, reduce: TableConstructor */
			nil,         /* . */
			nil,         /* : */
			reduce(126), /* or, reduce: TableConstructor */
			reduce(126), /* and, reduce: TableConstructor */
			reduce(126), /* <, reduce: TableConstructor */
			reduce(126), /* <=, reduce: TableConstructor */
			reduce(126), /* >, reduce: TableConstructor */
			reduce(126), /* >=, reduce: TableConstructor */
			reduce(126), /* ==, reduce: TableConstructor */
			reduce(126), /* ~=, reduce: TableConstructor */
			reduce(126), /* |, reduce: TableConstructor */
			reduce(126), /* ~, reduce: TableConstructor */
			reduce(126), /* &, reduce: TableConstructor */
			reduce(126), /* .., reduce: TableConstructor */
			reduce(126), /* <<, reduce: TableConstructor */
			reduce(126), /* >>, reduce: TableConstructor */
			reduce(126), /* +, reduce: TableConstructor */
			reduce(126), /* -, reduce: TableConstructor */
			reduce(126), /* *, reduce: TableConstructor */
			reduce(126), /* /, reduce: TableConstructor */
			reduce(126), /* %, reduce: TableConstructor */
			reduce(126), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(126), /* ^, reduce: TableConstructor */
			nil,         /* [ */
			nil,         /* ] */
			reduce(126), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(126), /* ident, reduce: TableConstructor */
		},
	},
	actionRow{ // S2049
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(32), /* return, reduce: Else */
			reduce(32), /* ;, reduce: Else */
			nil,        /* empty */
			nil,        /* = */
			reduce(32), /* break, reduce: Else */
			reduce(32), /* goto, reduce: Else */
			reduce(32), /* do, reduce: Else */
			reduce(32), /* end, reduce: Else */
			reduce(32), /* while, reduce: Else */
			reduce(32), /* repeat, reduce: Else */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(32), /* if, reduce: Else */
			nil,        /* , */
			reduce(32), /* for, reduce: Else */
			nil,        /* in */
			reduce(32), /* function, reduce: Else */
			reduce(32), /* local, reduce: Else */
			reduce(32), /* ::, reduce: Else */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(32), /* (, reduce: Else */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(32), /* ident, reduce: Else */
		},
	},
	actionRow{ // S2050
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S2051
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(33), /* return, reduce: Else */
			reduce(33), /* ;, reduce: Else */
			nil,        /* empty */
			nil,        /* = */
			reduce(33), /* break, reduce: Else */
			reduce(33), /* goto, reduce: Else */
			reduce(33), /* do, reduce: Else */
			reduce(33), /* end, reduce: Else */
			reduce(33), /* while, reduce: Else */
			reduce(33), /* repeat, reduce: Else */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(33), /* if, reduce: Else */
			nil,        /* , */
			reduce(33), /* for, reduce: Else */
			nil,        /* in */
			reduce(33), /* function, reduce: Else */
			reduce(33), /* local, reduce: Else */
			reduce(33), /* ::, reduce: Else */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(33), /* (, reduce: Else */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(33), /* ident, reduce: Else */
		},
	},
	actionRow{ // S2052
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(38), /* return, reduce: ForStat */
			reduce(38), /* ;, reduce: ForStat */
			nil,        /* empty */
			nil,        /* = */
			reduce(38), /* break, reduce: ForStat */
			reduce(38), /* goto, reduce: ForStat */
			reduce(38), /* do, reduce: ForStat */
			reduce(38), /* end, reduce: ForStat */
			reduce(38), /* while, reduce: ForStat */
			reduce(38), /* repeat, reduce: ForStat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(38), /* if, reduce: ForStat */
			nil,        /* , */
			reduce(38), /* for, reduce: ForStat */
			nil,        /* in */
			reduce(38), /* function, reduce: ForStat */
			reduce(38), /* local, reduce: ForStat */
			reduce(38), /* ::, reduce: ForStat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(38), /* (, reduce: ForStat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(38), /* ident, reduce: ForStat */
		},
	},
	actionRow{ // S2053
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(39), /* return, reduce: ForInStat */
			reduce(39), /* ;, reduce: ForInStat */
			nil,        /* empty */
			nil,        /* = */
			reduce(39), /* break, reduce: ForInStat */
			reduce(39), /* goto, reduce: ForInStat */
			reduce(39), /* do, reduce: ForInStat */
			reduce(39), /* end, reduce: ForInStat */
			reduce(39), /* while, reduce: ForInStat */
			reduce(39), /* repeat, reduce: ForInStat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(39), /* if, reduce: ForInStat */
			nil,        /* , */
			reduce(39), /* for, reduce: ForInStat */
			nil,        /* in */
			reduce(39), /* function, reduce: ForInStat */
			reduce(39), /* local, reduce: ForInStat */
			reduce(39), /* ::, reduce: ForInStat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(39), /* (, reduce: ForInStat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(39), /* ident, reduce: ForInStat */
		},
	},
	actionRow{ // S2054
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(124), /* return, reduce: FuncBody */
			reduce(124), /* ;, reduce: FuncBody */
			nil,         /* empty */
			nil,         /* = */
			reduce(124), /* break, reduce: FuncBody */
			reduce(124), /* goto, reduce: FuncBody */
			reduce(124), /* do, reduce: FuncBody */
			reduce(124), /* end, reduce: FuncBody */
			reduce(124), /* while, reduce: FuncBody */
			reduce(124), /* repeat, reduce: FuncBody */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(124), /* if, reduce: FuncBody */
			nil,         /* , */
			reduce(124), /* for, reduce: FuncBody */
			nil,         /* in */
			reduce(124), /* function, reduce: FuncBody */
			reduce(124), /* local, reduce: FuncBody */
			reduce(124), /* ::, reduce: FuncBody */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(124), /* (, reduce: FuncBody */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(124), /* ident, reduce: FuncBody */
		},
	},
	actionRow{ // S2055
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			reduce(124), /* $, reduce: FuncBody */
			reduce(124), /* return, reduce: FuncBody */
			reduce(124), /* ;, reduce: FuncBody */
			nil,         /* empty */
			nil,         /* = */
			reduce(124), /* break, reduce: FuncBody */
			reduce(124), /* goto, reduce: FuncBody */
			reduce(124), /* do, reduce: FuncBody */
			nil,         /* end */
			reduce(124), /* while, reduce: FuncBody */
			reduce(124), /* repeat, reduce: FuncBody */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(124), /* if, reduce: FuncBody */
			nil,         /* , */
			reduce(124), /* for, reduce: FuncBody */
			nil,         /* in */
			reduce(124), /* function, reduce: FuncBody */
			reduce(124), /* local, reduce: FuncBody */
			reduce(124), /* ::, reduce: FuncBody */
			nil,         /* . */
			nil,         /* : */
			reduce(124), /* or, reduce: FuncBody */
			reduce(124), /* and, reduce: FuncBody */
			reduce(124), /* <, reduce: FuncBody */
			reduce(124), /* <=, reduce: FuncBody */
			reduce(124), /* >, reduce: FuncBody */
			reduce(124), /* >=, reduce: FuncBody */
			reduce(124), /* ==, reduce: FuncBody */
			reduce(124), /* ~=, reduce: FuncBody */
			reduce(124), /* |, reduce: FuncBody */
			reduce(124), /* ~, reduce: FuncBody */
			reduce(124), /* &, reduce: FuncBody */
			reduce(124), /* .., reduce: FuncBody */
			reduce(124), /* <<, reduce: FuncBody */
			reduce(124), /* >>, reduce: FuncBody */
			reduce(124), /* +, reduce: FuncBody */
			reduce(124), /* -, reduce: FuncBody */
			reduce(124), /* *, reduce: FuncBody */
			reduce(124), /* /, reduce: FuncBody */
			reduce(124), /* %, reduce: FuncBody */
			reduce(124), /* //, reduce: FuncBody */
			nil,         /* not */
			nil,         /* # */
			reduce(124), /* ^, reduce: FuncBody */
			nil,         /* [ */
			nil,         /* ] */
			reduce(124), /* (, reduce: FuncBody */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(124), /* ident, reduce: FuncBody */
		},
	},
	actionRow{ // S2056
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(124), /* ;, reduce: FuncBody */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			reduce(124), /* until, reduce: FuncBody */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(124), /* ,, reduce: FuncBody */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(124), /* or, reduce: FuncBody */
			reduce(124), /* and, reduce: FuncBody */
			reduce(124), /* <, reduce: FuncBody */
			reduce(124), /* <=, reduce: FuncBody */
			reduce(124), /* >, reduce: FuncBody */
			reduce(124), /* >=, reduce: FuncBody */
			reduce(124), /* ==, reduce: FuncBody */
			reduce(124), /* ~=, reduce: FuncBody */
			reduce(124), /* |, reduce: FuncBody */
			reduce(124), /* ~, reduce: FuncBody */
			reduce(124), /* &, reduce: FuncBody */
			reduce(124), /* .., reduce: FuncBody */
			reduce(124), /* <<, reduce: FuncBody */
			reduce(124), /* >>, reduce: FuncBody */
			reduce(124), /* +, reduce: FuncBody */
			reduce(124), /* -, reduce: FuncBody */
			reduce(124), /* *, reduce: FuncBody */
			reduce(124), /* /, reduce: FuncBody */
			reduce(124), /* %, reduce: FuncBody */
			reduce(124), /* //, reduce: FuncBody */
			nil,         /* not */
			nil,         /* # */
			reduce(124), /* ^, reduce: FuncBody */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S2057
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(2141), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S2058
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(126), /* return, reduce: TableConstructor */
			reduce(126), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			reduce(126), /* break, reduce: TableConstructor */
			reduce(126), /* goto, reduce: TableConstructor */
			reduce(126), /* do, reduce: TableConstructor */
			nil,         /* end */
			reduce(126), /* while, reduce: TableConstructor */
			reduce(126), /* repeat, reduce: TableConstructor */
			reduce(126), /* until, reduce: TableConstructor */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(126), /* if, reduce: TableConstructor */
			reduce(126), /* ,, reduce: TableConstructor */
			reduce(126), /* for, reduce: TableConstructor */
			nil,         /* in */
			reduce(126), /* function, reduce: TableConstructor */
			reduce(126), /* local, reduce: TableConstructor */
			reduce(126), /* ::, reduce: TableConstructor */
			reduce(126), /* ., reduce: TableConstructor */
			reduce(126), /* :, reduce: TableConstructor */
			reduce(126), /* or, reduce: TableConstructor */
			reduce(126), /* and, reduce: TableConstructor */
			reduce(126), /* <, reduce: TableConstructor */
			reduce(126), /* <=, reduce: TableConstructor */
			reduce(126), /* >, reduce: TableConstructor */
			reduce(126), /* >=, reduce: TableConstructor */
			reduce(126), /* ==, reduce: TableConstructor */
			reduce(126), /* ~=, reduce: TableConstructor */
			reduce(126), /* |, reduce: TableConstructor */
			reduce(126), /* ~, reduce: TableConstructor */
			reduce(126), /* &, reduce: TableConstructor */
			reduce(126), /* .., reduce: TableConstructor */
			reduce(126), /* <<, reduce: TableConstructor */
			reduce(126), /* >>, reduce: TableConstructor */
			reduce(126), /* +, reduce: TableConstructor */
			reduce(126), /* -, reduce: TableConstructor */
			reduce(126), /* *, reduce: TableConstructor */
			reduce(126), /* /, reduce: TableConstructor */
			reduce(126), /* %, reduce: TableConstructor */
			reduce(126), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(126), /* ^, reduce: TableConstructor */
			reduce(126), /* [, reduce: TableConstructor */
			nil,         /* ] */
			reduce(126), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(126), /* string, reduce: TableConstructor */
			reduce(126), /* {, reduce: TableConstructor */
			nil,         /* } */
			reduce(126), /* ident, reduce: TableConstructor */
		},
	},
	actionRow{ // S2059
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S2060
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(104), /* return, reduce: FunctionCall */
			reduce(104), /* ;, reduce: FunctionCall */
			nil,         /* empty */
			nil,         /* = */
			reduce(104), /* break, reduce: FunctionCall */
			reduce(104), /* goto, reduce: FunctionCall */
			reduce(104), /* do, reduce: FunctionCall */
			nil,         /* end */
			reduce(104), /* while, reduce: FunctionCall */
			reduce(104), /* repeat, reduce: FunctionCall */
			reduce(104), /* until, reduce: FunctionCall */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(104), /* if, reduce: FunctionCall */
			nil,         /* , */
			reduce(104), /* for, reduce: FunctionCall */
			nil,         /* in */
			reduce(104), /* function, reduce: FunctionCall */
			reduce(104), /* local, reduce: FunctionCall */
			reduce(104), /* ::, reduce: FunctionCall */
			reduce(104), /* ., reduce: FunctionCall */
			reduce(104), /* :, reduce: FunctionCall */
			reduce(104), /* or, reduce: FunctionCall */
			reduce(104), /* and, reduce: FunctionCall */
			reduce(104), /* <, reduce: FunctionCall */
			reduce(104), /* <=, reduce: FunctionCall */
			reduce(104), /* >, reduce: FunctionCall */
			reduce(104), /* >=, reduce: FunctionCall */
			reduce(104), /* ==, reduce: FunctionCall */
			reduce(104), /* ~=, reduce: FunctionCall */
			reduce(104), /* |, reduce: FunctionCall */
			reduce(104), /* ~, reduce: FunctionCall */
			reduce(104), /* &, reduce: FunctionCall */
			reduce(104), /* .., reduce: FunctionCall */
			reduce(104), /* <<, reduce: FunctionCall */
			reduce(104), /* >>, reduce: FunctionCall */
			reduce(104), /* +, reduce: FunctionCall */
			reduce(104), /* -, reduce: FunctionCall */
			reduce(104), /* *, reduce: FunctionCall */
			reduce(104), /* /, reduce: FunctionCall */
			reduce(104), /* %, reduce: FunctionCall */
			reduce(104), /* //, reduce: FunctionCall */
			nil,         /* not */
			nil,         /* # */
			reduce(104), /* ^, reduce: FunctionCall */
			reduce(104), /* [, reduce: FunctionCall */
			nil,         /* ] */
			reduce(104), /* (, reduce: FunctionCall */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(104), /* string, reduce: FunctionCall */
			reduce(104), /* {, reduce: FunctionCall */
			nil,         /* } */
			reduce(104), /* ident, reduce: FunctionCall */
		},
	},
	actionRow{ // S2061
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(98), /* return, reduce: Var */
			reduce(98), /* ;, reduce: Var */
			nil,        /* empty */
			nil,        /* = */
			reduce(98), /* break, reduce: Var */
			reduce(98), /* goto, reduce: Var */
			reduce(98), /* do, reduce: Var */
			nil,        /* end */
			reduce(98), /* while, reduce: Var */
			reduce(98), /* repeat, reduce: Var */
			reduce(98), /* until, reduce: Var */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(98), /* if, reduce: Var */
			nil,        /* , */
			reduce(98), /* for, reduce: Var */
			nil,        /* in */
			reduce(98), /* function, reduce: Var */
			reduce(98), /* local, reduce: Var */
			reduce(98), /* ::, reduce: Var */
			reduce(98), /* ., reduce: Var */
			reduce(98), /* :, reduce: Var */
			reduce(98), /* or, reduce: Var */
			reduce(98), /* and, reduce: Var */
			reduce(98), /* <, reduce: Var */
			reduce(98), /* <=, reduce: Var */
			reduce(98), /* >, reduce: Var */
			reduce(98), /* >=, reduce: Var */
			reduce(98), /* ==, reduce: Var */
			reduce(98), /* ~=, reduce: Var */
			reduce(98), /* |, reduce: Var */
			reduce(98), /* ~, reduce: Var */
			reduce(98), /* &, reduce: Var */
			reduce(98), /* .., reduce: Var */
			reduce(98), /* <<, reduce: Var */
			reduce(98), /* >>, reduce: Var */
			reduce(98), /* +, reduce: Var */
			reduce(98), /* -, reduce: Var */
			reduce(98), /* *, reduce: Var */
			reduce(98), /* /, reduce: Var */
			reduce(98), /* %, reduce: Var */
			reduce(98), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(98), /* ^, reduce: Var */
			reduce(98), /* [, reduce: Var */
			nil,        /* ] */
			reduce(98), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(98), /* string, reduce: Var */
			reduce(98), /* {, reduce: Var */
			nil,        /* } */
			reduce(98), /* ident, reduce: Var */
		},
	},
	actionRow{ // S2062
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(116), /* return, reduce: Args */
			reduce(116), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			reduce(116), /* break, reduce: Args */
			reduce(116), /* goto, reduce: Args */
			reduce(116), /* do, reduce: Args */
			nil,         /* end */
			reduce(116), /* while, reduce: Args */
			reduce(116), /* repeat, reduce: Args */
			reduce(116), /* until, reduce: Args */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(116), /* if, reduce: Args */
			nil,         /* , */
			reduce(116), /* for, reduce: Args */
			nil,         /* in */
			reduce(116), /* function, reduce: Args */
			reduce(116), /* local, reduce: Args */
			reduce(116), /* ::, reduce: Args */
			reduce(116), /* ., reduce: Args */
			reduce(116), /* :, reduce: Args */
			reduce(116), /* or, reduce: Args */
			reduce(116), /* and, reduce: Args */
			reduce(116), /* <, reduce: Args */
			reduce(116), /* <=, reduce: Args */
			reduce(116), /* >, reduce: Args */
			reduce(116), /* >=, reduce: Args */
			reduce(116), /* ==, reduce: Args */
			reduce(116), /* ~=, reduce: Args */
			reduce(116), /* |, reduce: Args */
			reduce(116), /* ~, reduce: Args */
			reduce(116), /* &, reduce: Args */
			reduce(116), /* .., reduce: Args */
			reduce(116), /* <<, reduce: Args */
			reduce(116), /* >>, reduce: Args */
			reduce(116), /* +, reduce: Args */
			reduce(116), /* -, reduce: Args */
			reduce(116), /* *, reduce: Args */
			reduce(116), /* /, reduce: Args */
			reduce(116), /* %, reduce: Args */
			reduce(116), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(116), /* ^, reduce: Args */
			reduce(116), /* [, reduce: Args */
			nil,         /* ] */
			reduce(116), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(116), /* string, reduce: Args */
			reduce(116), /* {, reduce: Args */
			nil,         /* } */
			reduce(116), /* ident, reduce: Args */
		},
	},
	actionRow{ // S2063
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(125), /* return, reduce: TableConstructor */
			reduce(125), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			reduce(125), /* break, reduce: TableConstructor */
			reduce(125), /* goto, reduce: TableConstructor */
			reduce(125), /* do, reduce: TableConstructor */
			nil,         /* end */
			reduce(125), /* while, reduce: TableConstructor */
			reduce(125), /* repeat, reduce: TableConstructor */
			reduce(125), /* until, reduce: TableConstructor */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(125), /* if, reduce: TableConstructor */
			nil,         /* , */
			reduce(125), /* for, reduce: TableConstructor */
			nil,         /* in */
			reduce(125), /* function, reduce: TableConstructor */
			reduce(125), /* local, reduce: TableConstructor */
			reduce(125), /* ::, reduce: TableConstructor */
			reduce(125), /* ., reduce: TableConstructor */
			reduce(125), /* :, reduce: TableConstructor */
			reduce(125), /* or, reduce: TableConstructor */
			reduce(125), /* and, reduce: TableConstructor */
			reduce(125), /* <, reduce: TableConstructor */
			reduce(125), /* <=, reduce: TableConstructor */
			reduce(125), /* >, reduce: TableConstructor */
			reduce(125), /* >=, reduce: TableConstructor */
			reduce(125), /* ==, reduce: TableConstructor */
			reduce(125), /* ~=, reduce: TableConstructor */
			reduce(125), /* |, reduce: TableConstructor */
			reduce(125), /* ~, reduce: TableConstructor */
			reduce(125), /* &, reduce: TableConstructor */
			reduce(125), /* .., reduce: TableConstructor */
			reduce(125), /* <<, reduce: TableConstructor */
			reduce(125), /* >>, reduce: TableConstructor */
			reduce(125), /* +, reduce: TableConstructor */
			reduce(125), /* -, reduce: TableConstructor */
			reduce(125), /* *, reduce: TableConstructor */
			reduce(125), /* /, reduce: TableConstructor */
			reduce(125), /* %, reduce: TableConstructor */
			reduce(125), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(125), /* ^, reduce: TableConstructor */
			reduce(125), /* [, reduce: TableConstructor */
			nil,         /* ] */
			reduce(125), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(125), /* string, reduce: TableConstructor */
			reduce(125), /* {, reduce: TableConstructor */
			nil,         /* } */
			reduce(125), /* ident, reduce: TableConstructor */
		},
	},
	actionRow{ // S2064
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(238),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			shift(254),  /* [ */
			nil,         /* ] */
			shift(255),  /* ( */
			nil,         /* ) */
			shift(256),  /* nil */
			shift(257),  /* true */
			shift(258),  /* false */
			shift(259),  /* ... */
			shift(260),  /* numdec */
			shift(261),  /* numhex */
			shift(262),  /* string */
			shift(265),  /* { */
			shift(2143), /* } */
			shift(268),  /* ident */
		},
	},
	actionRow{ // S2065
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(126), /* return, reduce: TableConstructor */
			reduce(126), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			reduce(126), /* break, reduce: TableConstructor */
			reduce(126), /* goto, reduce: TableConstructor */
			reduce(126), /* do, reduce: TableConstructor */
			nil,         /* end */
			reduce(126), /* while, reduce: TableConstructor */
			reduce(126), /* repeat, reduce: TableConstructor */
			reduce(126), /* until, reduce: TableConstructor */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(126), /* if, reduce: TableConstructor */
			nil,         /* , */
			reduce(126), /* for, reduce: TableConstructor */
			nil,         /* in */
			reduce(126), /* function, reduce: TableConstructor */
			reduce(126), /* local, reduce: TableConstructor */
			reduce(126), /* ::, reduce: TableConstructor */
			nil,         /* . */
			nil,         /* : */
			reduce(126), /* or, reduce: TableConstructor */
			reduce(126), /* and, reduce: TableConstructor */
			reduce(126), /* <, reduce: TableConstructor */
			reduce(126), /* <=, reduce: TableConstructor */
			reduce(126), /* >, reduce: TableConstructor */
			reduce(126), /* >=, reduce: TableConstructor */
			reduce(126), /* ==, reduce: TableConstructor */
			reduce(126), /* ~=, reduce: TableConstructor */
			reduce(126), /* |, reduce: TableConstructor */
			reduce(126), /* ~, reduce: TableConstructor */
			reduce(126), /* &, reduce: TableConstructor */
			reduce(126), /* .., reduce: TableConstructor */
			reduce(126), /* <<, reduce: TableConstructor */
			reduce(126), /* >>, reduce: TableConstructor */
			reduce(126), /* +, reduce: TableConstructor */
			reduce(126), /* -, reduce: TableConstructor */
			reduce(126), /* *, reduce: TableConstructor */
			reduce(126), /* /, reduce: TableConstructor */
			reduce(126), /* %, reduce: TableConstructor */
			reduce(126), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(126), /* ^, reduce: TableConstructor */
			nil,         /* [ */
			nil,         /* ] */
			reduce(126), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(126), /* ident, reduce: TableConstructor */
		},
	},
	actionRow{ // S2066
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(32), /* return, reduce: Else */
			reduce(32), /* ;, reduce: Else */
			nil,        /* empty */
			nil,        /* = */
			reduce(32), /* break, reduce: Else */
			reduce(32), /* goto, reduce: Else */
			reduce(32), /* do, reduce: Else */
			nil,        /* end */
			reduce(32), /* while, reduce: Else */
			reduce(32), /* repeat, reduce: Else */
			reduce(32), /* until, reduce: Else */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(32), /* if, reduce: Else */
			nil,        /* , */
			reduce(32), /* for, reduce: Else */
			nil,        /* in */
			reduce(32), /* function, reduce: Else */
			reduce(32), /* local, reduce: Else */
			reduce(32), /* ::, reduce: Else */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(32), /* (, reduce: Else */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(32), /* ident, reduce: Else */
		},
	},
	actionRow{ // S2067
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S2068
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(33), /* return, reduce: Else */
			reduce(33), /* ;, reduce: Else */
			nil,        /* empty */
			nil,        /* = */
			reduce(33), /* break, reduce: Else */
			reduce(33), /* goto, reduce: Else */
			reduce(33), /* do, reduce: Else */
			nil,        /* end */
			reduce(33), /* while, reduce: Else */
			reduce(33), /* repeat, reduce: Else */
			reduce(33), /* until, reduce: Else */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(33), /* if, reduce: Else */
			nil,        /* , */
			reduce(33), /* for, reduce: Else */
			nil,        /* in */
			reduce(33), /* function, reduce: Else */
			reduce(33), /* local, reduce: Else */
			reduce(33), /* ::, reduce: Else */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(33), /* (, reduce: Else */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(33), /* ident, reduce: Else */
		},
	},
	actionRow{ // S2069
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(38), /* return, reduce: ForStat */
			reduce(38), /* ;, reduce: ForStat */
			nil,        /* empty */
			nil,        /* = */
			reduce(38), /* break, reduce: ForStat */
			reduce(38), /* goto, reduce: ForStat */
			reduce(38), /* do, reduce: ForStat */
			nil,        /* end */
			reduce(38), /* while, reduce: ForStat */
			reduce(38), /* repeat, reduce: ForStat */
			reduce(38), /* until, reduce: ForStat */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(38), /* if, reduce: ForStat */
			nil,        /* , */
			reduce(38), /* for, reduce: ForStat */
			nil,        /* in */
			reduce(38), /* function, reduce: ForStat */
			reduce(38), /* local, reduce: ForStat */
			reduce(38), /* ::, reduce: ForStat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(38), /* (, reduce: ForStat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(38), /* ident, reduce: ForStat */
		},
	},
	actionRow{ // S2070
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(39), /* return, reduce: ForInStat */
			reduce(39), /* ;, reduce: ForInStat */
			nil,        /* empty */
			nil,        /* = */
			reduce(39), /* break, reduce: ForInStat */
			reduce(39), /* goto, reduce: ForInStat */
			reduce(39), /* do, reduce: ForInStat */
			nil,        /* end */
			reduce(39), /* while, reduce: ForInStat */
			reduce(39), /* repeat, reduce: ForInStat */
			reduce(39), /* until, reduce: ForInStat */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(39), /* if, reduce: ForInStat */
			nil,        /* , */
			reduce(39), /* for, reduce: ForInStat */
			nil,        /* in */
			reduce(39), /* function, reduce: ForInStat */
			reduce(39), /* local, reduce: ForInStat */
			reduce(39), /* ::, reduce: ForInStat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(39), /* (, reduce: ForInStat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(39), /* ident, reduce: ForInStat */
		},
	},
	actionRow{ // S2071
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(124), /* return, reduce: FuncBody */
			reduce(124), /* ;, reduce: FuncBody */
			nil,         /* empty */
			nil,         /* = */
			reduce(124), /* break, reduce: FuncBody */
			reduce(124), /* goto, reduce: FuncBody */
			reduce(124), /* do, reduce: FuncBody */
			nil,         /* end */
			reduce(124), /* while, reduce: FuncBody */
			reduce(124), /* repeat, reduce: FuncBody */
			reduce(124), /* until, reduce: FuncBody */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(124), /* if, reduce: FuncBody */
			nil,         /* , */
			reduce(124), /* for, reduce: FuncBody */
			nil,         /* in */
			reduce(124), /* function, reduce: FuncBody */
			reduce(124), /* local, reduce: FuncBody */
			reduce(124), /* ::, reduce: FuncBody */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(124), /* (, reduce: FuncBody */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(124), /* ident, reduce: FuncBody */
		},
	},
	actionRow{ // S2072
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			reduce(6), /* elseif, reduce: StatList */
			reduce(6), /* else, reduce: StatList */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S2073
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(31), /* $, reduce: Else */
			reduce(31), /* return, reduce: Else */
			reduce(31), /* ;, reduce: Else */
			nil,        /* empty */
			nil,        /* = */
			reduce(31), /* break, reduce: Else */
			reduce(31), /* goto, reduce: Else */
			reduce(31), /* do, reduce: Else */
			nil,        /* end */
			reduce(31), /* while, reduce: Else */
			reduce(31), /* repeat, reduce: Else */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(31), /* if, reduce: Else */
			nil,        /* , */
			reduce(31), /* for, reduce: Else */
			nil,        /* in */
			reduce(31), /* function, reduce: Else */
			reduce(31), /* local, reduce: Else */
			reduce(31), /* ::, reduce: Else */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(31), /* (, reduce: Else */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(31), /* ident, reduce: Else */
		},
	},
	actionRow{ // S2074
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S2075
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(104), /* ;, reduce: FunctionCall */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(104), /* end, reduce: FunctionCall */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			reduce(104), /* elseif, reduce: FunctionCall */
			reduce(104), /* else, reduce: FunctionCall */
			nil,         /* if */
			reduce(104), /* ,, reduce: FunctionCall */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(104), /* ., reduce: FunctionCall */
			reduce(104), /* :, reduce: FunctionCall */
			reduce(104), /* or, reduce: FunctionCall */
			reduce(104), /* and, reduce: FunctionCall */
			reduce(104), /* <, reduce: FunctionCall */
			reduce(104), /* <=, reduce: FunctionCall */
			reduce(104), /* >, reduce: FunctionCall */
			reduce(104), /* >=, reduce: FunctionCall */
			reduce(104), /* ==, reduce: FunctionCall */
			reduce(104), /* ~=, reduce: FunctionCall */
			reduce(104), /* |, reduce: FunctionCall */
			reduce(104), /* ~, reduce: FunctionCall */
			reduce(104), /* &, reduce: FunctionCall */
			reduce(104), /* .., reduce: FunctionCall */
			reduce(104), /* <<, reduce: FunctionCall */
			reduce(104), /* >>, reduce: FunctionCall */
			reduce(104), /* +, reduce: FunctionCall */
			reduce(104), /* -, reduce: FunctionCall */
			reduce(104), /* *, reduce: FunctionCall */
			reduce(104), /* /, reduce: FunctionCall */
			reduce(104), /* %, reduce: FunctionCall */
			reduce(104), /* //, reduce: FunctionCall */
			nil,         /* not */
			nil,         /* # */
			reduce(104), /* ^, reduce: FunctionCall */
			reduce(104), /* [, reduce: FunctionCall */
			nil,         /* ] */
			reduce(104), /* (, reduce: FunctionCall */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(104), /* string, reduce: FunctionCall */
			reduce(104), /* {, reduce: FunctionCall */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S2076
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			reduce(98), /* ;, reduce: Var */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			reduce(98), /* end, reduce: Var */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			reduce(98), /* elseif, reduce: Var */
			reduce(98), /* else, reduce: Var */
			nil,        /* if */
			reduce(98), /* ,, reduce: Var */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			reduce(98), /* ., reduce: Var */
			reduce(98), /* :, reduce: Var */
			reduce(98), /* or, reduce: Var */
			reduce(98), /* and, reduce: Var */
			reduce(98), /* <, reduce: Var */
			reduce(98), /* <=, reduce: Var */
			reduce(98), /* >, reduce: Var */
			reduce(98), /* >=, reduce: Var */
			reduce(98), /* ==, reduce: Var */
			reduce(98), /* ~=, reduce: Var */
			reduce(98), /* |, reduce: Var */
			reduce(98), /* ~, reduce: Var */
			reduce(98), /* &, reduce: Var */
			reduce(98), /* .., reduce: Var */
			reduce(98), /* <<, reduce: Var */
			reduce(98), /* >>, reduce: Var */
			reduce(98), /* +, reduce: Var */
			reduce(98), /* -, reduce: Var */
			reduce(98), /* *, reduce: Var */
			reduce(98), /* /, reduce: Var */
			reduce(98), /* %, reduce: Var */
			reduce(98), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(98), /* ^, reduce: Var */
			reduce(98), /* [, reduce: Var */
			nil,        /* ] */
			reduce(98), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(98), /* string, reduce: Var */
			reduce(98), /* {, reduce: Var */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S2077
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(116), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(116), /* end, reduce: Args */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			reduce(116), /* elseif, reduce: Args */
			reduce(116), /* else, reduce: Args */
			nil,         /* if */
			reduce(116), /* ,, reduce: Args */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(116), /* ., reduce: Args */
			reduce(116), /* :, reduce: Args */
			reduce(116), /* or, reduce: Args */
			reduce(116), /* and, reduce: Args */
			reduce(116), /* <, reduce: Args */
			reduce(116), /* <=, reduce: Args */
			reduce(116), /* >, reduce: Args */
			reduce(116), /* >=, reduce: Args */
			reduce(116), /* ==, reduce: Args */
			reduce(116), /* ~=, reduce: Args */
			reduce(116), /* |, reduce: Args */
			reduce(116), /* ~, reduce: Args */
			reduce(116), /* &, reduce: Args */
			reduce(116), /* .., reduce: Args */
			reduce(116), /* <<, reduce: Args */
			reduce(116), /* >>, reduce: Args */
			reduce(116), /* +, reduce: Args */
			reduce(116), /* -, reduce: Args */
			reduce(116), /* *, reduce: Args */
			reduce(116), /* /, reduce: Args */
			reduce(116), /* %, reduce: Args */
			reduce(116), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(116), /* ^, reduce: Args */
			reduce(116), /* [, reduce: Args */
			nil,         /* ] */
			reduce(116), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(116), /* string, reduce: Args */
			reduce(116), /* {, reduce: Args */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S2078
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(125), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(125), /* end, reduce: TableConstructor */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			reduce(125), /* elseif, reduce: TableConstructor */
			reduce(125), /* else, reduce: TableConstructor */
			nil,         /* if */
			reduce(125), /* ,, reduce: TableConstructor */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(125), /* ., reduce: TableConstructor */
			reduce(125), /* :, reduce: TableConstructor */
			reduce(125), /* or, reduce: TableConstructor */
			reduce(125), /* and, reduce: TableConstructor */
			reduce(125), /* <, reduce: TableConstructor */
			reduce(125), /* <=, reduce: TableConstructor */
			reduce(125), /* >, reduce: TableConstructor */
			reduce(125), /* >=, reduce: TableConstructor */
			reduce(125), /* ==, reduce: TableConstructor */
			reduce(125), /* ~=, reduce: TableConstructor */
			reduce(125), /* |, reduce: TableConstructor */
			reduce(125), /* ~, reduce: TableConstructor */
			reduce(125), /* &, reduce: TableConstructor */
			reduce(125), /* .., reduce: TableConstructor */
			reduce(125), /* <<, reduce: TableConstructor */
			reduce(125), /* >>, reduce: TableConstructor */
			reduce(125), /* +, reduce: TableConstructor */
			reduce(125), /* -, reduce: TableConstructor */
			reduce(125), /* *, reduce: TableConstructor */
			reduce(125), /* /, reduce: TableConstructor */
			reduce(125), /* %, reduce: TableConstructor */
			reduce(125), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(125), /* ^, reduce: TableConstructor */
			reduce(125), /* [, reduce: TableConstructor */
			nil,         /* ] */
			reduce(125), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(125), /* string, reduce: TableConstructor */
			reduce(125), /* {, reduce: TableConstructor */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S2079
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(238),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			shift(254),  /* [ */
			nil,         /* ] */
			shift(255),  /* ( */
			nil,         /* ) */
			shift(256),  /* nil */
			shift(257),  /* true */
			shift(258),  /* false */
			shift(259),  /* ... */
			shift(260),  /* numdec */
			shift(261),  /* numhex */
			shift(262),  /* string */
			shift(265),  /* { */
			shift(2147), /* } */
			shift(268),  /* ident */
		},
	},
	actionRow{ // S2080
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(126), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(126), /* end, reduce: TableConstructor */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			reduce(126), /* elseif, reduce: TableConstructor */
			reduce(126), /* else, reduce: TableConstructor */
			nil,         /* if */
			reduce(126), /* ,, reduce: TableConstructor */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(126), /* or, reduce: TableConstructor */
			reduce(126), /* and, reduce: TableConstructor */
			reduce(126), /* <, reduce: TableConstructor */
			reduce(126), /* <=, reduce: TableConstructor */
			reduce(126), /* >, reduce: TableConstructor */
			reduce(126), /* >=, reduce: TableConstructor */
			reduce(126), /* ==, reduce: TableConstructor */
			reduce(126), /* ~=, reduce: TableConstructor */
			reduce(126), /* |, reduce: TableConstructor */
			reduce(126), /* ~, reduce: TableConstructor */
			reduce(126), /* &, reduce: TableConstructor */
			reduce(126), /* .., reduce: TableConstructor */
			reduce(126), /* <<, reduce: TableConstructor */
			reduce(126), /* >>, reduce: TableConstructor */
			reduce(126), /* +, reduce: TableConstructor */
			reduce(126), /* -, reduce: TableConstructor */
			reduce(126), /* *, reduce: TableConstructor */
			reduce(126), /* /, reduce: TableConstructor */
			reduce(126), /* %, reduce: TableConstructor */
			reduce(126), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(126), /* ^, reduce: TableConstructor */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S2081
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(54),  /* return, reduce: ExpList */
			reduce(54),  /* ;, reduce: ExpList */
			nil,         /* empty */
			nil,         /* = */
			reduce(54),  /* break, reduce: ExpList */
			reduce(54),  /* goto, reduce: ExpList */
			reduce(54),  /* do, reduce: ExpList */
			reduce(54),  /* end, reduce: ExpList */
			reduce(54),  /* while, reduce: ExpList */
			reduce(54),  /* repeat, reduce: ExpList */
			nil,         /* until */
			nil,         /* then */
			reduce(54),  /* elseif, reduce: ExpList */
			reduce(54),  /* else, reduce: ExpList */
			reduce(54),  /* if, reduce: ExpList */
			reduce(54),  /* ,, reduce: ExpList */
			reduce(54),  /* for, reduce: ExpList */
			nil,         /* in */
			reduce(54),  /* function, reduce: ExpList */
			reduce(54),  /* local, reduce: ExpList */
			reduce(54),  /* ::, reduce: ExpList */
			nil,         /* . */
			nil,         /* : */
			shift(1969), /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(54),  /* (, reduce: ExpList */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(54),  /* ident, reduce: ExpList */
		},
	},
	actionRow{ // S2082
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(56),  /* return, reduce: Exp */
			reduce(56),  /* ;, reduce: Exp */
			nil,         /* empty */
			nil,         /* = */
			reduce(56),  /* break, reduce: Exp */
			reduce(56),  /* goto, reduce: Exp */
			reduce(56),  /* do, reduce: Exp */
			reduce(56),  /* end, reduce: Exp */
			reduce(56),  /* while, reduce: Exp */
			reduce(56),  /* repeat, reduce: Exp */
			nil,         /* until */
			nil,         /* then */
			reduce(56),  /* elseif, reduce: Exp */
			reduce(56),  /* else, reduce: Exp */
			reduce(56),  /* if, reduce: Exp */
			reduce(56),  /* ,, reduce: Exp */
			reduce(56),  /* for, reduce: Exp */
			nil,         /* in */
			reduce(56),  /* function, reduce: Exp */
			reduce(56),  /* local, reduce: Exp */
			reduce(56),  /* ::, reduce: Exp */
			nil,         /* . */
			nil,         /* : */
			reduce(56),  /* or, reduce: Exp */
			shift(1972), /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(56),  /* (, reduce: Exp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(56),  /* ident, reduce: Exp */
		},
	},
	actionRow{ // S2083
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(2148), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S2084
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(58), /* return, reduce: AndExp */
			reduce(58), /* ;, reduce: AndExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(58), /* break, reduce: AndExp */
			reduce(58), /* goto, reduce: AndExp */
			reduce(58), /* do, reduce: AndExp */
			reduce(58), /* end, reduce: AndExp */
			reduce(58), /* while, reduce: AndExp */
			reduce(58), /* repeat, reduce: AndExp */
			nil,        /* until */
			nil,        /* then */
			reduce(58), /* elseif, reduce: AndExp */
			reduce(58), /* else, reduce: AndExp */
			reduce(58), /* if, reduce: AndExp */
			reduce(58), /* ,, reduce: AndExp */
			reduce(58), /* for, reduce: AndExp */
			nil,        /* in */
			reduce(58), /* function, reduce: AndExp */
			reduce(58), /* local, reduce: AndExp */
			reduce(58), /* ::, reduce: AndExp */
			nil,        /* . */
			nil,        /* : */
			reduce(58), /* or, reduce: AndExp */
			reduce(58), /* and, reduce: AndExp */
			shift(203), /* < */
			shift(204), /* <= */
			shift(205), /* > */
			shift(206), /* >= */
			shift(207), /* == */
			shift(208), /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(58), /* (, reduce: AndExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(58), /* ident, reduce: AndExp */
		},
	},
	actionRow{ // S2085
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(66),  /* return, reduce: CompExp */
			reduce(66),  /* ;, reduce: CompExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(66),  /* break, reduce: CompExp */
			reduce(66),  /* goto, reduce: CompExp */
			reduce(66),  /* do, reduce: CompExp */
			reduce(66),  /* end, reduce: CompExp */
			reduce(66),  /* while, reduce: CompExp */
			reduce(66),  /* repeat, reduce: CompExp */
			nil,         /* until */
			nil,         /* then */
			reduce(66),  /* elseif, reduce: CompExp */
			reduce(66),  /* else, reduce: CompExp */
			reduce(66),  /* if, reduce: CompExp */
			reduce(66),  /* ,, reduce: CompExp */
			reduce(66),  /* for, reduce: CompExp */
			nil,         /* in */
			reduce(66),  /* function, reduce: CompExp */
			reduce(66),  /* local, reduce: CompExp */
			reduce(66),  /* ::, reduce: CompExp */
			nil,         /* . */
			nil,         /* : */
			reduce(66),  /* or, reduce: CompExp */
			reduce(66),  /* and, reduce: CompExp */
			reduce(66),  /* <, reduce: CompExp */
			reduce(66),  /* <=, reduce: CompExp */
			reduce(66),  /* >, reduce: CompExp */
			reduce(66),  /* >=, reduce: CompExp */
			reduce(66),  /* ==, reduce: CompExp */
			reduce(66),  /* ~=, reduce: CompExp */
			shift(1974), /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(66),  /* (, reduce: CompExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(66),  /* ident, reduce: CompExp */
		},
	},
	actionRow{ // S2086
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(68),  /* return, reduce: BitOrExp */
			reduce(68),  /* ;, reduce: BitOrExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(68),  /* break, reduce: BitOrExp */
			reduce(68),  /* goto, reduce: BitOrExp */
			reduce(68),  /* do, reduce: BitOrExp */
			reduce(68),  /* end, reduce: BitOrExp */
			reduce(68),  /* while, reduce: BitOrExp */
			reduce(68),  /* repeat, reduce: BitOrExp */
			nil,         /* until */
			nil,         /* then */
			reduce(68),  /* elseif, reduce: BitOrExp */
			reduce(68),  /* else, reduce: BitOrExp */
			reduce(68),  /* if, reduce: BitOrExp */
			reduce(68),  /* ,, reduce: BitOrExp */
			reduce(68),  /* for, reduce: BitOrExp */
			nil,         /* in */
			reduce(68),  /* function, reduce: BitOrExp */
			reduce(68),  /* local, reduce: BitOrExp */
			reduce(68),  /* ::, reduce: BitOrExp */
			nil,         /* . */
			nil,         /* : */
			reduce(68),  /* or, reduce: BitOrExp */
			reduce(68),  /* and, reduce: BitOrExp */
			reduce(68),  /* <, reduce: BitOrExp */
			reduce(68),  /* <=, reduce: BitOrExp */
			reduce(68),  /* >, reduce: BitOrExp */
			reduce(68),  /* >=, reduce: BitOrExp */
			reduce(68),  /* ==, reduce: BitOrExp */
			reduce(68),  /* ~=, reduce: BitOrExp */
			reduce(68),  /* |, reduce: BitOrExp */
			shift(1975), /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(68),  /* (, reduce: BitOrExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(68),  /* ident, reduce: BitOrExp */
		},
	},
	actionRow{ // S2087
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(70),  /* return, reduce: BitXorExp */
			reduce(70),  /* ;, reduce: BitXorExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(70),  /* break, reduce: BitXorExp */
			reduce(70),  /* goto, reduce: BitXorExp */
			reduce(70),  /* do, reduce: BitXorExp */
			reduce(70),  /* end, reduce: BitXorExp */
			reduce(70),  /* while, reduce: BitXorExp */
			reduce(70),  /* repeat, reduce: BitXorExp */
			nil,         /* until */
			nil,         /* then */
			reduce(70),  /* elseif, reduce: BitXorExp */
			reduce(70),  /* else, reduce: BitXorExp */
			reduce(70),  /* if, reduce: BitXorExp */
			reduce(70),  /* ,, reduce: BitXorExp */
			reduce(70),  /* for, reduce: BitXorExp */
			nil,         /* in */
			reduce(70),  /* function, reduce: BitXorExp */
			reduce(70),  /* local, reduce: BitXorExp */
			reduce(70),  /* ::, reduce: BitXorExp */
			nil,         /* . */
			nil,         /* : */
			reduce(70),  /* or, reduce: BitXorExp */
			reduce(70),  /* and, reduce: BitXorExp */
			reduce(70),  /* <, reduce: BitXorExp */
			reduce(70),  /* <=, reduce: BitXorExp */
			reduce(70),  /* >, reduce: BitXorExp */
			reduce(70),  /* >=, reduce: BitXorExp */
			reduce(70),  /* ==, reduce: BitXorExp */
			reduce(70),  /* ~=, reduce: BitXorExp */
			reduce(70),  /* |, reduce: BitXorExp */
			reduce(70),  /* ~, reduce: BitXorExp */
			shift(1976), /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(70),  /* (, reduce: BitXorExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(70),  /* ident, reduce: BitXorExp */
		},
	},
	actionRow{ // S2088
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(72),  /* return, reduce: BitAndExp */
			reduce(72),  /* ;, reduce: BitAndExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(72),  /* break, reduce: BitAndExp */
			reduce(72),  /* goto, reduce: BitAndExp */
			reduce(72),  /* do, reduce: BitAndExp */
			reduce(72),  /* end, reduce: BitAndExp */
			reduce(72),  /* while, reduce: BitAndExp */
			reduce(72),  /* repeat, reduce: BitAndExp */
			nil,         /* until */
			nil,         /* then */
			reduce(72),  /* elseif, reduce: BitAndExp */
			reduce(72),  /* else, reduce: BitAndExp */
			reduce(72),  /* if, reduce: BitAndExp */
			reduce(72),  /* ,, reduce: BitAndExp */
			reduce(72),  /* for, reduce: BitAndExp */
			nil,         /* in */
			reduce(72),  /* function, reduce: BitAndExp */
			reduce(72),  /* local, reduce: BitAndExp */
			reduce(72),  /* ::, reduce: BitAndExp */
			nil,         /* . */
			nil,         /* : */
			reduce(72),  /* or, reduce: BitAndExp */
			reduce(72),  /* and, reduce: BitAndExp */
			reduce(72),  /* <, reduce: BitAndExp */
			reduce(72),  /* <=, reduce: BitAndExp */
			reduce(72),  /* >, reduce: BitAndExp */
			reduce(72),  /* >=, reduce: BitAndExp */
			reduce(72),  /* ==, reduce: BitAndExp */
			reduce(72),  /* ~=, reduce: BitAndExp */
			reduce(72),  /* |, reduce: BitAndExp */
			reduce(72),  /* ~, reduce: BitAndExp */
			reduce(72),  /* &, reduce: BitAndExp */
			shift(1977), /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(72),  /* (, reduce: BitAndExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(72),  /* ident, reduce: BitAndExp */
		},
	},
	actionRow{ // S2089
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(74), /* return, reduce: ConcatExp */
			reduce(74), /* ;, reduce: ConcatExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(74), /* break, reduce: ConcatExp */
			reduce(74), /* goto, reduce: ConcatExp */
			reduce(74), /* do, reduce: ConcatExp */
			reduce(74), /* end, reduce: ConcatExp */
			reduce(74), /* while, reduce: ConcatExp */
			reduce(74), /* repeat, reduce: ConcatExp */
			nil,        /* until */
			nil,        /* then */
			reduce(74), /* elseif, reduce: ConcatExp */
			reduce(74), /* else, reduce: ConcatExp */
			reduce(74), /* if, reduce: ConcatExp */
			reduce(74), /* ,, reduce: ConcatExp */
			reduce(74), /* for, reduce: ConcatExp */
			nil,        /* in */
			reduce(74), /* function, reduce: ConcatExp */
			reduce(74), /* local, reduce: ConcatExp */
			reduce(74), /* ::, reduce: ConcatExp */
			nil,        /* . */
			nil,        /* : */
			reduce(74), /* or, reduce: ConcatExp */
			reduce(74), /* and, reduce: ConcatExp */
			reduce(74), /* <, reduce: ConcatExp */
			reduce(74), /* <=, reduce: ConcatExp */
			reduce(74), /* >, reduce: ConcatExp */
			reduce(74), /* >=, reduce: ConcatExp */
			reduce(74), /* ==, reduce: ConcatExp */
			reduce(74), /* ~=, reduce: ConcatExp */
			reduce(74), /* |, reduce: ConcatExp */
			reduce(74), /* ~, reduce: ConcatExp */
			reduce(74), /* &, reduce: ConcatExp */
			reduce(74), /* .., reduce: ConcatExp */
			shift(214), /* << */
			shift(215), /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(74), /* (, reduce: ConcatExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(74), /* ident, reduce: ConcatExp */
		},
	},
	actionRow{ // S2090
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(78), /* return, reduce: ShiftExp */
			reduce(78), /* ;, reduce: ShiftExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(78), /* break, reduce: ShiftExp */
			reduce(78), /* goto, reduce: ShiftExp */
			reduce(78), /* do, reduce: ShiftExp */
			reduce(78), /* end, reduce: ShiftExp */
			reduce(78), /* while, reduce: ShiftExp */
			reduce(78), /* repeat, reduce: ShiftExp */
			nil,        /* until */
			nil,        /* then */
			reduce(78), /* elseif, reduce: ShiftExp */
			reduce(78), /* else, reduce: ShiftExp */
			reduce(78), /* if, reduce: ShiftExp */
			reduce(78), /* ,, reduce: ShiftExp */
			reduce(78), /* for, reduce: ShiftExp */
			nil,        /* in */
			reduce(78), /* function, reduce: ShiftExp */
			reduce(78), /* local, reduce: ShiftExp */
			reduce(78), /* ::, reduce: ShiftExp */
			nil,        /* . */
			nil,        /* : */
			reduce(78), /* or, reduce: ShiftExp */
			reduce(78), /* and, reduce: ShiftExp */
			reduce(78), /* <, reduce: ShiftExp */
			reduce(78), /* <=, reduce: ShiftExp */
			reduce(78), /* >, reduce: ShiftExp */
			reduce(78), /* >=, reduce: ShiftExp */
			reduce(78), /* ==, reduce: ShiftExp */
			reduce(78), /* ~=, reduce: ShiftExp */
			reduce(78), /* |, reduce: ShiftExp */
			reduce(78), /* ~, reduce: ShiftExp */
			reduce(78), /* &, reduce: ShiftExp */
			reduce(78), /* .., reduce: ShiftExp */
			reduce(78), /* <<, reduce: ShiftExp */
			reduce(78), /* >>, reduce: ShiftExp */
			shift(217), /* + */
			shift(218), /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(78), /* (, reduce: ShiftExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(78), /* ident, reduce: ShiftExp */
		},
	},
	actionRow{ // S2091
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(82), /* return, reduce: Sum */
			reduce(82), /* ;, reduce: Sum */
			nil,        /* empty */
			nil,        /* = */
			reduce(82), /* break, reduce: Sum */
			reduce(82), /* goto, reduce: Sum */
			reduce(82), /* do, reduce: Sum */
			reduce(82), /* end, reduce: Sum */
			reduce(82), /* while, reduce: Sum */
			reduce(82), /* repeat, reduce: Sum */
			nil,        /* until */
			nil,        /* then */
			reduce(82), /* elseif, reduce: Sum */
			reduce(82), /* else, reduce: Sum */
			reduce(82), /* if, reduce: Sum */
			reduce(82), /* ,, reduce: Sum */
			reduce(82), /* for, reduce: Sum */
			nil,        /* in */
			reduce(82), /* function, reduce: Sum */
			reduce(82), /* local, reduce: Sum */
			reduce(82), /* ::, reduce: Sum */
			nil,        /* . */
			nil,        /* : */
			reduce(82), /* or, reduce: Sum */
			reduce(82), /* and, reduce: Sum */
			reduce(82), /* <, reduce: Sum */
			reduce(82), /* <=, reduce: Sum */
			reduce(82), /* >, reduce: Sum */
			reduce(82), /* >=, reduce: Sum */
			reduce(82), /* ==, reduce: Sum */
			reduce(82), /* ~=, reduce: Sum */
			reduce(82), /* |, reduce: Sum */
			reduce(82), /* ~, reduce: Sum */
			reduce(82), /* &, reduce: Sum */
			reduce(82), /* .., reduce: Sum */
			reduce(82), /* <<, reduce: Sum */
			reduce(82), /* >>, reduce: Sum */
			reduce(82), /* +, reduce: Sum */
			reduce(82), /* -, reduce: Sum */
			shift(220), /* * */
			shift(221), /* / */
			shift(222), /* % */
			shift(223), /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(82), /* (, reduce: Sum */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(82), /* ident, reduce: Sum */
		},
	},
	actionRow{ // S2092
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(88), /* return, reduce: Term */
			reduce(88), /* ;, reduce: Term */
			nil,        /* empty */
			nil,        /* = */
			reduce(88), /* break, reduce: Term */
			reduce(88), /* goto, reduce: Term */
			reduce(88), /* do, reduce: Term */
			reduce(88), /* end, reduce: Term */
			reduce(88), /* while, reduce: Term */
			reduce(88), /* repeat, reduce: Term */
			nil,        /* until */
			nil,        /* then */
			reduce(88), /* elseif, reduce: Term */
			reduce(88), /* else, reduce: Term */
			reduce(88), /* if, reduce: Term */
			reduce(88), /* ,, reduce: Term */
			reduce(88), /* for, reduce: Term */
			nil,        /* in */
			reduce(88), /* function, reduce: Term */
			reduce(88), /* local, reduce: Term */
			reduce(88), /* ::, reduce: Term */
			nil,        /* . */
			nil,        /* : */
			reduce(88), /* or, reduce: Term */
			reduce(88), /* and, reduce: Term */
			reduce(88), /* <, reduce: Term */
			reduce(88), /* <=, reduce: Term */
			reduce(88), /* >, reduce: Term */
			reduce(88), /* >=, reduce: Term */
			reduce(88), /* ==, reduce: Term */
			reduce(88), /* ~=, reduce: Term */
			reduce(88), /* |, reduce: Term */
			reduce(88), /* ~, reduce: Term */
			reduce(88), /* &, reduce: Term */
			reduce(88), /* .., reduce: Term */
			reduce(88), /* <<, reduce: Term */
			reduce(88), /* >>, reduce: Term */
			reduce(88), /* +, reduce: Term */
			reduce(88), /* -, reduce: Term */
			reduce(88), /* *, reduce: Term */
			reduce(88), /* /, reduce: Term */
			reduce(88), /* %, reduce: Term */
			reduce(88), /* //, reduce: Term */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(88), /* (, reduce: Term */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(88), /* ident, reduce: Term */
		},
	},
	actionRow{ // S2093
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(96), /* return, reduce: Power */
			reduce(96), /* ;, reduce: Power */
			nil,        /* empty */
			nil,        /* = */
			reduce(96), /* break, reduce: Power */
			reduce(96), /* goto, reduce: Power */
			reduce(96), /* do, reduce: Power */
			reduce(96), /* end, reduce: Power */
			reduce(96), /* while, reduce: Power */
			reduce(96), /* repeat, reduce: Power */
			nil,        /* until */
			nil,        /* then */
			reduce(96), /* elseif, reduce: Power */
			reduce(96), /* else, reduce: Power */
			reduce(96), /* if, reduce: Power */
			reduce(96), /* ,, reduce: Power */
			reduce(96), /* for, reduce: Power */
			nil,        /* in */
			reduce(96), /* function, reduce: Power */
			reduce(96), /* local, reduce: Power */
			reduce(96), /* ::, reduce: Power */
			nil,        /* . */
			nil,        /* : */
			reduce(96), /* or, reduce: Power */
			reduce(96), /* and, reduce: Power */
			reduce(96), /* <, reduce: Power */
			reduce(96), /* <=, reduce: Power */
			reduce(96), /* >, reduce: Power */
			reduce(96), /* >=, reduce: Power */
			reduce(96), /* ==, reduce: Power */
			reduce(96), /* ~=, reduce: Power */
			reduce(96), /* |, reduce: Power */
			reduce(96), /* ~, reduce: Power */
			reduce(96), /* &, reduce: Power */
			reduce(96), /* .., reduce: Power */
			reduce(96), /* <<, reduce: Power */
			reduce(96), /* >>, reduce: Power */
			reduce(96), /* +, reduce: Power */
			reduce(96), /* -, reduce: Power */
			reduce(96), /* *, reduce: Power */
			reduce(96), /* /, reduce: Power */
			reduce(96), /* %, reduce: Power */
			reduce(96), /* //, reduce: Power */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(96), /* (, reduce: Power */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(96), /* ident, reduce: Power */
		},
	},
	actionRow{ // S2094
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(99), /* return, reduce: Var */
			reduce(99), /* ;, reduce: Var */
			nil,        /* empty */
			nil,        /* = */
			reduce(99), /* break, reduce: Var */
			reduce(99), /* goto, reduce: Var */
			reduce(99), /* do, reduce: Var */
			reduce(99), /* end, reduce: Var */
			reduce(99), /* while, reduce: Var */
			reduce(99), /* repeat, reduce: Var */
			nil,        /* until */
			nil,        /* then */
			reduce(99), /* elseif, reduce: Var */
			reduce(99), /* else, reduce: Var */
			reduce(99), /* if, reduce: Var */
			reduce(99), /* ,, reduce: Var */
			reduce(99), /* for, reduce: Var */
			nil,        /* in */
			reduce(99), /* function, reduce: Var */
			reduce(99), /* local, reduce: Var */
			reduce(99), /* ::, reduce: Var */
			reduce(99), /* ., reduce: Var */
			reduce(99), /* :, reduce: Var */
			reduce(99), /* or, reduce: Var */
			reduce(99), /* and, reduce: Var */
			reduce(99), /* <, reduce: Var */
			reduce(99), /* <=, reduce: Var */
			reduce(99), /* >, reduce: Var */
			reduce(99), /* >=, reduce: Var */
			reduce(99), /* ==, reduce: Var */
			reduce(99), /* ~=, reduce: Var */
			reduce(99), /* |, reduce: Var */
			reduce(99), /* ~, reduce: Var */
			reduce(99), /* &, reduce: Var */
			reduce(99), /* .., reduce: Var */
			reduce(99), /* <<, reduce: Var */
			reduce(99), /* >>, reduce: Var */
			reduce(99), /* +, reduce: Var */
			reduce(99), /* -, reduce: Var */
			reduce(99), /* *, reduce: Var */
			reduce(99), /* /, reduce: Var */
			reduce(99), /* %, reduce: Var */
			reduce(99), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(99), /* ^, reduce: Var */
			reduce(99), /* [, reduce: Var */
			nil,        /* ] */
			reduce(99), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(99), /* string, reduce: Var */
			reduce(99), /* {, reduce: Var */
			nil,        /* } */
			reduce(99), /* ident, reduce: Var */
		},
	},
	actionRow{ // S2095
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(1986), /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			shift(1988), /* string */
			shift(1990), /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S2096
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			shift(851),  /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			shift(2150), /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S2097
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(876),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(2151), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S2098
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(115), /* return, reduce: Args */
			reduce(115), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			reduce(115), /* break, reduce: Args */
			reduce(115), /* goto, reduce: Args */
			reduce(115), /* do, reduce: Args */
			reduce(115), /* end, reduce: Args */
			reduce(115), /* while, reduce: Args */
			reduce(115), /* repeat, reduce: Args */
			nil,         /* until */
			nil,         /* then */
			reduce(115), /* elseif, reduce: Args */
			reduce(115), /* else, reduce: Args */
			reduce(115), /* if, reduce: Args */
			reduce(115), /* ,, reduce: Args */
			reduce(115), /* for, reduce: Args */
			nil,         /* in */
			reduce(115), /* function, reduce: Args */
			reduce(115), /* local, reduce: Args */
			reduce(115), /* ::, reduce: Args */
			reduce(115), /* ., reduce: Args */
			reduce(115), /* :, reduce: Args */
			reduce(115), /* or, reduce: Args */
			reduce(115), /* and, reduce: Args */
			reduce(115), /* <, reduce: Args */
			reduce(115), /* <=, reduce: Args */
			reduce(115), /* >, reduce: Args */
			reduce(115), /* >=, reduce: Args */
			reduce(115), /* ==, reduce: Args */
			reduce(115), /* ~=, reduce: Args */
			reduce(115), /* |, reduce: Args */
			reduce(115), /* ~, reduce: Args */
			reduce(115), /* &, reduce: Args */
			reduce(115), /* .., reduce: Args */
			reduce(115), /* <<, reduce: Args */
			reduce(115), /* >>, reduce: Args */
			reduce(115), /* +, reduce: Args */
			reduce(115), /* -, reduce: Args */
			reduce(115), /* *, reduce: Args */
			reduce(115), /* /, reduce: Args */
			reduce(115), /* %, reduce: Args */
			reduce(115), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(115), /* ^, reduce: Args */
			reduce(115), /* [, reduce: Args */
			nil,         /* ] */
			reduce(115), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(115), /* string, reduce: Args */
			reduce(115), /* {, reduce: Args */
			nil,         /* } */
			reduce(115), /* ident, reduce: Args */
		},
	},
	actionRow{ // S2099
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			shift(569),  /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(570),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			shift(2152), /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S2100
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(102), /* return, reduce: PrefixExp */
			reduce(102), /* ;, reduce: PrefixExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(102), /* break, reduce: PrefixExp */
			reduce(102), /* goto, reduce: PrefixExp */
			reduce(102), /* do, reduce: PrefixExp */
			reduce(102), /* end, reduce: PrefixExp */
			reduce(102), /* while, reduce: PrefixExp */
			reduce(102), /* repeat, reduce: PrefixExp */
			nil,         /* until */
			nil,         /* then */
			reduce(102), /* elseif, reduce: PrefixExp */
			reduce(102), /* else, reduce: PrefixExp */
			reduce(102), /* if, reduce: PrefixExp */
			reduce(102), /* ,, reduce: PrefixExp */
			reduce(102), /* for, reduce: PrefixExp */
			nil,         /* in */
			reduce(102), /* function, reduce: PrefixExp */
			reduce(102), /* local, reduce: PrefixExp */
			reduce(102), /* ::, reduce: PrefixExp */
			reduce(102), /* ., reduce: PrefixExp */
			reduce(102), /* :, reduce: PrefixExp */
			reduce(102), /* or, reduce: PrefixExp */
			reduce(102), /* and, reduce: PrefixExp */
			reduce(102), /* <, reduce: PrefixExp */
			reduce(102), /* <=, reduce: PrefixExp */
			reduce(102), /* >, reduce: PrefixExp */
			reduce(102), /* >=, reduce: PrefixExp */
			reduce(102), /* ==, reduce: PrefixExp */
			reduce(102), /* ~=, reduce: PrefixExp */
			reduce(102), /* |, reduce: PrefixExp */
			reduce(102), /* ~, reduce: PrefixExp */
			reduce(102), /* &, reduce: PrefixExp */
			reduce(102), /* .., reduce: PrefixExp */
			reduce(102), /* <<, reduce: PrefixExp */
			reduce(102), /* >>, reduce: PrefixExp */
			reduce(102), /* +, reduce: PrefixExp */
			reduce(102), /* -, reduce: PrefixExp */
			reduce(102), /* *, reduce: PrefixExp */
			reduce(102), /* /, reduce: PrefixExp */
			reduce(102), /* %, reduce: PrefixExp */
			reduce(102), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(102), /* ^, reduce: PrefixExp */
			reduce(102), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(102), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(102), /* string, reduce: PrefixExp */
			reduce(102), /* {, reduce: PrefixExp */
			nil,         /* } */
			reduce(102), /* ident, reduce: PrefixExp */
		},
	},
	actionRow{ // S2101
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(125), /* return, reduce: TableConstructor */
			reduce(125), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			reduce(125), /* break, reduce: TableConstructor */
			reduce(125), /* goto, reduce: TableConstructor */
			reduce(125), /* do, reduce: TableConstructor */
			reduce(125), /* end, reduce: TableConstructor */
			reduce(125), /* while, reduce: TableConstructor */
			reduce(125), /* repeat, reduce: TableConstructor */
			nil,         /* until */
			nil,         /* then */
			reduce(125), /* elseif, reduce: TableConstructor */
			reduce(125), /* else, reduce: TableConstructor */
			reduce(125), /* if, reduce: TableConstructor */
			reduce(125), /* ,, reduce: TableConstructor */
			reduce(125), /* for, reduce: TableConstructor */
			nil,         /* in */
			reduce(125), /* function, reduce: TableConstructor */
			reduce(125), /* local, reduce: TableConstructor */
			reduce(125), /* ::, reduce: TableConstructor */
			nil,         /* . */
			nil,         /* : */
			reduce(125), /* or, reduce: TableConstructor */
			reduce(125), /* and, reduce: TableConstructor */
			reduce(125), /* <, reduce: TableConstructor */
			reduce(125), /* <=, reduce: TableConstructor */
			reduce(125), /* >, reduce: TableConstructor */
			reduce(125), /* >=, reduce: TableConstructor */
			reduce(125), /* ==, reduce: TableConstructor */
			reduce(125), /* ~=, reduce: TableConstructor */
			reduce(125), /* |, reduce: TableConstructor */
			reduce(125), /* ~, reduce: TableConstructor */
			reduce(125), /* &, reduce: TableConstructor */
			reduce(125), /* .., reduce: TableConstructor */
			reduce(125), /* <<, reduce: TableConstructor */
			reduce(125), /* >>, reduce: TableConstructor */
			reduce(125), /* +, reduce: TableConstructor */
			reduce(125), /* -, reduce: TableConstructor */
			reduce(125), /* *, reduce: TableConstructor */
			reduce(125), /* /, reduce: TableConstructor */
			reduce(125), /* %, reduce: TableConstructor */
			reduce(125), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(125), /* ^, reduce: TableConstructor */
			nil,         /* [ */
			nil,         /* ] */
			reduce(125), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(125), /* ident, reduce: TableConstructor */
		},
	},
	actionRow{ // S2102
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(238),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			shift(254),  /* [ */
			nil,         /* ] */
			shift(255),  /* ( */
			nil,         /* ) */
			shift(256),  /* nil */
			shift(257),  /* true */
			shift(258),  /* false */
			shift(259),  /* ... */
			shift(260),  /* numdec */
			shift(261),  /* numhex */
			shift(262),  /* string */
			shift(265),  /* { */
			shift(2154), /* } */
			shift(268),  /* ident */
		},
	},
	actionRow{ // S2103
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(27), /* return, reduce: WhileStat */
			reduce(27), /* ;, reduce: WhileStat */
			nil,        /* empty */
			nil,        /* = */
			reduce(27), /* break, reduce: WhileStat */
			reduce(27), /* goto, reduce: WhileStat */
			reduce(27), /* do, reduce: WhileStat */
			reduce(27), /* end, reduce: WhileStat */
			reduce(27), /* while, reduce: WhileStat */
			reduce(27), /* repeat, reduce: WhileStat */
			nil,        /* until */
			nil,        /* then */
			reduce(27), /* elseif, reduce: WhileStat */
			reduce(27), /* else, reduce: WhileStat */
			reduce(27), /* if, reduce: WhileStat */
			nil,        /* , */
			reduce(27), /* for, reduce: WhileStat */
			nil,        /* in */
			reduce(27), /* function, reduce: WhileStat */
			reduce(27), /* local, reduce: WhileStat */
			reduce(27), /* ::, reduce: WhileStat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(27), /* (, reduce: WhileStat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(27), /* ident, reduce: WhileStat */
		},
	},
	actionRow{ // S2104
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1997), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(2013), /* ( */
			nil,         /* ) */
			shift(2014), /* nil */
			shift(2015), /* true */
			shift(2016), /* false */
			shift(2017), /* ... */
			shift(2018), /* numdec */
			shift(2019), /* numhex */
			shift(2020), /* string */
			shift(2023), /* { */
			nil,         /* } */
			shift(2024), /* ident */
		},
	},
	actionRow{ // S2105
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(119), /* return, reduce: FunctionDef */
			reduce(119), /* ;, reduce: FunctionDef */
			nil,         /* empty */
			nil,         /* = */
			reduce(119), /* break, reduce: FunctionDef */
			reduce(119), /* goto, reduce: FunctionDef */
			reduce(119), /* do, reduce: FunctionDef */
			reduce(119), /* end, reduce: FunctionDef */
			reduce(119), /* while, reduce: FunctionDef */
			reduce(119), /* repeat, reduce: FunctionDef */
			nil,         /* until */
			nil,         /* then */
			reduce(119), /* elseif, reduce: FunctionDef */
			reduce(119), /* else, reduce: FunctionDef */
			reduce(119), /* if, reduce: FunctionDef */
			nil,         /* , */
			reduce(119), /* for, reduce: FunctionDef */
			nil,         /* in */
			reduce(119), /* function, reduce: FunctionDef */
			reduce(119), /* local, reduce: FunctionDef */
			reduce(119), /* ::, reduce: FunctionDef */
			nil,         /* . */
			nil,         /* : */
			reduce(119), /* or, reduce: FunctionDef */
			reduce(119), /* and, reduce: FunctionDef */
			reduce(119), /* <, reduce: FunctionDef */
			reduce(119), /* <=, reduce: FunctionDef */
			reduce(119), /* >, reduce: FunctionDef */
			reduce(119), /* >=, reduce: FunctionDef */
			reduce(119), /* ==, reduce: FunctionDef */
			reduce(119), /* ~=, reduce: FunctionDef */
			reduce(119), /* |, reduce: FunctionDef */
			reduce(119), /* ~, reduce: FunctionDef */
			reduce(119), /* &, reduce: FunctionDef */
			reduce(119), /* .., reduce: FunctionDef */
			reduce(119), /* <<, reduce: FunctionDef */
			reduce(119), /* >>, reduce: FunctionDef */
			reduce(119), /* +, reduce: FunctionDef */
			reduce(119), /* -, reduce: FunctionDef */
			reduce(119), /* *, reduce: FunctionDef */
			reduce(119), /* /, reduce: FunctionDef */
			reduce(119), /* %, reduce: FunctionDef */
			reduce(119), /* //, reduce: FunctionDef */
			nil,         /* not */
			nil,         /* # */
			reduce(119), /* ^, reduce: FunctionDef */
			nil,         /* [ */
			nil,         /* ] */
			reduce(119), /* (, reduce: FunctionDef */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(119), /* ident, reduce: FunctionDef */
		},
	},
	actionRow{ // S2106
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			reduce(123), /* ), reduce: ParList */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			shift(521),  /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			shift(523),  /* ident */
		},
	},
	actionRow{ // S2107
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1997), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(2013), /* ( */
			nil,         /* ) */
			shift(2014), /* nil */
			shift(2015), /* true */
			shift(2016), /* false */
			shift(2017), /* ... */
			shift(2018), /* numdec */
			shift(2019), /* numhex */
			shift(2020), /* string */
			shift(2023), /* { */
			nil,         /* } */
			shift(2024), /* ident */
		},
	},
	actionRow{ // S2108
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1997), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(2013), /* ( */
			nil,         /* ) */
			shift(2014), /* nil */
			shift(2015), /* true */
			shift(2016), /* false */
			shift(2017), /* ... */
			shift(2018), /* numdec */
			shift(2019), /* numhex */
			shift(2020), /* string */
			shift(2023), /* { */
			nil,         /* } */
			shift(2024), /* ident */
		},
	},
	actionRow{ // S2109
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1997), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(2013), /* ( */
			nil,         /* ) */
			shift(2014), /* nil */
			shift(2015), /* true */
			shift(2016), /* false */
			shift(2017), /* ... */
			shift(2018), /* numdec */
			shift(2019), /* numhex */
			shift(2020), /* string */
			shift(2023), /* { */
			nil,         /* } */
			shift(2024), /* ident */
		},
	},
	actionRow{ // S2110
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1997), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(2013), /* ( */
			nil,         /* ) */
			shift(2014), /* nil */
			shift(2015), /* true */
			shift(2016), /* false */
			shift(2017), /* ... */
			shift(2018), /* numdec */
			shift(2019), /* numhex */
			shift(2020), /* string */
			shift(2023), /* { */
			nil,         /* } */
			shift(2024), /* ident */
		},
	},
	actionRow{ // S2111
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1997), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(2013), /* ( */
			nil,         /* ) */
			shift(2014), /* nil */
			shift(2015), /* true */
			shift(2016), /* false */
			shift(2017), /* ... */
			shift(2018), /* numdec */
			shift(2019), /* numhex */
			shift(2020), /* string */
			shift(2023), /* { */
			nil,         /* } */
			shift(2024), /* ident */
		},
	},
	actionRow{ // S2112
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1997), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(2013), /* ( */
			nil,         /* ) */
			shift(2014), /* nil */
			shift(2015), /* true */
			shift(2016), /* false */
			shift(2017), /* ... */
			shift(2018), /* numdec */
			shift(2019), /* numhex */
			shift(2020), /* string */
			shift(2023), /* { */
			nil,         /* } */
			shift(2024), /* ident */
		},
	},
	actionRow{ // S2113
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1997), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(2013), /* ( */
			nil,         /* ) */
			shift(2014), /* nil */
			shift(2015), /* true */
			shift(2016), /* false */
			shift(2017), /* ... */
			shift(2018), /* numdec */
			shift(2019), /* numhex */
			shift(2020), /* string */
			shift(2023), /* { */
			nil,         /* } */
			shift(2024), /* ident */
		},
	},
	actionRow{ // S2114
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1997), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(2013), /* ( */
			nil,         /* ) */
			shift(2014), /* nil */
			shift(2015), /* true */
			shift(2016), /* false */
			shift(2017), /* ... */
			shift(2018), /* numdec */
			shift(2019), /* numhex */
			shift(2020), /* string */
			shift(2023), /* { */
			nil,         /* } */
			shift(2024), /* ident */
		},
	},
	actionRow{ // S2115
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1997), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(2013), /* ( */
			nil,         /* ) */
			shift(2014), /* nil */
			shift(2015), /* true */
			shift(2016), /* false */
			shift(2017), /* ... */
			shift(2018), /* numdec */
			shift(2019), /* numhex */
			shift(2020), /* string */
			shift(2023), /* { */
			nil,         /* } */
			shift(2024), /* ident */
		},
	},
	actionRow{ // S2116
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(93), /* return, reduce: Factor */
			reduce(93), /* ;, reduce: Factor */
			nil,        /* empty */
			nil,        /* = */
			reduce(93), /* break, reduce: Factor */
			reduce(93), /* goto, reduce: Factor */
			reduce(93), /* do, reduce: Factor */
			reduce(93), /* end, reduce: Factor */
			reduce(93), /* while, reduce: Factor */
			reduce(93), /* repeat, reduce: Factor */
			nil,        /* until */
			nil,        /* then */
			reduce(93), /* elseif, reduce: Factor */
			reduce(93), /* else, reduce: Factor */
			reduce(93), /* if, reduce: Factor */
			nil,        /* , */
			reduce(93), /* for, reduce: Factor */
			nil,        /* in */
			reduce(93), /* function, reduce: Factor */
			reduce(93), /* local, reduce: Factor */
			reduce(93), /* ::, reduce: Factor */
			nil,        /* . */
			nil,        /* : */
			reduce(93), /* or, reduce: Factor */
			reduce(93), /* and, reduce: Factor */
			reduce(93), /* <, reduce: Factor */
			reduce(93), /* <=, reduce: Factor */
			reduce(93), /* >, reduce: Factor */
			reduce(93), /* >=, reduce: Factor */
			reduce(93), /* ==, reduce: Factor */
			reduce(93), /* ~=, reduce: Factor */
			reduce(93), /* |, reduce: Factor */
			reduce(93), /* ~, reduce: Factor */
			reduce(93), /* &, reduce: Factor */
			reduce(93), /* .., reduce: Factor */
			reduce(93), /* <<, reduce: Factor */
			reduce(93), /* >>, reduce: Factor */
			reduce(93), /* +, reduce: Factor */
			reduce(93), /* -, reduce: Factor */
			reduce(93), /* *, reduce: Factor */
			reduce(93), /* /, reduce: Factor */
			reduce(93), /* %, reduce: Factor */
			reduce(93), /* //, reduce: Factor */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(93), /* (, reduce: Factor */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(93), /* ident, reduce: Factor */
		},
	},
	actionRow{ // S2117
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(1997), /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(2013), /* ( */
			nil,         /* ) */
			shift(2014), /* nil */
			shift(2015), /* true */
			shift(2016), /* false */
			shift(2017), /* ... */
			shift(2018), /* numdec */
			shift(2019), /* numhex */
			shift(2020), /* string */
			shift(2023), /* { */
			nil,         /* } */
			shift(2024), /* ident */
		},
	},
	actionRow{ // S2118
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			shift(2024), /* ident */
		},
	},
	actionRow{ // S2119
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			shift(426), /* ident */
		},
	},
	actionRow{ // S2120
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(430), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(446), /* ( */
			nil,        /* ) */
			shift(447), /* nil */
			shift(448), /* true */
			shift(449), /* false */
			shift(450), /* ... */
			shift(451), /* numdec */
			shift(452), /* numhex */
			shift(453), /* string */
			shift(456), /* { */
			nil,        /* } */
			shift(457), /* ident */
		},
	},
	actionRow{ // S2121
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(462),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(478),  /* ( */
			shift(2171), /* ) */
			shift(480),  /* nil */
			shift(481),  /* true */
			shift(482),  /* false */
			shift(483),  /* ... */
			shift(484),  /* numdec */
			shift(485),  /* numhex */
			shift(486),  /* string */
			shift(489),  /* { */
			nil,         /* } */
			shift(490),  /* ident */
		},
	},
	actionRow{ // S2122
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(103), /* return, reduce: FunctionCall */
			reduce(103), /* ;, reduce: FunctionCall */
			nil,         /* empty */
			nil,         /* = */
			reduce(103), /* break, reduce: FunctionCall */
			reduce(103), /* goto, reduce: FunctionCall */
			reduce(103), /* do, reduce: FunctionCall */
			reduce(103), /* end, reduce: FunctionCall */
			reduce(103), /* while, reduce: FunctionCall */
			reduce(103), /* repeat, reduce: FunctionCall */
			nil,         /* until */
			nil,         /* then */
			reduce(103), /* elseif, reduce: FunctionCall */
			reduce(103), /* else, reduce: FunctionCall */
			reduce(103), /* if, reduce: FunctionCall */
			nil,         /* , */
			reduce(103), /* for, reduce: FunctionCall */
			nil,         /* in */
			reduce(103), /* function, reduce: FunctionCall */
			reduce(103), /* local, reduce: FunctionCall */
			reduce(103), /* ::, reduce: FunctionCall */
			reduce(103), /* ., reduce: FunctionCall */
			reduce(103), /* :, reduce: FunctionCall */
			reduce(103), /* or, reduce: FunctionCall */
			reduce(103), /* and, reduce: FunctionCall */
			reduce(103), /* <, reduce: FunctionCall */
			reduce(103), /* <=, reduce: FunctionCall */
			reduce(103), /* >, reduce: FunctionCall */
			reduce(103), /* >=, reduce: FunctionCall */
			reduce(103), /* ==, reduce: FunctionCall */
			reduce(103), /* ~=, reduce: FunctionCall */
			reduce(103), /* |, reduce: FunctionCall */
			reduce(103), /* ~, reduce: FunctionCall */
			reduce(103), /* &, reduce: FunctionCall */
			reduce(103), /* .., reduce: FunctionCall */
			reduce(103), /* <<, reduce: FunctionCall */
			reduce(103), /* >>, reduce: FunctionCall */
			reduce(103), /* +, reduce: FunctionCall */
			reduce(103), /* -, reduce: FunctionCall */
			reduce(103), /* *, reduce: FunctionCall */
			reduce(103), /* /, reduce: FunctionCall */
			reduce(103), /* %, reduce: FunctionCall */
			reduce(103), /* //, reduce: FunctionCall */
			nil,         /* not */
			nil,         /* # */
			reduce(103), /* ^, reduce: FunctionCall */
			reduce(103), /* [, reduce: FunctionCall */
			nil,         /* ] */
			reduce(103), /* (, reduce: FunctionCall */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(103), /* string, reduce: FunctionCall */
			reduce(103), /* {, reduce: FunctionCall */
			nil,         /* } */
			reduce(103), /* ident, reduce: FunctionCall */
		},
	},
	actionRow{ // S2123
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(118), /* return, reduce: Args */
			reduce(118), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			reduce(118), /* break, reduce: Args */
			reduce(118), /* goto, reduce: Args */
			reduce(118), /* do, reduce: Args */
			reduce(118), /* end, reduce: Args */
			reduce(118), /* while, reduce: Args */
			reduce(118), /* repeat, reduce: Args */
			nil,         /* until */
			nil,         /* then */
			reduce(118), /* elseif, reduce: Args */
			reduce(118), /* else, reduce: Args */
			reduce(118), /* if, reduce: Args */
			nil,         /* , */
			reduce(118), /* for, reduce: Args */
			nil,         /* in */
			reduce(118), /* function, reduce: Args */
			reduce(118), /* local, reduce: Args */
			reduce(118), /* ::, reduce: Args */
			reduce(118), /* ., reduce: Args */
			reduce(118), /* :, reduce: Args */
			reduce(118), /* or, reduce: Args */
			reduce(118), /* and, reduce: Args */
			reduce(118), /* <, reduce: Args */
			reduce(118), /* <=, reduce: Args */
			reduce(118), /* >, reduce: Args */
			reduce(118), /* >=, reduce: Args */
			reduce(118), /* ==, reduce: Args */
			reduce(118), /* ~=, reduce: Args */
			reduce(118), /* |, reduce: Args */
			reduce(118), /* ~, reduce: Args */
			reduce(118), /* &, reduce: Args */
			reduce(118), /* .., reduce: Args */
			reduce(118), /* <<, reduce: Args */
			reduce(118), /* >>, reduce: Args */
			reduce(118), /* +, reduce: Args */
			reduce(118), /* -, reduce: Args */
			reduce(118), /* *, reduce: Args */
			reduce(118), /* /, reduce: Args */
			reduce(118), /* %, reduce: Args */
			reduce(118), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(118), /* ^, reduce: Args */
			reduce(118), /* [, reduce: Args */
			nil,         /* ] */
			reduce(118), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(118), /* string, reduce: Args */
			reduce(118), /* {, reduce: Args */
			nil,         /* } */
			reduce(118), /* ident, reduce: Args */
		},
	},
	actionRow{ // S2124
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(117), /* return, reduce: Args */
			reduce(117), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			reduce(117), /* break, reduce: Args */
			reduce(117), /* goto, reduce: Args */
			reduce(117), /* do, reduce: Args */
			reduce(117), /* end, reduce: Args */
			reduce(117), /* while, reduce: Args */
			reduce(117), /* repeat, reduce: Args */
			nil,         /* until */
			nil,         /* then */
			reduce(117), /* elseif, reduce: Args */
			reduce(117), /* else, reduce: Args */
			reduce(117), /* if, reduce: Args */
			nil,         /* , */
			reduce(117), /* for, reduce: Args */
			nil,         /* in */
			reduce(117), /* function, reduce: Args */
			reduce(117), /* local, reduce: Args */
			reduce(117), /* ::, reduce: Args */
			reduce(117), /* ., reduce: Args */
			reduce(117), /* :, reduce: Args */
			reduce(117), /* or, reduce: Args */
			reduce(117), /* and, reduce: Args */
			reduce(117), /* <, reduce: Args */
			reduce(117), /* <=, reduce: Args */
			reduce(117), /* >, reduce: Args */
			reduce(117), /* >=, reduce: Args */
			reduce(117), /* ==, reduce: Args */
			reduce(117), /* ~=, reduce: Args */
			reduce(117), /* |, reduce: Args */
			reduce(117), /* ~, reduce: Args */
			reduce(117), /* &, reduce: Args */
			reduce(117), /* .., reduce: Args */
			reduce(117), /* <<, reduce: Args */
			reduce(117), /* >>, reduce: Args */
			reduce(117), /* +, reduce: Args */
			reduce(117), /* -, reduce: Args */
			reduce(117), /* *, reduce: Args */
			reduce(117), /* /, reduce: Args */
			reduce(117), /* %, reduce: Args */
			reduce(117), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(117), /* ^, reduce: Args */
			reduce(117), /* [, reduce: Args */
			nil,         /* ] */
			reduce(117), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(117), /* string, reduce: Args */
			reduce(117), /* {, reduce: Args */
			nil,         /* } */
			reduce(117), /* ident, reduce: Args */
		},
	},
	actionRow{ // S2125
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(238), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			shift(254), /* [ */
			nil,        /* ] */
			shift(255), /* ( */
			nil,        /* ) */
			shift(256), /* nil */
			shift(257), /* true */
			shift(258), /* false */
			shift(259), /* ... */
			shift(260), /* numdec */
			shift(261), /* numhex */
			shift(262), /* string */
			shift(265), /* { */
			nil,        /* } */
			shift(268), /* ident */
		},
	},
	actionRow{ // S2126
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			shift(492),  /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(2173), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S2127
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			shift(569),  /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(570),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			shift(2174), /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S2128
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(34), /* return, reduce: Else */
			reduce(34), /* ;, reduce: Else */
			nil,        /* empty */
			nil,        /* = */
			reduce(34), /* break, reduce: Else */
			reduce(34), /* goto, reduce: Else */
			reduce(34), /* do, reduce: Else */
			reduce(34), /* end, reduce: Else */
			reduce(34), /* while, reduce: Else */
			reduce(34), /* repeat, reduce: Else */
			nil,        /* until */
			nil,        /* then */
			reduce(34), /* elseif, reduce: Else */
			reduce(34), /* else, reduce: Else */
			reduce(34), /* if, reduce: Else */
			nil,        /* , */
			reduce(34), /* for, reduce: Else */
			nil,        /* in */
			reduce(34), /* function, reduce: Else */
			reduce(34), /* local, reduce: Else */
			reduce(34), /* ::, reduce: Else */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(34), /* (, reduce: Else */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(34), /* ident, reduce: Else */
		},
	},
	actionRow{ // S2129
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			nil,        /* end */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			shift(116), /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			shift(48),  /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			shift(52),  /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			shift(56),  /* not */
			shift(57),  /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			shift(132), /* ( */
			nil,        /* ) */
			shift(133), /* nil */
			shift(134), /* true */
			shift(135), /* false */
			shift(136), /* ... */
			shift(137), /* numdec */
			shift(138), /* numhex */
			shift(139), /* string */
			shift(142), /* { */
			nil,        /* } */
			shift(143), /* ident */
		},
	},
	actionRow{ // S2130
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(35), /* return, reduce: IfStat */
			reduce(35), /* ;, reduce: IfStat */
			nil,        /* empty */
			nil,        /* = */
			reduce(35), /* break, reduce: IfStat */
			reduce(35), /* goto, reduce: IfStat */
			reduce(35), /* do, reduce: IfStat */
			reduce(35), /* end, reduce: IfStat */
			reduce(35), /* while, reduce: IfStat */
			reduce(35), /* repeat, reduce: IfStat */
			nil,        /* until */
			nil,        /* then */
			reduce(35), /* elseif, reduce: IfStat */
			reduce(35), /* else, reduce: IfStat */
			reduce(35), /* if, reduce: IfStat */
			nil,        /* , */
			reduce(35), /* for, reduce: IfStat */
			nil,        /* in */
			reduce(35), /* function, reduce: IfStat */
			reduce(35), /* local, reduce: IfStat */
			reduce(35), /* ::, reduce: IfStat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(35), /* (, reduce: IfStat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(35), /* ident, reduce: IfStat */
		},
	},
	actionRow{ // S2131
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S2132
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S2133
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S2134
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S2135
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(124), /* ,, reduce: FuncBody */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(124), /* or, reduce: FuncBody */
			reduce(124), /* and, reduce: FuncBody */
			reduce(124), /* <, reduce: FuncBody */
			reduce(124), /* <=, reduce: FuncBody */
			reduce(124), /* >, reduce: FuncBody */
			reduce(124), /* >=, reduce: FuncBody */
			reduce(124), /* ==, reduce: FuncBody */
			reduce(124), /* ~=, reduce: FuncBody */
			reduce(124), /* |, reduce: FuncBody */
			reduce(124), /* ~, reduce: FuncBody */
			reduce(124), /* &, reduce: FuncBody */
			reduce(124), /* .., reduce: FuncBody */
			reduce(124), /* <<, reduce: FuncBody */
			reduce(124), /* >>, reduce: FuncBody */
			reduce(124), /* +, reduce: FuncBody */
			reduce(124), /* -, reduce: FuncBody */
			reduce(124), /* *, reduce: FuncBody */
			reduce(124), /* /, reduce: FuncBody */
			reduce(124), /* %, reduce: FuncBody */
			reduce(124), /* //, reduce: FuncBody */
			nil,         /* not */
			nil,         /* # */
			reduce(124), /* ^, reduce: FuncBody */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S2136
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			reduce(124), /* do, reduce: FuncBody */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			reduce(124), /* ,, reduce: FuncBody */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(124), /* or, reduce: FuncBody */
			reduce(124), /* and, reduce: FuncBody */
			reduce(124), /* <, reduce: FuncBody */
			reduce(124), /* <=, reduce: FuncBody */
			reduce(124), /* >, reduce: FuncBody */
			reduce(124), /* >=, reduce: FuncBody */
			reduce(124), /* ==, reduce: FuncBody */
			reduce(124), /* ~=, reduce: FuncBody */
			reduce(124), /* |, reduce: FuncBody */
			reduce(124), /* ~, reduce: FuncBody */
			reduce(124), /* &, reduce: FuncBody */
			reduce(124), /* .., reduce: FuncBody */
			reduce(124), /* <<, reduce: FuncBody */
			reduce(124), /* >>, reduce: FuncBody */
			reduce(124), /* +, reduce: FuncBody */
			reduce(124), /* -, reduce: FuncBody */
			reduce(124), /* *, reduce: FuncBody */
			reduce(124), /* /, reduce: FuncBody */
			reduce(124), /* %, reduce: FuncBody */
			reduce(124), /* //, reduce: FuncBody */
			nil,         /* not */
			nil,         /* # */
			reduce(124), /* ^, reduce: FuncBody */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S2137
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(124), /* return, reduce: FuncBody */
			reduce(124), /* ;, reduce: FuncBody */
			nil,         /* empty */
			nil,         /* = */
			reduce(124), /* break, reduce: FuncBody */
			reduce(124), /* goto, reduce: FuncBody */
			reduce(124), /* do, reduce: FuncBody */
			reduce(124), /* end, reduce: FuncBody */
			reduce(124), /* while, reduce: FuncBody */
			reduce(124), /* repeat, reduce: FuncBody */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(124), /* if, reduce: FuncBody */
			reduce(124), /* ,, reduce: FuncBody */
			reduce(124), /* for, reduce: FuncBody */
			nil,         /* in */
			reduce(124), /* function, reduce: FuncBody */
			reduce(124), /* local, reduce: FuncBody */
			reduce(124), /* ::, reduce: FuncBody */
			nil,         /* . */
			nil,         /* : */
			reduce(124), /* or, reduce: FuncBody */
			reduce(124), /* and, reduce: FuncBody */
			reduce(124), /* <, reduce: FuncBody */
			reduce(124), /* <=, reduce: FuncBody */
			reduce(124), /* >, reduce: FuncBody */
			reduce(124), /* >=, reduce: FuncBody */
			reduce(124), /* ==, reduce: FuncBody */
			reduce(124), /* ~=, reduce: FuncBody */
			reduce(124), /* |, reduce: FuncBody */
			reduce(124), /* ~, reduce: FuncBody */
			reduce(124), /* &, reduce: FuncBody */
			reduce(124), /* .., reduce: FuncBody */
			reduce(124), /* <<, reduce: FuncBody */
			reduce(124), /* >>, reduce: FuncBody */
			reduce(124), /* +, reduce: FuncBody */
			reduce(124), /* -, reduce: FuncBody */
			reduce(124), /* *, reduce: FuncBody */
			reduce(124), /* /, reduce: FuncBody */
			reduce(124), /* %, reduce: FuncBody */
			reduce(124), /* //, reduce: FuncBody */
			nil,         /* not */
			nil,         /* # */
			reduce(124), /* ^, reduce: FuncBody */
			nil,         /* [ */
			nil,         /* ] */
			reduce(124), /* (, reduce: FuncBody */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(124), /* ident, reduce: FuncBody */
		},
	},
	actionRow{ // S2138
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(2181), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S2139
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(126), /* return, reduce: TableConstructor */
			reduce(126), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			reduce(126), /* break, reduce: TableConstructor */
			reduce(126), /* goto, reduce: TableConstructor */
			reduce(126), /* do, reduce: TableConstructor */
			reduce(126), /* end, reduce: TableConstructor */
			reduce(126), /* while, reduce: TableConstructor */
			reduce(126), /* repeat, reduce: TableConstructor */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(126), /* if, reduce: TableConstructor */
			nil,         /* , */
			reduce(126), /* for, reduce: TableConstructor */
			nil,         /* in */
			reduce(126), /* function, reduce: TableConstructor */
			reduce(126), /* local, reduce: TableConstructor */
			reduce(126), /* ::, reduce: TableConstructor */
			reduce(126), /* ., reduce: TableConstructor */
			reduce(126), /* :, reduce: TableConstructor */
			reduce(126), /* or, reduce: TableConstructor */
			reduce(126), /* and, reduce: TableConstructor */
			reduce(126), /* <, reduce: TableConstructor */
			reduce(126), /* <=, reduce: TableConstructor */
			reduce(126), /* >, reduce: TableConstructor */
			reduce(126), /* >=, reduce: TableConstructor */
			reduce(126), /* ==, reduce: TableConstructor */
			reduce(126), /* ~=, reduce: TableConstructor */
			reduce(126), /* |, reduce: TableConstructor */
			reduce(126), /* ~, reduce: TableConstructor */
			reduce(126), /* &, reduce: TableConstructor */
			reduce(126), /* .., reduce: TableConstructor */
			reduce(126), /* <<, reduce: TableConstructor */
			reduce(126), /* >>, reduce: TableConstructor */
			reduce(126), /* +, reduce: TableConstructor */
			reduce(126), /* -, reduce: TableConstructor */
			reduce(126), /* *, reduce: TableConstructor */
			reduce(126), /* /, reduce: TableConstructor */
			reduce(126), /* %, reduce: TableConstructor */
			reduce(126), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(126), /* ^, reduce: TableConstructor */
			reduce(126), /* [, reduce: TableConstructor */
			nil,         /* ] */
			reduce(126), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(126), /* string, reduce: TableConstructor */
			reduce(126), /* {, reduce: TableConstructor */
			nil,         /* } */
			reduce(126), /* ident, reduce: TableConstructor */
		},
	},
	actionRow{ // S2140
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(2182), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S2141
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(124), /* return, reduce: FuncBody */
			reduce(124), /* ;, reduce: FuncBody */
			nil,         /* empty */
			nil,         /* = */
			reduce(124), /* break, reduce: FuncBody */
			reduce(124), /* goto, reduce: FuncBody */
			reduce(124), /* do, reduce: FuncBody */
			nil,         /* end */
			reduce(124), /* while, reduce: FuncBody */
			reduce(124), /* repeat, reduce: FuncBody */
			reduce(124), /* until, reduce: FuncBody */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(124), /* if, reduce: FuncBody */
			reduce(124), /* ,, reduce: FuncBody */
			reduce(124), /* for, reduce: FuncBody */
			nil,         /* in */
			reduce(124), /* function, reduce: FuncBody */
			reduce(124), /* local, reduce: FuncBody */
			reduce(124), /* ::, reduce: FuncBody */
			nil,         /* . */
			nil,         /* : */
			reduce(124), /* or, reduce: FuncBody */
			reduce(124), /* and, reduce: FuncBody */
			reduce(124), /* <, reduce: FuncBody */
			reduce(124), /* <=, reduce: FuncBody */
			reduce(124), /* >, reduce: FuncBody */
			reduce(124), /* >=, reduce: FuncBody */
			reduce(124), /* ==, reduce: FuncBody */
			reduce(124), /* ~=, reduce: FuncBody */
			reduce(124), /* |, reduce: FuncBody */
			reduce(124), /* ~, reduce: FuncBody */
			reduce(124), /* &, reduce: FuncBody */
			reduce(124), /* .., reduce: FuncBody */
			reduce(124), /* <<, reduce: FuncBody */
			reduce(124), /* >>, reduce: FuncBody */
			reduce(124), /* +, reduce: FuncBody */
			reduce(124), /* -, reduce: FuncBody */
			reduce(124), /* *, reduce: FuncBody */
			reduce(124), /* /, reduce: FuncBody */
			reduce(124), /* %, reduce: FuncBody */
			reduce(124), /* //, reduce: FuncBody */
			nil,         /* not */
			nil,         /* # */
			reduce(124), /* ^, reduce: FuncBody */
			nil,         /* [ */
			nil,         /* ] */
			reduce(124), /* (, reduce: FuncBody */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(124), /* ident, reduce: FuncBody */
		},
	},
	actionRow{ // S2142
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(2183), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S2143
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(126), /* return, reduce: TableConstructor */
			reduce(126), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			reduce(126), /* break, reduce: TableConstructor */
			reduce(126), /* goto, reduce: TableConstructor */
			reduce(126), /* do, reduce: TableConstructor */
			nil,         /* end */
			reduce(126), /* while, reduce: TableConstructor */
			reduce(126), /* repeat, reduce: TableConstructor */
			reduce(126), /* until, reduce: TableConstructor */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(126), /* if, reduce: TableConstructor */
			nil,         /* , */
			reduce(126), /* for, reduce: TableConstructor */
			nil,         /* in */
			reduce(126), /* function, reduce: TableConstructor */
			reduce(126), /* local, reduce: TableConstructor */
			reduce(126), /* ::, reduce: TableConstructor */
			reduce(126), /* ., reduce: TableConstructor */
			reduce(126), /* :, reduce: TableConstructor */
			reduce(126), /* or, reduce: TableConstructor */
			reduce(126), /* and, reduce: TableConstructor */
			reduce(126), /* <, reduce: TableConstructor */
			reduce(126), /* <=, reduce: TableConstructor */
			reduce(126), /* >, reduce: TableConstructor */
			reduce(126), /* >=, reduce: TableConstructor */
			reduce(126), /* ==, reduce: TableConstructor */
			reduce(126), /* ~=, reduce: TableConstructor */
			reduce(126), /* |, reduce: TableConstructor */
			reduce(126), /* ~, reduce: TableConstructor */
			reduce(126), /* &, reduce: TableConstructor */
			reduce(126), /* .., reduce: TableConstructor */
			reduce(126), /* <<, reduce: TableConstructor */
			reduce(126), /* >>, reduce: TableConstructor */
			reduce(126), /* +, reduce: TableConstructor */
			reduce(126), /* -, reduce: TableConstructor */
			reduce(126), /* *, reduce: TableConstructor */
			reduce(126), /* /, reduce: TableConstructor */
			reduce(126), /* %, reduce: TableConstructor */
			reduce(126), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(126), /* ^, reduce: TableConstructor */
			reduce(126), /* [, reduce: TableConstructor */
			nil,         /* ] */
			reduce(126), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(126), /* string, reduce: TableConstructor */
			reduce(126), /* {, reduce: TableConstructor */
			nil,         /* } */
			reduce(126), /* ident, reduce: TableConstructor */
		},
	},
	actionRow{ // S2144
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(2184), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S2145
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* return */
			nil,        /* ; */
			nil,        /* empty */
			nil,        /* = */
			nil,        /* break */
			nil,        /* goto */
			nil,        /* do */
			reduce(30), /* end, reduce: ElseIf */
			nil,        /* while */
			nil,        /* repeat */
			nil,        /* until */
			nil,        /* then */
			reduce(30), /* elseif, reduce: ElseIf */
			reduce(30), /* else, reduce: ElseIf */
			nil,        /* if */
			nil,        /* , */
			nil,        /* for */
			nil,        /* in */
			nil,        /* function */
			nil,        /* local */
			nil,        /* :: */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			nil,        /* ( */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			nil,        /* ident */
		},
	},
	actionRow{ // S2146
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(2185), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S2147
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(126), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(126), /* end, reduce: TableConstructor */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			reduce(126), /* elseif, reduce: TableConstructor */
			reduce(126), /* else, reduce: TableConstructor */
			nil,         /* if */
			reduce(126), /* ,, reduce: TableConstructor */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			reduce(126), /* ., reduce: TableConstructor */
			reduce(126), /* :, reduce: TableConstructor */
			reduce(126), /* or, reduce: TableConstructor */
			reduce(126), /* and, reduce: TableConstructor */
			reduce(126), /* <, reduce: TableConstructor */
			reduce(126), /* <=, reduce: TableConstructor */
			reduce(126), /* >, reduce: TableConstructor */
			reduce(126), /* >=, reduce: TableConstructor */
			reduce(126), /* ==, reduce: TableConstructor */
			reduce(126), /* ~=, reduce: TableConstructor */
			reduce(126), /* |, reduce: TableConstructor */
			reduce(126), /* ~, reduce: TableConstructor */
			reduce(126), /* &, reduce: TableConstructor */
			reduce(126), /* .., reduce: TableConstructor */
			reduce(126), /* <<, reduce: TableConstructor */
			reduce(126), /* >>, reduce: TableConstructor */
			reduce(126), /* +, reduce: TableConstructor */
			reduce(126), /* -, reduce: TableConstructor */
			reduce(126), /* *, reduce: TableConstructor */
			reduce(126), /* /, reduce: TableConstructor */
			reduce(126), /* %, reduce: TableConstructor */
			reduce(126), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(126), /* ^, reduce: TableConstructor */
			reduce(126), /* [, reduce: TableConstructor */
			nil,         /* ] */
			reduce(126), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(126), /* string, reduce: TableConstructor */
			reduce(126), /* {, reduce: TableConstructor */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S2148
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S2149
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(104), /* return, reduce: FunctionCall */
			reduce(104), /* ;, reduce: FunctionCall */
			nil,         /* empty */
			nil,         /* = */
			reduce(104), /* break, reduce: FunctionCall */
			reduce(104), /* goto, reduce: FunctionCall */
			reduce(104), /* do, reduce: FunctionCall */
			reduce(104), /* end, reduce: FunctionCall */
			reduce(104), /* while, reduce: FunctionCall */
			reduce(104), /* repeat, reduce: FunctionCall */
			nil,         /* until */
			nil,         /* then */
			reduce(104), /* elseif, reduce: FunctionCall */
			reduce(104), /* else, reduce: FunctionCall */
			reduce(104), /* if, reduce: FunctionCall */
			reduce(104), /* ,, reduce: FunctionCall */
			reduce(104), /* for, reduce: FunctionCall */
			nil,         /* in */
			reduce(104), /* function, reduce: FunctionCall */
			reduce(104), /* local, reduce: FunctionCall */
			reduce(104), /* ::, reduce: FunctionCall */
			reduce(104), /* ., reduce: FunctionCall */
			reduce(104), /* :, reduce: FunctionCall */
			reduce(104), /* or, reduce: FunctionCall */
			reduce(104), /* and, reduce: FunctionCall */
			reduce(104), /* <, reduce: FunctionCall */
			reduce(104), /* <=, reduce: FunctionCall */
			reduce(104), /* >, reduce: FunctionCall */
			reduce(104), /* >=, reduce: FunctionCall */
			reduce(104), /* ==, reduce: FunctionCall */
			reduce(104), /* ~=, reduce: FunctionCall */
			reduce(104), /* |, reduce: FunctionCall */
			reduce(104), /* ~, reduce: FunctionCall */
			reduce(104), /* &, reduce: FunctionCall */
			reduce(104), /* .., reduce: FunctionCall */
			reduce(104), /* <<, reduce: FunctionCall */
			reduce(104), /* >>, reduce: FunctionCall */
			reduce(104), /* +, reduce: FunctionCall */
			reduce(104), /* -, reduce: FunctionCall */
			reduce(104), /* *, reduce: FunctionCall */
			reduce(104), /* /, reduce: FunctionCall */
			reduce(104), /* %, reduce: FunctionCall */
			reduce(104), /* //, reduce: FunctionCall */
			nil,         /* not */
			nil,         /* # */
			reduce(104), /* ^, reduce: FunctionCall */
			reduce(104), /* [, reduce: FunctionCall */
			nil,         /* ] */
			reduce(104), /* (, reduce: FunctionCall */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(104), /* string, reduce: FunctionCall */
			reduce(104), /* {, reduce: FunctionCall */
			nil,         /* } */
			reduce(104), /* ident, reduce: FunctionCall */
		},
	},
	actionRow{ // S2150
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(98), /* return, reduce: Var */
			reduce(98), /* ;, reduce: Var */
			nil,        /* empty */
			nil,        /* = */
			reduce(98), /* break, reduce: Var */
			reduce(98), /* goto, reduce: Var */
			reduce(98), /* do, reduce: Var */
			reduce(98), /* end, reduce: Var */
			reduce(98), /* while, reduce: Var */
			reduce(98), /* repeat, reduce: Var */
			nil,        /* until */
			nil,        /* then */
			reduce(98), /* elseif, reduce: Var */
			reduce(98), /* else, reduce: Var */
			reduce(98), /* if, reduce: Var */
			reduce(98), /* ,, reduce: Var */
			reduce(98), /* for, reduce: Var */
			nil,        /* in */
			reduce(98), /* function, reduce: Var */
			reduce(98), /* local, reduce: Var */
			reduce(98), /* ::, reduce: Var */
			reduce(98), /* ., reduce: Var */
			reduce(98), /* :, reduce: Var */
			reduce(98), /* or, reduce: Var */
			reduce(98), /* and, reduce: Var */
			reduce(98), /* <, reduce: Var */
			reduce(98), /* <=, reduce: Var */
			reduce(98), /* >, reduce: Var */
			reduce(98), /* >=, reduce: Var */
			reduce(98), /* ==, reduce: Var */
			reduce(98), /* ~=, reduce: Var */
			reduce(98), /* |, reduce: Var */
			reduce(98), /* ~, reduce: Var */
			reduce(98), /* &, reduce: Var */
			reduce(98), /* .., reduce: Var */
			reduce(98), /* <<, reduce: Var */
			reduce(98), /* >>, reduce: Var */
			reduce(98), /* +, reduce: Var */
			reduce(98), /* -, reduce: Var */
			reduce(98), /* *, reduce: Var */
			reduce(98), /* /, reduce: Var */
			reduce(98), /* %, reduce: Var */
			reduce(98), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(98), /* ^, reduce: Var */
			reduce(98), /* [, reduce: Var */
			nil,        /* ] */
			reduce(98), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(98), /* string, reduce: Var */
			reduce(98), /* {, reduce: Var */
			nil,        /* } */
			reduce(98), /* ident, reduce: Var */
		},
	},
	actionRow{ // S2151
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(116), /* return, reduce: Args */
			reduce(116), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			reduce(116), /* break, reduce: Args */
			reduce(116), /* goto, reduce: Args */
			reduce(116), /* do, reduce: Args */
			reduce(116), /* end, reduce: Args */
			reduce(116), /* while, reduce: Args */
			reduce(116), /* repeat, reduce: Args */
			nil,         /* until */
			nil,         /* then */
			reduce(116), /* elseif, reduce: Args */
			reduce(116), /* else, reduce: Args */
			reduce(116), /* if, reduce: Args */
			reduce(116), /* ,, reduce: Args */
			reduce(116), /* for, reduce: Args */
			nil,         /* in */
			reduce(116), /* function, reduce: Args */
			reduce(116), /* local, reduce: Args */
			reduce(116), /* ::, reduce: Args */
			reduce(116), /* ., reduce: Args */
			reduce(116), /* :, reduce: Args */
			reduce(116), /* or, reduce: Args */
			reduce(116), /* and, reduce: Args */
			reduce(116), /* <, reduce: Args */
			reduce(116), /* <=, reduce: Args */
			reduce(116), /* >, reduce: Args */
			reduce(116), /* >=, reduce: Args */
			reduce(116), /* ==, reduce: Args */
			reduce(116), /* ~=, reduce: Args */
			reduce(116), /* |, reduce: Args */
			reduce(116), /* ~, reduce: Args */
			reduce(116), /* &, reduce: Args */
			reduce(116), /* .., reduce: Args */
			reduce(116), /* <<, reduce: Args */
			reduce(116), /* >>, reduce: Args */
			reduce(116), /* +, reduce: Args */
			reduce(116), /* -, reduce: Args */
			reduce(116), /* *, reduce: Args */
			reduce(116), /* /, reduce: Args */
			reduce(116), /* %, reduce: Args */
			reduce(116), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(116), /* ^, reduce: Args */
			reduce(116), /* [, reduce: Args */
			nil,         /* ] */
			reduce(116), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(116), /* string, reduce: Args */
			reduce(116), /* {, reduce: Args */
			nil,         /* } */
			reduce(116), /* ident, reduce: Args */
		},
	},
	actionRow{ // S2152
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(125), /* return, reduce: TableConstructor */
			reduce(125), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			reduce(125), /* break, reduce: TableConstructor */
			reduce(125), /* goto, reduce: TableConstructor */
			reduce(125), /* do, reduce: TableConstructor */
			reduce(125), /* end, reduce: TableConstructor */
			reduce(125), /* while, reduce: TableConstructor */
			reduce(125), /* repeat, reduce: TableConstructor */
			nil,         /* until */
			nil,         /* then */
			reduce(125), /* elseif, reduce: TableConstructor */
			reduce(125), /* else, reduce: TableConstructor */
			reduce(125), /* if, reduce: TableConstructor */
			reduce(125), /* ,, reduce: TableConstructor */
			reduce(125), /* for, reduce: TableConstructor */
			nil,         /* in */
			reduce(125), /* function, reduce: TableConstructor */
			reduce(125), /* local, reduce: TableConstructor */
			reduce(125), /* ::, reduce: TableConstructor */
			reduce(125), /* ., reduce: TableConstructor */
			reduce(125), /* :, reduce: TableConstructor */
			reduce(125), /* or, reduce: TableConstructor */
			reduce(125), /* and, reduce: TableConstructor */
			reduce(125), /* <, reduce: TableConstructor */
			reduce(125), /* <=, reduce: TableConstructor */
			reduce(125), /* >, reduce: TableConstructor */
			reduce(125), /* >=, reduce: TableConstructor */
			reduce(125), /* ==, reduce: TableConstructor */
			reduce(125), /* ~=, reduce: TableConstructor */
			reduce(125), /* |, reduce: TableConstructor */
			reduce(125), /* ~, reduce: TableConstructor */
			reduce(125), /* &, reduce: TableConstructor */
			reduce(125), /* .., reduce: TableConstructor */
			reduce(125), /* <<, reduce: TableConstructor */
			reduce(125), /* >>, reduce: TableConstructor */
			reduce(125), /* +, reduce: TableConstructor */
			reduce(125), /* -, reduce: TableConstructor */
			reduce(125), /* *, reduce: TableConstructor */
			reduce(125), /* /, reduce: TableConstructor */
			reduce(125), /* %, reduce: TableConstructor */
			reduce(125), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(125), /* ^, reduce: TableConstructor */
			reduce(125), /* [, reduce: TableConstructor */
			nil,         /* ] */
			reduce(125), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(125), /* string, reduce: TableConstructor */
			reduce(125), /* {, reduce: TableConstructor */
			nil,         /* } */
			reduce(125), /* ident, reduce: TableConstructor */
		},
	},
	actionRow{ // S2153
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(238),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			shift(254),  /* [ */
			nil,         /* ] */
			shift(255),  /* ( */
			nil,         /* ) */
			shift(256),  /* nil */
			shift(257),  /* true */
			shift(258),  /* false */
			shift(259),  /* ... */
			shift(260),  /* numdec */
			shift(261),  /* numhex */
			shift(262),  /* string */
			shift(265),  /* { */
			shift(2187), /* } */
			shift(268),  /* ident */
		},
	},
	actionRow{ // S2154
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(126), /* return, reduce: TableConstructor */
			reduce(126), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			reduce(126), /* break, reduce: TableConstructor */
			reduce(126), /* goto, reduce: TableConstructor */
			reduce(126), /* do, reduce: TableConstructor */
			reduce(126), /* end, reduce: TableConstructor */
			reduce(126), /* while, reduce: TableConstructor */
			reduce(126), /* repeat, reduce: TableConstructor */
			nil,         /* until */
			nil,         /* then */
			reduce(126), /* elseif, reduce: TableConstructor */
			reduce(126), /* else, reduce: TableConstructor */
			reduce(126), /* if, reduce: TableConstructor */
			reduce(126), /* ,, reduce: TableConstructor */
			reduce(126), /* for, reduce: TableConstructor */
			nil,         /* in */
			reduce(126), /* function, reduce: TableConstructor */
			reduce(126), /* local, reduce: TableConstructor */
			reduce(126), /* ::, reduce: TableConstructor */
			nil,         /* . */
			nil,         /* : */
			reduce(126), /* or, reduce: TableConstructor */
			reduce(126), /* and, reduce: TableConstructor */
			reduce(126), /* <, reduce: TableConstructor */
			reduce(126), /* <=, reduce: TableConstructor */
			reduce(126), /* >, reduce: TableConstructor */
			reduce(126), /* >=, reduce: TableConstructor */
			reduce(126), /* ==, reduce: TableConstructor */
			reduce(126), /* ~=, reduce: TableConstructor */
			reduce(126), /* |, reduce: TableConstructor */
			reduce(126), /* ~, reduce: TableConstructor */
			reduce(126), /* &, reduce: TableConstructor */
			reduce(126), /* .., reduce: TableConstructor */
			reduce(126), /* <<, reduce: TableConstructor */
			reduce(126), /* >>, reduce: TableConstructor */
			reduce(126), /* +, reduce: TableConstructor */
			reduce(126), /* -, reduce: TableConstructor */
			reduce(126), /* *, reduce: TableConstructor */
			reduce(126), /* /, reduce: TableConstructor */
			reduce(126), /* %, reduce: TableConstructor */
			reduce(126), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(126), /* ^, reduce: TableConstructor */
			nil,         /* [ */
			nil,         /* ] */
			reduce(126), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(126), /* ident, reduce: TableConstructor */
		},
	},
	actionRow{ // S2155
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(56),  /* return, reduce: Exp */
			reduce(56),  /* ;, reduce: Exp */
			nil,         /* empty */
			nil,         /* = */
			reduce(56),  /* break, reduce: Exp */
			reduce(56),  /* goto, reduce: Exp */
			reduce(56),  /* do, reduce: Exp */
			reduce(56),  /* end, reduce: Exp */
			reduce(56),  /* while, reduce: Exp */
			reduce(56),  /* repeat, reduce: Exp */
			nil,         /* until */
			nil,         /* then */
			reduce(56),  /* elseif, reduce: Exp */
			reduce(56),  /* else, reduce: Exp */
			reduce(56),  /* if, reduce: Exp */
			nil,         /* , */
			reduce(56),  /* for, reduce: Exp */
			nil,         /* in */
			reduce(56),  /* function, reduce: Exp */
			reduce(56),  /* local, reduce: Exp */
			reduce(56),  /* ::, reduce: Exp */
			nil,         /* . */
			nil,         /* : */
			reduce(56),  /* or, reduce: Exp */
			shift(2107), /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(56),  /* (, reduce: Exp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(56),  /* ident, reduce: Exp */
		},
	},
	actionRow{ // S2156
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(2188), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S2157
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(58), /* return, reduce: AndExp */
			reduce(58), /* ;, reduce: AndExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(58), /* break, reduce: AndExp */
			reduce(58), /* goto, reduce: AndExp */
			reduce(58), /* do, reduce: AndExp */
			reduce(58), /* end, reduce: AndExp */
			reduce(58), /* while, reduce: AndExp */
			reduce(58), /* repeat, reduce: AndExp */
			nil,        /* until */
			nil,        /* then */
			reduce(58), /* elseif, reduce: AndExp */
			reduce(58), /* else, reduce: AndExp */
			reduce(58), /* if, reduce: AndExp */
			nil,        /* , */
			reduce(58), /* for, reduce: AndExp */
			nil,        /* in */
			reduce(58), /* function, reduce: AndExp */
			reduce(58), /* local, reduce: AndExp */
			reduce(58), /* ::, reduce: AndExp */
			nil,        /* . */
			nil,        /* : */
			reduce(58), /* or, reduce: AndExp */
			reduce(58), /* and, reduce: AndExp */
			shift(203), /* < */
			shift(204), /* <= */
			shift(205), /* > */
			shift(206), /* >= */
			shift(207), /* == */
			shift(208), /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(58), /* (, reduce: AndExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(58), /* ident, reduce: AndExp */
		},
	},
	actionRow{ // S2158
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(66),  /* return, reduce: CompExp */
			reduce(66),  /* ;, reduce: CompExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(66),  /* break, reduce: CompExp */
			reduce(66),  /* goto, reduce: CompExp */
			reduce(66),  /* do, reduce: CompExp */
			reduce(66),  /* end, reduce: CompExp */
			reduce(66),  /* while, reduce: CompExp */
			reduce(66),  /* repeat, reduce: CompExp */
			nil,         /* until */
			nil,         /* then */
			reduce(66),  /* elseif, reduce: CompExp */
			reduce(66),  /* else, reduce: CompExp */
			reduce(66),  /* if, reduce: CompExp */
			nil,         /* , */
			reduce(66),  /* for, reduce: CompExp */
			nil,         /* in */
			reduce(66),  /* function, reduce: CompExp */
			reduce(66),  /* local, reduce: CompExp */
			reduce(66),  /* ::, reduce: CompExp */
			nil,         /* . */
			nil,         /* : */
			reduce(66),  /* or, reduce: CompExp */
			reduce(66),  /* and, reduce: CompExp */
			reduce(66),  /* <, reduce: CompExp */
			reduce(66),  /* <=, reduce: CompExp */
			reduce(66),  /* >, reduce: CompExp */
			reduce(66),  /* >=, reduce: CompExp */
			reduce(66),  /* ==, reduce: CompExp */
			reduce(66),  /* ~=, reduce: CompExp */
			shift(2109), /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(66),  /* (, reduce: CompExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(66),  /* ident, reduce: CompExp */
		},
	},
	actionRow{ // S2159
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(68),  /* return, reduce: BitOrExp */
			reduce(68),  /* ;, reduce: BitOrExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(68),  /* break, reduce: BitOrExp */
			reduce(68),  /* goto, reduce: BitOrExp */
			reduce(68),  /* do, reduce: BitOrExp */
			reduce(68),  /* end, reduce: BitOrExp */
			reduce(68),  /* while, reduce: BitOrExp */
			reduce(68),  /* repeat, reduce: BitOrExp */
			nil,         /* until */
			nil,         /* then */
			reduce(68),  /* elseif, reduce: BitOrExp */
			reduce(68),  /* else, reduce: BitOrExp */
			reduce(68),  /* if, reduce: BitOrExp */
			nil,         /* , */
			reduce(68),  /* for, reduce: BitOrExp */
			nil,         /* in */
			reduce(68),  /* function, reduce: BitOrExp */
			reduce(68),  /* local, reduce: BitOrExp */
			reduce(68),  /* ::, reduce: BitOrExp */
			nil,         /* . */
			nil,         /* : */
			reduce(68),  /* or, reduce: BitOrExp */
			reduce(68),  /* and, reduce: BitOrExp */
			reduce(68),  /* <, reduce: BitOrExp */
			reduce(68),  /* <=, reduce: BitOrExp */
			reduce(68),  /* >, reduce: BitOrExp */
			reduce(68),  /* >=, reduce: BitOrExp */
			reduce(68),  /* ==, reduce: BitOrExp */
			reduce(68),  /* ~=, reduce: BitOrExp */
			reduce(68),  /* |, reduce: BitOrExp */
			shift(2110), /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(68),  /* (, reduce: BitOrExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(68),  /* ident, reduce: BitOrExp */
		},
	},
	actionRow{ // S2160
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(70),  /* return, reduce: BitXorExp */
			reduce(70),  /* ;, reduce: BitXorExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(70),  /* break, reduce: BitXorExp */
			reduce(70),  /* goto, reduce: BitXorExp */
			reduce(70),  /* do, reduce: BitXorExp */
			reduce(70),  /* end, reduce: BitXorExp */
			reduce(70),  /* while, reduce: BitXorExp */
			reduce(70),  /* repeat, reduce: BitXorExp */
			nil,         /* until */
			nil,         /* then */
			reduce(70),  /* elseif, reduce: BitXorExp */
			reduce(70),  /* else, reduce: BitXorExp */
			reduce(70),  /* if, reduce: BitXorExp */
			nil,         /* , */
			reduce(70),  /* for, reduce: BitXorExp */
			nil,         /* in */
			reduce(70),  /* function, reduce: BitXorExp */
			reduce(70),  /* local, reduce: BitXorExp */
			reduce(70),  /* ::, reduce: BitXorExp */
			nil,         /* . */
			nil,         /* : */
			reduce(70),  /* or, reduce: BitXorExp */
			reduce(70),  /* and, reduce: BitXorExp */
			reduce(70),  /* <, reduce: BitXorExp */
			reduce(70),  /* <=, reduce: BitXorExp */
			reduce(70),  /* >, reduce: BitXorExp */
			reduce(70),  /* >=, reduce: BitXorExp */
			reduce(70),  /* ==, reduce: BitXorExp */
			reduce(70),  /* ~=, reduce: BitXorExp */
			reduce(70),  /* |, reduce: BitXorExp */
			reduce(70),  /* ~, reduce: BitXorExp */
			shift(2111), /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(70),  /* (, reduce: BitXorExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(70),  /* ident, reduce: BitXorExp */
		},
	},
	actionRow{ // S2161
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(72),  /* return, reduce: BitAndExp */
			reduce(72),  /* ;, reduce: BitAndExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(72),  /* break, reduce: BitAndExp */
			reduce(72),  /* goto, reduce: BitAndExp */
			reduce(72),  /* do, reduce: BitAndExp */
			reduce(72),  /* end, reduce: BitAndExp */
			reduce(72),  /* while, reduce: BitAndExp */
			reduce(72),  /* repeat, reduce: BitAndExp */
			nil,         /* until */
			nil,         /* then */
			reduce(72),  /* elseif, reduce: BitAndExp */
			reduce(72),  /* else, reduce: BitAndExp */
			reduce(72),  /* if, reduce: BitAndExp */
			nil,         /* , */
			reduce(72),  /* for, reduce: BitAndExp */
			nil,         /* in */
			reduce(72),  /* function, reduce: BitAndExp */
			reduce(72),  /* local, reduce: BitAndExp */
			reduce(72),  /* ::, reduce: BitAndExp */
			nil,         /* . */
			nil,         /* : */
			reduce(72),  /* or, reduce: BitAndExp */
			reduce(72),  /* and, reduce: BitAndExp */
			reduce(72),  /* <, reduce: BitAndExp */
			reduce(72),  /* <=, reduce: BitAndExp */
			reduce(72),  /* >, reduce: BitAndExp */
			reduce(72),  /* >=, reduce: BitAndExp */
			reduce(72),  /* ==, reduce: BitAndExp */
			reduce(72),  /* ~=, reduce: BitAndExp */
			reduce(72),  /* |, reduce: BitAndExp */
			reduce(72),  /* ~, reduce: BitAndExp */
			reduce(72),  /* &, reduce: BitAndExp */
			shift(2112), /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(72),  /* (, reduce: BitAndExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(72),  /* ident, reduce: BitAndExp */
		},
	},
	actionRow{ // S2162
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(74), /* return, reduce: ConcatExp */
			reduce(74), /* ;, reduce: ConcatExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(74), /* break, reduce: ConcatExp */
			reduce(74), /* goto, reduce: ConcatExp */
			reduce(74), /* do, reduce: ConcatExp */
			reduce(74), /* end, reduce: ConcatExp */
			reduce(74), /* while, reduce: ConcatExp */
			reduce(74), /* repeat, reduce: ConcatExp */
			nil,        /* until */
			nil,        /* then */
			reduce(74), /* elseif, reduce: ConcatExp */
			reduce(74), /* else, reduce: ConcatExp */
			reduce(74), /* if, reduce: ConcatExp */
			nil,        /* , */
			reduce(74), /* for, reduce: ConcatExp */
			nil,        /* in */
			reduce(74), /* function, reduce: ConcatExp */
			reduce(74), /* local, reduce: ConcatExp */
			reduce(74), /* ::, reduce: ConcatExp */
			nil,        /* . */
			nil,        /* : */
			reduce(74), /* or, reduce: ConcatExp */
			reduce(74), /* and, reduce: ConcatExp */
			reduce(74), /* <, reduce: ConcatExp */
			reduce(74), /* <=, reduce: ConcatExp */
			reduce(74), /* >, reduce: ConcatExp */
			reduce(74), /* >=, reduce: ConcatExp */
			reduce(74), /* ==, reduce: ConcatExp */
			reduce(74), /* ~=, reduce: ConcatExp */
			reduce(74), /* |, reduce: ConcatExp */
			reduce(74), /* ~, reduce: ConcatExp */
			reduce(74), /* &, reduce: ConcatExp */
			reduce(74), /* .., reduce: ConcatExp */
			shift(214), /* << */
			shift(215), /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(74), /* (, reduce: ConcatExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(74), /* ident, reduce: ConcatExp */
		},
	},
	actionRow{ // S2163
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(78), /* return, reduce: ShiftExp */
			reduce(78), /* ;, reduce: ShiftExp */
			nil,        /* empty */
			nil,        /* = */
			reduce(78), /* break, reduce: ShiftExp */
			reduce(78), /* goto, reduce: ShiftExp */
			reduce(78), /* do, reduce: ShiftExp */
			reduce(78), /* end, reduce: ShiftExp */
			reduce(78), /* while, reduce: ShiftExp */
			reduce(78), /* repeat, reduce: ShiftExp */
			nil,        /* until */
			nil,        /* then */
			reduce(78), /* elseif, reduce: ShiftExp */
			reduce(78), /* else, reduce: ShiftExp */
			reduce(78), /* if, reduce: ShiftExp */
			nil,        /* , */
			reduce(78), /* for, reduce: ShiftExp */
			nil,        /* in */
			reduce(78), /* function, reduce: ShiftExp */
			reduce(78), /* local, reduce: ShiftExp */
			reduce(78), /* ::, reduce: ShiftExp */
			nil,        /* . */
			nil,        /* : */
			reduce(78), /* or, reduce: ShiftExp */
			reduce(78), /* and, reduce: ShiftExp */
			reduce(78), /* <, reduce: ShiftExp */
			reduce(78), /* <=, reduce: ShiftExp */
			reduce(78), /* >, reduce: ShiftExp */
			reduce(78), /* >=, reduce: ShiftExp */
			reduce(78), /* ==, reduce: ShiftExp */
			reduce(78), /* ~=, reduce: ShiftExp */
			reduce(78), /* |, reduce: ShiftExp */
			reduce(78), /* ~, reduce: ShiftExp */
			reduce(78), /* &, reduce: ShiftExp */
			reduce(78), /* .., reduce: ShiftExp */
			reduce(78), /* <<, reduce: ShiftExp */
			reduce(78), /* >>, reduce: ShiftExp */
			shift(217), /* + */
			shift(218), /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(78), /* (, reduce: ShiftExp */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(78), /* ident, reduce: ShiftExp */
		},
	},
	actionRow{ // S2164
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(82), /* return, reduce: Sum */
			reduce(82), /* ;, reduce: Sum */
			nil,        /* empty */
			nil,        /* = */
			reduce(82), /* break, reduce: Sum */
			reduce(82), /* goto, reduce: Sum */
			reduce(82), /* do, reduce: Sum */
			reduce(82), /* end, reduce: Sum */
			reduce(82), /* while, reduce: Sum */
			reduce(82), /* repeat, reduce: Sum */
			nil,        /* until */
			nil,        /* then */
			reduce(82), /* elseif, reduce: Sum */
			reduce(82), /* else, reduce: Sum */
			reduce(82), /* if, reduce: Sum */
			nil,        /* , */
			reduce(82), /* for, reduce: Sum */
			nil,        /* in */
			reduce(82), /* function, reduce: Sum */
			reduce(82), /* local, reduce: Sum */
			reduce(82), /* ::, reduce: Sum */
			nil,        /* . */
			nil,        /* : */
			reduce(82), /* or, reduce: Sum */
			reduce(82), /* and, reduce: Sum */
			reduce(82), /* <, reduce: Sum */
			reduce(82), /* <=, reduce: Sum */
			reduce(82), /* >, reduce: Sum */
			reduce(82), /* >=, reduce: Sum */
			reduce(82), /* ==, reduce: Sum */
			reduce(82), /* ~=, reduce: Sum */
			reduce(82), /* |, reduce: Sum */
			reduce(82), /* ~, reduce: Sum */
			reduce(82), /* &, reduce: Sum */
			reduce(82), /* .., reduce: Sum */
			reduce(82), /* <<, reduce: Sum */
			reduce(82), /* >>, reduce: Sum */
			reduce(82), /* +, reduce: Sum */
			reduce(82), /* -, reduce: Sum */
			shift(220), /* * */
			shift(221), /* / */
			shift(222), /* % */
			shift(223), /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(82), /* (, reduce: Sum */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(82), /* ident, reduce: Sum */
		},
	},
	actionRow{ // S2165
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(88), /* return, reduce: Term */
			reduce(88), /* ;, reduce: Term */
			nil,        /* empty */
			nil,        /* = */
			reduce(88), /* break, reduce: Term */
			reduce(88), /* goto, reduce: Term */
			reduce(88), /* do, reduce: Term */
			reduce(88), /* end, reduce: Term */
			reduce(88), /* while, reduce: Term */
			reduce(88), /* repeat, reduce: Term */
			nil,        /* until */
			nil,        /* then */
			reduce(88), /* elseif, reduce: Term */
			reduce(88), /* else, reduce: Term */
			reduce(88), /* if, reduce: Term */
			nil,        /* , */
			reduce(88), /* for, reduce: Term */
			nil,        /* in */
			reduce(88), /* function, reduce: Term */
			reduce(88), /* local, reduce: Term */
			reduce(88), /* ::, reduce: Term */
			nil,        /* . */
			nil,        /* : */
			reduce(88), /* or, reduce: Term */
			reduce(88), /* and, reduce: Term */
			reduce(88), /* <, reduce: Term */
			reduce(88), /* <=, reduce: Term */
			reduce(88), /* >, reduce: Term */
			reduce(88), /* >=, reduce: Term */
			reduce(88), /* ==, reduce: Term */
			reduce(88), /* ~=, reduce: Term */
			reduce(88), /* |, reduce: Term */
			reduce(88), /* ~, reduce: Term */
			reduce(88), /* &, reduce: Term */
			reduce(88), /* .., reduce: Term */
			reduce(88), /* <<, reduce: Term */
			reduce(88), /* >>, reduce: Term */
			reduce(88), /* +, reduce: Term */
			reduce(88), /* -, reduce: Term */
			reduce(88), /* *, reduce: Term */
			reduce(88), /* /, reduce: Term */
			reduce(88), /* %, reduce: Term */
			reduce(88), /* //, reduce: Term */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(88), /* (, reduce: Term */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(88), /* ident, reduce: Term */
		},
	},
	actionRow{ // S2166
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(96), /* return, reduce: Power */
			reduce(96), /* ;, reduce: Power */
			nil,        /* empty */
			nil,        /* = */
			reduce(96), /* break, reduce: Power */
			reduce(96), /* goto, reduce: Power */
			reduce(96), /* do, reduce: Power */
			reduce(96), /* end, reduce: Power */
			reduce(96), /* while, reduce: Power */
			reduce(96), /* repeat, reduce: Power */
			nil,        /* until */
			nil,        /* then */
			reduce(96), /* elseif, reduce: Power */
			reduce(96), /* else, reduce: Power */
			reduce(96), /* if, reduce: Power */
			nil,        /* , */
			reduce(96), /* for, reduce: Power */
			nil,        /* in */
			reduce(96), /* function, reduce: Power */
			reduce(96), /* local, reduce: Power */
			reduce(96), /* ::, reduce: Power */
			nil,        /* . */
			nil,        /* : */
			reduce(96), /* or, reduce: Power */
			reduce(96), /* and, reduce: Power */
			reduce(96), /* <, reduce: Power */
			reduce(96), /* <=, reduce: Power */
			reduce(96), /* >, reduce: Power */
			reduce(96), /* >=, reduce: Power */
			reduce(96), /* ==, reduce: Power */
			reduce(96), /* ~=, reduce: Power */
			reduce(96), /* |, reduce: Power */
			reduce(96), /* ~, reduce: Power */
			reduce(96), /* &, reduce: Power */
			reduce(96), /* .., reduce: Power */
			reduce(96), /* <<, reduce: Power */
			reduce(96), /* >>, reduce: Power */
			reduce(96), /* +, reduce: Power */
			reduce(96), /* -, reduce: Power */
			reduce(96), /* *, reduce: Power */
			reduce(96), /* /, reduce: Power */
			reduce(96), /* %, reduce: Power */
			reduce(96), /* //, reduce: Power */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(96), /* (, reduce: Power */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(96), /* ident, reduce: Power */
		},
	},
	actionRow{ // S2167
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(99), /* return, reduce: Var */
			reduce(99), /* ;, reduce: Var */
			nil,        /* empty */
			nil,        /* = */
			reduce(99), /* break, reduce: Var */
			reduce(99), /* goto, reduce: Var */
			reduce(99), /* do, reduce: Var */
			reduce(99), /* end, reduce: Var */
			reduce(99), /* while, reduce: Var */
			reduce(99), /* repeat, reduce: Var */
			nil,        /* until */
			nil,        /* then */
			reduce(99), /* elseif, reduce: Var */
			reduce(99), /* else, reduce: Var */
			reduce(99), /* if, reduce: Var */
			nil,        /* , */
			reduce(99), /* for, reduce: Var */
			nil,        /* in */
			reduce(99), /* function, reduce: Var */
			reduce(99), /* local, reduce: Var */
			reduce(99), /* ::, reduce: Var */
			reduce(99), /* ., reduce: Var */
			reduce(99), /* :, reduce: Var */
			reduce(99), /* or, reduce: Var */
			reduce(99), /* and, reduce: Var */
			reduce(99), /* <, reduce: Var */
			reduce(99), /* <=, reduce: Var */
			reduce(99), /* >, reduce: Var */
			reduce(99), /* >=, reduce: Var */
			reduce(99), /* ==, reduce: Var */
			reduce(99), /* ~=, reduce: Var */
			reduce(99), /* |, reduce: Var */
			reduce(99), /* ~, reduce: Var */
			reduce(99), /* &, reduce: Var */
			reduce(99), /* .., reduce: Var */
			reduce(99), /* <<, reduce: Var */
			reduce(99), /* >>, reduce: Var */
			reduce(99), /* +, reduce: Var */
			reduce(99), /* -, reduce: Var */
			reduce(99), /* *, reduce: Var */
			reduce(99), /* /, reduce: Var */
			reduce(99), /* %, reduce: Var */
			reduce(99), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(99), /* ^, reduce: Var */
			reduce(99), /* [, reduce: Var */
			nil,        /* ] */
			reduce(99), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(99), /* string, reduce: Var */
			reduce(99), /* {, reduce: Var */
			nil,        /* } */
			reduce(99), /* ident, reduce: Var */
		},
	},
	actionRow{ // S2168
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			shift(2121), /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			shift(2123), /* string */
			shift(2125), /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S2169
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			shift(851),  /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			shift(2190), /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S2170
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(876),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			shift(2191), /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S2171
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(115), /* return, reduce: Args */
			reduce(115), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			reduce(115), /* break, reduce: Args */
			reduce(115), /* goto, reduce: Args */
			reduce(115), /* do, reduce: Args */
			reduce(115), /* end, reduce: Args */
			reduce(115), /* while, reduce: Args */
			reduce(115), /* repeat, reduce: Args */
			nil,         /* until */
			nil,         /* then */
			reduce(115), /* elseif, reduce: Args */
			reduce(115), /* else, reduce: Args */
			reduce(115), /* if, reduce: Args */
			nil,         /* , */
			reduce(115), /* for, reduce: Args */
			nil,         /* in */
			reduce(115), /* function, reduce: Args */
			reduce(115), /* local, reduce: Args */
			reduce(115), /* ::, reduce: Args */
			reduce(115), /* ., reduce: Args */
			reduce(115), /* :, reduce: Args */
			reduce(115), /* or, reduce: Args */
			reduce(115), /* and, reduce: Args */
			reduce(115), /* <, reduce: Args */
			reduce(115), /* <=, reduce: Args */
			reduce(115), /* >, reduce: Args */
			reduce(115), /* >=, reduce: Args */
			reduce(115), /* ==, reduce: Args */
			reduce(115), /* ~=, reduce: Args */
			reduce(115), /* |, reduce: Args */
			reduce(115), /* ~, reduce: Args */
			reduce(115), /* &, reduce: Args */
			reduce(115), /* .., reduce: Args */
			reduce(115), /* <<, reduce: Args */
			reduce(115), /* >>, reduce: Args */
			reduce(115), /* +, reduce: Args */
			reduce(115), /* -, reduce: Args */
			reduce(115), /* *, reduce: Args */
			reduce(115), /* /, reduce: Args */
			reduce(115), /* %, reduce: Args */
			reduce(115), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(115), /* ^, reduce: Args */
			reduce(115), /* [, reduce: Args */
			nil,         /* ] */
			reduce(115), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(115), /* string, reduce: Args */
			reduce(115), /* {, reduce: Args */
			nil,         /* } */
			reduce(115), /* ident, reduce: Args */
		},
	},
	actionRow{ // S2172
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			shift(569),  /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			shift(570),  /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			shift(2192), /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S2173
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(102), /* return, reduce: PrefixExp */
			reduce(102), /* ;, reduce: PrefixExp */
			nil,         /* empty */
			nil,         /* = */
			reduce(102), /* break, reduce: PrefixExp */
			reduce(102), /* goto, reduce: PrefixExp */
			reduce(102), /* do, reduce: PrefixExp */
			reduce(102), /* end, reduce: PrefixExp */
			reduce(102), /* while, reduce: PrefixExp */
			reduce(102), /* repeat, reduce: PrefixExp */
			nil,         /* until */
			nil,         /* then */
			reduce(102), /* elseif, reduce: PrefixExp */
			reduce(102), /* else, reduce: PrefixExp */
			reduce(102), /* if, reduce: PrefixExp */
			nil,         /* , */
			reduce(102), /* for, reduce: PrefixExp */
			nil,         /* in */
			reduce(102), /* function, reduce: PrefixExp */
			reduce(102), /* local, reduce: PrefixExp */
			reduce(102), /* ::, reduce: PrefixExp */
			reduce(102), /* ., reduce: PrefixExp */
			reduce(102), /* :, reduce: PrefixExp */
			reduce(102), /* or, reduce: PrefixExp */
			reduce(102), /* and, reduce: PrefixExp */
			reduce(102), /* <, reduce: PrefixExp */
			reduce(102), /* <=, reduce: PrefixExp */
			reduce(102), /* >, reduce: PrefixExp */
			reduce(102), /* >=, reduce: PrefixExp */
			reduce(102), /* ==, reduce: PrefixExp */
			reduce(102), /* ~=, reduce: PrefixExp */
			reduce(102), /* |, reduce: PrefixExp */
			reduce(102), /* ~, reduce: PrefixExp */
			reduce(102), /* &, reduce: PrefixExp */
			reduce(102), /* .., reduce: PrefixExp */
			reduce(102), /* <<, reduce: PrefixExp */
			reduce(102), /* >>, reduce: PrefixExp */
			reduce(102), /* +, reduce: PrefixExp */
			reduce(102), /* -, reduce: PrefixExp */
			reduce(102), /* *, reduce: PrefixExp */
			reduce(102), /* /, reduce: PrefixExp */
			reduce(102), /* %, reduce: PrefixExp */
			reduce(102), /* //, reduce: PrefixExp */
			nil,         /* not */
			nil,         /* # */
			reduce(102), /* ^, reduce: PrefixExp */
			reduce(102), /* [, reduce: PrefixExp */
			nil,         /* ] */
			reduce(102), /* (, reduce: PrefixExp */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(102), /* string, reduce: PrefixExp */
			reduce(102), /* {, reduce: PrefixExp */
			nil,         /* } */
			reduce(102), /* ident, reduce: PrefixExp */
		},
	},
	actionRow{ // S2174
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(125), /* return, reduce: TableConstructor */
			reduce(125), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			reduce(125), /* break, reduce: TableConstructor */
			reduce(125), /* goto, reduce: TableConstructor */
			reduce(125), /* do, reduce: TableConstructor */
			reduce(125), /* end, reduce: TableConstructor */
			reduce(125), /* while, reduce: TableConstructor */
			reduce(125), /* repeat, reduce: TableConstructor */
			nil,         /* until */
			nil,         /* then */
			reduce(125), /* elseif, reduce: TableConstructor */
			reduce(125), /* else, reduce: TableConstructor */
			reduce(125), /* if, reduce: TableConstructor */
			nil,         /* , */
			reduce(125), /* for, reduce: TableConstructor */
			nil,         /* in */
			reduce(125), /* function, reduce: TableConstructor */
			reduce(125), /* local, reduce: TableConstructor */
			reduce(125), /* ::, reduce: TableConstructor */
			nil,         /* . */
			nil,         /* : */
			reduce(125), /* or, reduce: TableConstructor */
			reduce(125), /* and, reduce: TableConstructor */
			reduce(125), /* <, reduce: TableConstructor */
			reduce(125), /* <=, reduce: TableConstructor */
			reduce(125), /* >, reduce: TableConstructor */
			reduce(125), /* >=, reduce: TableConstructor */
			reduce(125), /* ==, reduce: TableConstructor */
			reduce(125), /* ~=, reduce: TableConstructor */
			reduce(125), /* |, reduce: TableConstructor */
			reduce(125), /* ~, reduce: TableConstructor */
			reduce(125), /* &, reduce: TableConstructor */
			reduce(125), /* .., reduce: TableConstructor */
			reduce(125), /* <<, reduce: TableConstructor */
			reduce(125), /* >>, reduce: TableConstructor */
			reduce(125), /* +, reduce: TableConstructor */
			reduce(125), /* -, reduce: TableConstructor */
			reduce(125), /* *, reduce: TableConstructor */
			reduce(125), /* /, reduce: TableConstructor */
			reduce(125), /* %, reduce: TableConstructor */
			reduce(125), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(125), /* ^, reduce: TableConstructor */
			nil,         /* [ */
			nil,         /* ] */
			reduce(125), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(125), /* ident, reduce: TableConstructor */
		},
	},
	actionRow{ // S2175
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(238),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			shift(254),  /* [ */
			nil,         /* ] */
			shift(255),  /* ( */
			nil,         /* ) */
			shift(256),  /* nil */
			shift(257),  /* true */
			shift(258),  /* false */
			shift(259),  /* ... */
			shift(260),  /* numdec */
			shift(261),  /* numhex */
			shift(262),  /* string */
			shift(265),  /* { */
			shift(2194), /* } */
			shift(268),  /* ident */
		},
	},
	actionRow{ // S2176
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(2195), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			shift(1772), /* elseif */
			shift(2196), /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S2177
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(2197), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S2178
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(2198), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S2179
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(2199), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S2180
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(2200), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S2181
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(124), /* return, reduce: FuncBody */
			reduce(124), /* ;, reduce: FuncBody */
			nil,         /* empty */
			nil,         /* = */
			reduce(124), /* break, reduce: FuncBody */
			reduce(124), /* goto, reduce: FuncBody */
			reduce(124), /* do, reduce: FuncBody */
			reduce(124), /* end, reduce: FuncBody */
			reduce(124), /* while, reduce: FuncBody */
			reduce(124), /* repeat, reduce: FuncBody */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(124), /* if, reduce: FuncBody */
			nil,         /* , */
			reduce(124), /* for, reduce: FuncBody */
			nil,         /* in */
			reduce(124), /* function, reduce: FuncBody */
			reduce(124), /* local, reduce: FuncBody */
			reduce(124), /* ::, reduce: FuncBody */
			nil,         /* . */
			nil,         /* : */
			reduce(124), /* or, reduce: FuncBody */
			reduce(124), /* and, reduce: FuncBody */
			reduce(124), /* <, reduce: FuncBody */
			reduce(124), /* <=, reduce: FuncBody */
			reduce(124), /* >, reduce: FuncBody */
			reduce(124), /* >=, reduce: FuncBody */
			reduce(124), /* ==, reduce: FuncBody */
			reduce(124), /* ~=, reduce: FuncBody */
			reduce(124), /* |, reduce: FuncBody */
			reduce(124), /* ~, reduce: FuncBody */
			reduce(124), /* &, reduce: FuncBody */
			reduce(124), /* .., reduce: FuncBody */
			reduce(124), /* <<, reduce: FuncBody */
			reduce(124), /* >>, reduce: FuncBody */
			reduce(124), /* +, reduce: FuncBody */
			reduce(124), /* -, reduce: FuncBody */
			reduce(124), /* *, reduce: FuncBody */
			reduce(124), /* /, reduce: FuncBody */
			reduce(124), /* %, reduce: FuncBody */
			reduce(124), /* //, reduce: FuncBody */
			nil,         /* not */
			nil,         /* # */
			reduce(124), /* ^, reduce: FuncBody */
			nil,         /* [ */
			nil,         /* ] */
			reduce(124), /* (, reduce: FuncBody */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(124), /* ident, reduce: FuncBody */
		},
	},
	actionRow{ // S2182
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(31), /* return, reduce: Else */
			reduce(31), /* ;, reduce: Else */
			nil,        /* empty */
			nil,        /* = */
			reduce(31), /* break, reduce: Else */
			reduce(31), /* goto, reduce: Else */
			reduce(31), /* do, reduce: Else */
			reduce(31), /* end, reduce: Else */
			reduce(31), /* while, reduce: Else */
			reduce(31), /* repeat, reduce: Else */
			nil,        /* until */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(31), /* if, reduce: Else */
			nil,        /* , */
			reduce(31), /* for, reduce: Else */
			nil,        /* in */
			reduce(31), /* function, reduce: Else */
			reduce(31), /* local, reduce: Else */
			reduce(31), /* ::, reduce: Else */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(31), /* (, reduce: Else */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(31), /* ident, reduce: Else */
		},
	},
	actionRow{ // S2183
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(124), /* return, reduce: FuncBody */
			reduce(124), /* ;, reduce: FuncBody */
			nil,         /* empty */
			nil,         /* = */
			reduce(124), /* break, reduce: FuncBody */
			reduce(124), /* goto, reduce: FuncBody */
			reduce(124), /* do, reduce: FuncBody */
			nil,         /* end */
			reduce(124), /* while, reduce: FuncBody */
			reduce(124), /* repeat, reduce: FuncBody */
			reduce(124), /* until, reduce: FuncBody */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			reduce(124), /* if, reduce: FuncBody */
			nil,         /* , */
			reduce(124), /* for, reduce: FuncBody */
			nil,         /* in */
			reduce(124), /* function, reduce: FuncBody */
			reduce(124), /* local, reduce: FuncBody */
			reduce(124), /* ::, reduce: FuncBody */
			nil,         /* . */
			nil,         /* : */
			reduce(124), /* or, reduce: FuncBody */
			reduce(124), /* and, reduce: FuncBody */
			reduce(124), /* <, reduce: FuncBody */
			reduce(124), /* <=, reduce: FuncBody */
			reduce(124), /* >, reduce: FuncBody */
			reduce(124), /* >=, reduce: FuncBody */
			reduce(124), /* ==, reduce: FuncBody */
			reduce(124), /* ~=, reduce: FuncBody */
			reduce(124), /* |, reduce: FuncBody */
			reduce(124), /* ~, reduce: FuncBody */
			reduce(124), /* &, reduce: FuncBody */
			reduce(124), /* .., reduce: FuncBody */
			reduce(124), /* <<, reduce: FuncBody */
			reduce(124), /* >>, reduce: FuncBody */
			reduce(124), /* +, reduce: FuncBody */
			reduce(124), /* -, reduce: FuncBody */
			reduce(124), /* *, reduce: FuncBody */
			reduce(124), /* /, reduce: FuncBody */
			reduce(124), /* %, reduce: FuncBody */
			reduce(124), /* //, reduce: FuncBody */
			nil,         /* not */
			nil,         /* # */
			reduce(124), /* ^, reduce: FuncBody */
			nil,         /* [ */
			nil,         /* ] */
			reduce(124), /* (, reduce: FuncBody */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(124), /* ident, reduce: FuncBody */
		},
	},
	actionRow{ // S2184
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(31), /* return, reduce: Else */
			reduce(31), /* ;, reduce: Else */
			nil,        /* empty */
			nil,        /* = */
			reduce(31), /* break, reduce: Else */
			reduce(31), /* goto, reduce: Else */
			reduce(31), /* do, reduce: Else */
			nil,        /* end */
			reduce(31), /* while, reduce: Else */
			reduce(31), /* repeat, reduce: Else */
			reduce(31), /* until, reduce: Else */
			nil,        /* then */
			nil,        /* elseif */
			nil,        /* else */
			reduce(31), /* if, reduce: Else */
			nil,        /* , */
			reduce(31), /* for, reduce: Else */
			nil,        /* in */
			reduce(31), /* function, reduce: Else */
			reduce(31), /* local, reduce: Else */
			reduce(31), /* ::, reduce: Else */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(31), /* (, reduce: Else */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(31), /* ident, reduce: Else */
		},
	},
	actionRow{ // S2185
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			reduce(124), /* ;, reduce: FuncBody */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			reduce(124), /* end, reduce: FuncBody */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			reduce(124), /* elseif, reduce: FuncBody */
			reduce(124), /* else, reduce: FuncBody */
			nil,         /* if */
			reduce(124), /* ,, reduce: FuncBody */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			reduce(124), /* or, reduce: FuncBody */
			reduce(124), /* and, reduce: FuncBody */
			reduce(124), /* <, reduce: FuncBody */
			reduce(124), /* <=, reduce: FuncBody */
			reduce(124), /* >, reduce: FuncBody */
			reduce(124), /* >=, reduce: FuncBody */
			reduce(124), /* ==, reduce: FuncBody */
			reduce(124), /* ~=, reduce: FuncBody */
			reduce(124), /* |, reduce: FuncBody */
			reduce(124), /* ~, reduce: FuncBody */
			reduce(124), /* &, reduce: FuncBody */
			reduce(124), /* .., reduce: FuncBody */
			reduce(124), /* <<, reduce: FuncBody */
			reduce(124), /* >>, reduce: FuncBody */
			reduce(124), /* +, reduce: FuncBody */
			reduce(124), /* -, reduce: FuncBody */
			reduce(124), /* *, reduce: FuncBody */
			reduce(124), /* /, reduce: FuncBody */
			reduce(124), /* %, reduce: FuncBody */
			reduce(124), /* //, reduce: FuncBody */
			nil,         /* not */
			nil,         /* # */
			reduce(124), /* ^, reduce: FuncBody */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S2186
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(2201), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S2187
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(126), /* return, reduce: TableConstructor */
			reduce(126), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			reduce(126), /* break, reduce: TableConstructor */
			reduce(126), /* goto, reduce: TableConstructor */
			reduce(126), /* do, reduce: TableConstructor */
			reduce(126), /* end, reduce: TableConstructor */
			reduce(126), /* while, reduce: TableConstructor */
			reduce(126), /* repeat, reduce: TableConstructor */
			nil,         /* until */
			nil,         /* then */
			reduce(126), /* elseif, reduce: TableConstructor */
			reduce(126), /* else, reduce: TableConstructor */
			reduce(126), /* if, reduce: TableConstructor */
			reduce(126), /* ,, reduce: TableConstructor */
			reduce(126), /* for, reduce: TableConstructor */
			nil,         /* in */
			reduce(126), /* function, reduce: TableConstructor */
			reduce(126), /* local, reduce: TableConstructor */
			reduce(126), /* ::, reduce: TableConstructor */
			reduce(126), /* ., reduce: TableConstructor */
			reduce(126), /* :, reduce: TableConstructor */
			reduce(126), /* or, reduce: TableConstructor */
			reduce(126), /* and, reduce: TableConstructor */
			reduce(126), /* <, reduce: TableConstructor */
			reduce(126), /* <=, reduce: TableConstructor */
			reduce(126), /* >, reduce: TableConstructor */
			reduce(126), /* >=, reduce: TableConstructor */
			reduce(126), /* ==, reduce: TableConstructor */
			reduce(126), /* ~=, reduce: TableConstructor */
			reduce(126), /* |, reduce: TableConstructor */
			reduce(126), /* ~, reduce: TableConstructor */
			reduce(126), /* &, reduce: TableConstructor */
			reduce(126), /* .., reduce: TableConstructor */
			reduce(126), /* <<, reduce: TableConstructor */
			reduce(126), /* >>, reduce: TableConstructor */
			reduce(126), /* +, reduce: TableConstructor */
			reduce(126), /* -, reduce: TableConstructor */
			reduce(126), /* *, reduce: TableConstructor */
			reduce(126), /* /, reduce: TableConstructor */
			reduce(126), /* %, reduce: TableConstructor */
			reduce(126), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(126), /* ^, reduce: TableConstructor */
			reduce(126), /* [, reduce: TableConstructor */
			nil,         /* ] */
			reduce(126), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(126), /* string, reduce: TableConstructor */
			reduce(126), /* {, reduce: TableConstructor */
			nil,         /* } */
			reduce(126), /* ident, reduce: TableConstructor */
		},
	},
	actionRow{ // S2188
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S2189
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(104), /* return, reduce: FunctionCall */
			reduce(104), /* ;, reduce: FunctionCall */
			nil,         /* empty */
			nil,         /* = */
			reduce(104), /* break, reduce: FunctionCall */
			reduce(104), /* goto, reduce: FunctionCall */
			reduce(104), /* do, reduce: FunctionCall */
			reduce(104), /* end, reduce: FunctionCall */
			reduce(104), /* while, reduce: FunctionCall */
			reduce(104), /* repeat, reduce: FunctionCall */
			nil,         /* until */
			nil,         /* then */
			reduce(104), /* elseif, reduce: FunctionCall */
			reduce(104), /* else, reduce: FunctionCall */
			reduce(104), /* if, reduce: FunctionCall */
			nil,         /* , */
			reduce(104), /* for, reduce: FunctionCall */
			nil,         /* in */
			reduce(104), /* function, reduce: FunctionCall */
			reduce(104), /* local, reduce: FunctionCall */
			reduce(104), /* ::, reduce: FunctionCall */
			reduce(104), /* ., reduce: FunctionCall */
			reduce(104), /* :, reduce: FunctionCall */
			reduce(104), /* or, reduce: FunctionCall */
			reduce(104), /* and, reduce: FunctionCall */
			reduce(104), /* <, reduce: FunctionCall */
			reduce(104), /* <=, reduce: FunctionCall */
			reduce(104), /* >, reduce: FunctionCall */
			reduce(104), /* >=, reduce: FunctionCall */
			reduce(104), /* ==, reduce: FunctionCall */
			reduce(104), /* ~=, reduce: FunctionCall */
			reduce(104), /* |, reduce: FunctionCall */
			reduce(104), /* ~, reduce: FunctionCall */
			reduce(104), /* &, reduce: FunctionCall */
			reduce(104), /* .., reduce: FunctionCall */
			reduce(104), /* <<, reduce: FunctionCall */
			reduce(104), /* >>, reduce: FunctionCall */
			reduce(104), /* +, reduce: FunctionCall */
			reduce(104), /* -, reduce: FunctionCall */
			reduce(104), /* *, reduce: FunctionCall */
			reduce(104), /* /, reduce: FunctionCall */
			reduce(104), /* %, reduce: FunctionCall */
			reduce(104), /* //, reduce: FunctionCall */
			nil,         /* not */
			nil,         /* # */
			reduce(104), /* ^, reduce: FunctionCall */
			reduce(104), /* [, reduce: FunctionCall */
			nil,         /* ] */
			reduce(104), /* (, reduce: FunctionCall */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(104), /* string, reduce: FunctionCall */
			reduce(104), /* {, reduce: FunctionCall */
			nil,         /* } */
			reduce(104), /* ident, reduce: FunctionCall */
		},
	},
	actionRow{ // S2190
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(98), /* return, reduce: Var */
			reduce(98), /* ;, reduce: Var */
			nil,        /* empty */
			nil,        /* = */
			reduce(98), /* break, reduce: Var */
			reduce(98), /* goto, reduce: Var */
			reduce(98), /* do, reduce: Var */
			reduce(98), /* end, reduce: Var */
			reduce(98), /* while, reduce: Var */
			reduce(98), /* repeat, reduce: Var */
			nil,        /* until */
			nil,        /* then */
			reduce(98), /* elseif, reduce: Var */
			reduce(98), /* else, reduce: Var */
			reduce(98), /* if, reduce: Var */
			nil,        /* , */
			reduce(98), /* for, reduce: Var */
			nil,        /* in */
			reduce(98), /* function, reduce: Var */
			reduce(98), /* local, reduce: Var */
			reduce(98), /* ::, reduce: Var */
			reduce(98), /* ., reduce: Var */
			reduce(98), /* :, reduce: Var */
			reduce(98), /* or, reduce: Var */
			reduce(98), /* and, reduce: Var */
			reduce(98), /* <, reduce: Var */
			reduce(98), /* <=, reduce: Var */
			reduce(98), /* >, reduce: Var */
			reduce(98), /* >=, reduce: Var */
			reduce(98), /* ==, reduce: Var */
			reduce(98), /* ~=, reduce: Var */
			reduce(98), /* |, reduce: Var */
			reduce(98), /* ~, reduce: Var */
			reduce(98), /* &, reduce: Var */
			reduce(98), /* .., reduce: Var */
			reduce(98), /* <<, reduce: Var */
			reduce(98), /* >>, reduce: Var */
			reduce(98), /* +, reduce: Var */
			reduce(98), /* -, reduce: Var */
			reduce(98), /* *, reduce: Var */
			reduce(98), /* /, reduce: Var */
			reduce(98), /* %, reduce: Var */
			reduce(98), /* //, reduce: Var */
			nil,        /* not */
			nil,        /* # */
			reduce(98), /* ^, reduce: Var */
			reduce(98), /* [, reduce: Var */
			nil,        /* ] */
			reduce(98), /* (, reduce: Var */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			reduce(98), /* string, reduce: Var */
			reduce(98), /* {, reduce: Var */
			nil,        /* } */
			reduce(98), /* ident, reduce: Var */
		},
	},
	actionRow{ // S2191
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(116), /* return, reduce: Args */
			reduce(116), /* ;, reduce: Args */
			nil,         /* empty */
			nil,         /* = */
			reduce(116), /* break, reduce: Args */
			reduce(116), /* goto, reduce: Args */
			reduce(116), /* do, reduce: Args */
			reduce(116), /* end, reduce: Args */
			reduce(116), /* while, reduce: Args */
			reduce(116), /* repeat, reduce: Args */
			nil,         /* until */
			nil,         /* then */
			reduce(116), /* elseif, reduce: Args */
			reduce(116), /* else, reduce: Args */
			reduce(116), /* if, reduce: Args */
			nil,         /* , */
			reduce(116), /* for, reduce: Args */
			nil,         /* in */
			reduce(116), /* function, reduce: Args */
			reduce(116), /* local, reduce: Args */
			reduce(116), /* ::, reduce: Args */
			reduce(116), /* ., reduce: Args */
			reduce(116), /* :, reduce: Args */
			reduce(116), /* or, reduce: Args */
			reduce(116), /* and, reduce: Args */
			reduce(116), /* <, reduce: Args */
			reduce(116), /* <=, reduce: Args */
			reduce(116), /* >, reduce: Args */
			reduce(116), /* >=, reduce: Args */
			reduce(116), /* ==, reduce: Args */
			reduce(116), /* ~=, reduce: Args */
			reduce(116), /* |, reduce: Args */
			reduce(116), /* ~, reduce: Args */
			reduce(116), /* &, reduce: Args */
			reduce(116), /* .., reduce: Args */
			reduce(116), /* <<, reduce: Args */
			reduce(116), /* >>, reduce: Args */
			reduce(116), /* +, reduce: Args */
			reduce(116), /* -, reduce: Args */
			reduce(116), /* *, reduce: Args */
			reduce(116), /* /, reduce: Args */
			reduce(116), /* %, reduce: Args */
			reduce(116), /* //, reduce: Args */
			nil,         /* not */
			nil,         /* # */
			reduce(116), /* ^, reduce: Args */
			reduce(116), /* [, reduce: Args */
			nil,         /* ] */
			reduce(116), /* (, reduce: Args */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(116), /* string, reduce: Args */
			reduce(116), /* {, reduce: Args */
			nil,         /* } */
			reduce(116), /* ident, reduce: Args */
		},
	},
	actionRow{ // S2192
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(125), /* return, reduce: TableConstructor */
			reduce(125), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			reduce(125), /* break, reduce: TableConstructor */
			reduce(125), /* goto, reduce: TableConstructor */
			reduce(125), /* do, reduce: TableConstructor */
			reduce(125), /* end, reduce: TableConstructor */
			reduce(125), /* while, reduce: TableConstructor */
			reduce(125), /* repeat, reduce: TableConstructor */
			nil,         /* until */
			nil,         /* then */
			reduce(125), /* elseif, reduce: TableConstructor */
			reduce(125), /* else, reduce: TableConstructor */
			reduce(125), /* if, reduce: TableConstructor */
			nil,         /* , */
			reduce(125), /* for, reduce: TableConstructor */
			nil,         /* in */
			reduce(125), /* function, reduce: TableConstructor */
			reduce(125), /* local, reduce: TableConstructor */
			reduce(125), /* ::, reduce: TableConstructor */
			reduce(125), /* ., reduce: TableConstructor */
			reduce(125), /* :, reduce: TableConstructor */
			reduce(125), /* or, reduce: TableConstructor */
			reduce(125), /* and, reduce: TableConstructor */
			reduce(125), /* <, reduce: TableConstructor */
			reduce(125), /* <=, reduce: TableConstructor */
			reduce(125), /* >, reduce: TableConstructor */
			reduce(125), /* >=, reduce: TableConstructor */
			reduce(125), /* ==, reduce: TableConstructor */
			reduce(125), /* ~=, reduce: TableConstructor */
			reduce(125), /* |, reduce: TableConstructor */
			reduce(125), /* ~, reduce: TableConstructor */
			reduce(125), /* &, reduce: TableConstructor */
			reduce(125), /* .., reduce: TableConstructor */
			reduce(125), /* <<, reduce: TableConstructor */
			reduce(125), /* >>, reduce: TableConstructor */
			reduce(125), /* +, reduce: TableConstructor */
			reduce(125), /* -, reduce: TableConstructor */
			reduce(125), /* *, reduce: TableConstructor */
			reduce(125), /* /, reduce: TableConstructor */
			reduce(125), /* %, reduce: TableConstructor */
			reduce(125), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(125), /* ^, reduce: TableConstructor */
			reduce(125), /* [, reduce: TableConstructor */
			nil,         /* ] */
			reduce(125), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(125), /* string, reduce: TableConstructor */
			reduce(125), /* {, reduce: TableConstructor */
			nil,         /* } */
			reduce(125), /* ident, reduce: TableConstructor */
		},
	},
	actionRow{ // S2193
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			nil,         /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			shift(238),  /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			shift(48),   /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			shift(52),   /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			shift(56),   /* not */
			shift(57),   /* # */
			nil,         /* ^ */
			shift(254),  /* [ */
			nil,         /* ] */
			shift(255),  /* ( */
			nil,         /* ) */
			shift(256),  /* nil */
			shift(257),  /* true */
			shift(258),  /* false */
			shift(259),  /* ... */
			shift(260),  /* numdec */
			shift(261),  /* numhex */
			shift(262),  /* string */
			shift(265),  /* { */
			shift(2203), /* } */
			shift(268),  /* ident */
		},
	},
	actionRow{ // S2194
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(126), /* return, reduce: TableConstructor */
			reduce(126), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			reduce(126), /* break, reduce: TableConstructor */
			reduce(126), /* goto, reduce: TableConstructor */
			reduce(126), /* do, reduce: TableConstructor */
			reduce(126), /* end, reduce: TableConstructor */
			reduce(126), /* while, reduce: TableConstructor */
			reduce(126), /* repeat, reduce: TableConstructor */
			nil,         /* until */
			nil,         /* then */
			reduce(126), /* elseif, reduce: TableConstructor */
			reduce(126), /* else, reduce: TableConstructor */
			reduce(126), /* if, reduce: TableConstructor */
			nil,         /* , */
			reduce(126), /* for, reduce: TableConstructor */
			nil,         /* in */
			reduce(126), /* function, reduce: TableConstructor */
			reduce(126), /* local, reduce: TableConstructor */
			reduce(126), /* ::, reduce: TableConstructor */
			nil,         /* . */
			nil,         /* : */
			reduce(126), /* or, reduce: TableConstructor */
			reduce(126), /* and, reduce: TableConstructor */
			reduce(126), /* <, reduce: TableConstructor */
			reduce(126), /* <=, reduce: TableConstructor */
			reduce(126), /* >, reduce: TableConstructor */
			reduce(126), /* >=, reduce: TableConstructor */
			reduce(126), /* ==, reduce: TableConstructor */
			reduce(126), /* ~=, reduce: TableConstructor */
			reduce(126), /* |, reduce: TableConstructor */
			reduce(126), /* ~, reduce: TableConstructor */
			reduce(126), /* &, reduce: TableConstructor */
			reduce(126), /* .., reduce: TableConstructor */
			reduce(126), /* <<, reduce: TableConstructor */
			reduce(126), /* >>, reduce: TableConstructor */
			reduce(126), /* +, reduce: TableConstructor */
			reduce(126), /* -, reduce: TableConstructor */
			reduce(126), /* *, reduce: TableConstructor */
			reduce(126), /* /, reduce: TableConstructor */
			reduce(126), /* %, reduce: TableConstructor */
			reduce(126), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(126), /* ^, reduce: TableConstructor */
			nil,         /* [ */
			nil,         /* ] */
			reduce(126), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(126), /* ident, reduce: TableConstructor */
		},
	},
	actionRow{ // S2195
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(32), /* return, reduce: Else */
			reduce(32), /* ;, reduce: Else */
			nil,        /* empty */
			nil,        /* = */
			reduce(32), /* break, reduce: Else */
			reduce(32), /* goto, reduce: Else */
			reduce(32), /* do, reduce: Else */
			reduce(32), /* end, reduce: Else */
			reduce(32), /* while, reduce: Else */
			reduce(32), /* repeat, reduce: Else */
			nil,        /* until */
			nil,        /* then */
			reduce(32), /* elseif, reduce: Else */
			reduce(32), /* else, reduce: Else */
			reduce(32), /* if, reduce: Else */
			nil,        /* , */
			reduce(32), /* for, reduce: Else */
			nil,        /* in */
			reduce(32), /* function, reduce: Else */
			reduce(32), /* local, reduce: Else */
			reduce(32), /* ::, reduce: Else */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(32), /* (, reduce: Else */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(32), /* ident, reduce: Else */
		},
	},
	actionRow{ // S2196
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			reduce(6), /* return, reduce: StatList */
			reduce(6), /* ;, reduce: StatList */
			nil,       /* empty */
			nil,       /* = */
			reduce(6), /* break, reduce: StatList */
			reduce(6), /* goto, reduce: StatList */
			reduce(6), /* do, reduce: StatList */
			reduce(6), /* end, reduce: StatList */
			reduce(6), /* while, reduce: StatList */
			reduce(6), /* repeat, reduce: StatList */
			nil,       /* until */
			nil,       /* then */
			nil,       /* elseif */
			nil,       /* else */
			reduce(6), /* if, reduce: StatList */
			nil,       /* , */
			reduce(6), /* for, reduce: StatList */
			nil,       /* in */
			reduce(6), /* function, reduce: StatList */
			reduce(6), /* local, reduce: StatList */
			reduce(6), /* ::, reduce: StatList */
			nil,       /* . */
			nil,       /* : */
			nil,       /* or */
			nil,       /* and */
			nil,       /* < */
			nil,       /* <= */
			nil,       /* > */
			nil,       /* >= */
			nil,       /* == */
			nil,       /* ~= */
			nil,       /* | */
			nil,       /* ~ */
			nil,       /* & */
			nil,       /* .. */
			nil,       /* << */
			nil,       /* >> */
			nil,       /* + */
			nil,       /* - */
			nil,       /* * */
			nil,       /* / */
			nil,       /* % */
			nil,       /* // */
			nil,       /* not */
			nil,       /* # */
			nil,       /* ^ */
			nil,       /* [ */
			nil,       /* ] */
			reduce(6), /* (, reduce: StatList */
			nil,       /* ) */
			nil,       /* nil */
			nil,       /* true */
			nil,       /* false */
			nil,       /* ... */
			nil,       /* numdec */
			nil,       /* numhex */
			nil,       /* string */
			nil,       /* { */
			nil,       /* } */
			reduce(6), /* ident, reduce: StatList */
		},
	},
	actionRow{ // S2197
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(33), /* return, reduce: Else */
			reduce(33), /* ;, reduce: Else */
			nil,        /* empty */
			nil,        /* = */
			reduce(33), /* break, reduce: Else */
			reduce(33), /* goto, reduce: Else */
			reduce(33), /* do, reduce: Else */
			reduce(33), /* end, reduce: Else */
			reduce(33), /* while, reduce: Else */
			reduce(33), /* repeat, reduce: Else */
			nil,        /* until */
			nil,        /* then */
			reduce(33), /* elseif, reduce: Else */
			reduce(33), /* else, reduce: Else */
			reduce(33), /* if, reduce: Else */
			nil,        /* , */
			reduce(33), /* for, reduce: Else */
			nil,        /* in */
			reduce(33), /* function, reduce: Else */
			reduce(33), /* local, reduce: Else */
			reduce(33), /* ::, reduce: Else */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(33), /* (, reduce: Else */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(33), /* ident, reduce: Else */
		},
	},
	actionRow{ // S2198
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(38), /* return, reduce: ForStat */
			reduce(38), /* ;, reduce: ForStat */
			nil,        /* empty */
			nil,        /* = */
			reduce(38), /* break, reduce: ForStat */
			reduce(38), /* goto, reduce: ForStat */
			reduce(38), /* do, reduce: ForStat */
			reduce(38), /* end, reduce: ForStat */
			reduce(38), /* while, reduce: ForStat */
			reduce(38), /* repeat, reduce: ForStat */
			nil,        /* until */
			nil,        /* then */
			reduce(38), /* elseif, reduce: ForStat */
			reduce(38), /* else, reduce: ForStat */
			reduce(38), /* if, reduce: ForStat */
			nil,        /* , */
			reduce(38), /* for, reduce: ForStat */
			nil,        /* in */
			reduce(38), /* function, reduce: ForStat */
			reduce(38), /* local, reduce: ForStat */
			reduce(38), /* ::, reduce: ForStat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(38), /* (, reduce: ForStat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(38), /* ident, reduce: ForStat */
		},
	},
	actionRow{ // S2199
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(39), /* return, reduce: ForInStat */
			reduce(39), /* ;, reduce: ForInStat */
			nil,        /* empty */
			nil,        /* = */
			reduce(39), /* break, reduce: ForInStat */
			reduce(39), /* goto, reduce: ForInStat */
			reduce(39), /* do, reduce: ForInStat */
			reduce(39), /* end, reduce: ForInStat */
			reduce(39), /* while, reduce: ForInStat */
			reduce(39), /* repeat, reduce: ForInStat */
			nil,        /* until */
			nil,        /* then */
			reduce(39), /* elseif, reduce: ForInStat */
			reduce(39), /* else, reduce: ForInStat */
			reduce(39), /* if, reduce: ForInStat */
			nil,        /* , */
			reduce(39), /* for, reduce: ForInStat */
			nil,        /* in */
			reduce(39), /* function, reduce: ForInStat */
			reduce(39), /* local, reduce: ForInStat */
			reduce(39), /* ::, reduce: ForInStat */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(39), /* (, reduce: ForInStat */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(39), /* ident, reduce: ForInStat */
		},
	},
	actionRow{ // S2200
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(124), /* return, reduce: FuncBody */
			reduce(124), /* ;, reduce: FuncBody */
			nil,         /* empty */
			nil,         /* = */
			reduce(124), /* break, reduce: FuncBody */
			reduce(124), /* goto, reduce: FuncBody */
			reduce(124), /* do, reduce: FuncBody */
			reduce(124), /* end, reduce: FuncBody */
			reduce(124), /* while, reduce: FuncBody */
			reduce(124), /* repeat, reduce: FuncBody */
			nil,         /* until */
			nil,         /* then */
			reduce(124), /* elseif, reduce: FuncBody */
			reduce(124), /* else, reduce: FuncBody */
			reduce(124), /* if, reduce: FuncBody */
			nil,         /* , */
			reduce(124), /* for, reduce: FuncBody */
			nil,         /* in */
			reduce(124), /* function, reduce: FuncBody */
			reduce(124), /* local, reduce: FuncBody */
			reduce(124), /* ::, reduce: FuncBody */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			reduce(124), /* (, reduce: FuncBody */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(124), /* ident, reduce: FuncBody */
		},
	},
	actionRow{ // S2201
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(124), /* return, reduce: FuncBody */
			reduce(124), /* ;, reduce: FuncBody */
			nil,         /* empty */
			nil,         /* = */
			reduce(124), /* break, reduce: FuncBody */
			reduce(124), /* goto, reduce: FuncBody */
			reduce(124), /* do, reduce: FuncBody */
			reduce(124), /* end, reduce: FuncBody */
			reduce(124), /* while, reduce: FuncBody */
			reduce(124), /* repeat, reduce: FuncBody */
			nil,         /* until */
			nil,         /* then */
			reduce(124), /* elseif, reduce: FuncBody */
			reduce(124), /* else, reduce: FuncBody */
			reduce(124), /* if, reduce: FuncBody */
			reduce(124), /* ,, reduce: FuncBody */
			reduce(124), /* for, reduce: FuncBody */
			nil,         /* in */
			reduce(124), /* function, reduce: FuncBody */
			reduce(124), /* local, reduce: FuncBody */
			reduce(124), /* ::, reduce: FuncBody */
			nil,         /* . */
			nil,         /* : */
			reduce(124), /* or, reduce: FuncBody */
			reduce(124), /* and, reduce: FuncBody */
			reduce(124), /* <, reduce: FuncBody */
			reduce(124), /* <=, reduce: FuncBody */
			reduce(124), /* >, reduce: FuncBody */
			reduce(124), /* >=, reduce: FuncBody */
			reduce(124), /* ==, reduce: FuncBody */
			reduce(124), /* ~=, reduce: FuncBody */
			reduce(124), /* |, reduce: FuncBody */
			reduce(124), /* ~, reduce: FuncBody */
			reduce(124), /* &, reduce: FuncBody */
			reduce(124), /* .., reduce: FuncBody */
			reduce(124), /* <<, reduce: FuncBody */
			reduce(124), /* >>, reduce: FuncBody */
			reduce(124), /* +, reduce: FuncBody */
			reduce(124), /* -, reduce: FuncBody */
			reduce(124), /* *, reduce: FuncBody */
			reduce(124), /* /, reduce: FuncBody */
			reduce(124), /* %, reduce: FuncBody */
			reduce(124), /* //, reduce: FuncBody */
			nil,         /* not */
			nil,         /* # */
			reduce(124), /* ^, reduce: FuncBody */
			nil,         /* [ */
			nil,         /* ] */
			reduce(124), /* (, reduce: FuncBody */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(124), /* ident, reduce: FuncBody */
		},
	},
	actionRow{ // S2202
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(2205), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S2203
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(126), /* return, reduce: TableConstructor */
			reduce(126), /* ;, reduce: TableConstructor */
			nil,         /* empty */
			nil,         /* = */
			reduce(126), /* break, reduce: TableConstructor */
			reduce(126), /* goto, reduce: TableConstructor */
			reduce(126), /* do, reduce: TableConstructor */
			reduce(126), /* end, reduce: TableConstructor */
			reduce(126), /* while, reduce: TableConstructor */
			reduce(126), /* repeat, reduce: TableConstructor */
			nil,         /* until */
			nil,         /* then */
			reduce(126), /* elseif, reduce: TableConstructor */
			reduce(126), /* else, reduce: TableConstructor */
			reduce(126), /* if, reduce: TableConstructor */
			nil,         /* , */
			reduce(126), /* for, reduce: TableConstructor */
			nil,         /* in */
			reduce(126), /* function, reduce: TableConstructor */
			reduce(126), /* local, reduce: TableConstructor */
			reduce(126), /* ::, reduce: TableConstructor */
			reduce(126), /* ., reduce: TableConstructor */
			reduce(126), /* :, reduce: TableConstructor */
			reduce(126), /* or, reduce: TableConstructor */
			reduce(126), /* and, reduce: TableConstructor */
			reduce(126), /* <, reduce: TableConstructor */
			reduce(126), /* <=, reduce: TableConstructor */
			reduce(126), /* >, reduce: TableConstructor */
			reduce(126), /* >=, reduce: TableConstructor */
			reduce(126), /* ==, reduce: TableConstructor */
			reduce(126), /* ~=, reduce: TableConstructor */
			reduce(126), /* |, reduce: TableConstructor */
			reduce(126), /* ~, reduce: TableConstructor */
			reduce(126), /* &, reduce: TableConstructor */
			reduce(126), /* .., reduce: TableConstructor */
			reduce(126), /* <<, reduce: TableConstructor */
			reduce(126), /* >>, reduce: TableConstructor */
			reduce(126), /* +, reduce: TableConstructor */
			reduce(126), /* -, reduce: TableConstructor */
			reduce(126), /* *, reduce: TableConstructor */
			reduce(126), /* /, reduce: TableConstructor */
			reduce(126), /* %, reduce: TableConstructor */
			reduce(126), /* //, reduce: TableConstructor */
			nil,         /* not */
			nil,         /* # */
			reduce(126), /* ^, reduce: TableConstructor */
			reduce(126), /* [, reduce: TableConstructor */
			nil,         /* ] */
			reduce(126), /* (, reduce: TableConstructor */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			reduce(126), /* string, reduce: TableConstructor */
			reduce(126), /* {, reduce: TableConstructor */
			nil,         /* } */
			reduce(126), /* ident, reduce: TableConstructor */
		},
	},
	actionRow{ // S2204
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			nil,         /* return */
			nil,         /* ; */
			nil,         /* empty */
			nil,         /* = */
			nil,         /* break */
			nil,         /* goto */
			nil,         /* do */
			shift(2206), /* end */
			nil,         /* while */
			nil,         /* repeat */
			nil,         /* until */
			nil,         /* then */
			nil,         /* elseif */
			nil,         /* else */
			nil,         /* if */
			nil,         /* , */
			nil,         /* for */
			nil,         /* in */
			nil,         /* function */
			nil,         /* local */
			nil,         /* :: */
			nil,         /* . */
			nil,         /* : */
			nil,         /* or */
			nil,         /* and */
			nil,         /* < */
			nil,         /* <= */
			nil,         /* > */
			nil,         /* >= */
			nil,         /* == */
			nil,         /* ~= */
			nil,         /* | */
			nil,         /* ~ */
			nil,         /* & */
			nil,         /* .. */
			nil,         /* << */
			nil,         /* >> */
			nil,         /* + */
			nil,         /* - */
			nil,         /* * */
			nil,         /* / */
			nil,         /* % */
			nil,         /* // */
			nil,         /* not */
			nil,         /* # */
			nil,         /* ^ */
			nil,         /* [ */
			nil,         /* ] */
			nil,         /* ( */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			nil,         /* ident */
		},
	},
	actionRow{ // S2205
		canRecover: false,
		actions: [numSymbols]action{
			nil,         /* INVALID */
			nil,         /* $ */
			reduce(124), /* return, reduce: FuncBody */
			reduce(124), /* ;, reduce: FuncBody */
			nil,         /* empty */
			nil,         /* = */
			reduce(124), /* break, reduce: FuncBody */
			reduce(124), /* goto, reduce: FuncBody */
			reduce(124), /* do, reduce: FuncBody */
			reduce(124), /* end, reduce: FuncBody */
			reduce(124), /* while, reduce: FuncBody */
			reduce(124), /* repeat, reduce: FuncBody */
			nil,         /* until */
			nil,         /* then */
			reduce(124), /* elseif, reduce: FuncBody */
			reduce(124), /* else, reduce: FuncBody */
			reduce(124), /* if, reduce: FuncBody */
			nil,         /* , */
			reduce(124), /* for, reduce: FuncBody */
			nil,         /* in */
			reduce(124), /* function, reduce: FuncBody */
			reduce(124), /* local, reduce: FuncBody */
			reduce(124), /* ::, reduce: FuncBody */
			nil,         /* . */
			nil,         /* : */
			reduce(124), /* or, reduce: FuncBody */
			reduce(124), /* and, reduce: FuncBody */
			reduce(124), /* <, reduce: FuncBody */
			reduce(124), /* <=, reduce: FuncBody */
			reduce(124), /* >, reduce: FuncBody */
			reduce(124), /* >=, reduce: FuncBody */
			reduce(124), /* ==, reduce: FuncBody */
			reduce(124), /* ~=, reduce: FuncBody */
			reduce(124), /* |, reduce: FuncBody */
			reduce(124), /* ~, reduce: FuncBody */
			reduce(124), /* &, reduce: FuncBody */
			reduce(124), /* .., reduce: FuncBody */
			reduce(124), /* <<, reduce: FuncBody */
			reduce(124), /* >>, reduce: FuncBody */
			reduce(124), /* +, reduce: FuncBody */
			reduce(124), /* -, reduce: FuncBody */
			reduce(124), /* *, reduce: FuncBody */
			reduce(124), /* /, reduce: FuncBody */
			reduce(124), /* %, reduce: FuncBody */
			reduce(124), /* //, reduce: FuncBody */
			nil,         /* not */
			nil,         /* # */
			reduce(124), /* ^, reduce: FuncBody */
			nil,         /* [ */
			nil,         /* ] */
			reduce(124), /* (, reduce: FuncBody */
			nil,         /* ) */
			nil,         /* nil */
			nil,         /* true */
			nil,         /* false */
			nil,         /* ... */
			nil,         /* numdec */
			nil,         /* numhex */
			nil,         /* string */
			nil,         /* { */
			nil,         /* } */
			reduce(124), /* ident, reduce: FuncBody */
		},
	},
	actionRow{ // S2206
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			reduce(31), /* return, reduce: Else */
			reduce(31), /* ;, reduce: Else */
			nil,        /* empty */
			nil,        /* = */
			reduce(31), /* break, reduce: Else */
			reduce(31), /* goto, reduce: Else */
			reduce(31), /* do, reduce: Else */
			reduce(31), /* end, reduce: Else */
			reduce(31), /* while, reduce: Else */
			reduce(31), /* repeat, reduce: Else */
			nil,        /* until */
			nil,        /* then */
			reduce(31), /* elseif, reduce: Else */
			reduce(31), /* else, reduce: Else */
			reduce(31), /* if, reduce: Else */
			nil,        /* , */
			reduce(31), /* for, reduce: Else */
			nil,        /* in */
			reduce(31), /* function, reduce: Else */
			reduce(31), /* local, reduce: Else */
			reduce(31), /* ::, reduce: Else */
			nil,        /* . */
			nil,        /* : */
			nil,        /* or */
			nil,        /* and */
			nil,        /* < */
			nil,        /* <= */
			nil,        /* > */
			nil,        /* >= */
			nil,        /* == */
			nil,        /* ~= */
			nil,        /* | */
			nil,        /* ~ */
			nil,        /* & */
			nil,        /* .. */
			nil,        /* << */
			nil,        /* >> */
			nil,        /* + */
			nil,        /* - */
			nil,        /* * */
			nil,        /* / */
			nil,        /* % */
			nil,        /* // */
			nil,        /* not */
			nil,        /* # */
			nil,        /* ^ */
			nil,        /* [ */
			nil,        /* ] */
			reduce(31), /* (, reduce: Else */
			nil,        /* ) */
			nil,        /* nil */
			nil,        /* true */
			nil,        /* false */
			nil,        /* ... */
			nil,        /* numdec */
			nil,        /* numhex */
			nil,        /* string */
			nil,        /* { */
			nil,        /* } */
			reduce(31), /* ident, reduce: Else */
		},
	},
}
